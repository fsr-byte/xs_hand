
XS_HAND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baac  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800bca0  0800bca0  0001bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c238  0800c238  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  0800c238  0800c238  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c238  0800c238  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c238  0800c238  0001c238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800c240  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ccc  20000270  0800c4b0  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f3c  0800c4b0  00021f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdad  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430c  00000000  00000000  0003c046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00040358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00041bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7a6  00000000  00000000  00043298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8fc  00000000  00000000  00060a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8349  00000000  00000000  0007f33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007664  00000000  00000000  001276d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0012ed38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000270 	.word	0x20000270
 800020c:	00000000 	.word	0x00000000
 8000210:	0800bc84 	.word	0x0800bc84

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000274 	.word	0x20000274
 800022c:	0800bc84 	.word	0x0800bc84

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <sent_mpu6050>:
*	使用匿名上位机发送
 *
 */
uint8_t BUFF[100];
void sent_mpu6050(const MPU6050_t Send_Data)
{
 8001028:	b084      	sub	sp, #16
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	f107 0c18 	add.w	ip, r7, #24
 8001034:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
	uint8_t sumcheck = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	72fb      	strb	r3, [r7, #11]
	uint8_t addcheck = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	72bb      	strb	r3, [r7, #10]
	uint8_t _cnt=0;
 8001040:	2300      	movs	r3, #0
 8001042:	727b      	strb	r3, [r7, #9]
	int32_t temp_data;
	BUFF[_cnt++]=0xAA;//帧头
 8001044:	7a7b      	ldrb	r3, [r7, #9]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	727a      	strb	r2, [r7, #9]
 800104a:	461a      	mov	r2, r3
 800104c:	4bae      	ldr	r3, [pc, #696]	; (8001308 <sent_mpu6050+0x2e0>)
 800104e:	21aa      	movs	r1, #170	; 0xaa
 8001050:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=0xFF;//目标地址
 8001052:	7a7b      	ldrb	r3, [r7, #9]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	727a      	strb	r2, [r7, #9]
 8001058:	461a      	mov	r2, r3
 800105a:	4bab      	ldr	r3, [pc, #684]	; (8001308 <sent_mpu6050+0x2e0>)
 800105c:	21ff      	movs	r1, #255	; 0xff
 800105e:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=0XF1;//功能码
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	727a      	strb	r2, [r7, #9]
 8001066:	461a      	mov	r2, r3
 8001068:	4ba7      	ldr	r3, [pc, #668]	; (8001308 <sent_mpu6050+0x2e0>)
 800106a:	21f1      	movs	r1, #241	; 0xf1
 800106c:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=0x00;//数据长度,先保留，等长度确定
 800106e:	7a7b      	ldrb	r3, [r7, #9]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	727a      	strb	r2, [r7, #9]
 8001074:	461a      	mov	r2, r3
 8001076:	4ba4      	ldr	r3, [pc, #656]	; (8001308 <sent_mpu6050+0x2e0>)
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Gx*1000;
 800107c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	4ba1      	ldr	r3, [pc, #644]	; (800130c <sent_mpu6050+0x2e4>)
 8001086:	f7ff fa97 	bl	80005b8 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fd41 	bl	8000b18 <__aeabi_d2iz>
 8001096:	4603      	mov	r3, r0
 8001098:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);							//数据内容,小段模式，低位在前
 800109a:	1d3a      	adds	r2, r7, #4
 800109c:	7a7b      	ldrb	r3, [r7, #9]
 800109e:	1c59      	adds	r1, r3, #1
 80010a0:	7279      	strb	r1, [r7, #9]
 80010a2:	4619      	mov	r1, r3
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4b98      	ldr	r3, [pc, #608]	; (8001308 <sent_mpu6050+0x2e0>)
 80010a8:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);							//需要将字节进行拆分，调用上面的宏定义即可。
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	3301      	adds	r3, #1
 80010ae:	7a7a      	ldrb	r2, [r7, #9]
 80010b0:	1c51      	adds	r1, r2, #1
 80010b2:	7279      	strb	r1, [r7, #9]
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <sent_mpu6050+0x2e0>)
 80010b8:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Gy*1000;
 80010ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b92      	ldr	r3, [pc, #584]	; (800130c <sent_mpu6050+0x2e4>)
 80010c4:	f7ff fa78 	bl	80005b8 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd22 	bl	8000b18 <__aeabi_d2iz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 80010d8:	1d3a      	adds	r2, r7, #4
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	1c59      	adds	r1, r3, #1
 80010de:	7279      	strb	r1, [r7, #9]
 80010e0:	4619      	mov	r1, r3
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4b88      	ldr	r3, [pc, #544]	; (8001308 <sent_mpu6050+0x2e0>)
 80010e6:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	3301      	adds	r3, #1
 80010ec:	7a7a      	ldrb	r2, [r7, #9]
 80010ee:	1c51      	adds	r1, r2, #1
 80010f0:	7279      	strb	r1, [r7, #9]
 80010f2:	7819      	ldrb	r1, [r3, #0]
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <sent_mpu6050+0x2e0>)
 80010f6:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Gz*1000;
 80010f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b82      	ldr	r3, [pc, #520]	; (800130c <sent_mpu6050+0x2e4>)
 8001102:	f7ff fa59 	bl	80005b8 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd03 	bl	8000b18 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 8001116:	1d3a      	adds	r2, r7, #4
 8001118:	7a7b      	ldrb	r3, [r7, #9]
 800111a:	1c59      	adds	r1, r3, #1
 800111c:	7279      	strb	r1, [r7, #9]
 800111e:	4619      	mov	r1, r3
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4b79      	ldr	r3, [pc, #484]	; (8001308 <sent_mpu6050+0x2e0>)
 8001124:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	3301      	adds	r3, #1
 800112a:	7a7a      	ldrb	r2, [r7, #9]
 800112c:	1c51      	adds	r1, r2, #1
 800112e:	7279      	strb	r1, [r7, #9]
 8001130:	7819      	ldrb	r1, [r3, #0]
 8001132:	4b75      	ldr	r3, [pc, #468]	; (8001308 <sent_mpu6050+0x2e0>)
 8001134:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Ax*10000;
 8001136:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800113a:	a371      	add	r3, pc, #452	; (adr r3, 8001300 <sent_mpu6050+0x2d8>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f7ff fa3a 	bl	80005b8 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fce4 	bl	8000b18 <__aeabi_d2iz>
 8001150:	4603      	mov	r3, r0
 8001152:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 8001154:	1d3a      	adds	r2, r7, #4
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	7279      	strb	r1, [r7, #9]
 800115c:	4619      	mov	r1, r3
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	4b69      	ldr	r3, [pc, #420]	; (8001308 <sent_mpu6050+0x2e0>)
 8001162:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	3301      	adds	r3, #1
 8001168:	7a7a      	ldrb	r2, [r7, #9]
 800116a:	1c51      	adds	r1, r2, #1
 800116c:	7279      	strb	r1, [r7, #9]
 800116e:	7819      	ldrb	r1, [r3, #0]
 8001170:	4b65      	ldr	r3, [pc, #404]	; (8001308 <sent_mpu6050+0x2e0>)
 8001172:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE2(temp_data);
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	3302      	adds	r3, #2
 8001178:	7a7a      	ldrb	r2, [r7, #9]
 800117a:	1c51      	adds	r1, r2, #1
 800117c:	7279      	strb	r1, [r7, #9]
 800117e:	7819      	ldrb	r1, [r3, #0]
 8001180:	4b61      	ldr	r3, [pc, #388]	; (8001308 <sent_mpu6050+0x2e0>)
 8001182:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE3(temp_data);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	3303      	adds	r3, #3
 8001188:	7a7a      	ldrb	r2, [r7, #9]
 800118a:	1c51      	adds	r1, r2, #1
 800118c:	7279      	strb	r1, [r7, #9]
 800118e:	7819      	ldrb	r1, [r3, #0]
 8001190:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <sent_mpu6050+0x2e0>)
 8001192:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Ay*10000;
 8001194:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001198:	a359      	add	r3, pc, #356	; (adr r3, 8001300 <sent_mpu6050+0x2d8>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fa0b 	bl	80005b8 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fcb5 	bl	8000b18 <__aeabi_d2iz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	7a7b      	ldrb	r3, [r7, #9]
 80011b6:	1c59      	adds	r1, r3, #1
 80011b8:	7279      	strb	r1, [r7, #9]
 80011ba:	4619      	mov	r1, r3
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	4b52      	ldr	r3, [pc, #328]	; (8001308 <sent_mpu6050+0x2e0>)
 80011c0:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	3301      	adds	r3, #1
 80011c6:	7a7a      	ldrb	r2, [r7, #9]
 80011c8:	1c51      	adds	r1, r2, #1
 80011ca:	7279      	strb	r1, [r7, #9]
 80011cc:	7819      	ldrb	r1, [r3, #0]
 80011ce:	4b4e      	ldr	r3, [pc, #312]	; (8001308 <sent_mpu6050+0x2e0>)
 80011d0:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE2(temp_data);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	3302      	adds	r3, #2
 80011d6:	7a7a      	ldrb	r2, [r7, #9]
 80011d8:	1c51      	adds	r1, r2, #1
 80011da:	7279      	strb	r1, [r7, #9]
 80011dc:	7819      	ldrb	r1, [r3, #0]
 80011de:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <sent_mpu6050+0x2e0>)
 80011e0:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE3(temp_data);
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	3303      	adds	r3, #3
 80011e6:	7a7a      	ldrb	r2, [r7, #9]
 80011e8:	1c51      	adds	r1, r2, #1
 80011ea:	7279      	strb	r1, [r7, #9]
 80011ec:	7819      	ldrb	r1, [r3, #0]
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <sent_mpu6050+0x2e0>)
 80011f0:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Az*10000;
 80011f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011f6:	a342      	add	r3, pc, #264	; (adr r3, 8001300 <sent_mpu6050+0x2d8>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f9dc 	bl	80005b8 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fc86 	bl	8000b18 <__aeabi_d2iz>
 800120c:	4603      	mov	r3, r0
 800120e:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 8001210:	1d3a      	adds	r2, r7, #4
 8001212:	7a7b      	ldrb	r3, [r7, #9]
 8001214:	1c59      	adds	r1, r3, #1
 8001216:	7279      	strb	r1, [r7, #9]
 8001218:	4619      	mov	r1, r3
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <sent_mpu6050+0x2e0>)
 800121e:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	3301      	adds	r3, #1
 8001224:	7a7a      	ldrb	r2, [r7, #9]
 8001226:	1c51      	adds	r1, r2, #1
 8001228:	7279      	strb	r1, [r7, #9]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <sent_mpu6050+0x2e0>)
 800122e:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE2(temp_data);
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	3302      	adds	r3, #2
 8001234:	7a7a      	ldrb	r2, [r7, #9]
 8001236:	1c51      	adds	r1, r2, #1
 8001238:	7279      	strb	r1, [r7, #9]
 800123a:	7819      	ldrb	r1, [r3, #0]
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <sent_mpu6050+0x2e0>)
 800123e:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE3(temp_data);
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	3303      	adds	r3, #3
 8001244:	7a7a      	ldrb	r2, [r7, #9]
 8001246:	1c51      	adds	r1, r2, #1
 8001248:	7279      	strb	r1, [r7, #9]
 800124a:	7819      	ldrb	r1, [r3, #0]
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <sent_mpu6050+0x2e0>)
 800124e:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.KalmanAngleX*10;
 8001250:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <sent_mpu6050+0x2e8>)
 800125a:	f7ff f9ad 	bl	80005b8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fc57 	bl	8000b18 <__aeabi_d2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 800126e:	1d3a      	adds	r2, r7, #4
 8001270:	7a7b      	ldrb	r3, [r7, #9]
 8001272:	1c59      	adds	r1, r3, #1
 8001274:	7279      	strb	r1, [r7, #9]
 8001276:	4619      	mov	r1, r3
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <sent_mpu6050+0x2e0>)
 800127c:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	3301      	adds	r3, #1
 8001282:	7a7a      	ldrb	r2, [r7, #9]
 8001284:	1c51      	adds	r1, r2, #1
 8001286:	7279      	strb	r1, [r7, #9]
 8001288:	7819      	ldrb	r1, [r3, #0]
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <sent_mpu6050+0x2e0>)
 800128c:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.KalmanAngleY*10;
 800128e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <sent_mpu6050+0x2e8>)
 8001298:	f7ff f98e 	bl	80005b8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fc38 	bl	8000b18 <__aeabi_d2iz>
 80012a8:	4603      	mov	r3, r0
 80012aa:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 80012ac:	1d3a      	adds	r2, r7, #4
 80012ae:	7a7b      	ldrb	r3, [r7, #9]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	7279      	strb	r1, [r7, #9]
 80012b4:	4619      	mov	r1, r3
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <sent_mpu6050+0x2e0>)
 80012ba:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	3301      	adds	r3, #1
 80012c0:	7a7a      	ldrb	r2, [r7, #9]
 80012c2:	1c51      	adds	r1, r2, #1
 80012c4:	7279      	strb	r1, [r7, #9]
 80012c6:	7819      	ldrb	r1, [r3, #0]
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <sent_mpu6050+0x2e0>)
 80012ca:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE0(Send_Data.Gyro_Z_RAW);
 80012cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80012d0:	7a7b      	ldrb	r3, [r7, #9]
 80012d2:	1c59      	adds	r1, r3, #1
 80012d4:	7279      	strb	r1, [r7, #9]
 80012d6:	4619      	mov	r1, r3
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <sent_mpu6050+0x2e0>)
 80012dc:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(Send_Data.Gyro_Z_RAW);
 80012de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012e2:	3301      	adds	r3, #1
 80012e4:	7a7a      	ldrb	r2, [r7, #9]
 80012e6:	1c51      	adds	r1, r2, #1
 80012e8:	7279      	strb	r1, [r7, #9]
 80012ea:	7819      	ldrb	r1, [r3, #0]
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <sent_mpu6050+0x2e0>)
 80012ee:	5499      	strb	r1, [r3, r2]

	BUFF[3]=_cnt-4;			//数据长度
 80012f0:	7a7b      	ldrb	r3, [r7, #9]
 80012f2:	3b04      	subs	r3, #4
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <sent_mpu6050+0x2e0>)
 80012f8:	70da      	strb	r2, [r3, #3]
	//SC和AC的校验直接抄最上面上面简介的即可
	for(i=0;i<BUFF[3]+4;i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e017      	b.n	8001330 <sent_mpu6050+0x308>
 8001300:	00000000 	.word	0x00000000
 8001304:	40c38800 	.word	0x40c38800
 8001308:	2000028c 	.word	0x2000028c
 800130c:	408f4000 	.word	0x408f4000
 8001310:	40240000 	.word	0x40240000
	{
		sumcheck+=BUFF[i];
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <sent_mpu6050+0x350>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	4413      	add	r3, r2
 8001320:	72fb      	strb	r3, [r7, #11]
		addcheck+=sumcheck;
 8001322:	7aba      	ldrb	r2, [r7, #10]
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	4413      	add	r3, r2
 8001328:	72bb      	strb	r3, [r7, #10]
	for(i=0;i<BUFF[3]+4;i++)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <sent_mpu6050+0x350>)
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	3303      	adds	r3, #3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	ddeb      	ble.n	8001314 <sent_mpu6050+0x2ec>
	}
	BUFF[_cnt++]=sumcheck;
 800133c:	7a7b      	ldrb	r3, [r7, #9]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	727a      	strb	r2, [r7, #9]
 8001342:	4619      	mov	r1, r3
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <sent_mpu6050+0x350>)
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	5453      	strb	r3, [r2, r1]
	BUFF[_cnt++]=addcheck;
 800134a:	7a7b      	ldrb	r3, [r7, #9]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	727a      	strb	r2, [r7, #9]
 8001350:	4619      	mov	r1, r3
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <sent_mpu6050+0x350>)
 8001354:	7abb      	ldrb	r3, [r7, #10]
 8001356:	5453      	strb	r3, [r2, r1]
	UART_DMA_Send(BUFF,++_cnt);
 8001358:	7a7b      	ldrb	r3, [r7, #9]
 800135a:	3301      	adds	r3, #1
 800135c:	727b      	strb	r3, [r7, #9]
 800135e:	7a7b      	ldrb	r3, [r7, #9]
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <sent_mpu6050+0x350>)
 8001364:	f000 fc3c 	bl	8001be0 <UART_DMA_Send>
//	for(i=0;i<_cnt;i++) UsartSendByte(USART1,BUFF[i]);//串口逐个发送数据
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001372:	b004      	add	sp, #16
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000028c 	.word	0x2000028c

0800137c <Sys_Init>:

uint8_t i = 0;
MPU6050_t MPU6050;

void Sys_Init()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	UART_DMA_Recive_Init();
 8001380:	f000 fbfc 	bl	8001b7c <UART_DMA_Recive_Init>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask *
	 * /
	/* Infinite loop */
	Sys_Init();
 8001390:	f7ff fff4 	bl	800137c <Sys_Init>
	while (MPU6050_Init(&hi2c2) == 1);
 8001394:	bf00      	nop
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <StartDefaultTask+0x30>)
 8001398:	f000 f865 	bl	8001466 <MPU6050_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d0f9      	beq.n	8001396 <StartDefaultTask+0xe>
	for (;;) {
		i++;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <StartDefaultTask+0x34>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <StartDefaultTask+0x34>)
 80013ac:	701a      	strb	r2, [r3, #0]
		//printf("Ax:%d,Ay:%d,Az:%d\n",MPU6050.Accel_X_RAW,MPU6050.Accel_Y_RAW,MPU6050.Accel_Z_RAW);
//		printf("Gx:%f,Gy:%f,Gz:%f\n",MPU6050.Gx,MPU6050.Gy,MPU6050.Gz);
//		sent_mpu6050(MPU6050);
		//printf("AngleX:%lf,AngleY:%lf\n",MPU6050.KalmanAngleX,MPU6050.KalmanAngleY);
		osDelay(100);
 80013ae:	2064      	movs	r0, #100	; 0x64
 80013b0:	f004 fecc 	bl	800614c <osDelay>
	for (;;) {
 80013b4:	e7f5      	b.n	80013a2 <StartDefaultTask+0x1a>
 80013b6:	bf00      	nop
 80013b8:	200003b4 	.word	0x200003b4
 80013bc:	200002f0 	.word	0x200002f0

080013c0 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
//		MPU6050_Read_All(&hi2c2, &MPU6050);
		osDelay(100);
 80013c8:	2064      	movs	r0, #100	; 0x64
 80013ca:	f004 febf 	bl	800614c <osDelay>
	for (;;) {
 80013ce:	e7fb      	b.n	80013c8 <StartTask02+0x8>

080013d0 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b095      	sub	sp, #84	; 0x54
 80013d4:	af12      	add	r7, sp, #72	; 0x48
 80013d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		MPU6050_Read_All(&hi2c2, &MPU6050);
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <StartTask03+0x30>)
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <StartTask03+0x34>)
 80013dc:	f000 f89c 	bl	8001518 <MPU6050_Read_All>
		sent_mpu6050(MPU6050);
 80013e0:	4c07      	ldr	r4, [pc, #28]	; (8001400 <StartTask03+0x30>)
 80013e2:	4668      	mov	r0, sp
 80013e4:	f104 0310 	add.w	r3, r4, #16
 80013e8:	2248      	movs	r2, #72	; 0x48
 80013ea:	4619      	mov	r1, r3
 80013ec:	f007 fd62 	bl	8008eb4 <memcpy>
 80013f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013f4:	f7ff fe18 	bl	8001028 <sent_mpu6050>
		osDelay(10);
 80013f8:	200a      	movs	r0, #10
 80013fa:	f004 fea7 	bl	800614c <osDelay>
	for (;;) {
 80013fe:	e7eb      	b.n	80013d8 <StartTask03+0x8>
 8001400:	200002f8 	.word	0x200002f8
 8001404:	200003b4 	.word	0x200003b4

08001408 <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f004 fe9b 	bl	800614c <osDelay>
	for (;;) {
 8001416:	e7fb      	b.n	8001410 <StartTask04+0x8>

08001418 <test_fun>:
 */
#include "bsp_usart.h"
#include "app_usart.h"
uint8_t send_cnt = 0;
void test_fun(uint8_t *rx_data_buf, uint8_t data_len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
	send_cnt++;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <test_fun+0x2c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <test_fun+0x2c>)
 800142e:	701a      	strb	r2, [r3, #0]
	UART_DMA_Send(rx_data_buf,data_len);
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fbd2 	bl	8001be0 <UART_DMA_Send>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000350 	.word	0x20000350

08001448 <UART_DMA_RX_Data_Analyze>:


void UART_DMA_RX_Data_Analyze(uint8_t *rx_data_buf, uint8_t data_len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
	test_fun(rx_data_buf,data_len);
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffdd 	bl	8001418 <test_fun>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b088      	sub	sp, #32
 800146a:	af04      	add	r7, sp, #16
 800146c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2301      	movs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f107 030f 	add.w	r3, r7, #15
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	2275      	movs	r2, #117	; 0x75
 8001480:	21d0      	movs	r1, #208	; 0xd0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f002 f9da 	bl	800383c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b68      	cmp	r3, #104	; 0x68
 800148c:	d13d      	bne.n	800150a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001492:	2364      	movs	r3, #100	; 0x64
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2301      	movs	r3, #1
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f107 030e 	add.w	r3, r7, #14
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	226b      	movs	r2, #107	; 0x6b
 80014a4:	21d0      	movs	r1, #208	; 0xd0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f002 f8ce 	bl	8003648 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80014ac:	2307      	movs	r3, #7
 80014ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f107 030e 	add.w	r3, r7, #14
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	2219      	movs	r2, #25
 80014c2:	21d0      	movs	r1, #208	; 0xd0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f002 f8bf 	bl	8003648 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014ce:	2364      	movs	r3, #100	; 0x64
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2301      	movs	r3, #1
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	f107 030e 	add.w	r3, r7, #14
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	221c      	movs	r2, #28
 80014e0:	21d0      	movs	r1, #208	; 0xd0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f002 f8b0 	bl	8003648 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	f107 030e 	add.w	r3, r7, #14
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2301      	movs	r3, #1
 80014fc:	221b      	movs	r2, #27
 80014fe:	21d0      	movs	r1, #208	; 0xd0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f002 f8a1 	bl	8003648 <HAL_I2C_Mem_Write>
        return 0;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <MPU6050_Init+0xa6>
    }
    return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	0000      	movs	r0, r0
	...

08001518 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800151c:	b094      	sub	sp, #80	; 0x50
 800151e:	af04      	add	r7, sp, #16
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001524:	2364      	movs	r3, #100	; 0x64
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	230e      	movs	r3, #14
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	223b      	movs	r2, #59	; 0x3b
 8001536:	21d0      	movs	r1, #208	; 0xd0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f002 f97f 	bl	800383c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800153e:	7a3b      	ldrb	r3, [r7, #8]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	7a7b      	ldrb	r3, [r7, #9]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001550:	7abb      	ldrb	r3, [r7, #10]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001582:	7c3b      	ldrb	r3, [r7, #16]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7c7b      	ldrb	r3, [r7, #17]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21a      	sxth	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001594:	7cbb      	ldrb	r3, [r7, #18]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80015a6:	7d3b      	ldrb	r3, [r7, #20]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7d7b      	ldrb	r3, [r7, #21]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff90 	bl	80004e4 <__aeabi_i2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b95      	ldr	r3, [pc, #596]	; (8001820 <MPU6050_Read_All+0x308>)
 80015ca:	f7ff f91f 	bl	800080c <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff80 	bl	80004e4 <__aeabi_i2d>
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b8d      	ldr	r3, [pc, #564]	; (8001820 <MPU6050_Read_All+0x308>)
 80015ea:	f7ff f90f 	bl	800080c <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff70 	bl	80004e4 <__aeabi_i2d>
 8001604:	a380      	add	r3, pc, #512	; (adr r3, 8001808 <MPU6050_Read_All+0x2f0>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f8ff 	bl	800080c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001618:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb5d 	bl	8000cdc <__aeabi_i2f>
 8001622:	4603      	mov	r3, r0
 8001624:	497f      	ldr	r1, [pc, #508]	; (8001824 <MPU6050_Read_All+0x30c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fc60 	bl	8000eec <__aeabi_fdiv>
 800162c:	4603      	mov	r3, r0
 800162e:	497e      	ldr	r1, [pc, #504]	; (8001828 <MPU6050_Read_All+0x310>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fa9f 	bl	8000b74 <__addsf3>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff4d 	bl	80004e4 <__aeabi_i2d>
 800164a:	a371      	add	r3, pc, #452	; (adr r3, 8001810 <MPU6050_Read_All+0x2f8>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f8dc 	bl	800080c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff3d 	bl	80004e4 <__aeabi_i2d>
 800166a:	a369      	add	r3, pc, #420	; (adr r3, 8001810 <MPU6050_Read_All+0x2f8>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7ff f8cc 	bl	800080c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff2d 	bl	80004e4 <__aeabi_i2d>
 800168a:	a361      	add	r3, pc, #388	; (adr r3, 8001810 <MPU6050_Read_All+0x2f8>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f8bc 	bl	800080c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	6839      	ldr	r1, [r7, #0]
 800169a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800169e:	f000 ff77 	bl	8002590 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	4b61      	ldr	r3, [pc, #388]	; (800182c <MPU6050_Read_All+0x314>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff0a 	bl	80004c4 <__aeabi_ui2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <MPU6050_Read_All+0x318>)
 80016b6:	f7ff f8a9 	bl	800080c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80016c2:	f000 ff65 	bl	8002590 <HAL_GetTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <MPU6050_Read_All+0x314>)
 80016ca:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	461a      	mov	r2, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	fb03 f202 	mul.w	r2, r3, r2
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fef6 	bl	80004e4 <__aeabi_i2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f00a f919 	bl	800b936 <sqrt>
 8001704:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001714:	f7ff f9b8 	bl	8000a88 <__aeabi_dcmpeq>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fedd 	bl	80004e4 <__aeabi_i2d>
 800172a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172e:	f7ff f86d 	bl	800080c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f009 ff6d 	bl	800b618 <atan>
 800173e:	a336      	add	r3, pc, #216	; (adr r3, 8001818 <MPU6050_Read_All+0x300>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff38 	bl	80005b8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001750:	e005      	b.n	800175e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	425b      	negs	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe febc 	bl	80004e4 <__aeabi_i2d>
 800176c:	4682      	mov	sl, r0
 800176e:	468b      	mov	fp, r1
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe feb4 	bl	80004e4 <__aeabi_i2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4650      	mov	r0, sl
 8001782:	4659      	mov	r1, fp
 8001784:	f00a f8d5 	bl	800b932 <atan2>
 8001788:	a323      	add	r3, pc, #140	; (adr r3, 8001818 <MPU6050_Read_All+0x300>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff13 	bl	80005b8 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <MPU6050_Read_All+0x31c>)
 80017a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a4:	f7ff f97a 	bl	8000a9c <__aeabi_dcmplt>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <MPU6050_Read_All+0x2ac>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MPU6050_Read_All+0x320>)
 80017ba:	f7ff f98d 	bl	8000ad8 <__aeabi_dcmpgt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d114      	bne.n	80017ee <MPU6050_Read_All+0x2d6>
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MPU6050_Read_All+0x320>)
 80017ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ce:	f7ff f983 	bl	8000ad8 <__aeabi_dcmpgt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d033      	beq.n	8001840 <MPU6050_Read_All+0x328>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MPU6050_Read_All+0x31c>)
 80017e4:	f7ff f95a 	bl	8000a9c <__aeabi_dcmplt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d028      	beq.n	8001840 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 80017ee:	4913      	ldr	r1, [pc, #76]	; (800183c <MPU6050_Read_All+0x324>)
 80017f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001802:	e030      	b.n	8001866 <MPU6050_Read_All+0x34e>
 8001804:	f3af 8000 	nop.w
 8001808:	00000000 	.word	0x00000000
 800180c:	40cc2900 	.word	0x40cc2900
 8001810:	00000000 	.word	0x00000000
 8001814:	40606000 	.word	0x40606000
 8001818:	1a63c1f8 	.word	0x1a63c1f8
 800181c:	404ca5dc 	.word	0x404ca5dc
 8001820:	40d00000 	.word	0x40d00000
 8001824:	43aa0000 	.word	0x43aa0000
 8001828:	42121eb8 	.word	0x42121eb8
 800182c:	20000354 	.word	0x20000354
 8001830:	408f4000 	.word	0x408f4000
 8001834:	c0568000 	.word	0xc0568000
 8001838:	40568000 	.word	0x40568000
 800183c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800184a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800184e:	e9cd 2300 	strd	r2, r3, [sp]
 8001852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <MPU6050_Read_All+0x3b0>)
 8001858:	f000 f83c 	bl	80018d4 <Kalman_getAngle>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800186c:	4690      	mov	r8, r2
 800186e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MPU6050_Read_All+0x3b4>)
 8001878:	4640      	mov	r0, r8
 800187a:	4649      	mov	r1, r9
 800187c:	f7ff f92c 	bl	8000ad8 <__aeabi_dcmpgt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800188c:	4614      	mov	r4, r2
 800188e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800189e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018a6:	e9cd 2300 	strd	r2, r3, [sp]
 80018aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <MPU6050_Read_All+0x3b8>)
 80018b0:	f000 f810 	bl	80018d4 <Kalman_getAngle>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80018be:	bf00      	nop
 80018c0:	3740      	adds	r7, #64	; 0x40
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c8:	20000048 	.word	0x20000048
 80018cc:	40568000 	.word	0x40568000
 80018d0:	20000000 	.word	0x20000000

080018d4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b092      	sub	sp, #72	; 0x48
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018ea:	f7fe fcad 	bl	8000248 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001900:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001904:	f7fe fe58 	bl	80005b8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fc9c 	bl	800024c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	68f9      	ldr	r1, [r7, #12]
 800191a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800192a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800192e:	f7fe fe43 	bl	80005b8 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001940:	f7fe fc82 	bl	8000248 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001952:	f7fe fc79 	bl	8000248 <__aeabi_dsub>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fc72 	bl	800024c <__adddf3>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001974:	f7fe fe20 	bl	80005b8 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc64 	bl	800024c <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800199a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800199e:	f7fe fe0b 	bl	80005b8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc4d 	bl	8000248 <__aeabi_dsub>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019c8:	f7fe fdf6 	bl	80005b8 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc38 	bl	8000248 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019f2:	f7fe fde1 	bl	80005b8 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f7fe fc25 	bl	800024c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a18:	f7fe fc18 	bl	800024c <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001a2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a2e:	f7fe feed 	bl	800080c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a44:	f7fe fee2 	bl	800080c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5a:	f7fe fbf5 	bl	8000248 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a74:	f7fe fda0 	bl	80005b8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f7fe fbe4 	bl	800024c <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001a94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a9c:	f7fe fd8c 	bl	80005b8 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fbd0 	bl	800024c <__adddf3>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001abc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ac6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ad0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ad8:	f7fe fd6e 	bl	80005b8 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fbb0 	bl	8000248 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001af8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001afc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b00:	f7fe fd5a 	bl	80005b8 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fb9c 	bl	8000248 <__aeabi_dsub>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001b20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b28:	f7fe fd46 	bl	80005b8 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fb88 	bl	8000248 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001b48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b50:	f7fe fd32 	bl	80005b8 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fb74 	bl	8000248 <__aeabi_dsub>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	3748      	adds	r7, #72	; 0x48
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b7c <UART_DMA_Recive_Init>:
{

}

void UART_DMA_Recive_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    //使能接收，进入中断回调函数
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_Rx_Data, UART_DMA_BUFF_SIZE);
 8001b80:	2240      	movs	r2, #64	; 0x40
 8001b82:	4903      	ldr	r1, [pc, #12]	; (8001b90 <UART_DMA_Recive_Init+0x14>)
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <UART_DMA_Recive_Init+0x18>)
 8001b86:	f003 fc21 	bl	80053cc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000035c 	.word	0x2000035c
 8001b94:	20000454 	.word	0x20000454

08001b98 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    UNUSED(Size);
    if (huart->Instance == USART1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10e      	bne.n	8001bcc <HAL_UARTEx_RxEventCallback+0x34>
    {
		UART_Rx_Len = Size;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001bb4:	701a      	strb	r2, [r3, #0]
        UART_DMA_RX_Data_Analyze(UART_Rx_Data, Size);
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <HAL_UARTEx_RxEventCallback+0x44>)
 8001bbe:	f7ff fc43 	bl	8001448 <UART_DMA_RX_Data_Analyze>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART_Rx_Data, UART_DMA_BUFF_SIZE);
 8001bc2:	2240      	movs	r2, #64	; 0x40
 8001bc4:	4905      	ldr	r1, [pc, #20]	; (8001bdc <HAL_UARTEx_RxEventCallback+0x44>)
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f003 fc00 	bl	80053cc <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	20000358 	.word	0x20000358
 8001bdc:	2000035c 	.word	0x2000035c

08001be0 <UART_DMA_Send>:

void UART_DMA_Send(uint8_t *pData, uint16_t Size)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit_DMA(&huart1, pData, Size);
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <UART_DMA_Send+0x20>)
 8001bf4:	f003 fb7e 	bl	80052f4 <HAL_UART_Transmit_DMA>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000454 	.word	0x20000454

08001c04 <_write>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明：无
  */
int _write(int file, char *data, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d00a      	beq.n	8001c2c <_write+0x28>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d007      	beq.n	8001c2c <_write+0x28>
   {
      errno = EBADF;
 8001c1c:	f006 ff4e 	bl	8008abc <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2209      	movs	r2, #9
 8001c24:	601a      	str	r2, [r3, #0]
      return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e00f      	b.n	8001c4c <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <_write+0x50>)
 8001c38:	f003 fac9 	bl	80051ce <HAL_UART_Transmit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <_write+0x46>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	e000      	b.n	8001c4c <_write+0x48>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000454 	.word	0x20000454

08001c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_DMA_Init+0x48>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <MX_DMA_Init+0x48>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6153      	str	r3, [r2, #20]
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_DMA_Init+0x48>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	200e      	movs	r0, #14
 8001c7c:	f000 fd47 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c80:	200e      	movs	r0, #14
 8001c82:	f000 fd60 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2105      	movs	r1, #5
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 fd3f 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c90:	200f      	movs	r0, #15
 8001c92:	f000 fd58 	bl	8002746 <HAL_NVIC_EnableIRQ>

}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <MX_FREERTOS_Init+0x68>)
 8001caa:	2102      	movs	r1, #2
 8001cac:	2010      	movs	r0, #16
 8001cae:	f004 fa7b 	bl	80061a8 <osMessageQueueNew>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <MX_FREERTOS_Init+0x6c>)
 8001cb6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <MX_FREERTOS_Init+0x70>)
 8001cba:	2102      	movs	r1, #2
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f004 fa73 	bl	80061a8 <osMessageQueueNew>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <MX_FREERTOS_Init+0x74>)
 8001cc6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <MX_FREERTOS_Init+0x78>)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4814      	ldr	r0, [pc, #80]	; (8001d20 <MX_FREERTOS_Init+0x7c>)
 8001cce:	f004 f993 	bl	8005ff8 <osThreadNew>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <MX_FREERTOS_Init+0x80>)
 8001cd6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <MX_FREERTOS_Init+0x84>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <MX_FREERTOS_Init+0x88>)
 8001cde:	f004 f98b 	bl	8005ff8 <osThreadNew>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <MX_FREERTOS_Init+0x8c>)
 8001ce6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <MX_FREERTOS_Init+0x90>)
 8001cea:	2100      	movs	r1, #0
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_FREERTOS_Init+0x94>)
 8001cee:	f004 f983 	bl	8005ff8 <osThreadNew>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <MX_FREERTOS_Init+0x98>)
 8001cf6:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <MX_FREERTOS_Init+0x9c>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4811      	ldr	r0, [pc, #68]	; (8001d44 <MX_FREERTOS_Init+0xa0>)
 8001cfe:	f004 f97b 	bl	8005ff8 <osThreadNew>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <MX_FREERTOS_Init+0xa4>)
 8001d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	0800bda0 	.word	0x0800bda0
 8001d10:	200003ac 	.word	0x200003ac
 8001d14:	0800bdb8 	.word	0x0800bdb8
 8001d18:	200003b0 	.word	0x200003b0
 8001d1c:	0800bd10 	.word	0x0800bd10
 8001d20:	08001389 	.word	0x08001389
 8001d24:	2000039c 	.word	0x2000039c
 8001d28:	0800bd34 	.word	0x0800bd34
 8001d2c:	080013c1 	.word	0x080013c1
 8001d30:	200003a0 	.word	0x200003a0
 8001d34:	0800bd58 	.word	0x0800bd58
 8001d38:	080013d1 	.word	0x080013d1
 8001d3c:	200003a4 	.word	0x200003a4
 8001d40:	0800bd7c 	.word	0x0800bd7c
 8001d44:	08001409 	.word	0x08001409
 8001d48:	200003a8 	.word	0x200003a8

08001d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a36      	ldr	r2, [pc, #216]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	4825      	ldr	r0, [pc, #148]	; (8001e44 <MX_GPIO_Init+0xf8>)
 8001dae:	f001 faef 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD0_GPIO_Port, AD0_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db8:	4823      	ldr	r0, [pc, #140]	; (8001e48 <MX_GPIO_Init+0xfc>)
 8001dba:	f001 fae9 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	4822      	ldr	r0, [pc, #136]	; (8001e4c <MX_GPIO_Init+0x100>)
 8001dc4:	f001 fae4 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4819      	ldr	r0, [pc, #100]	; (8001e44 <MX_GPIO_Init+0xf8>)
 8001de0:	f001 f942 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MX_GPIO_Init+0xfc>)
 8001df8:	f001 f936 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD0_Pin;
 8001dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD0_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <MX_GPIO_Init+0xfc>)
 8001e16:	f001 f927 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4806      	ldr	r0, [pc, #24]	; (8001e4c <MX_GPIO_Init+0x100>)
 8001e32:	f001 f919 	bl	8003068 <HAL_GPIO_Init>

}
 8001e36:	bf00      	nop
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40011800 	.word	0x40011800
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	40010c00 	.word	0x40010c00

08001e50 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e56:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <MX_I2C2_Init+0x54>)
 8001e58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <MX_I2C2_Init+0x58>)
 8001e5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_I2C2_Init+0x50>)
 8001e8e:	f001 fa97 	bl	80033c0 <HAL_I2C_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e98:	f000 f8b4 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200003b4 	.word	0x200003b4
 8001ea4:	40005800 	.word	0x40005800
 8001ea8:	00061a80 	.word	0x00061a80

08001eac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <HAL_I2C_MspInit+0x74>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d124      	bne.n	8001f16 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_I2C_MspInit+0x78>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_I2C_MspInit+0x78>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_I2C_MspInit+0x78>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eea:	2312      	movs	r3, #18
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <HAL_I2C_MspInit+0x7c>)
 8001efa:	f001 f8b5 	bl	8003068 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_I2C_MspInit+0x78>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_I2C_MspInit+0x78>)
 8001f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_I2C_MspInit+0x78>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40005800 	.word	0x40005800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f30:	f000 fb06 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f34:	f000 f80f 	bl	8001f56 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f38:	f7ff ff08 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f3c:	f7ff fe8c 	bl	8001c58 <MX_DMA_Init>
  MX_I2C2_Init();
 8001f40:	f7ff ff86 	bl	8001e50 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001f44:	f000 fa02 	bl	800234c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f48:	f003 fff0 	bl	8005f2c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f4c:	f7ff feaa 	bl	8001ca4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f50:	f004 f81e 	bl	8005f90 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <main+0x28>

08001f56 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b090      	sub	sp, #64	; 0x40
 8001f5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	2228      	movs	r2, #40	; 0x28
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f006 ffb3 	bl	8008ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f80:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f86:	2301      	movs	r3, #1
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9a:	f107 0318 	add.w	r3, r7, #24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 fa0e 	bl	80043c0 <HAL_RCC_OscConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001faa:	f000 f82b 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fae:	230f      	movs	r3, #15
 8001fb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fc7b 	bl	80048c4 <HAL_RCC_ClockConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001fd4:	f000 f816 	bl	8002004 <Error_Handler>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3740      	adds	r7, #64	; 0x40
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ff2:	f000 fabb 	bl	800256c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40000c00 	.word	0x40000c00

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_MspInit+0x68>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_MspInit+0x68>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6193      	str	r3, [r2, #24]
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_MspInit+0x68>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_MspInit+0x68>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_MspInit+0x68>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x68>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	210f      	movs	r1, #15
 800204a:	f06f 0001 	mvn.w	r0, #1
 800204e:	f000 fb5e 	bl	800270e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_MspInit+0x6c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_MspInit+0x6c>)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40010000 	.word	0x40010000

08002080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	; 0x38
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002096:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_InitTick+0xe8>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_InitTick+0xe8>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_InitTick+0xe8>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020ae:	f107 0210 	add.w	r2, r7, #16
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fd7d 	bl	8004bb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020c8:	f002 fd4e 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 80020cc:	6378      	str	r0, [r7, #52]	; 0x34
 80020ce:	e004      	b.n	80020da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020d0:	f002 fd4a 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 80020d4:	4603      	mov	r3, r0
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	4a23      	ldr	r2, [pc, #140]	; (800216c <HAL_InitTick+0xec>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	3b01      	subs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_InitTick+0xf0>)
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_InitTick+0xf4>)
 80020ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_InitTick+0xf0>)
 80020f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020f4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80020f6:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_InitTick+0xf0>)
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_InitTick+0xf0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_InitTick+0xf0>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_InitTick+0xf0>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800210e:	4818      	ldr	r0, [pc, #96]	; (8002170 <HAL_InitTick+0xf0>)
 8002110:	f002 fda0 	bl	8004c54 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800211a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11b      	bne.n	800215a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <HAL_InitTick+0xf0>)
 8002124:	f002 fdee 	bl	8004d04 <HAL_TIM_Base_Start_IT>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800212e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002132:	2b00      	cmp	r3, #0
 8002134:	d111      	bne.n	800215a <HAL_InitTick+0xda>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002136:	2032      	movs	r0, #50	; 0x32
 8002138:	f000 fb05 	bl	8002746 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	d808      	bhi.n	8002154 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002142:	2200      	movs	r2, #0
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	2032      	movs	r0, #50	; 0x32
 8002148:	f000 fae1 	bl	800270e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_InitTick+0xf8>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e002      	b.n	800215a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800215a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800215e:	4618      	mov	r0, r3
 8002160:	3738      	adds	r7, #56	; 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	431bde83 	.word	0x431bde83
 8002170:	20000408 	.word	0x20000408
 8002174:	40000c00 	.word	0x40000c00
 8002178:	20000094 	.word	0x20000094

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <NMI_Handler+0x4>

08002182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <MemManage_Handler+0x4>

0800218e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002192:	e7fe      	b.n	8002192 <BusFault_Handler+0x4>

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <UsageFault_Handler+0x4>

0800219a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <DMA1_Channel4_IRQHandler+0x10>)
 80021ae:	f000 fcf1 	bl	8002b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000498 	.word	0x20000498

080021bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA1_Channel5_IRQHandler+0x10>)
 80021c2:	f000 fce7 	bl	8002b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200004dc 	.word	0x200004dc

080021d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <USART1_IRQHandler+0x10>)
 80021d6:	f003 f949 	bl	800546c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000454 	.word	0x20000454

080021e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM5_IRQHandler+0x10>)
 80021ea:	f002 fdeb 	bl	8004dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000408 	.word	0x20000408

080021f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <_kill>:

int _kill(int pid, int sig)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002210:	f006 fc54 	bl	8008abc <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	2216      	movs	r2, #22
 8002218:	601a      	str	r2, [r3, #0]
  return -1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_exit>:

void _exit (int status)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800222e:	f04f 31ff 	mov.w	r1, #4294967295
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffe7 	bl	8002206 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002238:	e7fe      	b.n	8002238 <_exit+0x12>

0800223a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e00a      	b.n	8002262 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800224c:	f3af 8000 	nop.w
 8002250:	4601      	mov	r1, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	60ba      	str	r2, [r7, #8]
 8002258:	b2ca      	uxtb	r2, r1
 800225a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	dbf0      	blt.n	800224c <_read+0x12>
  }

  return len;
 800226a:	687b      	ldr	r3, [r7, #4]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229a:	605a      	str	r2, [r3, #4]
  return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <_isatty>:

int _isatty(int file)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f006 fbda 	bl	8008abc <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20010000 	.word	0x20010000
 8002334:	00000400 	.word	0x00000400
 8002338:	20000450 	.word	0x20000450
 800233c:	20001f40 	.word	0x20001f40

08002340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_USART1_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002384:	f002 fed6 	bl	8005134 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f7ff fe39 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000454 	.word	0x20000454
 800239c:	40013800 	.word	0x40013800

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_UART_MspInit+0x138>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 8086 	bne.w	80024ce <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_UART_MspInit+0x13c>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4a45      	ldr	r2, [pc, #276]	; (80024dc <HAL_UART_MspInit+0x13c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6193      	str	r3, [r2, #24]
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_UART_MspInit+0x13c>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_UART_MspInit+0x13c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <HAL_UART_MspInit+0x13c>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_UART_MspInit+0x13c>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	4619      	mov	r1, r3
 8002406:	4836      	ldr	r0, [pc, #216]	; (80024e0 <HAL_UART_MspInit+0x140>)
 8002408:	f000 fe2e 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800240c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4619      	mov	r1, r3
 8002420:	482f      	ldr	r0, [pc, #188]	; (80024e0 <HAL_UART_MspInit+0x140>)
 8002422:	f000 fe21 	bl	8003068 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_UART_MspInit+0x144>)
 8002428:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <HAL_UART_MspInit+0x148>)
 800242a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_UART_MspInit+0x144>)
 800242e:	2210      	movs	r2, #16
 8002430:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_UART_MspInit+0x144>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_UART_MspInit+0x144>)
 800243a:	2280      	movs	r2, #128	; 0x80
 800243c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_UART_MspInit+0x144>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_UART_MspInit+0x144>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_UART_MspInit+0x144>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_UART_MspInit+0x144>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002456:	4823      	ldr	r0, [pc, #140]	; (80024e4 <HAL_UART_MspInit+0x144>)
 8002458:	f000 f984 	bl	8002764 <HAL_DMA_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002462:	f7ff fdcf 	bl	8002004 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_UART_MspInit+0x144>)
 800246a:	635a      	str	r2, [r3, #52]	; 0x34
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_UART_MspInit+0x144>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_UART_MspInit+0x14c>)
 8002474:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_UART_MspInit+0x150>)
 8002476:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_UART_MspInit+0x14c>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_UART_MspInit+0x14c>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_UART_MspInit+0x14c>)
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_UART_MspInit+0x14c>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_UART_MspInit+0x14c>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_UART_MspInit+0x14c>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_UART_MspInit+0x14c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024a2:	4812      	ldr	r0, [pc, #72]	; (80024ec <HAL_UART_MspInit+0x14c>)
 80024a4:	f000 f95e 	bl	8002764 <HAL_DMA_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80024ae:	f7ff fda9 	bl	8002004 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_UART_MspInit+0x14c>)
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <HAL_UART_MspInit+0x14c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2105      	movs	r1, #5
 80024c2:	2025      	movs	r0, #37	; 0x25
 80024c4:	f000 f923 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024c8:	2025      	movs	r0, #37	; 0x25
 80024ca:	f000 f93c 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40013800 	.word	0x40013800
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	20000498 	.word	0x20000498
 80024e8:	40020044 	.word	0x40020044
 80024ec:	200004dc 	.word	0x200004dc
 80024f0:	40020058 	.word	0x40020058

080024f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	; (800252c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	; (8002538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800251a:	f7ff ff11 	bl	8002340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f006 fc99 	bl	8008e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002522:	f7ff fd03 	bl	8001f2c <main>
  bx lr
 8002526:	4770      	bx	lr
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002530:	0800c240 	.word	0x0800c240
  ldr r2, =_sbss
 8002534:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002538:	20001f3c 	.word	0x20001f3c

0800253c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC1_2_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_Init+0x28>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_Init+0x28>)
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 f8d1 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	200f      	movs	r0, #15
 8002558:	f7ff fd92 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fd58 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_IncTick+0x1c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_IncTick+0x20>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_IncTick+0x20>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000098 	.word	0x20000098
 800258c:	20000520 	.word	0x20000520

08002590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return uwTick;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_GetTick+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000520 	.word	0x20000520

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4906      	ldr	r1, [pc, #24]	; (800263c <__NVIC_EnableIRQ+0x34>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff4f 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff64 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ffb2 	bl	8002694 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff81 	bl	8002640 <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff57 	bl	8002608 <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e059      	b.n	800282e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_DMA_Init+0xd4>)
 8002782:	429a      	cmp	r2, r3
 8002784:	d80f      	bhi.n	80027a6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_DMA_Init+0xd8>)
 800278e:	4413      	add	r3, r2
 8002790:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <HAL_DMA_Init+0xdc>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a28      	ldr	r2, [pc, #160]	; (8002844 <HAL_DMA_Init+0xe0>)
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027a4:	e00e      	b.n	80027c4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_DMA_Init+0xe4>)
 80027ae:	4413      	add	r3, r2
 80027b0:	4a23      	ldr	r2, [pc, #140]	; (8002840 <HAL_DMA_Init+0xdc>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Init+0xe8>)
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40020407 	.word	0x40020407
 800283c:	bffdfff8 	.word	0xbffdfff8
 8002840:	cccccccd 	.word	0xcccccccd
 8002844:	40020000 	.word	0x40020000
 8002848:	bffdfbf8 	.word	0xbffdfbf8
 800284c:	40020400 	.word	0x40020400

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Start_IT+0x20>
 800286c:	2302      	movs	r3, #2
 800286e:	e04a      	b.n	8002906 <HAL_DMA_Start_IT+0xb6>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800287e:	2b01      	cmp	r3, #1
 8002880:	d13a      	bne.n	80028f8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fbb0 	bl	800300c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 020e 	orr.w	r2, r2, #14
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e00f      	b.n	80028e6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0204 	bic.w	r2, r2, #4
 80028d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 020a 	orr.w	r2, r2, #10
 80028e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e005      	b.n	8002904 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002900:	2302      	movs	r3, #2
 8002902:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002904:	7dfb      	ldrb	r3, [r7, #23]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002920:	2b02      	cmp	r3, #2
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e020      	b.n	8002978 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020e 	bic.w	r2, r2, #14
 8002944:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
	...

08002984 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002996:	2b02      	cmp	r3, #2
 8002998:	d005      	beq.n	80029a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2204      	movs	r2, #4
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e0d6      	b.n	8002b54 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 020e 	bic.w	r2, r2, #14
 80029b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <HAL_DMA_Abort_IT+0x1dc>)
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d958      	bls.n	8002a84 <HAL_DMA_Abort_IT+0x100>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_DMA_Abort_IT+0x1e0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04f      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xf8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a61      	ldr	r2, [pc, #388]	; (8002b68 <HAL_DMA_Abort_IT+0x1e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d048      	beq.n	8002a78 <HAL_DMA_Abort_IT+0xf4>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a60      	ldr	r2, [pc, #384]	; (8002b6c <HAL_DMA_Abort_IT+0x1e8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d040      	beq.n	8002a72 <HAL_DMA_Abort_IT+0xee>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5e      	ldr	r2, [pc, #376]	; (8002b70 <HAL_DMA_Abort_IT+0x1ec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d038      	beq.n	8002a6c <HAL_DMA_Abort_IT+0xe8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <HAL_DMA_Abort_IT+0x1f0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d030      	beq.n	8002a66 <HAL_DMA_Abort_IT+0xe2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <HAL_DMA_Abort_IT+0x1f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d028      	beq.n	8002a60 <HAL_DMA_Abort_IT+0xdc>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a53      	ldr	r2, [pc, #332]	; (8002b60 <HAL_DMA_Abort_IT+0x1dc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d020      	beq.n	8002a5a <HAL_DMA_Abort_IT+0xd6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_DMA_Abort_IT+0x1f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_DMA_Abort_IT+0xd2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_DMA_Abort_IT+0x1fc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d012      	beq.n	8002a52 <HAL_DMA_Abort_IT+0xce>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a54      	ldr	r2, [pc, #336]	; (8002b84 <HAL_DMA_Abort_IT+0x200>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00a      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a53      	ldr	r2, [pc, #332]	; (8002b88 <HAL_DMA_Abort_IT+0x204>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <HAL_DMA_Abort_IT+0xc2>
 8002a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a44:	e01b      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a4a:	e018      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a50:	e015      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a52:	2310      	movs	r3, #16
 8002a54:	e013      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e011      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5e:	e00e      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a64:	e00b      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6a:	e008      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a70:	e005      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a76:	e002      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	e000      	b.n	8002a7e <HAL_DMA_Abort_IT+0xfa>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	4a43      	ldr	r2, [pc, #268]	; (8002b8c <HAL_DMA_Abort_IT+0x208>)
 8002a80:	6053      	str	r3, [r2, #4]
 8002a82:	e057      	b.n	8002b34 <HAL_DMA_Abort_IT+0x1b0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a36      	ldr	r2, [pc, #216]	; (8002b64 <HAL_DMA_Abort_IT+0x1e0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d04f      	beq.n	8002b2e <HAL_DMA_Abort_IT+0x1aa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_DMA_Abort_IT+0x1e4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d048      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x1a6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_DMA_Abort_IT+0x1e8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d040      	beq.n	8002b24 <HAL_DMA_Abort_IT+0x1a0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_DMA_Abort_IT+0x1ec>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d038      	beq.n	8002b1e <HAL_DMA_Abort_IT+0x19a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <HAL_DMA_Abort_IT+0x1f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d030      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x194>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_DMA_Abort_IT+0x1f4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d028      	beq.n	8002b12 <HAL_DMA_Abort_IT+0x18e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_DMA_Abort_IT+0x1dc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d020      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x188>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_DMA_Abort_IT+0x1f8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d019      	beq.n	8002b08 <HAL_DMA_Abort_IT+0x184>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_DMA_Abort_IT+0x1fc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d012      	beq.n	8002b04 <HAL_DMA_Abort_IT+0x180>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_DMA_Abort_IT+0x200>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00a      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_DMA_Abort_IT+0x204>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d102      	bne.n	8002af8 <HAL_DMA_Abort_IT+0x174>
 8002af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af6:	e01b      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002afc:	e018      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b02:	e015      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b04:	2310      	movs	r3, #16
 8002b06:	e013      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e011      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b10:	e00e      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b16:	e00b      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1c:	e008      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	e005      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b28:	e002      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	e000      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1ac>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_DMA_Abort_IT+0x20c>)
 8002b32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
    } 
  }
  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020080 	.word	0x40020080
 8002b64:	40020008 	.word	0x40020008
 8002b68:	4002001c 	.word	0x4002001c
 8002b6c:	40020030 	.word	0x40020030
 8002b70:	40020044 	.word	0x40020044
 8002b74:	40020058 	.word	0x40020058
 8002b78:	4002006c 	.word	0x4002006c
 8002b7c:	40020408 	.word	0x40020408
 8002b80:	4002041c 	.word	0x4002041c
 8002b84:	40020430 	.word	0x40020430
 8002b88:	40020444 	.word	0x40020444
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020000 	.word	0x40020000

08002b94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80f1 	beq.w	8002da0 <HAL_DMA_IRQHandler+0x20c>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80eb 	beq.w	8002da0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b5f      	ldr	r3, [pc, #380]	; (8002d6c <HAL_DMA_IRQHandler+0x1d8>)
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d958      	bls.n	8002ca6 <HAL_DMA_IRQHandler+0x112>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	; (8002d70 <HAL_DMA_IRQHandler+0x1dc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d04f      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x10a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5c      	ldr	r2, [pc, #368]	; (8002d74 <HAL_DMA_IRQHandler+0x1e0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d048      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x106>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_DMA_IRQHandler+0x1e4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d040      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x100>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a59      	ldr	r2, [pc, #356]	; (8002d7c <HAL_DMA_IRQHandler+0x1e8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d038      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xfa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a57      	ldr	r2, [pc, #348]	; (8002d80 <HAL_DMA_IRQHandler+0x1ec>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d030      	beq.n	8002c88 <HAL_DMA_IRQHandler+0xf4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_DMA_IRQHandler+0x1f0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d028      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xee>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_DMA_IRQHandler+0x1d8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d020      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xe8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_DMA_IRQHandler+0x1f4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d019      	beq.n	8002c78 <HAL_DMA_IRQHandler+0xe4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <HAL_DMA_IRQHandler+0x1f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d012      	beq.n	8002c74 <HAL_DMA_IRQHandler+0xe0>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4f      	ldr	r2, [pc, #316]	; (8002d90 <HAL_DMA_IRQHandler+0x1fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00a      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xda>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_DMA_IRQHandler+0x200>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d102      	bne.n	8002c68 <HAL_DMA_IRQHandler+0xd4>
 8002c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c66:	e01b      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c6c:	e018      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	e015      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	e013      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e011      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c80:	e00e      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c86:	e00b      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c8c:	e008      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c92:	e005      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c98:	e002      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c9a:	2340      	movs	r3, #64	; 0x40
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x10c>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <HAL_DMA_IRQHandler+0x204>)
 8002ca2:	6053      	str	r3, [r2, #4]
 8002ca4:	e057      	b.n	8002d56 <HAL_DMA_IRQHandler+0x1c2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_DMA_IRQHandler+0x1dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04f      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x1bc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_DMA_IRQHandler+0x1e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d048      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x1b8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <HAL_DMA_IRQHandler+0x1e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d040      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1b2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <HAL_DMA_IRQHandler+0x1e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d038      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x1ac>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <HAL_DMA_IRQHandler+0x1ec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d030      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x1a6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_DMA_IRQHandler+0x1f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d028      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x1a0>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_DMA_IRQHandler+0x1d8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d020      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x19a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_DMA_IRQHandler+0x1f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x196>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <HAL_DMA_IRQHandler+0x1f8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d012      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x192>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_IRQHandler+0x1fc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00a      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x18c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_DMA_IRQHandler+0x200>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <HAL_DMA_IRQHandler+0x186>
 8002d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d18:	e01b      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d1e:	e018      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d24:	e015      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d26:	2340      	movs	r3, #64	; 0x40
 8002d28:	e013      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e011      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d32:	e00e      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d38:	e00b      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d3e:	e008      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d44:	e005      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4a:	e002      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d4c:	2340      	movs	r3, #64	; 0x40
 8002d4e:	e000      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1be>
 8002d50:	2304      	movs	r3, #4
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <HAL_DMA_IRQHandler+0x208>)
 8002d54:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8136 	beq.w	8002fcc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d68:	e130      	b.n	8002fcc <HAL_DMA_IRQHandler+0x438>
 8002d6a:	bf00      	nop
 8002d6c:	40020080 	.word	0x40020080
 8002d70:	40020008 	.word	0x40020008
 8002d74:	4002001c 	.word	0x4002001c
 8002d78:	40020030 	.word	0x40020030
 8002d7c:	40020044 	.word	0x40020044
 8002d80:	40020058 	.word	0x40020058
 8002d84:	4002006c 	.word	0x4002006c
 8002d88:	40020408 	.word	0x40020408
 8002d8c:	4002041c 	.word	0x4002041c
 8002d90:	40020430 	.word	0x40020430
 8002d94:	40020444 	.word	0x40020444
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2202      	movs	r2, #2
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80dd 	beq.w	8002f6c <HAL_DMA_IRQHandler+0x3d8>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80d7 	beq.w	8002f6c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020a 	bic.w	r2, r2, #10
 8002dda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <HAL_DMA_IRQHandler+0x444>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d958      	bls.n	8002ea2 <HAL_DMA_IRQHandler+0x30e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a79      	ldr	r2, [pc, #484]	; (8002fdc <HAL_DMA_IRQHandler+0x448>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d04f      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x306>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a78      	ldr	r2, [pc, #480]	; (8002fe0 <HAL_DMA_IRQHandler+0x44c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d048      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x302>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a76      	ldr	r2, [pc, #472]	; (8002fe4 <HAL_DMA_IRQHandler+0x450>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d040      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2fc>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	; (8002fe8 <HAL_DMA_IRQHandler+0x454>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d038      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x2f6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a73      	ldr	r2, [pc, #460]	; (8002fec <HAL_DMA_IRQHandler+0x458>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d030      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2f0>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a72      	ldr	r2, [pc, #456]	; (8002ff0 <HAL_DMA_IRQHandler+0x45c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d028      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x2ea>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a69      	ldr	r2, [pc, #420]	; (8002fd8 <HAL_DMA_IRQHandler+0x444>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d020      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x2e4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ff4 <HAL_DMA_IRQHandler+0x460>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d019      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x2e0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6c      	ldr	r2, [pc, #432]	; (8002ff8 <HAL_DMA_IRQHandler+0x464>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x2dc>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6b      	ldr	r2, [pc, #428]	; (8002ffc <HAL_DMA_IRQHandler+0x468>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00a      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x2d6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a69      	ldr	r2, [pc, #420]	; (8003000 <HAL_DMA_IRQHandler+0x46c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d102      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x2d0>
 8002e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e62:	e01b      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	e018      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6e:	e015      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e70:	2320      	movs	r3, #32
 8002e72:	e013      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e011      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7c:	e00e      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e82:	e00b      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e88:	e008      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e8e:	e005      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e94:	e002      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e96:	2320      	movs	r3, #32
 8002e98:	e000      	b.n	8002e9c <HAL_DMA_IRQHandler+0x308>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	4a59      	ldr	r2, [pc, #356]	; (8003004 <HAL_DMA_IRQHandler+0x470>)
 8002e9e:	6053      	str	r3, [r2, #4]
 8002ea0:	e057      	b.n	8002f52 <HAL_DMA_IRQHandler+0x3be>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4d      	ldr	r2, [pc, #308]	; (8002fdc <HAL_DMA_IRQHandler+0x448>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04f      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x3b8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4b      	ldr	r2, [pc, #300]	; (8002fe0 <HAL_DMA_IRQHandler+0x44c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d048      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x3b4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_DMA_IRQHandler+0x450>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d040      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x3ae>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a48      	ldr	r2, [pc, #288]	; (8002fe8 <HAL_DMA_IRQHandler+0x454>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d038      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x3a8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_DMA_IRQHandler+0x458>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d030      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x3a2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a45      	ldr	r2, [pc, #276]	; (8002ff0 <HAL_DMA_IRQHandler+0x45c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d028      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x39c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3d      	ldr	r2, [pc, #244]	; (8002fd8 <HAL_DMA_IRQHandler+0x444>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d020      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x396>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a41      	ldr	r2, [pc, #260]	; (8002ff4 <HAL_DMA_IRQHandler+0x460>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x392>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a40      	ldr	r2, [pc, #256]	; (8002ff8 <HAL_DMA_IRQHandler+0x464>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d012      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x38e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3e      	ldr	r2, [pc, #248]	; (8002ffc <HAL_DMA_IRQHandler+0x468>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x388>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3d      	ldr	r2, [pc, #244]	; (8003000 <HAL_DMA_IRQHandler+0x46c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d102      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x382>
 8002f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f14:	e01b      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1a:	e018      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f20:	e015      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f22:	2320      	movs	r3, #32
 8002f24:	e013      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e011      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2e:	e00e      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f34:	e00b      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f3a:	e008      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f40:	e005      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f46:	e002      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e000      	b.n	8002f4e <HAL_DMA_IRQHandler+0x3ba>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	4a2e      	ldr	r2, [pc, #184]	; (8003008 <HAL_DMA_IRQHandler+0x474>)
 8002f50:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d034      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f6a:	e02f      	b.n	8002fcc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2208      	movs	r2, #8
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d028      	beq.n	8002fce <HAL_DMA_IRQHandler+0x43a>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d023      	beq.n	8002fce <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 020e 	bic.w	r2, r2, #14
 8002f94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
    }
  }
  return;
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
}
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40020080 	.word	0x40020080
 8002fdc:	40020008 	.word	0x40020008
 8002fe0:	4002001c 	.word	0x4002001c
 8002fe4:	40020030 	.word	0x40020030
 8002fe8:	40020044 	.word	0x40020044
 8002fec:	40020058 	.word	0x40020058
 8002ff0:	4002006c 	.word	0x4002006c
 8002ff4:	40020408 	.word	0x40020408
 8002ff8:	4002041c 	.word	0x4002041c
 8002ffc:	40020430 	.word	0x40020430
 8003000:	40020444 	.word	0x40020444
 8003004:	40020400 	.word	0x40020400
 8003008:	40020000 	.word	0x40020000

0800300c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b10      	cmp	r3, #16
 8003038:	d108      	bne.n	800304c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800304a:	e007      	b.n	800305c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
	...

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307a:	e179      	b.n	8003370 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800307c:	2201      	movs	r2, #1
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	f040 8168 	bne.w	800336a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a96      	ldr	r2, [pc, #600]	; (80032f8 <HAL_GPIO_Init+0x290>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d05e      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030a4:	4a94      	ldr	r2, [pc, #592]	; (80032f8 <HAL_GPIO_Init+0x290>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d875      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030aa:	4a94      	ldr	r2, [pc, #592]	; (80032fc <HAL_GPIO_Init+0x294>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d058      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030b0:	4a92      	ldr	r2, [pc, #584]	; (80032fc <HAL_GPIO_Init+0x294>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d86f      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030b6:	4a92      	ldr	r2, [pc, #584]	; (8003300 <HAL_GPIO_Init+0x298>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d052      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030bc:	4a90      	ldr	r2, [pc, #576]	; (8003300 <HAL_GPIO_Init+0x298>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d869      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030c2:	4a90      	ldr	r2, [pc, #576]	; (8003304 <HAL_GPIO_Init+0x29c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d04c      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030c8:	4a8e      	ldr	r2, [pc, #568]	; (8003304 <HAL_GPIO_Init+0x29c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d863      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030ce:	4a8e      	ldr	r2, [pc, #568]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d046      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030d4:	4a8c      	ldr	r2, [pc, #560]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d85d      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d82a      	bhi.n	8003134 <HAL_GPIO_Init+0xcc>
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d859      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_GPIO_Init+0x80>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	08003163 	.word	0x08003163
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	0800314f 	.word	0x0800314f
 80030f4:	08003191 	.word	0x08003191
 80030f8:	08003197 	.word	0x08003197
 80030fc:	08003197 	.word	0x08003197
 8003100:	08003197 	.word	0x08003197
 8003104:	08003197 	.word	0x08003197
 8003108:	08003197 	.word	0x08003197
 800310c:	08003197 	.word	0x08003197
 8003110:	08003197 	.word	0x08003197
 8003114:	08003197 	.word	0x08003197
 8003118:	08003197 	.word	0x08003197
 800311c:	08003197 	.word	0x08003197
 8003120:	08003197 	.word	0x08003197
 8003124:	08003197 	.word	0x08003197
 8003128:	08003197 	.word	0x08003197
 800312c:	08003145 	.word	0x08003145
 8003130:	08003159 	.word	0x08003159
 8003134:	4a75      	ldr	r2, [pc, #468]	; (800330c <HAL_GPIO_Init+0x2a4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800313a:	e02c      	b.n	8003196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e029      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	3304      	adds	r3, #4
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e024      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3308      	adds	r3, #8
 8003154:	623b      	str	r3, [r7, #32]
          break;
 8003156:	e01f      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	330c      	adds	r3, #12
 800315e:	623b      	str	r3, [r7, #32]
          break;
 8003160:	e01a      	b.n	8003198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800316a:	2304      	movs	r3, #4
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e013      	b.n	8003198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003178:	2308      	movs	r3, #8
 800317a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	611a      	str	r2, [r3, #16]
          break;
 8003182:	e009      	b.n	8003198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003184:	2308      	movs	r3, #8
 8003186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	615a      	str	r2, [r3, #20]
          break;
 800318e:	e003      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x130>
          break;
 8003196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d801      	bhi.n	80031a2 <HAL_GPIO_Init+0x13a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_Init+0x13e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d802      	bhi.n	80031b4 <HAL_GPIO_Init+0x14c>
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	e002      	b.n	80031ba <HAL_GPIO_Init+0x152>
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	3b08      	subs	r3, #8
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	210f      	movs	r1, #15
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80c1 	beq.w	800336a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e8:	4b49      	ldr	r3, [pc, #292]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	4a48      	ldr	r2, [pc, #288]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6193      	str	r3, [r2, #24]
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003200:	4a44      	ldr	r2, [pc, #272]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01f      	beq.n	800326c <HAL_GPIO_Init+0x204>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <HAL_GPIO_Init+0x2b4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d019      	beq.n	8003268 <HAL_GPIO_Init+0x200>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_GPIO_Init+0x1fc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a39      	ldr	r2, [pc, #228]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00d      	beq.n	8003260 <HAL_GPIO_Init+0x1f8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a38      	ldr	r2, [pc, #224]	; (8003328 <HAL_GPIO_Init+0x2c0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <HAL_GPIO_Init+0x1f4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a37      	ldr	r2, [pc, #220]	; (800332c <HAL_GPIO_Init+0x2c4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_GPIO_Init+0x1f0>
 8003254:	2305      	movs	r3, #5
 8003256:	e00a      	b.n	800326e <HAL_GPIO_Init+0x206>
 8003258:	2306      	movs	r3, #6
 800325a:	e008      	b.n	800326e <HAL_GPIO_Init+0x206>
 800325c:	2304      	movs	r3, #4
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x206>
 8003260:	2303      	movs	r3, #3
 8003262:	e004      	b.n	800326e <HAL_GPIO_Init+0x206>
 8003264:	2302      	movs	r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x206>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_GPIO_Init+0x206>
 800326c:	2300      	movs	r3, #0
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	f002 0203 	and.w	r2, r2, #3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4093      	lsls	r3, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800327e:	4925      	ldr	r1, [pc, #148]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4924      	ldr	r1, [pc, #144]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4920      	ldr	r1, [pc, #128]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	491a      	ldr	r1, [pc, #104]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4916      	ldr	r1, [pc, #88]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032d8:	4013      	ands	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d025      	beq.n	8003334 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4910      	ldr	r1, [pc, #64]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
 80032f4:	e025      	b.n	8003342 <HAL_GPIO_Init+0x2da>
 80032f6:	bf00      	nop
 80032f8:	10320000 	.word	0x10320000
 80032fc:	10310000 	.word	0x10310000
 8003300:	10220000 	.word	0x10220000
 8003304:	10210000 	.word	0x10210000
 8003308:	10120000 	.word	0x10120000
 800330c:	10110000 	.word	0x10110000
 8003310:	40021000 	.word	0x40021000
 8003314:	40010000 	.word	0x40010000
 8003318:	40010800 	.word	0x40010800
 800331c:	40010c00 	.word	0x40010c00
 8003320:	40011000 	.word	0x40011000
 8003324:	40011400 	.word	0x40011400
 8003328:	40011800 	.word	0x40011800
 800332c:	40011c00 	.word	0x40011c00
 8003330:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_GPIO_Init+0x324>)
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	43db      	mvns	r3, r3
 800333c:	4913      	ldr	r1, [pc, #76]	; (800338c <HAL_GPIO_Init+0x324>)
 800333e:	4013      	ands	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_GPIO_Init+0x324>)
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_GPIO_Init+0x324>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
 800335a:	e006      	b.n	800336a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_GPIO_Init+0x324>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	43db      	mvns	r3, r3
 8003364:	4909      	ldr	r1, [pc, #36]	; (800338c <HAL_GPIO_Init+0x324>)
 8003366:	4013      	ands	r3, r2
 8003368:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	3301      	adds	r3, #1
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f47f ae7e 	bne.w	800307c <HAL_GPIO_Init+0x14>
  }
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	372c      	adds	r7, #44	; 0x2c
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40010400 	.word	0x40010400

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e12b      	b.n	800362a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe fd60 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003424:	f001 fba0 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8003428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4a81      	ldr	r2, [pc, #516]	; (8003634 <HAL_I2C_Init+0x274>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d807      	bhi.n	8003444 <HAL_I2C_Init+0x84>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a80      	ldr	r2, [pc, #512]	; (8003638 <HAL_I2C_Init+0x278>)
 8003438:	4293      	cmp	r3, r2
 800343a:	bf94      	ite	ls
 800343c:	2301      	movls	r3, #1
 800343e:	2300      	movhi	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e006      	b.n	8003452 <HAL_I2C_Init+0x92>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a7d      	ldr	r2, [pc, #500]	; (800363c <HAL_I2C_Init+0x27c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	bf94      	ite	ls
 800344c:	2301      	movls	r3, #1
 800344e:	2300      	movhi	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0e7      	b.n	800362a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a78      	ldr	r2, [pc, #480]	; (8003640 <HAL_I2C_Init+0x280>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0c9b      	lsrs	r3, r3, #18
 8003464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a6a      	ldr	r2, [pc, #424]	; (8003634 <HAL_I2C_Init+0x274>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d802      	bhi.n	8003494 <HAL_I2C_Init+0xd4>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	e009      	b.n	80034a8 <HAL_I2C_Init+0xe8>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	4a69      	ldr	r2, [pc, #420]	; (8003644 <HAL_I2C_Init+0x284>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	3301      	adds	r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	495c      	ldr	r1, [pc, #368]	; (8003634 <HAL_I2C_Init+0x274>)
 80034c4:	428b      	cmp	r3, r1
 80034c6:	d819      	bhi.n	80034fc <HAL_I2C_Init+0x13c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e59      	subs	r1, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034dc:	400b      	ands	r3, r1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_I2C_Init+0x138>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e59      	subs	r1, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f6:	e051      	b.n	800359c <HAL_I2C_Init+0x1dc>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e04f      	b.n	800359c <HAL_I2C_Init+0x1dc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d111      	bne.n	8003528 <HAL_I2C_Init+0x168>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e012      	b.n	800354e <HAL_I2C_Init+0x18e>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	0099      	lsls	r1, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Init+0x196>
 8003552:	2301      	movs	r3, #1
 8003554:	e022      	b.n	800359c <HAL_I2C_Init+0x1dc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10e      	bne.n	800357c <HAL_I2C_Init+0x1bc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1e58      	subs	r0, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	440b      	add	r3, r1
 800356c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	e00f      	b.n	800359c <HAL_I2C_Init+0x1dc>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	0099      	lsls	r1, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6809      	ldr	r1, [r1, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6911      	ldr	r1, [r2, #16]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	000186a0 	.word	0x000186a0
 8003638:	001e847f 	.word	0x001e847f
 800363c:	003d08ff 	.word	0x003d08ff
 8003640:	431bde83 	.word	0x431bde83
 8003644:	10624dd3 	.word	0x10624dd3

08003648 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003662:	f7fe ff95 	bl	8002590 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b20      	cmp	r3, #32
 8003672:	f040 80d9 	bne.w	8003828 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2319      	movs	r3, #25
 800367c:	2201      	movs	r2, #1
 800367e:	496d      	ldr	r1, [pc, #436]	; (8003834 <HAL_I2C_Mem_Write+0x1ec>)
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fcc1 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
 800368e:	e0cc      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_I2C_Mem_Write+0x56>
 800369a:	2302      	movs	r3, #2
 800369c:	e0c5      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d007      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2221      	movs	r2, #33	; 0x21
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <HAL_I2C_Mem_Write+0x1f0>)
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003706:	88f8      	ldrh	r0, [r7, #6]
 8003708:	893a      	ldrh	r2, [r7, #8]
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	4603      	mov	r3, r0
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 faf8 	bl	8003d0c <I2C_RequestMemoryWrite>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d052      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e081      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fd42 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06b      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11b      	bne.n	80037c8 <HAL_I2C_Mem_Write+0x180>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d017      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1aa      	bne.n	8003726 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fd2e 	bl	8004236 <I2C_WaitOnBTFFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e016      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
  }
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	00100002 	.word	0x00100002
 8003838:	ffff0000 	.word	0xffff0000

0800383c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	460b      	mov	r3, r1
 8003850:	813b      	strh	r3, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800385a:	f7fe fe99 	bl	8002590 <HAL_GetTick>
 800385e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b20      	cmp	r3, #32
 800386a:	f040 8244 	bne.w	8003cf6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2319      	movs	r3, #25
 8003874:	2201      	movs	r2, #1
 8003876:	4982      	ldr	r1, [pc, #520]	; (8003a80 <HAL_I2C_Mem_Read+0x244>)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fbc5 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
 8003886:	e237      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Mem_Read+0x5a>
 8003892:	2302      	movs	r3, #2
 8003894:	e230      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d007      	beq.n	80038bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2222      	movs	r2, #34	; 0x22
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <HAL_I2C_Mem_Read+0x248>)
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038fe:	88f8      	ldrh	r0, [r7, #6]
 8003900:	893a      	ldrh	r2, [r7, #8]
 8003902:	8979      	ldrh	r1, [r7, #10]
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4603      	mov	r3, r0
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fa92 	bl	8003e38 <I2C_RequestMemoryRead>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e1ec      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d113      	bne.n	800394e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e1c0      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b01      	cmp	r3, #1
 8003954:	d11e      	bne.n	8003994 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003964:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003966:	b672      	cpsid	i
}
 8003968:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003990:	b662      	cpsie	i
}
 8003992:	e035      	b.n	8003a00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b02      	cmp	r3, #2
 800399a:	d11e      	bne.n	80039da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ac:	b672      	cpsid	i
}
 80039ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d6:	b662      	cpsie	i
}
 80039d8:	e012      	b.n	8003a00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a00:	e166      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	f200 811f 	bhi.w	8003c4a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d123      	bne.n	8003a5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fc4d 	bl	80042b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e167      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a5a:	e139      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d152      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4906      	ldr	r1, [pc, #24]	; (8003a88 <HAL_I2C_Mem_Read+0x24c>)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 faca 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e13c      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
 8003a7e:	bf00      	nop
 8003a80:	00100002 	.word	0x00100002
 8003a84:	ffff0000 	.word	0xffff0000
 8003a88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a8c:	b672      	cpsid	i
}
 8003a8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ad2:	b662      	cpsie	i
}
 8003ad4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b08:	e0e2      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2200      	movs	r2, #0
 8003b12:	497b      	ldr	r1, [pc, #492]	; (8003d00 <HAL_I2C_Mem_Read+0x4c4>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fa77 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0e9      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b34:	b672      	cpsid	i
}
 8003b36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b6a:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_I2C_Mem_Read+0x4c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	4a65      	ldr	r2, [pc, #404]	; (8003d08 <HAL_I2C_Mem_Read+0x4cc>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0a1a      	lsrs	r2, r3, #8
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00da      	lsls	r2, r3, #3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d118      	bne.n	8003bc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb2:	b662      	cpsie	i
}
 8003bb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e09a      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d1d9      	bne.n	8003b84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c12:	b662      	cpsie	i
}
 8003c14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c48:	e042      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fb32 	bl	80042b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e04c      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d118      	bne.n	8003cd0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f47f ae94 	bne.w	8003a02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3728      	adds	r7, #40	; 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	00010004 	.word	0x00010004
 8003d04:	20000090 	.word	0x20000090
 8003d08:	14f8b589 	.word	0x14f8b589

08003d0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	817b      	strh	r3, [r7, #10]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	813b      	strh	r3, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f960 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5c:	d103      	bne.n	8003d66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e05f      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6a:	897b      	ldrh	r3, [r7, #10]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <I2C_RequestMemoryWrite+0x128>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f998 	bl	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04c      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa02 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d107      	bne.n	8003dce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e02b      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e021      	b.n	8003e28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f9dc 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e005      	b.n	8003e2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1e:	893b      	ldrh	r3, [r7, #8]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	00010002 	.word	0x00010002

08003e38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	813b      	strh	r3, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8c2 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e98:	d103      	bne.n	8003ea2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0aa      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	4952      	ldr	r1, [pc, #328]	; (8004004 <I2C_RequestMemoryRead+0x1cc>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f8fa 	bl	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e097      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f964 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d107      	bne.n	8003f0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e076      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	e021      	b.n	8003f64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	6a39      	ldr	r1, [r7, #32]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f93e 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d107      	bne.n	8003f56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e050      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f923 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e035      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f82b 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d103      	bne.n	8003fd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e013      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fd4:	897b      	ldrh	r3, [r7, #10]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	4906      	ldr	r1, [pc, #24]	; (8004004 <I2C_RequestMemoryRead+0x1cc>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f863 	bl	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	00010002 	.word	0x00010002

08004008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004018:	e025      	b.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d021      	beq.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fab5 	bl	8002590 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d116      	bne.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e023      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10d      	bne.n	800408c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	e00c      	b.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d0b6      	beq.n	800401a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c4:	e051      	b.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d123      	bne.n	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e046      	b.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d021      	beq.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fe fa33 	bl	8002590 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e020      	b.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10c      	bne.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e00b      	b.n	80041a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d18d      	bne.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c0:	e02d      	b.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f8ce 	bl	8004364 <I2C_IsAcknowledgeFailed>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e02d      	b.n	800422e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d021      	beq.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe f9d9 	bl	8002590 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e007      	b.n	800422e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b80      	cmp	r3, #128	; 0x80
 800422a:	d1ca      	bne.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004242:	e02d      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f88d 	bl	8004364 <I2C_IsAcknowledgeFailed>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e02d      	b.n	80042b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d021      	beq.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fe f998 	bl	8002590 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d116      	bne.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e007      	b.n	80042b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d1ca      	bne.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042c4:	e042      	b.n	800434c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d119      	bne.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0210 	mvn.w	r2, #16
 80042dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e029      	b.n	800435c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fe f942 	bl	8002590 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e007      	b.n	800435c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d1b5      	bne.n	80042c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d11b      	bne.n	80043b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004384:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e272      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8087 	beq.w	80044ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043e0:	4b92      	ldr	r3, [pc, #584]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d00c      	beq.n	8004406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043ec:	4b8f      	ldr	r3, [pc, #572]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d112      	bne.n	800441e <HAL_RCC_OscConfig+0x5e>
 80043f8:	4b8c      	ldr	r3, [pc, #560]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d10b      	bne.n	800441e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d06c      	beq.n	80044ec <HAL_RCC_OscConfig+0x12c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d168      	bne.n	80044ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e24c      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004426:	d106      	bne.n	8004436 <HAL_RCC_OscConfig+0x76>
 8004428:	4b80      	ldr	r3, [pc, #512]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7f      	ldr	r2, [pc, #508]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 800442e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	e02e      	b.n	8004494 <HAL_RCC_OscConfig+0xd4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0x98>
 800443e:	4b7b      	ldr	r3, [pc, #492]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7a      	ldr	r2, [pc, #488]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b78      	ldr	r3, [pc, #480]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a77      	ldr	r2, [pc, #476]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e01d      	b.n	8004494 <HAL_RCC_OscConfig+0xd4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0xbc>
 8004462:	4b72      	ldr	r3, [pc, #456]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a71      	ldr	r2, [pc, #452]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b6f      	ldr	r3, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6e      	ldr	r2, [pc, #440]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xd4>
 800447c:	4b6b      	ldr	r3, [pc, #428]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a6a      	ldr	r2, [pc, #424]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b68      	ldr	r3, [pc, #416]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a67      	ldr	r2, [pc, #412]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 800448e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe f878 	bl	8002590 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fe f874 	bl	8002590 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e200      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0xe4>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fe f864 	bl	8002590 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fe f860 	bl	8002590 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1ec      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x10c>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d063      	beq.n	80045c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044fa:	4b4c      	ldr	r3, [pc, #304]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004506:	4b49      	ldr	r3, [pc, #292]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d11c      	bne.n	800454c <HAL_RCC_OscConfig+0x18c>
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x176>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1c0      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4939      	ldr	r1, [pc, #228]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	e03a      	b.n	80045c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCC_OscConfig+0x270>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fe f819 	bl	8002590 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fe f815 	bl	8002590 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1a1      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4927      	ldr	r1, [pc, #156]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	e015      	b.n	80045c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCC_OscConfig+0x270>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fd fff8 	bl	8002590 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fd fff4 	bl	8002590 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e180      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d03a      	beq.n	8004644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d019      	beq.n	800460a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fd ffd8 	bl	8002590 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fd ffd4 	bl	8002590 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e160      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004602:	2001      	movs	r0, #1
 8004604:	f000 fb08 	bl	8004c18 <RCC_Delay>
 8004608:	e01c      	b.n	8004644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004610:	f7fd ffbe 	bl	8002590 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004616:	e00f      	b.n	8004638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004618:	f7fd ffba 	bl	8002590 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d908      	bls.n	8004638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e146      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	42420000 	.word	0x42420000
 8004634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	4b92      	ldr	r3, [pc, #584]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e9      	bne.n	8004618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80a6 	beq.w	800479e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004656:	4b8b      	ldr	r3, [pc, #556]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10d      	bne.n	800467e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004662:	4b88      	ldr	r3, [pc, #544]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4a87      	ldr	r2, [pc, #540]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	61d3      	str	r3, [r2, #28]
 800466e:	4b85      	ldr	r3, [pc, #532]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b82      	ldr	r3, [pc, #520]	; (8004888 <HAL_RCC_OscConfig+0x4c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d118      	bne.n	80046bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468a:	4b7f      	ldr	r3, [pc, #508]	; (8004888 <HAL_RCC_OscConfig+0x4c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a7e      	ldr	r2, [pc, #504]	; (8004888 <HAL_RCC_OscConfig+0x4c8>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004696:	f7fd ff7b 	bl	8002590 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fd ff77 	bl	8002590 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b64      	cmp	r3, #100	; 0x64
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e103      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b75      	ldr	r3, [pc, #468]	; (8004888 <HAL_RCC_OscConfig+0x4c8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x312>
 80046c4:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4a6e      	ldr	r2, [pc, #440]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6213      	str	r3, [r2, #32]
 80046d0:	e02d      	b.n	800472e <HAL_RCC_OscConfig+0x36e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x334>
 80046da:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4a69      	ldr	r2, [pc, #420]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6213      	str	r3, [r2, #32]
 80046e6:	4b67      	ldr	r3, [pc, #412]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4a66      	ldr	r2, [pc, #408]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	6213      	str	r3, [r2, #32]
 80046f2:	e01c      	b.n	800472e <HAL_RCC_OscConfig+0x36e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_OscConfig+0x356>
 80046fc:	4b61      	ldr	r3, [pc, #388]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	4a60      	ldr	r2, [pc, #384]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6213      	str	r3, [r2, #32]
 8004708:	4b5e      	ldr	r3, [pc, #376]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4a5d      	ldr	r2, [pc, #372]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6213      	str	r3, [r2, #32]
 8004714:	e00b      	b.n	800472e <HAL_RCC_OscConfig+0x36e>
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	4a5a      	ldr	r2, [pc, #360]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6213      	str	r3, [r2, #32]
 8004722:	4b58      	ldr	r3, [pc, #352]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a57      	ldr	r2, [pc, #348]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d015      	beq.n	8004762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004736:	f7fd ff2b 	bl	8002590 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473c:	e00a      	b.n	8004754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7fd ff27 	bl	8002590 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0b1      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ee      	beq.n	800473e <HAL_RCC_OscConfig+0x37e>
 8004760:	e014      	b.n	800478c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004762:	f7fd ff15 	bl	8002590 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fd ff11 	bl	8002590 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e09b      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004780:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ee      	bne.n	800476a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b3c      	ldr	r3, [pc, #240]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4a3b      	ldr	r2, [pc, #236]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8087 	beq.w	80048b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a8:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d061      	beq.n	8004878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d146      	bne.n	800484a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047bc:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_RCC_OscConfig+0x4cc>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fd fee5 	bl	8002590 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fd fee1 	bl	8002590 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e06d      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d108      	bne.n	8004804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4921      	ldr	r1, [pc, #132]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	4313      	orrs	r3, r2
 8004802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004804:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a19      	ldr	r1, [r3, #32]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	430b      	orrs	r3, r1
 8004816:	491b      	ldr	r1, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x4cc>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004822:	f7fd feb5 	bl	8002590 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fd feb1 	bl	8002590 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e03d      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x46a>
 8004848:	e035      	b.n	80048b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <HAL_RCC_OscConfig+0x4cc>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004850:	f7fd fe9e 	bl	8002590 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fd fe9a 	bl	8002590 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e026      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x498>
 8004876:	e01e      	b.n	80048b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d107      	bne.n	8004890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e019      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_OscConfig+0x500>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d106      	bne.n	80048b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0d0      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d8:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d910      	bls.n	8004908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b67      	ldr	r3, [pc, #412]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 0207 	bic.w	r2, r3, #7
 80048ee:	4965      	ldr	r1, [pc, #404]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0b8      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d020      	beq.n	8004956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004920:	4b59      	ldr	r3, [pc, #356]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800492a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004938:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a52      	ldr	r2, [pc, #328]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b50      	ldr	r3, [pc, #320]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	494d      	ldr	r1, [pc, #308]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d040      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d115      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004982:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e073      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004992:	4b3d      	ldr	r3, [pc, #244]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06b      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049a2:	4b39      	ldr	r3, [pc, #228]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4936      	ldr	r1, [pc, #216]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b4:	f7fd fdec 	bl	8002590 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fd fde8 	bl	8002590 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e053      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 020c 	and.w	r2, r3, #12
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d1eb      	bne.n	80049bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e4:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d210      	bcs.n	8004a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	4922      	ldr	r1, [pc, #136]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e032      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4916      	ldr	r1, [pc, #88]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	490e      	ldr	r1, [pc, #56]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a52:	f000 f821 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	490a      	ldr	r1, [pc, #40]	; (8004a8c <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	5ccb      	ldrb	r3, [r1, r3]
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <HAL_RCC_ClockConfig+0x1cc>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCC_ClockConfig+0x1d0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fb04 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40022000 	.word	0x40022000
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	0800bdd0 	.word	0x0800bdd0
 8004a90:	20000090 	.word	0x20000090
 8004a94:	20000094 	.word	0x20000094

08004a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b490      	push	{r4, r7}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_GetSysClockFreq+0xac>)
 8004aa0:	1d3c      	adds	r4, r7, #4
 8004aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004aa8:	f240 2301 	movw	r3, #513	; 0x201
 8004aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ac2:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x46>
 8004ad6:	e02b      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ada:	623b      	str	r3, [r7, #32]
      break;
 8004adc:	e02b      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	0c9b      	lsrs	r3, r3, #18
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	3328      	adds	r3, #40	; 0x28
 8004ae8:	443b      	add	r3, r7
 8004aea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004aee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d012      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	0c5b      	lsrs	r3, r3, #17
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	3328      	adds	r3, #40	; 0x28
 8004b06:	443b      	add	r3, r7
 8004b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1e:	e004      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4a0b      	ldr	r2, [pc, #44]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	623b      	str	r3, [r7, #32]
      break;
 8004b2e:	e002      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b32:	623b      	str	r3, [r7, #32]
      break;
 8004b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b36:	6a3b      	ldr	r3, [r7, #32]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc90      	pop	{r4, r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	0800bce8 	.word	0x0800bce8
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	007a1200 	.word	0x007a1200
 8004b50:	003d0900 	.word	0x003d0900

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b02      	ldr	r3, [pc, #8]	; (8004b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	20000090 	.word	0x20000090

08004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b6c:	f7ff fff2 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800bde0 	.word	0x0800bde0

08004b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b94:	f7ff ffde 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	0adb      	lsrs	r3, r3, #11
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	; (8004bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	0800bde0 	.word	0x0800bde0

08004bb8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	220f      	movs	r2, #15
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_GetClockConfig+0x58>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0203 	and.w	r2, r3, #3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_GetClockConfig+0x58>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_GetClockConfig+0x58>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <HAL_RCC_GetClockConfig+0x58>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	08db      	lsrs	r3, r3, #3
 8004bf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0207 	and.w	r2, r3, #7
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40022000 	.word	0x40022000

08004c18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <RCC_Delay+0x34>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <RCC_Delay+0x38>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	0a5b      	lsrs	r3, r3, #9
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c34:	bf00      	nop
  }
  while (Delay --);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1e5a      	subs	r2, r3, #1
 8004c3a:	60fa      	str	r2, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f9      	bne.n	8004c34 <RCC_Delay+0x1c>
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	20000090 	.word	0x20000090
 8004c50:	10624dd3 	.word	0x10624dd3

08004c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e041      	b.n	8004cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f839 	bl	8004cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f000 f9c2 	bl	800501c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d001      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e044      	b.n	8004da6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_TIM_Base_Start_IT+0xac>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x6c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1c      	ldr	r2, [pc, #112]	; (8004db4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x6c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x6c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x6c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <HAL_TIM_Base_Start_IT+0xb8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x6c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d111      	bne.n	8004d94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d010      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	e007      	b.n	8004da4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00

08004dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d122      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0202 	mvn.w	r2, #2
 8004df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8ed 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004e0c:	e005      	b.n	8004e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8e0 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f8ef 	bl	8004ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d122      	bne.n	8004e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d11b      	bne.n	8004e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0204 	mvn.w	r2, #4
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f8c3 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8b6 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f8c5 	bl	8004ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d122      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0208 	mvn.w	r2, #8
 8004e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f899 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f88c 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f89b 	bl	8004ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0210 	mvn.w	r2, #16
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f86f 	bl	8004fe6 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f862 	bl	8004fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f871 	bl	8004ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0201 	mvn.w	r2, #1
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fd f84c 	bl	8001fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b80      	cmp	r3, #128	; 0x80
 8004f54:	d10e      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8d7 	bl	8005122 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d10e      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f835 	bl	800500a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d10e      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0220 	mvn.w	r2, #32
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8a2 	bl	8005110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a33      	ldr	r2, [pc, #204]	; (80050fc <TIM_Base_SetConfig+0xe0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a32      	ldr	r2, [pc, #200]	; (8005100 <TIM_Base_SetConfig+0xe4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00f      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d00b      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a2f      	ldr	r2, [pc, #188]	; (8005104 <TIM_Base_SetConfig+0xe8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a2e      	ldr	r2, [pc, #184]	; (8005108 <TIM_Base_SetConfig+0xec>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a2d      	ldr	r2, [pc, #180]	; (800510c <TIM_Base_SetConfig+0xf0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d108      	bne.n	800506e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <TIM_Base_SetConfig+0xe0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <TIM_Base_SetConfig+0x82>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a21      	ldr	r2, [pc, #132]	; (8005100 <TIM_Base_SetConfig+0xe4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_Base_SetConfig+0x82>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d00b      	beq.n	800509e <TIM_Base_SetConfig+0x82>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <TIM_Base_SetConfig+0xe8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_Base_SetConfig+0x82>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a1d      	ldr	r2, [pc, #116]	; (8005108 <TIM_Base_SetConfig+0xec>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0x82>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <TIM_Base_SetConfig+0xf0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <TIM_Base_SetConfig+0xe0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0xc8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <TIM_Base_SetConfig+0xe4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00

08005110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e03f      	b.n	80051c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fd f920 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2224      	movs	r2, #36	; 0x24
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fe49 	bl	8005e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800518c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800519c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08a      	sub	sp, #40	; 0x28
 80051d2:	af02      	add	r7, sp, #8
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d17c      	bne.n	80052e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_UART_Transmit+0x2c>
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e075      	b.n	80052ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_UART_Transmit+0x3e>
 8005208:	2302      	movs	r3, #2
 800520a:	e06e      	b.n	80052ea <HAL_UART_Transmit+0x11c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2221      	movs	r2, #33	; 0x21
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005222:	f7fd f9b5 	bl	8002590 <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d108      	bne.n	8005250 <HAL_UART_Transmit+0x82>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	e003      	b.n	8005258 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005260:	e02a      	b.n	80052b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	2180      	movs	r1, #128	; 0x80
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fbbb 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e036      	b.n	80052ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	3302      	adds	r3, #2
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	e007      	b.n	80052aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	781a      	ldrb	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3301      	adds	r3, #1
 80052a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1cf      	bne.n	8005262 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fb8b 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e006      	b.n	80052ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e000      	b.n	80052ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052e8:	2302      	movs	r3, #2
  }
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b20      	cmp	r3, #32
 800530c:	d153      	bne.n	80053b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_UART_Transmit_DMA+0x26>
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e04c      	b.n	80053b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_UART_Transmit_DMA+0x38>
 8005328:	2302      	movs	r3, #2
 800532a:	e045      	b.n	80053b8 <HAL_UART_Transmit_DMA+0xc4>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2221      	movs	r2, #33	; 0x21
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005358:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <HAL_UART_Transmit_DMA+0xcc>)
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <HAL_UART_Transmit_DMA+0xd0>)
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <HAL_UART_Transmit_DMA+0xd4>)
 800536a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	2200      	movs	r2, #0
 8005372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6819      	ldr	r1, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3304      	adds	r3, #4
 8005388:	461a      	mov	r2, r3
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	f7fd fa60 	bl	8002850 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005398:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e000      	b.n	80053b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	0800581b 	.word	0x0800581b
 80053c4:	0800586d 	.word	0x0800586d
 80053c8:	08005955 	.word	0x08005955

080053cc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d13c      	bne.n	8005460 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e035      	b.n	8005462 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005400:	2302      	movs	r3, #2
 8005402:	e02e      	b.n	8005462 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	461a      	mov	r2, r3
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fb2f 	bl	8005a7c <UART_Start_Receive_DMA>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d119      	bne.n	800545c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d113      	bne.n	8005458 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0210 	orr.w	r2, r2, #16
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	e001      	b.n	800545c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	e000      	b.n	8005462 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_UART_IRQHandler+0x52>
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fc00 	bl	8005cbc <UART_Receive_IT>
      return;
 80054bc:	e17b      	b.n	80057b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80b1 	beq.w	8005628 <HAL_UART_IRQHandler+0x1bc>
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_UART_IRQHandler+0x70>
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80a6 	beq.w	8005628 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_UART_IRQHandler+0x90>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_UART_IRQHandler+0xb0>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f043 0202 	orr.w	r2, r3, #2
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_UART_IRQHandler+0xd0>
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00f      	beq.n	8005566 <HAL_UART_IRQHandler+0xfa>
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_UART_IRQHandler+0xee>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f043 0208 	orr.w	r2, r3, #8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 811e 	beq.w	80057ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_UART_IRQHandler+0x11e>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fb99 	bl	8005cbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <HAL_UART_IRQHandler+0x146>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d031      	beq.n	8005616 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fadb 	bl	8005b6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d023      	beq.n	800560e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d013      	beq.n	8005606 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	4a76      	ldr	r2, [pc, #472]	; (80057bc <HAL_UART_IRQHandler+0x350>)
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd f9ca 	bl	8002984 <HAL_DMA_Abort_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	e00e      	b.n	8005624 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8fe 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	e00a      	b.n	8005624 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8fa 	bl	8005808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	e006      	b.n	8005624 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8f6 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005622:	e0c3      	b.n	80057ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	bf00      	nop
    return;
 8005626:	e0c1      	b.n	80057ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	2b01      	cmp	r3, #1
 800562e:	f040 80a1 	bne.w	8005774 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 809b 	beq.w	8005774 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8095 	beq.w	8005774 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d04e      	beq.n	800570c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005678:	8a3b      	ldrh	r3, [r7, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8098 	beq.w	80057b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005684:	8a3a      	ldrh	r2, [r7, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	f080 8092 	bcs.w	80057b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8a3a      	ldrh	r2, [r7, #16]
 8005690:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d02b      	beq.n	80056f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0210 	bic.w	r2, r2, #16
 80056e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fd f90d 	bl	800290e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	b29b      	uxth	r3, r3
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7fc fa47 	bl	8001b98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800570a:	e051      	b.n	80057b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005714:	b29b      	uxth	r3, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d047      	beq.n	80057b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005724:	8a7b      	ldrh	r3, [r7, #18]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d044      	beq.n	80057b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005738:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0210 	bic.w	r2, r2, #16
 8005766:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005768:	8a7b      	ldrh	r3, [r7, #18]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fc fa13 	bl	8001b98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005772:	e01f      	b.n	80057b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_UART_IRQHandler+0x324>
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fa30 	bl	8005bee <UART_Transmit_IT>
    return;
 800578e:	e012      	b.n	80057b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <HAL_UART_IRQHandler+0x34a>
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa71 	bl	8005c8c <UART_EndTransmit_IT>
    return;
 80057aa:	e004      	b.n	80057b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80057b4:	bf00      	nop
  }
}
 80057b6:	3728      	adds	r7, #40	; 0x28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	08005bc7 	.word	0x08005bc7

080057c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d113      	bne.n	800585e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800584a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800585a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800585c:	e002      	b.n	8005864 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff ffae 	bl	80057c0 <HAL_UART_TxCpltCallback>
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff ffa9 	bl	80057d2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d12a      	bne.n	80058fa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d107      	bne.n	80058fa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0210 	bic.w	r2, r2, #16
 80058f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d106      	bne.n	8005910 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005906:	4619      	mov	r1, r3
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7fc f945 	bl	8001b98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800590e:	e002      	b.n	8005916 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff ff67 	bl	80057e4 <HAL_UART_RxCpltCallback>
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	2b01      	cmp	r3, #1
 8005932:	d108      	bne.n	8005946 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	b29b      	uxth	r3, r3
 800593c:	4619      	mov	r1, r3
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7fc f92a 	bl	8001b98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005944:	e002      	b.n	800594c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff ff55 	bl	80057f6 <HAL_UART_RxHalfCpltCallback>
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b21      	cmp	r3, #33	; 0x21
 8005986:	d108      	bne.n	800599a <UART_DMAError+0x46>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2200      	movs	r2, #0
 8005992:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005994:	68b8      	ldr	r0, [r7, #8]
 8005996:	f000 f8d5 	bl	8005b44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b22      	cmp	r3, #34	; 0x22
 80059ba:	d108      	bne.n	80059ce <UART_DMAError+0x7a>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059c8:	68b8      	ldr	r0, [r7, #8]
 80059ca:	f000 f8d0 	bl	8005b6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f043 0210 	orr.w	r2, r3, #16
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059da:	68b8      	ldr	r0, [r7, #8]
 80059dc:	f7ff ff14 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f8:	e02c      	b.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d028      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a08:	f7fc fdc2 	bl	8002590 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d21d      	bcs.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e00f      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d0c3      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	4613      	mov	r3, r2
 8005a88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2222      	movs	r2, #34	; 0x22
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	4a23      	ldr	r2, [pc, #140]	; (8005b38 <UART_Start_Receive_DMA+0xbc>)
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <UART_Start_Receive_DMA+0xc0>)
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <UART_Start_Receive_DMA+0xc4>)
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	f7fc feb8 	bl	8002850 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0201 	orr.w	r2, r2, #1
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08005889 	.word	0x08005889
 8005b3c:	0800591f 	.word	0x0800591f
 8005b40:	08005955 	.word	0x08005955

08005b44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b5a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0210 	bic.w	r2, r2, #16
 8005bac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fe11 	bl	8005808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b21      	cmp	r3, #33	; 0x21
 8005c00:	d13e      	bne.n	8005c80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d114      	bne.n	8005c36 <UART_Transmit_IT+0x48>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	1c9a      	adds	r2, r3, #2
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	621a      	str	r2, [r3, #32]
 8005c34:	e008      	b.n	8005c48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6211      	str	r1, [r2, #32]
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4619      	mov	r1, r3
 8005c56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10f      	bne.n	8005c7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fd87 	bl	80057c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b22      	cmp	r3, #34	; 0x22
 8005cce:	f040 8099 	bne.w	8005e04 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d117      	bne.n	8005d0c <UART_Receive_IT+0x50>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d113      	bne.n	8005d0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	629a      	str	r2, [r3, #40]	; 0x28
 8005d0a:	e026      	b.n	8005d5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	d007      	beq.n	8005d30 <UART_Receive_IT+0x74>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <UART_Receive_IT+0x82>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e008      	b.n	8005d50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4619      	mov	r1, r3
 8005d68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d148      	bne.n	8005e00 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0220 	bic.w	r2, r2, #32
 8005d7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d123      	bne.n	8005df6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
 8005dc2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d10a      	bne.n	8005de8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fb fed2 	bl	8001b98 <HAL_UARTEx_RxEventCallback>
 8005df4:	e002      	b.n	8005dfc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fcf4 	bl	80057e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e002      	b.n	8005e06 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e4a:	f023 030c 	bic.w	r3, r3, #12
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	430b      	orrs	r3, r1
 8005e56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a2c      	ldr	r2, [pc, #176]	; (8005f24 <UART_SetConfig+0x114>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d103      	bne.n	8005e80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e78:	f7fe fe8a 	bl	8004b90 <HAL_RCC_GetPCLK2Freq>
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	e002      	b.n	8005e86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e80:	f7fe fe72 	bl	8004b68 <HAL_RCC_GetPCLK1Freq>
 8005e84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009a      	lsls	r2, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <UART_SetConfig+0x118>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	0119      	lsls	r1, r3, #4
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009a      	lsls	r2, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <UART_SetConfig+0x118>)
 8005ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2064      	movs	r0, #100	; 0x64
 8005ec6:	fb00 f303 	mul.w	r3, r0, r3
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	3332      	adds	r3, #50	; 0x32
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <UART_SetConfig+0x118>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005edc:	4419      	add	r1, r3
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009a      	lsls	r2, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <UART_SetConfig+0x118>)
 8005ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2064      	movs	r0, #100	; 0x64
 8005efe:	fb00 f303 	mul.w	r3, r0, r3
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	3332      	adds	r3, #50	; 0x32
 8005f08:	4a07      	ldr	r2, [pc, #28]	; (8005f28 <UART_SetConfig+0x118>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 020f 	and.w	r2, r3, #15
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	440a      	add	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40013800 	.word	0x40013800
 8005f28:	51eb851f 	.word	0x51eb851f

08005f2c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f32:	f3ef 8305 	mrs	r3, IPSR
 8005f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f42:	607b      	str	r3, [r7, #4]
  return(result);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <osKernelInitialize+0x32>
 8005f4a:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <osKernelInitialize+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d109      	bne.n	8005f66 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f52:	f3ef 8311 	mrs	r3, BASEPRI
 8005f56:	603b      	str	r3, [r7, #0]
  return(result);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f5e:	f06f 0305 	mvn.w	r3, #5
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e00c      	b.n	8005f80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <osKernelInitialize+0x60>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d105      	bne.n	8005f7a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <osKernelInitialize+0x60>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e002      	b.n	8005f80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	20000524 	.word	0x20000524

08005f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f96:	f3ef 8305 	mrs	r3, IPSR
 8005f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <osKernelStart+0x32>
 8005fae:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <osKernelStart+0x64>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d109      	bne.n	8005fca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fba:	603b      	str	r3, [r7, #0]
  return(result);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <osKernelStart+0x3a>
    stat = osErrorISR;
 8005fc2:	f06f 0305 	mvn.w	r3, #5
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e00e      	b.n	8005fe8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <osKernelStart+0x64>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <osKernelStart+0x64>)
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005fd8:	f001 f954 	bl	8007284 <vTaskStartScheduler>
      stat = osOK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e002      	b.n	8005fe8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000524 	.word	0x20000524

08005ff8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b092      	sub	sp, #72	; 0x48
 8005ffc:	af04      	add	r7, sp, #16
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006008:	f3ef 8305 	mrs	r3, IPSR
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 8094 	bne.w	800613e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006016:	f3ef 8310 	mrs	r3, PRIMASK
 800601a:	623b      	str	r3, [r7, #32]
  return(result);
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 808d 	bne.w	800613e <osThreadNew+0x146>
 8006024:	4b48      	ldr	r3, [pc, #288]	; (8006148 <osThreadNew+0x150>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d106      	bne.n	800603a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800602c:	f3ef 8311 	mrs	r3, BASEPRI
 8006030:	61fb      	str	r3, [r7, #28]
  return(result);
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 8082 	bne.w	800613e <osThreadNew+0x146>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d07e      	beq.n	800613e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006044:	2318      	movs	r3, #24
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006048:	2300      	movs	r3, #0
 800604a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800604c:	f107 031b 	add.w	r3, r7, #27
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d045      	beq.n	80060ea <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <osThreadNew+0x74>
        name = attr->name;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <osThreadNew+0x9a>
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	2b38      	cmp	r3, #56	; 0x38
 8006084:	d805      	bhi.n	8006092 <osThreadNew+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <osThreadNew+0x9e>
        return (NULL);
 8006092:	2300      	movs	r3, #0
 8006094:	e054      	b.n	8006140 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	089b      	lsrs	r3, r3, #2
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <osThreadNew+0xd4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2bbb      	cmp	r3, #187	; 0xbb
 80060b4:	d90a      	bls.n	80060cc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <osThreadNew+0xd4>
        mem = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ca:	e010      	b.n	80060ee <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10c      	bne.n	80060ee <osThreadNew+0xf6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d108      	bne.n	80060ee <osThreadNew+0xf6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <osThreadNew+0xf6>
          mem = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e8:	e001      	b.n	80060ee <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d110      	bne.n	8006116 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060fc:	9202      	str	r2, [sp, #8]
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006108:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fed6 	bl	8006ebc <xTaskCreateStatic>
 8006110:	4603      	mov	r3, r0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e013      	b.n	800613e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d110      	bne.n	800613e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	b29a      	uxth	r2, r3
 8006120:	f107 0314 	add.w	r3, r7, #20
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 ff20 	bl	8006f74 <xTaskCreate>
 8006134:	4603      	mov	r3, r0
 8006136:	2b01      	cmp	r3, #1
 8006138:	d001      	beq.n	800613e <osThreadNew+0x146>
          hTask = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800613e:	697b      	ldr	r3, [r7, #20]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3738      	adds	r7, #56	; 0x38
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000524 	.word	0x20000524

0800614c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006154:	f3ef 8305 	mrs	r3, IPSR
 8006158:	613b      	str	r3, [r7, #16]
  return(result);
 800615a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10f      	bne.n	8006180 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006160:	f3ef 8310 	mrs	r3, PRIMASK
 8006164:	60fb      	str	r3, [r7, #12]
  return(result);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <osDelay+0x34>
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <osDelay+0x58>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d109      	bne.n	8006188 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006174:	f3ef 8311 	mrs	r3, BASEPRI
 8006178:	60bb      	str	r3, [r7, #8]
  return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <osDelay+0x3c>
    stat = osErrorISR;
 8006180:	f06f 0305 	mvn.w	r3, #5
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e007      	b.n	8006198 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f842 	bl	800721c <vTaskDelay>
    }
  }

  return (stat);
 8006198:	697b      	ldr	r3, [r7, #20]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000524 	.word	0x20000524

080061a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08c      	sub	sp, #48	; 0x30
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b8:	f3ef 8305 	mrs	r3, IPSR
 80061bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80061be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d16f      	bne.n	80062a4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c4:	f3ef 8310 	mrs	r3, PRIMASK
 80061c8:	617b      	str	r3, [r7, #20]
  return(result);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d169      	bne.n	80062a4 <osMessageQueueNew+0xfc>
 80061d0:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <osMessageQueueNew+0x108>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d105      	bne.n	80061e4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d8:	f3ef 8311 	mrs	r3, BASEPRI
 80061dc:	613b      	str	r3, [r7, #16]
  return(result);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d15f      	bne.n	80062a4 <osMessageQueueNew+0xfc>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d05c      	beq.n	80062a4 <osMessageQueueNew+0xfc>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d059      	beq.n	80062a4 <osMessageQueueNew+0xfc>
    mem = -1;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d029      	beq.n	8006250 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d012      	beq.n	800622a <osMessageQueueNew+0x82>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b4f      	cmp	r3, #79	; 0x4f
 800620a:	d90e      	bls.n	800622a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695a      	ldr	r2, [r3, #20]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	429a      	cmp	r2, r3
 8006222:	d302      	bcc.n	800622a <osMessageQueueNew+0x82>
        mem = 1;
 8006224:	2301      	movs	r3, #1
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	e014      	b.n	8006254 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d110      	bne.n	8006254 <osMessageQueueNew+0xac>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800623e:	2b00      	cmp	r3, #0
 8006240:	d108      	bne.n	8006254 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <osMessageQueueNew+0xac>
          mem = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	623b      	str	r3, [r7, #32]
 800624e:	e001      	b.n	8006254 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d10b      	bne.n	8006272 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691a      	ldr	r2, [r3, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2100      	movs	r1, #0
 8006264:	9100      	str	r1, [sp, #0]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f96d 	bl	8006548 <xQueueGenericCreateStatic>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24
 8006270:	e008      	b.n	8006284 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006278:	2200      	movs	r2, #0
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f9da 	bl	8006636 <xQueueGenericCreate>
 8006282:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	e001      	b.n	800629c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006298:	2300      	movs	r3, #0
 800629a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800629c:	69f9      	ldr	r1, [r7, #28]
 800629e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062a0:	f000 fdb0 	bl	8006e04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3728      	adds	r7, #40	; 0x28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000524 	.word	0x20000524

080062b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4a06      	ldr	r2, [pc, #24]	; (80062dc <vApplicationGetIdleTaskMemory+0x28>)
 80062c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a05      	ldr	r2, [pc, #20]	; (80062e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80062ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	601a      	str	r2, [r3, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr
 80062dc:	20000528 	.word	0x20000528
 80062e0:	200005e4 	.word	0x200005e4

080062e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a07      	ldr	r2, [pc, #28]	; (8006310 <vApplicationGetTimerTaskMemory+0x2c>)
 80062f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4a06      	ldr	r2, [pc, #24]	; (8006314 <vApplicationGetTimerTaskMemory+0x30>)
 80062fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	200007e4 	.word	0x200007e4
 8006314:	200008a0 	.word	0x200008a0

08006318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f103 0208 	add.w	r2, r3, #8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f103 0208 	add.w	r2, r3, #8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr

08006356 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e00c      	b.n	80063ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3308      	adds	r3, #8
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e002      	b.n	80063e2 <vListInsert+0x2e>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d2f6      	bcs.n	80063dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6892      	ldr	r2, [r2, #8]
 800643a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6852      	ldr	r2, [r2, #4]
 8006444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d103      	bne.n	8006458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr
	...

08006478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064a2:	f002 f833 	bl	800850c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	441a      	add	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d2:	3b01      	subs	r3, #1
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	441a      	add	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d114      	bne.n	8006522 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01a      	beq.n	8006536 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3310      	adds	r3, #16
 8006504:	4618      	mov	r0, r3
 8006506:	f001 f959 	bl	80077bc <xTaskRemoveFromEventList>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <xQueueGenericReset+0xcc>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	e009      	b.n	8006536 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3310      	adds	r3, #16
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fef6 	bl	8006318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3324      	adds	r3, #36	; 0x24
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fef1 	bl	8006318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006536:	f002 f819 	bl	800856c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800653a:	2301      	movs	r3, #1
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	e000ed04 	.word	0xe000ed04

08006548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08e      	sub	sp, #56	; 0x38
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <xQueueGenericCreateStatic+0x52>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <xQueueGenericCreateStatic+0x56>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <xQueueGenericCreateStatic+0x58>
 800659e:	2300      	movs	r3, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	623b      	str	r3, [r7, #32]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <xQueueGenericCreateStatic+0x7e>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <xQueueGenericCreateStatic+0x82>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <xQueueGenericCreateStatic+0x84>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	61fb      	str	r3, [r7, #28]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065e6:	2350      	movs	r3, #80	; 0x50
 80065e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b50      	cmp	r3, #80	; 0x50
 80065ee:	d00a      	beq.n	8006606 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	61bb      	str	r3, [r7, #24]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006618:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f843 	bl	80066b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800662e:	4618      	mov	r0, r3
 8006630:	3730      	adds	r7, #48	; 0x30
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08a      	sub	sp, #40	; 0x28
 800663a:	af02      	add	r7, sp, #8
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	4613      	mov	r3, r2
 8006642:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <xQueueGenericCreate+0x2a>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	613b      	str	r3, [r7, #16]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	e004      	b.n	8006676 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	fb02 f303 	mul.w	r3, r2, r3
 8006674:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	3350      	adds	r3, #80	; 0x50
 800667a:	4618      	mov	r0, r3
 800667c:	f002 f846 	bl	800870c <pvPortMalloc>
 8006680:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00f      	beq.n	80066a8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	3350      	adds	r3, #80	; 0x50
 800668c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006696:	79fa      	ldrb	r2, [r7, #7]
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f805 	bl	80066b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066a8:	69bb      	ldr	r3, [r7, #24]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e002      	b.n	80066d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066e0:	2101      	movs	r1, #1
 80066e2:	69b8      	ldr	r0, [r7, #24]
 80066e4:	f7ff fec8 	bl	8006478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08e      	sub	sp, #56	; 0x38
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006706:	2300      	movs	r3, #0
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <xQueueGenericSend+0x32>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d103      	bne.n	8006738 <xQueueGenericSend+0x40>
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <xQueueGenericSend+0x44>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <xQueueGenericSend+0x46>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <xQueueGenericSend+0x60>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d103      	bne.n	8006766 <xQueueGenericSend+0x6e>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <xQueueGenericSend+0x72>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericSend+0x74>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueGenericSend+0x8e>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	623b      	str	r3, [r7, #32]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006786:	f001 f9df 	bl	8007b48 <xTaskGetSchedulerState>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <xQueueGenericSend+0x9e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <xQueueGenericSend+0xa2>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <xQueueGenericSend+0xa4>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61fb      	str	r3, [r7, #28]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067b6:	f001 fea9 	bl	800850c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <xQueueGenericSend+0xd4>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d129      	bne.n	8006820 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d2:	f000 fa07 	bl	8006be4 <prvCopyDataToQueue>
 80067d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	3324      	adds	r3, #36	; 0x24
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 ffe9 	bl	80077bc <xTaskRemoveFromEventList>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d013      	beq.n	8006818 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067f0:	4b3f      	ldr	r3, [pc, #252]	; (80068f0 <xQueueGenericSend+0x1f8>)
 80067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	e00a      	b.n	8006818 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006808:	4b39      	ldr	r3, [pc, #228]	; (80068f0 <xQueueGenericSend+0x1f8>)
 800680a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006818:	f001 fea8 	bl	800856c <vPortExitCritical>
				return pdPASS;
 800681c:	2301      	movs	r3, #1
 800681e:	e063      	b.n	80068e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006826:	f001 fea1 	bl	800856c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800682a:	2300      	movs	r3, #0
 800682c:	e05c      	b.n	80068e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f823 	bl	8007884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800683e:	2301      	movs	r3, #1
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006842:	f001 fe93 	bl	800856c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006846:	f000 fd8d 	bl	8007364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800684a:	f001 fe5f 	bl	800850c <vPortEnterCritical>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006854:	b25b      	sxtb	r3, r3
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d103      	bne.n	8006864 <xQueueGenericSend+0x16c>
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800686a:	b25b      	sxtb	r3, r3
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d103      	bne.n	800687a <xQueueGenericSend+0x182>
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687a:	f001 fe77 	bl	800856c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800687e:	1d3a      	adds	r2, r7, #4
 8006880:	f107 0314 	add.w	r3, r7, #20
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f001 f812 	bl	80078b0 <xTaskCheckForTimeOut>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d124      	bne.n	80068dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006894:	f000 fa9e 	bl	8006dd4 <prvIsQueueFull>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	3310      	adds	r3, #16
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 ff38 	bl	800771c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ae:	f000 fa29 	bl	8006d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068b2:	f000 fd65 	bl	8007380 <xTaskResumeAll>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f47f af7c 	bne.w	80067b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <xQueueGenericSend+0x1f8>)
 80068c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	e772      	b.n	80067b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d2:	f000 fa17 	bl	8006d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068d6:	f000 fd53 	bl	8007380 <xTaskResumeAll>
 80068da:	e76c      	b.n	80067b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068de:	f000 fa11 	bl	8006d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068e2:	f000 fd4d 	bl	8007380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068e6:	2300      	movs	r3, #0
		}
	}
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3738      	adds	r7, #56	; 0x38
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08e      	sub	sp, #56	; 0x38
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <xQueueGenericSendFromISR+0x3c>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <xQueueGenericSendFromISR+0x40>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <xQueueGenericSendFromISR+0x42>
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	623b      	str	r3, [r7, #32]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d103      	bne.n	800695e <xQueueGenericSendFromISR+0x6a>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <xQueueGenericSendFromISR+0x6e>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericSendFromISR+0x70>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	61fb      	str	r3, [r7, #28]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800697e:	f001 fe87 	bl	8008690 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006982:	f3ef 8211 	mrs	r2, BASEPRI
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	61ba      	str	r2, [r7, #24]
 8006998:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800699a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d302      	bcc.n	80069b0 <xQueueGenericSendFromISR+0xbc>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d12c      	bne.n	8006a0a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c0:	f000 f910 	bl	8006be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d112      	bne.n	80069f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	3324      	adds	r3, #36	; 0x24
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 feee 	bl	80077bc <xTaskRemoveFromEventList>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e007      	b.n	8006a04 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069f8:	3301      	adds	r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	b25a      	sxtb	r2, r3
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a04:	2301      	movs	r3, #1
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a08:	e001      	b.n	8006a0e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3738      	adds	r7, #56	; 0x38
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <xQueueReceive+0x30>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	623b      	str	r3, [r7, #32]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <xQueueReceive+0x3e>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <xQueueReceive+0x42>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <xQueueReceive+0x44>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <xQueueReceive+0x5e>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61fb      	str	r3, [r7, #28]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a82:	f001 f861 	bl	8007b48 <xTaskGetSchedulerState>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <xQueueReceive+0x6e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <xQueueReceive+0x72>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <xQueueReceive+0x74>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueReceive+0x8e>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	61bb      	str	r3, [r7, #24]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ab2:	f001 fd2b 	bl	800850c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01f      	beq.n	8006b02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac6:	f000 f8f7 	bl	8006cb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	1e5a      	subs	r2, r3, #1
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00f      	beq.n	8006afa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	3310      	adds	r3, #16
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fe6c 	bl	80077bc <xTaskRemoveFromEventList>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aea:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <xQueueReceive+0x1bc>)
 8006aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006afa:	f001 fd37 	bl	800856c <vPortExitCritical>
				return pdPASS;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e069      	b.n	8006bd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d103      	bne.n	8006b10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b08:	f001 fd30 	bl	800856c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e062      	b.n	8006bd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b16:	f107 0310 	add.w	r3, r7, #16
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 feb2 	bl	8007884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b24:	f001 fd22 	bl	800856c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b28:	f000 fc1c 	bl	8007364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b2c:	f001 fcee 	bl	800850c <vPortEnterCritical>
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d103      	bne.n	8006b46 <xQueueReceive+0x122>
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b4c:	b25b      	sxtb	r3, r3
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d103      	bne.n	8006b5c <xQueueReceive+0x138>
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b5c:	f001 fd06 	bl	800856c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b60:	1d3a      	adds	r2, r7, #4
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fea1 	bl	80078b0 <xTaskCheckForTimeOut>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d123      	bne.n	8006bbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b76:	f000 f917 	bl	8006da8 <prvIsQueueEmpty>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d017      	beq.n	8006bb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	3324      	adds	r3, #36	; 0x24
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fdc7 	bl	800771c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b90:	f000 f8b8 	bl	8006d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b94:	f000 fbf4 	bl	8007380 <xTaskResumeAll>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d189      	bne.n	8006ab2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b9e:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <xQueueReceive+0x1bc>)
 8006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	e780      	b.n	8006ab2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb2:	f000 f8a7 	bl	8006d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bb6:	f000 fbe3 	bl	8007380 <xTaskResumeAll>
 8006bba:	e77a      	b.n	8006ab2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bbe:	f000 f8a1 	bl	8006d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bc2:	f000 fbdd 	bl	8007380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc8:	f000 f8ee 	bl	8006da8 <prvIsQueueEmpty>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f43f af6f 	beq.w	8006ab2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3730      	adds	r7, #48	; 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10d      	bne.n	8006c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d14d      	bne.n	8006ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 ffb8 	bl	8007b84 <xTaskPriorityDisinherit>
 8006c14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	605a      	str	r2, [r3, #4]
 8006c1c:	e043      	b.n	8006ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d119      	bne.n	8006c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6898      	ldr	r0, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	f002 f940 	bl	8008eb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d32b      	bcc.n	8006ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	e026      	b.n	8006ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68d8      	ldr	r0, [r3, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	461a      	mov	r2, r3
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	f002 f926 	bl	8008eb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	425b      	negs	r3, r3
 8006c72:	441a      	add	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d207      	bcs.n	8006c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	425b      	negs	r3, r3
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d105      	bne.n	8006ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cae:	697b      	ldr	r3, [r7, #20]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d018      	beq.n	8006cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	441a      	add	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d303      	bcc.n	8006cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68d9      	ldr	r1, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6838      	ldr	r0, [r7, #0]
 8006cf8:	f002 f8dc 	bl	8008eb4 <memcpy>
	}
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d0c:	f001 fbfe 	bl	800850c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d18:	e011      	b.n	8006d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d012      	beq.n	8006d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3324      	adds	r3, #36	; 0x24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fd48 	bl	80077bc <xTaskRemoveFromEventList>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d32:	f000 fe1f 	bl	8007974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dce9      	bgt.n	8006d1a <prvUnlockQueue+0x16>
 8006d46:	e000      	b.n	8006d4a <prvUnlockQueue+0x46>
					break;
 8006d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	22ff      	movs	r2, #255	; 0xff
 8006d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d52:	f001 fc0b 	bl	800856c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d56:	f001 fbd9 	bl	800850c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d62:	e011      	b.n	8006d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3310      	adds	r3, #16
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fd23 	bl	80077bc <xTaskRemoveFromEventList>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d7c:	f000 fdfa 	bl	8007974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	dce9      	bgt.n	8006d64 <prvUnlockQueue+0x60>
 8006d90:	e000      	b.n	8006d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	22ff      	movs	r2, #255	; 0xff
 8006d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d9c:	f001 fbe6 	bl	800856c <vPortExitCritical>
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006db0:	f001 fbac 	bl	800850c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e001      	b.n	8006dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dc6:	f001 fbd1 	bl	800856c <vPortExitCritical>

	return xReturn;
 8006dca:	68fb      	ldr	r3, [r7, #12]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ddc:	f001 fb96 	bl	800850c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d102      	bne.n	8006df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e001      	b.n	8006df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006df6:	f001 fbb9 	bl	800856c <vPortExitCritical>

	return xReturn;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e014      	b.n	8006e3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e14:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <vQueueAddToRegistry+0x4c>)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e20:	490b      	ldr	r1, [pc, #44]	; (8006e50 <vQueueAddToRegistry+0x4c>)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e2a:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <vQueueAddToRegistry+0x4c>)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4413      	add	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e36:	e006      	b.n	8006e46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b07      	cmp	r3, #7
 8006e42:	d9e7      	bls.n	8006e14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr
 8006e50:	20000ca0 	.word	0x20000ca0

08006e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e64:	f001 fb52 	bl	800850c <vPortEnterCritical>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d103      	bne.n	8006e7e <vQueueWaitForMessageRestricted+0x2a>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8a:	d103      	bne.n	8006e94 <vQueueWaitForMessageRestricted+0x40>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e94:	f001 fb6a 	bl	800856c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	3324      	adds	r3, #36	; 0x24
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fc5b 	bl	8007764 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006eae:	6978      	ldr	r0, [r7, #20]
 8006eb0:	f7ff ff28 	bl	8006d04 <prvUnlockQueue>
	}
 8006eb4:	bf00      	nop
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af04      	add	r7, sp, #16
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	623b      	str	r3, [r7, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <xTaskCreateStatic+0x46>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	61fb      	str	r3, [r7, #28]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f02:	23bc      	movs	r3, #188	; 0xbc
 8006f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2bbc      	cmp	r3, #188	; 0xbc
 8006f0a:	d00a      	beq.n	8006f22 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	61bb      	str	r3, [r7, #24]
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01e      	beq.n	8006f66 <xTaskCreateStatic+0xaa>
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01b      	beq.n	8006f66 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f40:	2300      	movs	r3, #0
 8006f42:	9303      	str	r3, [sp, #12]
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	9302      	str	r3, [sp, #8]
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f851 	bl	8007000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f60:	f000 f8ec 	bl	800713c <prvAddNewTaskToReadyList>
 8006f64:	e001      	b.n	8006f6a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
	}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3728      	adds	r7, #40	; 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08c      	sub	sp, #48	; 0x30
 8006f78:	af04      	add	r7, sp, #16
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fbbf 	bl	800870c <pvPortMalloc>
 8006f8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00e      	beq.n	8006fb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f96:	20bc      	movs	r0, #188	; 0xbc
 8006f98:	f001 fbb8 	bl	800870c <pvPortMalloc>
 8006f9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8006faa:	e005      	b.n	8006fb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fac:	6978      	ldr	r0, [r7, #20]
 8006fae:	f001 fc71 	bl	8008894 <vPortFree>
 8006fb2:	e001      	b.n	8006fb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d017      	beq.n	8006fee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fc6:	88fa      	ldrh	r2, [r7, #6]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9303      	str	r3, [sp, #12]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	9302      	str	r3, [sp, #8]
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f80f 	bl	8007000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fe2:	69f8      	ldr	r0, [r7, #28]
 8006fe4:	f000 f8aa 	bl	800713c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	e002      	b.n	8006ff4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
	}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	461a      	mov	r2, r3
 8007018:	21a5      	movs	r1, #165	; 0xa5
 800701a:	f001 ff59 	bl	8008ed0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007028:	3b01      	subs	r3, #1
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f023 0307 	bic.w	r3, r3, #7
 8007036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	617b      	str	r3, [r7, #20]
}
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	e012      	b.n	8007084 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	7819      	ldrb	r1, [r3, #0]
 8007066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	3334      	adds	r3, #52	; 0x34
 800706e:	460a      	mov	r2, r1
 8007070:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	3301      	adds	r3, #1
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d9e9      	bls.n	800705e <prvInitialiseNewTask+0x5e>
 800708a:	e000      	b.n	800708e <prvInitialiseNewTask+0x8e>
		{
			break;
 800708c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	2b37      	cmp	r3, #55	; 0x37
 800709a:	d901      	bls.n	80070a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800709c:	2337      	movs	r3, #55	; 0x37
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	2200      	movs	r2, #0
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	3304      	adds	r3, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f94d 	bl	8006356 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	3318      	adds	r3, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f948 	bl	8006356 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	3354      	adds	r3, #84	; 0x54
 80070f0:	2260      	movs	r2, #96	; 0x60
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 feeb 	bl	8008ed0 <memset>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	4a0c      	ldr	r2, [pc, #48]	; (8007130 <prvInitialiseNewTask+0x130>)
 80070fe:	659a      	str	r2, [r3, #88]	; 0x58
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <prvInitialiseNewTask+0x134>)
 8007104:	65da      	str	r2, [r3, #92]	; 0x5c
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <prvInitialiseNewTask+0x138>)
 800710a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	69b8      	ldr	r0, [r7, #24]
 8007112:	f001 f90b 	bl	800832c <pxPortInitialiseStack>
 8007116:	4602      	mov	r2, r0
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007128:	bf00      	nop
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	0800be08 	.word	0x0800be08
 8007134:	0800be28 	.word	0x0800be28
 8007138:	0800bde8 	.word	0x0800bde8

0800713c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007144:	f001 f9e2 	bl	800850c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007148:	4b2d      	ldr	r3, [pc, #180]	; (8007200 <prvAddNewTaskToReadyList+0xc4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	4a2c      	ldr	r2, [pc, #176]	; (8007200 <prvAddNewTaskToReadyList+0xc4>)
 8007150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007152:	4b2c      	ldr	r3, [pc, #176]	; (8007204 <prvAddNewTaskToReadyList+0xc8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800715a:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <prvAddNewTaskToReadyList+0xc8>)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007160:	4b27      	ldr	r3, [pc, #156]	; (8007200 <prvAddNewTaskToReadyList+0xc4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d110      	bne.n	800718a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007168:	f000 fc28 	bl	80079bc <prvInitialiseTaskLists>
 800716c:	e00d      	b.n	800718a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <prvAddNewTaskToReadyList+0xcc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007176:	4b23      	ldr	r3, [pc, #140]	; (8007204 <prvAddNewTaskToReadyList+0xc8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	429a      	cmp	r2, r3
 8007182:	d802      	bhi.n	800718a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007184:	4a1f      	ldr	r2, [pc, #124]	; (8007204 <prvAddNewTaskToReadyList+0xc8>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800718a:	4b20      	ldr	r3, [pc, #128]	; (800720c <prvAddNewTaskToReadyList+0xd0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a1e      	ldr	r2, [pc, #120]	; (800720c <prvAddNewTaskToReadyList+0xd0>)
 8007192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007194:	4b1d      	ldr	r3, [pc, #116]	; (800720c <prvAddNewTaskToReadyList+0xd0>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a0:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <prvAddNewTaskToReadyList+0xd4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d903      	bls.n	80071b0 <prvAddNewTaskToReadyList+0x74>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	4a18      	ldr	r2, [pc, #96]	; (8007210 <prvAddNewTaskToReadyList+0xd4>)
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4a15      	ldr	r2, [pc, #84]	; (8007214 <prvAddNewTaskToReadyList+0xd8>)
 80071be:	441a      	add	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7ff f8d1 	bl	800636e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071cc:	f001 f9ce 	bl	800856c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071d0:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <prvAddNewTaskToReadyList+0xcc>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00e      	beq.n	80071f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <prvAddNewTaskToReadyList+0xc8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d207      	bcs.n	80071f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <prvAddNewTaskToReadyList+0xdc>)
 80071e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200011b4 	.word	0x200011b4
 8007204:	20000ce0 	.word	0x20000ce0
 8007208:	200011c0 	.word	0x200011c0
 800720c:	200011d0 	.word	0x200011d0
 8007210:	200011bc 	.word	0x200011bc
 8007214:	20000ce4 	.word	0x20000ce4
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d017      	beq.n	800725e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <vTaskDelay+0x60>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <vTaskDelay+0x30>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800724c:	f000 f88a 	bl	8007364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fd04 	bl	8007c60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007258:	f000 f892 	bl	8007380 <xTaskResumeAll>
 800725c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d107      	bne.n	8007274 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <vTaskDelay+0x64>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	200011dc 	.word	0x200011dc
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007292:	463a      	mov	r2, r7
 8007294:	1d39      	adds	r1, r7, #4
 8007296:	f107 0308 	add.w	r3, r7, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff f80a 	bl	80062b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	2300      	movs	r3, #0
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	460a      	mov	r2, r1
 80072b2:	4924      	ldr	r1, [pc, #144]	; (8007344 <vTaskStartScheduler+0xc0>)
 80072b4:	4824      	ldr	r0, [pc, #144]	; (8007348 <vTaskStartScheduler+0xc4>)
 80072b6:	f7ff fe01 	bl	8006ebc <xTaskCreateStatic>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4a23      	ldr	r2, [pc, #140]	; (800734c <vTaskStartScheduler+0xc8>)
 80072be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072c0:	4b22      	ldr	r3, [pc, #136]	; (800734c <vTaskStartScheduler+0xc8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072c8:	2301      	movs	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e001      	b.n	80072d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d102      	bne.n	80072de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072d8:	f000 fd16 	bl	8007d08 <xTimerCreateTimerTask>
 80072dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d11b      	bne.n	800731c <vTaskStartScheduler+0x98>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	613b      	str	r3, [r7, #16]
}
 80072f6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <vTaskStartScheduler+0xcc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3354      	adds	r3, #84	; 0x54
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <vTaskStartScheduler+0xd0>)
 8007300:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007302:	4b15      	ldr	r3, [pc, #84]	; (8007358 <vTaskStartScheduler+0xd4>)
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800730a:	4b14      	ldr	r3, [pc, #80]	; (800735c <vTaskStartScheduler+0xd8>)
 800730c:	2201      	movs	r2, #1
 800730e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007310:	4b13      	ldr	r3, [pc, #76]	; (8007360 <vTaskStartScheduler+0xdc>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007316:	f001 f887 	bl	8008428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800731a:	e00e      	b.n	800733a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d10a      	bne.n	800733a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	60fb      	str	r3, [r7, #12]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vTaskStartScheduler+0xb4>
}
 800733a:	bf00      	nop
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	0800bcf8 	.word	0x0800bcf8
 8007348:	0800798d 	.word	0x0800798d
 800734c:	200011d8 	.word	0x200011d8
 8007350:	20000ce0 	.word	0x20000ce0
 8007354:	200000a0 	.word	0x200000a0
 8007358:	200011d4 	.word	0x200011d4
 800735c:	200011c0 	.word	0x200011c0
 8007360:	200011b8 	.word	0x200011b8

08007364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <vTaskSuspendAll+0x18>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a03      	ldr	r2, [pc, #12]	; (800737c <vTaskSuspendAll+0x18>)
 8007370:	6013      	str	r3, [r2, #0]
}
 8007372:	bf00      	nop
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	200011dc 	.word	0x200011dc

08007380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800738e:	4b42      	ldr	r3, [pc, #264]	; (8007498 <xTaskResumeAll+0x118>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xTaskResumeAll+0x2c>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	603b      	str	r3, [r7, #0]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ac:	f001 f8ae 	bl	800850c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073b0:	4b39      	ldr	r3, [pc, #228]	; (8007498 <xTaskResumeAll+0x118>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	4a38      	ldr	r2, [pc, #224]	; (8007498 <xTaskResumeAll+0x118>)
 80073b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ba:	4b37      	ldr	r3, [pc, #220]	; (8007498 <xTaskResumeAll+0x118>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d162      	bne.n	8007488 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073c2:	4b36      	ldr	r3, [pc, #216]	; (800749c <xTaskResumeAll+0x11c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d05e      	beq.n	8007488 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ca:	e02f      	b.n	800742c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073cc:	4b34      	ldr	r3, [pc, #208]	; (80074a0 <xTaskResumeAll+0x120>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3318      	adds	r3, #24
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff f823 	bl	8006424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff f81e 	bl	8006424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ec:	4b2d      	ldr	r3, [pc, #180]	; (80074a4 <xTaskResumeAll+0x124>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <xTaskResumeAll+0x7c>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	4a2a      	ldr	r2, [pc, #168]	; (80074a4 <xTaskResumeAll+0x124>)
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <xTaskResumeAll+0x128>)
 800740a:	441a      	add	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f7fe ffab 	bl	800636e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	4b23      	ldr	r3, [pc, #140]	; (80074ac <xTaskResumeAll+0x12c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007426:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <xTaskResumeAll+0x130>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800742c:	4b1c      	ldr	r3, [pc, #112]	; (80074a0 <xTaskResumeAll+0x120>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1cb      	bne.n	80073cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800743a:	f000 fb61 	bl	8007b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800743e:	4b1d      	ldr	r3, [pc, #116]	; (80074b4 <xTaskResumeAll+0x134>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d010      	beq.n	800746c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800744a:	f000 f845 	bl	80074d8 <xTaskIncrementTick>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007454:	4b16      	ldr	r3, [pc, #88]	; (80074b0 <xTaskResumeAll+0x130>)
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f1      	bne.n	800744a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <xTaskResumeAll+0x134>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800746c:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <xTaskResumeAll+0x130>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007474:	2301      	movs	r3, #1
 8007476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <xTaskResumeAll+0x138>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007488:	f001 f870 	bl	800856c <vPortExitCritical>

	return xAlreadyYielded;
 800748c:	68bb      	ldr	r3, [r7, #8]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200011dc 	.word	0x200011dc
 800749c:	200011b4 	.word	0x200011b4
 80074a0:	20001174 	.word	0x20001174
 80074a4:	200011bc 	.word	0x200011bc
 80074a8:	20000ce4 	.word	0x20000ce4
 80074ac:	20000ce0 	.word	0x20000ce0
 80074b0:	200011c8 	.word	0x200011c8
 80074b4:	200011c4 	.word	0x200011c4
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074c2:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <xTaskGetTickCount+0x18>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074c8:	687b      	ldr	r3, [r7, #4]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr
 80074d4:	200011b8 	.word	0x200011b8

080074d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e2:	4b51      	ldr	r3, [pc, #324]	; (8007628 <xTaskIncrementTick+0x150>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 808e 	bne.w	8007608 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074ec:	4b4f      	ldr	r3, [pc, #316]	; (800762c <xTaskIncrementTick+0x154>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074f4:	4a4d      	ldr	r2, [pc, #308]	; (800762c <xTaskIncrementTick+0x154>)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d120      	bne.n	8007542 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007500:	4b4b      	ldr	r3, [pc, #300]	; (8007630 <xTaskIncrementTick+0x158>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <xTaskIncrementTick+0x48>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	603b      	str	r3, [r7, #0]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <xTaskIncrementTick+0x46>
 8007520:	4b43      	ldr	r3, [pc, #268]	; (8007630 <xTaskIncrementTick+0x158>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	4b43      	ldr	r3, [pc, #268]	; (8007634 <xTaskIncrementTick+0x15c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a41      	ldr	r2, [pc, #260]	; (8007630 <xTaskIncrementTick+0x158>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	4a41      	ldr	r2, [pc, #260]	; (8007634 <xTaskIncrementTick+0x15c>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4b40      	ldr	r3, [pc, #256]	; (8007638 <xTaskIncrementTick+0x160>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	4a3f      	ldr	r2, [pc, #252]	; (8007638 <xTaskIncrementTick+0x160>)
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	f000 fadf 	bl	8007b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007542:	4b3e      	ldr	r3, [pc, #248]	; (800763c <xTaskIncrementTick+0x164>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	429a      	cmp	r2, r3
 800754a:	d34e      	bcc.n	80075ea <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800754c:	4b38      	ldr	r3, [pc, #224]	; (8007630 <xTaskIncrementTick+0x158>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <xTaskIncrementTick+0x82>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <xTaskIncrementTick+0x84>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007560:	4b36      	ldr	r3, [pc, #216]	; (800763c <xTaskIncrementTick+0x164>)
 8007562:	f04f 32ff 	mov.w	r2, #4294967295
 8007566:	601a      	str	r2, [r3, #0]
					break;
 8007568:	e03f      	b.n	80075ea <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <xTaskIncrementTick+0x158>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	429a      	cmp	r2, r3
 8007580:	d203      	bcs.n	800758a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007582:	4a2e      	ldr	r2, [pc, #184]	; (800763c <xTaskIncrementTick+0x164>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6013      	str	r3, [r2, #0]
						break;
 8007588:	e02f      	b.n	80075ea <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	3304      	adds	r3, #4
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe ff48 	bl	8006424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	3318      	adds	r3, #24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe ff3f 	bl	8006424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4b25      	ldr	r3, [pc, #148]	; (8007640 <xTaskIncrementTick+0x168>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <xTaskIncrementTick+0xe2>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4a22      	ldr	r2, [pc, #136]	; (8007640 <xTaskIncrementTick+0x168>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <xTaskIncrementTick+0x16c>)
 80075c8:	441a      	add	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe fecc 	bl	800636e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <xTaskIncrementTick+0x170>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3b3      	bcc.n	800754c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e8:	e7b0      	b.n	800754c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <xTaskIncrementTick+0x170>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4914      	ldr	r1, [pc, #80]	; (8007644 <xTaskIncrementTick+0x16c>)
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d907      	bls.n	8007612 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	e004      	b.n	8007612 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007608:	4b10      	ldr	r3, [pc, #64]	; (800764c <xTaskIncrementTick+0x174>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	4a0f      	ldr	r2, [pc, #60]	; (800764c <xTaskIncrementTick+0x174>)
 8007610:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007612:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <xTaskIncrementTick+0x178>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800761a:	2301      	movs	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	200011dc 	.word	0x200011dc
 800762c:	200011b8 	.word	0x200011b8
 8007630:	2000116c 	.word	0x2000116c
 8007634:	20001170 	.word	0x20001170
 8007638:	200011cc 	.word	0x200011cc
 800763c:	200011d4 	.word	0x200011d4
 8007640:	200011bc 	.word	0x200011bc
 8007644:	20000ce4 	.word	0x20000ce4
 8007648:	20000ce0 	.word	0x20000ce0
 800764c:	200011c4 	.word	0x200011c4
 8007650:	200011c8 	.word	0x200011c8

08007654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800765a:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <vTaskSwitchContext+0xb0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <vTaskSwitchContext+0xb4>)
 8007664:	2201      	movs	r2, #1
 8007666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007668:	e046      	b.n	80076f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800766a:	4b27      	ldr	r3, [pc, #156]	; (8007708 <vTaskSwitchContext+0xb4>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007670:	4b26      	ldr	r3, [pc, #152]	; (800770c <vTaskSwitchContext+0xb8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	e010      	b.n	800769a <vTaskSwitchContext+0x46>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <vTaskSwitchContext+0x40>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	607b      	str	r3, [r7, #4]
}
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <vTaskSwitchContext+0x3e>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3b01      	subs	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	491d      	ldr	r1, [pc, #116]	; (8007710 <vTaskSwitchContext+0xbc>)
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0e4      	beq.n	8007678 <vTaskSwitchContext+0x24>
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4a15      	ldr	r2, [pc, #84]	; (8007710 <vTaskSwitchContext+0xbc>)
 80076ba:	4413      	add	r3, r2
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3308      	adds	r3, #8
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d104      	bne.n	80076de <vTaskSwitchContext+0x8a>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4a0b      	ldr	r2, [pc, #44]	; (8007714 <vTaskSwitchContext+0xc0>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <vTaskSwitchContext+0xb8>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <vTaskSwitchContext+0xc0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3354      	adds	r3, #84	; 0x54
 80076f4:	4a08      	ldr	r2, [pc, #32]	; (8007718 <vTaskSwitchContext+0xc4>)
 80076f6:	6013      	str	r3, [r2, #0]
}
 80076f8:	bf00      	nop
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	200011dc 	.word	0x200011dc
 8007708:	200011c8 	.word	0x200011c8
 800770c:	200011bc 	.word	0x200011bc
 8007710:	20000ce4 	.word	0x20000ce4
 8007714:	20000ce0 	.word	0x20000ce0
 8007718:	200000a0 	.word	0x200000a0

0800771c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60fb      	str	r3, [r7, #12]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007742:	4b07      	ldr	r3, [pc, #28]	; (8007760 <vTaskPlaceOnEventList+0x44>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3318      	adds	r3, #24
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe fe32 	bl	80063b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007750:	2101      	movs	r1, #1
 8007752:	6838      	ldr	r0, [r7, #0]
 8007754:	f000 fa84 	bl	8007c60 <prvAddCurrentTaskToDelayedList>
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000ce0 	.word	0x20000ce0

08007764 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	617b      	str	r3, [r7, #20]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3318      	adds	r3, #24
 8007792:	4619      	mov	r1, r3
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7fe fdea 	bl	800636e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
 80077a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	68b8      	ldr	r0, [r7, #8]
 80077aa:	f000 fa59 	bl	8007c60 <prvAddCurrentTaskToDelayedList>
	}
 80077ae:	bf00      	nop
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000ce0 	.word	0x20000ce0

080077bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	3318      	adds	r3, #24
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fe fe19 	bl	8006424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f2:	4b1e      	ldr	r3, [pc, #120]	; (800786c <xTaskRemoveFromEventList+0xb0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d11d      	bne.n	8007836 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fe10 	bl	8006424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4b19      	ldr	r3, [pc, #100]	; (8007870 <xTaskRemoveFromEventList+0xb4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d903      	bls.n	8007818 <xTaskRemoveFromEventList+0x5c>
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	4a16      	ldr	r2, [pc, #88]	; (8007870 <xTaskRemoveFromEventList+0xb4>)
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a13      	ldr	r2, [pc, #76]	; (8007874 <xTaskRemoveFromEventList+0xb8>)
 8007826:	441a      	add	r2, r3
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fd9d 	bl	800636e <vListInsertEnd>
 8007834:	e005      	b.n	8007842 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3318      	adds	r3, #24
 800783a:	4619      	mov	r1, r3
 800783c:	480e      	ldr	r0, [pc, #56]	; (8007878 <xTaskRemoveFromEventList+0xbc>)
 800783e:	f7fe fd96 	bl	800636e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <xTaskRemoveFromEventList+0xc0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	429a      	cmp	r2, r3
 800784e:	d905      	bls.n	800785c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007850:	2301      	movs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <xTaskRemoveFromEventList+0xc4>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e001      	b.n	8007860 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200011dc 	.word	0x200011dc
 8007870:	200011bc 	.word	0x200011bc
 8007874:	20000ce4 	.word	0x20000ce4
 8007878:	20001174 	.word	0x20001174
 800787c:	20000ce0 	.word	0x20000ce0
 8007880:	200011c8 	.word	0x200011c8

08007884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <vTaskInternalSetTimeOutState+0x24>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <vTaskInternalSetTimeOutState+0x28>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	605a      	str	r2, [r3, #4]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	200011cc 	.word	0x200011cc
 80078ac:	200011b8 	.word	0x200011b8

080078b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80078f2:	f000 fe0b 	bl	800850c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078f6:	4b1d      	ldr	r3, [pc, #116]	; (800796c <xTaskCheckForTimeOut+0xbc>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d102      	bne.n	8007916 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]
 8007914:	e023      	b.n	800795e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b15      	ldr	r3, [pc, #84]	; (8007970 <xTaskCheckForTimeOut+0xc0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d007      	beq.n	8007932 <xTaskCheckForTimeOut+0x82>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	429a      	cmp	r2, r3
 800792a:	d302      	bcc.n	8007932 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e015      	b.n	800795e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	429a      	cmp	r2, r3
 800793a:	d20b      	bcs.n	8007954 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	1ad2      	subs	r2, r2, r3
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ff9b 	bl	8007884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	e004      	b.n	800795e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800795a:	2301      	movs	r3, #1
 800795c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800795e:	f000 fe05 	bl	800856c <vPortExitCritical>

	return xReturn;
 8007962:	69fb      	ldr	r3, [r7, #28]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	200011b8 	.word	0x200011b8
 8007970:	200011cc 	.word	0x200011cc

08007974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <vTaskMissedYield+0x14>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
}
 800797e:	bf00      	nop
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	200011c8 	.word	0x200011c8

0800798c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007994:	f000 f852 	bl	8007a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <prvIdleTask+0x28>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d9f9      	bls.n	8007994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079a0:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <prvIdleTask+0x2c>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079b0:	e7f0      	b.n	8007994 <prvIdleTask+0x8>
 80079b2:	bf00      	nop
 80079b4:	20000ce4 	.word	0x20000ce4
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	e00c      	b.n	80079e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <prvInitialiseTaskLists+0x60>)
 80079d4:	4413      	add	r3, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fc9e 	bl	8006318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3301      	adds	r3, #1
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b37      	cmp	r3, #55	; 0x37
 80079e6:	d9ef      	bls.n	80079c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079e8:	480d      	ldr	r0, [pc, #52]	; (8007a20 <prvInitialiseTaskLists+0x64>)
 80079ea:	f7fe fc95 	bl	8006318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ee:	480d      	ldr	r0, [pc, #52]	; (8007a24 <prvInitialiseTaskLists+0x68>)
 80079f0:	f7fe fc92 	bl	8006318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079f4:	480c      	ldr	r0, [pc, #48]	; (8007a28 <prvInitialiseTaskLists+0x6c>)
 80079f6:	f7fe fc8f 	bl	8006318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079fa:	480c      	ldr	r0, [pc, #48]	; (8007a2c <prvInitialiseTaskLists+0x70>)
 80079fc:	f7fe fc8c 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a00:	480b      	ldr	r0, [pc, #44]	; (8007a30 <prvInitialiseTaskLists+0x74>)
 8007a02:	f7fe fc89 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <prvInitialiseTaskLists+0x78>)
 8007a08:	4a05      	ldr	r2, [pc, #20]	; (8007a20 <prvInitialiseTaskLists+0x64>)
 8007a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <prvInitialiseTaskLists+0x7c>)
 8007a0e:	4a05      	ldr	r2, [pc, #20]	; (8007a24 <prvInitialiseTaskLists+0x68>)
 8007a10:	601a      	str	r2, [r3, #0]
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000ce4 	.word	0x20000ce4
 8007a20:	20001144 	.word	0x20001144
 8007a24:	20001158 	.word	0x20001158
 8007a28:	20001174 	.word	0x20001174
 8007a2c:	20001188 	.word	0x20001188
 8007a30:	200011a0 	.word	0x200011a0
 8007a34:	2000116c 	.word	0x2000116c
 8007a38:	20001170 	.word	0x20001170

08007a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a42:	e019      	b.n	8007a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a44:	f000 fd62 	bl	800850c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007a48:	4b10      	ldr	r3, [pc, #64]	; (8007a8c <prvCheckTasksWaitingTermination+0x50>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fce5 	bl	8006424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <prvCheckTasksWaitingTermination+0x54>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	4a0b      	ldr	r2, [pc, #44]	; (8007a90 <prvCheckTasksWaitingTermination+0x54>)
 8007a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <prvCheckTasksWaitingTermination+0x58>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	4a0a      	ldr	r2, [pc, #40]	; (8007a94 <prvCheckTasksWaitingTermination+0x58>)
 8007a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a6e:	f000 fd7d 	bl	800856c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f810 	bl	8007a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <prvCheckTasksWaitingTermination+0x58>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e1      	bne.n	8007a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20001188 	.word	0x20001188
 8007a90:	200011b4 	.word	0x200011b4
 8007a94:	2000119c 	.word	0x2000119c

08007a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3354      	adds	r3, #84	; 0x54
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 f8bd 	bl	8009c24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d108      	bne.n	8007ac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 feeb 	bl	8008894 <vPortFree>
				vPortFree( pxTCB );
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fee8 	bl	8008894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ac4:	e018      	b.n	8007af8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d103      	bne.n	8007ad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fedf 	bl	8008894 <vPortFree>
	}
 8007ad6:	e00f      	b.n	8007af8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d00a      	beq.n	8007af8 <prvDeleteTCB+0x60>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60fb      	str	r3, [r7, #12]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <prvDeleteTCB+0x5e>
	}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b06:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <prvResetNextTaskUnblockTime+0x40>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <prvResetNextTaskUnblockTime+0x14>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <prvResetNextTaskUnblockTime+0x16>
 8007b14:	2300      	movs	r3, #0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <prvResetNextTaskUnblockTime+0x44>)
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b22:	e008      	b.n	8007b36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <prvResetNextTaskUnblockTime+0x40>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <prvResetNextTaskUnblockTime+0x44>)
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr
 8007b40:	2000116c 	.word	0x2000116c
 8007b44:	200011d4 	.word	0x200011d4

08007b48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <xTaskGetSchedulerState+0x34>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b56:	2301      	movs	r3, #1
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	e008      	b.n	8007b6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5c:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <xTaskGetSchedulerState+0x38>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b64:	2302      	movs	r3, #2
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	e001      	b.n	8007b6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b6e:	687b      	ldr	r3, [r7, #4]
	}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	200011c0 	.word	0x200011c0
 8007b80:	200011dc 	.word	0x200011dc

08007b84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d056      	beq.n	8007c48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b9a:	4b2e      	ldr	r3, [pc, #184]	; (8007c54 <xTaskPriorityDisinherit+0xd0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d00a      	beq.n	8007bba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	60fb      	str	r3, [r7, #12]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60bb      	str	r3, [r7, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d02c      	beq.n	8007c48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d128      	bne.n	8007c48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fc12 	bl	8006424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <xTaskPriorityDisinherit+0xd4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d903      	bls.n	8007c28 <xTaskPriorityDisinherit+0xa4>
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a0c      	ldr	r2, [pc, #48]	; (8007c58 <xTaskPriorityDisinherit+0xd4>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <xTaskPriorityDisinherit+0xd8>)
 8007c36:	441a      	add	r2, r3
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f7fe fb95 	bl	800636e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c48:	697b      	ldr	r3, [r7, #20]
	}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000ce0 	.word	0x20000ce0
 8007c58:	200011bc 	.word	0x200011bc
 8007c5c:	20000ce4 	.word	0x20000ce4

08007c60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c6a:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c70:	4b20      	ldr	r3, [pc, #128]	; (8007cf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fbd4 	bl	8006424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d10a      	bne.n	8007c9a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c8a:	4b1a      	ldr	r3, [pc, #104]	; (8007cf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4619      	mov	r1, r3
 8007c92:	4819      	ldr	r0, [pc, #100]	; (8007cf8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c94:	f7fe fb6b 	bl	800636e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c98:	e026      	b.n	8007ce8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ca2:	4b14      	ldr	r3, [pc, #80]	; (8007cf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d209      	bcs.n	8007cc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	f7fe fb78 	bl	80063b4 <vListInsert>
}
 8007cc4:	e010      	b.n	8007ce8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f7fe fb6e 	bl	80063b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cd8:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d202      	bcs.n	8007ce8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ce2:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6013      	str	r3, [r2, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	200011b8 	.word	0x200011b8
 8007cf4:	20000ce0 	.word	0x20000ce0
 8007cf8:	200011a0 	.word	0x200011a0
 8007cfc:	20001170 	.word	0x20001170
 8007d00:	2000116c 	.word	0x2000116c
 8007d04:	200011d4 	.word	0x200011d4

08007d08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	; 0x28
 8007d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d12:	f000 facb 	bl	80082ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d16:	4b1c      	ldr	r3, [pc, #112]	; (8007d88 <xTimerCreateTimerTask+0x80>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d021      	beq.n	8007d62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d26:	1d3a      	adds	r2, r7, #4
 8007d28:	f107 0108 	add.w	r1, r7, #8
 8007d2c:	f107 030c 	add.w	r3, r7, #12
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fad7 	bl	80062e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	9202      	str	r2, [sp, #8]
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	2302      	movs	r3, #2
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	460a      	mov	r2, r1
 8007d48:	4910      	ldr	r1, [pc, #64]	; (8007d8c <xTimerCreateTimerTask+0x84>)
 8007d4a:	4811      	ldr	r0, [pc, #68]	; (8007d90 <xTimerCreateTimerTask+0x88>)
 8007d4c:	f7ff f8b6 	bl	8006ebc <xTaskCreateStatic>
 8007d50:	4603      	mov	r3, r0
 8007d52:	4a10      	ldr	r2, [pc, #64]	; (8007d94 <xTimerCreateTimerTask+0x8c>)
 8007d54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <xTimerCreateTimerTask+0x8c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	613b      	str	r3, [r7, #16]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d7e:	697b      	ldr	r3, [r7, #20]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20001210 	.word	0x20001210
 8007d8c:	0800bd00 	.word	0x0800bd00
 8007d90:	08007eb5 	.word	0x08007eb5
 8007d94:	20001214 	.word	0x20001214

08007d98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	; 0x28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	623b      	str	r3, [r7, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <xTimerGenericCommand+0x98>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d02a      	beq.n	8007e24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b05      	cmp	r3, #5
 8007dde:	dc18      	bgt.n	8007e12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007de0:	f7ff feb2 	bl	8007b48 <xTaskGetSchedulerState>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d109      	bne.n	8007dfe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007dea:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <xTimerGenericCommand+0x98>)
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f107 0110 	add.w	r1, r7, #16
 8007df2:	2300      	movs	r3, #0
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	f7fe fc7f 	bl	80066f8 <xQueueGenericSend>
 8007dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8007dfc:	e012      	b.n	8007e24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <xTimerGenericCommand+0x98>)
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f107 0110 	add.w	r1, r7, #16
 8007e06:	2300      	movs	r3, #0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f7fe fc75 	bl	80066f8 <xQueueGenericSend>
 8007e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007e10:	e008      	b.n	8007e24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <xTimerGenericCommand+0x98>)
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	f107 0110 	add.w	r1, r7, #16
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	f7fe fd69 	bl	80068f4 <xQueueGenericSendFromISR>
 8007e22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	; 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20001210 	.word	0x20001210

08007e34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e3e:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <prvProcessExpiredTimer+0x7c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fae9 	bl	8006424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d122      	bne.n	8007ea0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	18d1      	adds	r1, r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	6978      	ldr	r0, [r7, #20]
 8007e68:	f000 f8c8 	bl	8007ffc <prvInsertTimerInActiveList>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d016      	beq.n	8007ea0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e72:	2300      	movs	r3, #0
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6978      	ldr	r0, [r7, #20]
 8007e7e:	f7ff ff8b 	bl	8007d98 <xTimerGenericCommand>
 8007e82:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	60fb      	str	r3, [r7, #12]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	6978      	ldr	r0, [r7, #20]
 8007ea6:	4798      	blx	r3
}
 8007ea8:	bf00      	nop
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20001208 	.word	0x20001208

08007eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ebc:	f107 0308 	add.w	r3, r7, #8
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f857 	bl	8007f74 <prvGetNextExpireTime>
 8007ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f803 	bl	8007ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ed2:	f000 f8d5 	bl	8008080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ed6:	e7f1      	b.n	8007ebc <prvTimerTask+0x8>

08007ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ee2:	f7ff fa3f 	bl	8007364 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ee6:	f107 0308 	add.w	r3, r7, #8
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 f866 	bl	8007fbc <prvSampleTimeNow>
 8007ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d130      	bne.n	8007f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <prvProcessTimerOrBlockTask+0x3c>
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d806      	bhi.n	8007f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f06:	f7ff fa3b 	bl	8007380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ff91 	bl	8007e34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f12:	e024      	b.n	8007f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <prvProcessTimerOrBlockTask+0x90>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bf0c      	ite	eq
 8007f24:	2301      	moveq	r3, #1
 8007f26:	2300      	movne	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f2c:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <prvProcessTimerOrBlockTask+0x94>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f7fe ff8b 	bl	8006e54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f3e:	f7ff fa1f 	bl	8007380 <xTaskResumeAll>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <prvProcessTimerOrBlockTask+0x98>)
 8007f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	f3bf 8f6f 	isb	sy
}
 8007f58:	e001      	b.n	8007f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f5a:	f7ff fa11 	bl	8007380 <xTaskResumeAll>
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	2000120c 	.word	0x2000120c
 8007f6c:	20001210 	.word	0x20001210
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <prvGetNextExpireTime+0x44>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bf0c      	ite	eq
 8007f86:	2301      	moveq	r3, #1
 8007f88:	2300      	movne	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <prvGetNextExpireTime+0x44>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e001      	b.n	8007faa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20001208 	.word	0x20001208

08007fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fc4:	f7ff fa7a 	bl	80074bc <xTaskGetTickCount>
 8007fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fca:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <prvSampleTimeNow+0x3c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d205      	bcs.n	8007fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fd4:	f000 f908 	bl	80081e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fe6:	4a04      	ldr	r2, [pc, #16]	; (8007ff8 <prvSampleTimeNow+0x3c>)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fec:	68fb      	ldr	r3, [r7, #12]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20001218 	.word	0x20001218

08007ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d812      	bhi.n	8008048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	1ad2      	subs	r2, r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	429a      	cmp	r2, r3
 800802e:	d302      	bcc.n	8008036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e01b      	b.n	800806e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008036:	4b10      	ldr	r3, [pc, #64]	; (8008078 <prvInsertTimerInActiveList+0x7c>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7fe f9b7 	bl	80063b4 <vListInsert>
 8008046:	e012      	b.n	800806e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d206      	bcs.n	800805e <prvInsertTimerInActiveList+0x62>
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	d302      	bcc.n	800805e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008058:	2301      	movs	r3, #1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e007      	b.n	800806e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800805e:	4b07      	ldr	r3, [pc, #28]	; (800807c <prvInsertTimerInActiveList+0x80>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fe f9a3 	bl	80063b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800806e:	697b      	ldr	r3, [r7, #20]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	2000120c 	.word	0x2000120c
 800807c:	20001208 	.word	0x20001208

08008080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b08e      	sub	sp, #56	; 0x38
 8008084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008086:	e09d      	b.n	80081c4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	da18      	bge.n	80080c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800808e:	1d3b      	adds	r3, r7, #4
 8008090:	3304      	adds	r3, #4
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	61fb      	str	r3, [r7, #28]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b6:	6850      	ldr	r0, [r2, #4]
 80080b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ba:	6892      	ldr	r2, [r2, #8]
 80080bc:	4611      	mov	r1, r2
 80080be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	db7d      	blt.n	80081c2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe f9a4 	bl	8006424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080dc:	463b      	mov	r3, r7
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff ff6c 	bl	8007fbc <prvSampleTimeNow>
 80080e4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b09      	cmp	r3, #9
 80080ea:	d86b      	bhi.n	80081c4 <prvProcessReceivedCommands+0x144>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <prvProcessReceivedCommands+0x74>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	080081c5 	.word	0x080081c5
 8008104:	08008179 	.word	0x08008179
 8008108:	080081b1 	.word	0x080081b1
 800810c:	0800811d 	.word	0x0800811d
 8008110:	0800811d 	.word	0x0800811d
 8008114:	080081c5 	.word	0x080081c5
 8008118:	08008179 	.word	0x08008179
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	18d1      	adds	r1, r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f7ff ff67 	bl	8007ffc <prvInsertTimerInActiveList>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d047      	beq.n	80081c4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800813a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d13f      	bne.n	80081c4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	441a      	add	r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	2100      	movs	r1, #0
 8008154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008156:	f7ff fe1f 	bl	8007d98 <xTimerGenericCommand>
 800815a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d130      	bne.n	80081c4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	61bb      	str	r3, [r7, #24]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	617b      	str	r3, [r7, #20]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	18d1      	adds	r1, r2, r3
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081aa:	f7ff ff27 	bl	8007ffc <prvInsertTimerInActiveList>
					break;
 80081ae:	e009      	b.n	80081c4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d104      	bne.n	80081c4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80081ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081bc:	f000 fb6a 	bl	8008894 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081c0:	e000      	b.n	80081c4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80081c2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081c4:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <prvProcessReceivedCommands+0x164>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	1d39      	adds	r1, r7, #4
 80081ca:	2200      	movs	r2, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fc29 	bl	8006a24 <xQueueReceive>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f47f af57 	bne.w	8008088 <prvProcessReceivedCommands+0x8>
	}
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	3730      	adds	r7, #48	; 0x30
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20001210 	.word	0x20001210

080081e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ee:	e045      	b.n	800827c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081f0:	4b2c      	ldr	r3, [pc, #176]	; (80082a4 <prvSwitchTimerLists+0xbc>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081fa:	4b2a      	ldr	r3, [pc, #168]	; (80082a4 <prvSwitchTimerLists+0xbc>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe f90b 	bl	8006424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d12e      	bne.n	800827c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4413      	add	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	d90e      	bls.n	800824e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800823c:	4b19      	ldr	r3, [pc, #100]	; (80082a4 <prvSwitchTimerLists+0xbc>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fe f8b4 	bl	80063b4 <vListInsert>
 800824c:	e016      	b.n	800827c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800824e:	2300      	movs	r3, #0
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	2100      	movs	r1, #0
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff fd9d 	bl	8007d98 <xTimerGenericCommand>
 800825e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	603b      	str	r3, [r7, #0]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <prvSwitchTimerLists+0xbc>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1b4      	bne.n	80081f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008286:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <prvSwitchTimerLists+0xbc>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <prvSwitchTimerLists+0xbc>)
 8008292:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008294:	4a04      	ldr	r2, [pc, #16]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6013      	str	r3, [r2, #0]
}
 800829a:	bf00      	nop
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20001208 	.word	0x20001208
 80082a8:	2000120c 	.word	0x2000120c

080082ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082b2:	f000 f92b 	bl	800850c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082b6:	4b15      	ldr	r3, [pc, #84]	; (800830c <prvCheckForValidListAndQueue+0x60>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d120      	bne.n	8008300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082be:	4814      	ldr	r0, [pc, #80]	; (8008310 <prvCheckForValidListAndQueue+0x64>)
 80082c0:	f7fe f82a 	bl	8006318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082c4:	4813      	ldr	r0, [pc, #76]	; (8008314 <prvCheckForValidListAndQueue+0x68>)
 80082c6:	f7fe f827 	bl	8006318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082ca:	4b13      	ldr	r3, [pc, #76]	; (8008318 <prvCheckForValidListAndQueue+0x6c>)
 80082cc:	4a10      	ldr	r2, [pc, #64]	; (8008310 <prvCheckForValidListAndQueue+0x64>)
 80082ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082d0:	4b12      	ldr	r3, [pc, #72]	; (800831c <prvCheckForValidListAndQueue+0x70>)
 80082d2:	4a10      	ldr	r2, [pc, #64]	; (8008314 <prvCheckForValidListAndQueue+0x68>)
 80082d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082d6:	2300      	movs	r3, #0
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	4b11      	ldr	r3, [pc, #68]	; (8008320 <prvCheckForValidListAndQueue+0x74>)
 80082dc:	4a11      	ldr	r2, [pc, #68]	; (8008324 <prvCheckForValidListAndQueue+0x78>)
 80082de:	2110      	movs	r1, #16
 80082e0:	200a      	movs	r0, #10
 80082e2:	f7fe f931 	bl	8006548 <xQueueGenericCreateStatic>
 80082e6:	4603      	mov	r3, r0
 80082e8:	4a08      	ldr	r2, [pc, #32]	; (800830c <prvCheckForValidListAndQueue+0x60>)
 80082ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082ec:	4b07      	ldr	r3, [pc, #28]	; (800830c <prvCheckForValidListAndQueue+0x60>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <prvCheckForValidListAndQueue+0x60>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	490b      	ldr	r1, [pc, #44]	; (8008328 <prvCheckForValidListAndQueue+0x7c>)
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fd82 	bl	8006e04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008300:	f000 f934 	bl	800856c <vPortExitCritical>
}
 8008304:	bf00      	nop
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20001210 	.word	0x20001210
 8008310:	200011e0 	.word	0x200011e0
 8008314:	200011f4 	.word	0x200011f4
 8008318:	20001208 	.word	0x20001208
 800831c:	2000120c 	.word	0x2000120c
 8008320:	200012bc 	.word	0x200012bc
 8008324:	2000121c 	.word	0x2000121c
 8008328:	0800bd08 	.word	0x0800bd08

0800832c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3b04      	subs	r3, #4
 800833c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3b04      	subs	r3, #4
 800834a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3b04      	subs	r3, #4
 800835a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800835c:	4a08      	ldr	r2, [pc, #32]	; (8008380 <pxPortInitialiseStack+0x54>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3b14      	subs	r3, #20
 8008366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3b20      	subs	r3, #32
 8008372:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008374:	68fb      	ldr	r3, [r7, #12]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr
 8008380:	08008385 	.word	0x08008385

08008384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <prvTaskExitError+0x54>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008396:	d00a      	beq.n	80083ae <prvTaskExitError+0x2a>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60fb      	str	r3, [r7, #12]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <prvTaskExitError+0x28>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60bb      	str	r3, [r7, #8]
}
 80083c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083c2:	bf00      	nop
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0fc      	beq.n	80083c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	2000009c 	.word	0x2000009c
 80083dc:	00000000 	.word	0x00000000

080083e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <pxCurrentTCBConst2>)
 80083e2:	6819      	ldr	r1, [r3, #0]
 80083e4:	6808      	ldr	r0, [r1, #0]
 80083e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083ea:	f380 8809 	msr	PSP, r0
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f380 8811 	msr	BASEPRI, r0
 80083fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80083fe:	4770      	bx	lr

08008400 <pxCurrentTCBConst2>:
 8008400:	20000ce0 	.word	0x20000ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008408:	4806      	ldr	r0, [pc, #24]	; (8008424 <prvPortStartFirstTask+0x1c>)
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	6800      	ldr	r0, [r0, #0]
 800840e:	f380 8808 	msr	MSP, r0
 8008412:	b662      	cpsie	i
 8008414:	b661      	cpsie	f
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	df00      	svc	0
 8008420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008422:	bf00      	nop
 8008424:	e000ed08 	.word	0xe000ed08

08008428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800842e:	4b32      	ldr	r3, [pc, #200]	; (80084f8 <xPortStartScheduler+0xd0>)
 8008430:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	22ff      	movs	r2, #255	; 0xff
 800843e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008450:	b2da      	uxtb	r2, r3
 8008452:	4b2a      	ldr	r3, [pc, #168]	; (80084fc <xPortStartScheduler+0xd4>)
 8008454:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008456:	4b2a      	ldr	r3, [pc, #168]	; (8008500 <xPortStartScheduler+0xd8>)
 8008458:	2207      	movs	r2, #7
 800845a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800845c:	e009      	b.n	8008472 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800845e:	4b28      	ldr	r3, [pc, #160]	; (8008500 <xPortStartScheduler+0xd8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3b01      	subs	r3, #1
 8008464:	4a26      	ldr	r2, [pc, #152]	; (8008500 <xPortStartScheduler+0xd8>)
 8008466:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	b2db      	uxtb	r3, r3
 8008470:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d0ef      	beq.n	800845e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800847e:	4b20      	ldr	r3, [pc, #128]	; (8008500 <xPortStartScheduler+0xd8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f1c3 0307 	rsb	r3, r3, #7
 8008486:	2b04      	cmp	r3, #4
 8008488:	d00a      	beq.n	80084a0 <xPortStartScheduler+0x78>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	60bb      	str	r3, [r7, #8]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <xPortStartScheduler+0xd8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	4a16      	ldr	r2, [pc, #88]	; (8008500 <xPortStartScheduler+0xd8>)
 80084a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <xPortStartScheduler+0xd8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084b2:	4a13      	ldr	r2, [pc, #76]	; (8008500 <xPortStartScheduler+0xd8>)
 80084b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084be:	4b11      	ldr	r3, [pc, #68]	; (8008504 <xPortStartScheduler+0xdc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a10      	ldr	r2, [pc, #64]	; (8008504 <xPortStartScheduler+0xdc>)
 80084c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <xPortStartScheduler+0xdc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a0d      	ldr	r2, [pc, #52]	; (8008504 <xPortStartScheduler+0xdc>)
 80084d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084d6:	f000 f8b9 	bl	800864c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084da:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <xPortStartScheduler+0xe0>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084e0:	f7ff ff92 	bl	8008408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084e4:	f7ff f8b6 	bl	8007654 <vTaskSwitchContext>
	prvTaskExitError();
 80084e8:	f7ff ff4c 	bl	8008384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	e000e400 	.word	0xe000e400
 80084fc:	2000130c 	.word	0x2000130c
 8008500:	20001310 	.word	0x20001310
 8008504:	e000ed20 	.word	0xe000ed20
 8008508:	2000009c 	.word	0x2000009c

0800850c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	607b      	str	r3, [r7, #4]
}
 8008524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <vPortEnterCritical+0x58>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	4a0d      	ldr	r2, [pc, #52]	; (8008564 <vPortEnterCritical+0x58>)
 800852e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <vPortEnterCritical+0x58>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d10f      	bne.n	8008558 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <vPortEnterCritical+0x5c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <vPortEnterCritical+0x4c>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	603b      	str	r3, [r7, #0]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <vPortEnterCritical+0x4a>
	}
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	2000009c 	.word	0x2000009c
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <vPortExitCritical+0x4c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <vPortExitCritical+0x24>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <vPortExitCritical+0x4c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3b01      	subs	r3, #1
 8008596:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <vPortExitCritical+0x4c>)
 8008598:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <vPortExitCritical+0x4c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <vPortExitCritical+0x42>
 80085a2:	2300      	movs	r3, #0
 80085a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	f383 8811 	msr	BASEPRI, r3
}
 80085ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr
 80085b8:	2000009c 	.word	0x2000009c
 80085bc:	00000000 	.word	0x00000000

080085c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085c0:	f3ef 8009 	mrs	r0, PSP
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <pxCurrentTCBConst>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085d0:	6010      	str	r0, [r2, #0]
 80085d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80085d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085da:	f380 8811 	msr	BASEPRI, r0
 80085de:	f7ff f839 	bl	8007654 <vTaskSwitchContext>
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8811 	msr	BASEPRI, r0
 80085ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	6808      	ldr	r0, [r1, #0]
 80085f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085f6:	f380 8809 	msr	PSP, r0
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	4770      	bx	lr

08008600 <pxCurrentTCBConst>:
 8008600:	20000ce0 	.word	0x20000ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008622:	f7fe ff59 	bl	80074d8 <xTaskIncrementTick>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <SysTick_Handler+0x40>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	f383 8811 	msr	BASEPRI, r3
}
 800863e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	e000ed04 	.word	0xe000ed04

0800864c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <vPortSetupTimerInterrupt+0x30>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008656:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800865c:	4b09      	ldr	r3, [pc, #36]	; (8008684 <vPortSetupTimerInterrupt+0x38>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a09      	ldr	r2, [pc, #36]	; (8008688 <vPortSetupTimerInterrupt+0x3c>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	099b      	lsrs	r3, r3, #6
 8008668:	4a08      	ldr	r2, [pc, #32]	; (800868c <vPortSetupTimerInterrupt+0x40>)
 800866a:	3b01      	subs	r3, #1
 800866c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <vPortSetupTimerInterrupt+0x30>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	e000e010 	.word	0xe000e010
 8008680:	e000e018 	.word	0xe000e018
 8008684:	20000090 	.word	0x20000090
 8008688:	10624dd3 	.word	0x10624dd3
 800868c:	e000e014 	.word	0xe000e014

08008690 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008696:	f3ef 8305 	mrs	r3, IPSR
 800869a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b0f      	cmp	r3, #15
 80086a0:	d914      	bls.n	80086cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086a2:	4a16      	ldr	r2, [pc, #88]	; (80086fc <vPortValidateInterruptPriority+0x6c>)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086ac:	4b14      	ldr	r3, [pc, #80]	; (8008700 <vPortValidateInterruptPriority+0x70>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	7afa      	ldrb	r2, [r7, #11]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d20a      	bcs.n	80086cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	607b      	str	r3, [r7, #4]
}
 80086c8:	bf00      	nop
 80086ca:	e7fe      	b.n	80086ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <vPortValidateInterruptPriority+0x74>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086d4:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <vPortValidateInterruptPriority+0x78>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d90a      	bls.n	80086f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	603b      	str	r3, [r7, #0]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vPortValidateInterruptPriority+0x60>
	}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr
 80086fc:	e000e3f0 	.word	0xe000e3f0
 8008700:	2000130c 	.word	0x2000130c
 8008704:	e000ed0c 	.word	0xe000ed0c
 8008708:	20001310 	.word	0x20001310

0800870c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008718:	f7fe fe24 	bl	8007364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800871c:	4b58      	ldr	r3, [pc, #352]	; (8008880 <pvPortMalloc+0x174>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008724:	f000 f910 	bl	8008948 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008728:	4b56      	ldr	r3, [pc, #344]	; (8008884 <pvPortMalloc+0x178>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4013      	ands	r3, r2
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 808e 	bne.w	8008852 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01d      	beq.n	8008778 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800873c:	2208      	movs	r2, #8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d014      	beq.n	8008778 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f023 0307 	bic.w	r3, r3, #7
 8008754:	3308      	adds	r3, #8
 8008756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <pvPortMalloc+0x6c>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	617b      	str	r3, [r7, #20]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d069      	beq.n	8008852 <pvPortMalloc+0x146>
 800877e:	4b42      	ldr	r3, [pc, #264]	; (8008888 <pvPortMalloc+0x17c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d864      	bhi.n	8008852 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008788:	4b40      	ldr	r3, [pc, #256]	; (800888c <pvPortMalloc+0x180>)
 800878a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800878c:	4b3f      	ldr	r3, [pc, #252]	; (800888c <pvPortMalloc+0x180>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008792:	e004      	b.n	800879e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d903      	bls.n	80087b0 <pvPortMalloc+0xa4>
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1f1      	bne.n	8008794 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087b0:	4b33      	ldr	r3, [pc, #204]	; (8008880 <pvPortMalloc+0x174>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d04b      	beq.n	8008852 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2208      	movs	r2, #8
 80087c0:	4413      	add	r3, r2
 80087c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	2308      	movs	r3, #8
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	429a      	cmp	r2, r3
 80087da:	d91f      	bls.n	800881c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <pvPortMalloc+0xf8>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	613b      	str	r3, [r7, #16]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008816:	69b8      	ldr	r0, [r7, #24]
 8008818:	f000 f8f8 	bl	8008a0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800881c:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <pvPortMalloc+0x17c>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	4a18      	ldr	r2, [pc, #96]	; (8008888 <pvPortMalloc+0x17c>)
 8008828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800882a:	4b17      	ldr	r3, [pc, #92]	; (8008888 <pvPortMalloc+0x17c>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	4b18      	ldr	r3, [pc, #96]	; (8008890 <pvPortMalloc+0x184>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d203      	bcs.n	800883e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <pvPortMalloc+0x17c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <pvPortMalloc+0x184>)
 800883c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <pvPortMalloc+0x178>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	431a      	orrs	r2, r3
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008852:	f7fe fd95 	bl	8007380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <pvPortMalloc+0x16a>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60fb      	str	r3, [r7, #12]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <pvPortMalloc+0x168>
	return pvReturn;
 8008876:	69fb      	ldr	r3, [r7, #28]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3728      	adds	r7, #40	; 0x28
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20001f1c 	.word	0x20001f1c
 8008884:	20001f28 	.word	0x20001f28
 8008888:	20001f20 	.word	0x20001f20
 800888c:	20001f14 	.word	0x20001f14
 8008890:	20001f24 	.word	0x20001f24

08008894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d048      	beq.n	8008938 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088a6:	2308      	movs	r3, #8
 80088a8:	425b      	negs	r3, r3
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4413      	add	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	4b21      	ldr	r3, [pc, #132]	; (8008940 <vPortFree+0xac>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4013      	ands	r3, r2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <vPortFree+0x44>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <vPortFree+0x62>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60bb      	str	r3, [r7, #8]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	4b11      	ldr	r3, [pc, #68]	; (8008940 <vPortFree+0xac>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d019      	beq.n	8008938 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d115      	bne.n	8008938 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <vPortFree+0xac>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	43db      	mvns	r3, r3
 8008916:	401a      	ands	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800891c:	f7fe fd22 	bl	8007364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <vPortFree+0xb0>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4413      	add	r3, r2
 800892a:	4a06      	ldr	r2, [pc, #24]	; (8008944 <vPortFree+0xb0>)
 800892c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800892e:	6938      	ldr	r0, [r7, #16]
 8008930:	f000 f86c 	bl	8008a0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008934:	f7fe fd24 	bl	8007380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008938:	bf00      	nop
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	20001f28 	.word	0x20001f28
 8008944:	20001f20 	.word	0x20001f20

08008948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800894e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008952:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008954:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <prvHeapInit+0xac>)
 8008956:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00c      	beq.n	800897c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3307      	adds	r3, #7
 8008966:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <prvHeapInit+0xac>)
 8008978:	4413      	add	r3, r2
 800897a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008980:	4a1d      	ldr	r2, [pc, #116]	; (80089f8 <prvHeapInit+0xb0>)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008986:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <prvHeapInit+0xb0>)
 8008988:	2200      	movs	r2, #0
 800898a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	4413      	add	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008994:	2208      	movs	r2, #8
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0307 	bic.w	r3, r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a15      	ldr	r2, [pc, #84]	; (80089fc <prvHeapInit+0xb4>)
 80089a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <prvHeapInit+0xb4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2200      	movs	r2, #0
 80089b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089b2:	4b12      	ldr	r3, [pc, #72]	; (80089fc <prvHeapInit+0xb4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	1ad2      	subs	r2, r2, r3
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089c8:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <prvHeapInit+0xb4>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <prvHeapInit+0xb8>)
 80089d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <prvHeapInit+0xbc>)
 80089de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <prvHeapInit+0xc0>)
 80089e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089e6:	601a      	str	r2, [r3, #0]
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20001314 	.word	0x20001314
 80089f8:	20001f14 	.word	0x20001f14
 80089fc:	20001f1c 	.word	0x20001f1c
 8008a00:	20001f24 	.word	0x20001f24
 8008a04:	20001f20 	.word	0x20001f20
 8008a08:	20001f28 	.word	0x20001f28

08008a0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a14:	4b27      	ldr	r3, [pc, #156]	; (8008ab4 <prvInsertBlockIntoFreeList+0xa8>)
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	e002      	b.n	8008a20 <prvInsertBlockIntoFreeList+0x14>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d8f7      	bhi.n	8008a1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d108      	bne.n	8008a4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	441a      	add	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	441a      	add	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d118      	bne.n	8008a94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <prvInsertBlockIntoFreeList+0xac>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d00d      	beq.n	8008a8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	441a      	add	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	e008      	b.n	8008a9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a8a:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <prvInsertBlockIntoFreeList+0xac>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e003      	b.n	8008a9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d002      	beq.n	8008aaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr
 8008ab4:	20001f14 	.word	0x20001f14
 8008ab8:	20001f1c 	.word	0x20001f1c

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	; (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	200000a0 	.word	0x200000a0

08008ac8 <__sflush_r>:
 8008ac8:	898a      	ldrh	r2, [r1, #12]
 8008aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008acc:	4605      	mov	r5, r0
 8008ace:	0710      	lsls	r0, r2, #28
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	d457      	bmi.n	8008b84 <__sflush_r+0xbc>
 8008ad4:	684b      	ldr	r3, [r1, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	dc04      	bgt.n	8008ae4 <__sflush_r+0x1c>
 8008ada:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dc01      	bgt.n	8008ae4 <__sflush_r+0x1c>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d0fa      	beq.n	8008ae0 <__sflush_r+0x18>
 8008aea:	2300      	movs	r3, #0
 8008aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008af0:	682f      	ldr	r7, [r5, #0]
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	d032      	beq.n	8008b5c <__sflush_r+0x94>
 8008af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	075a      	lsls	r2, r3, #29
 8008afc:	d505      	bpl.n	8008b0a <__sflush_r+0x42>
 8008afe:	6863      	ldr	r3, [r4, #4]
 8008b00:	1ac0      	subs	r0, r0, r3
 8008b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b04:	b10b      	cbz	r3, 8008b0a <__sflush_r+0x42>
 8008b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b08:	1ac0      	subs	r0, r0, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b10:	4628      	mov	r0, r5
 8008b12:	6a21      	ldr	r1, [r4, #32]
 8008b14:	47b0      	blx	r6
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	d106      	bne.n	8008b2a <__sflush_r+0x62>
 8008b1c:	6829      	ldr	r1, [r5, #0]
 8008b1e:	291d      	cmp	r1, #29
 8008b20:	d82c      	bhi.n	8008b7c <__sflush_r+0xb4>
 8008b22:	4a29      	ldr	r2, [pc, #164]	; (8008bc8 <__sflush_r+0x100>)
 8008b24:	40ca      	lsrs	r2, r1
 8008b26:	07d6      	lsls	r6, r2, #31
 8008b28:	d528      	bpl.n	8008b7c <__sflush_r+0xb4>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6062      	str	r2, [r4, #4]
 8008b2e:	6922      	ldr	r2, [r4, #16]
 8008b30:	04d9      	lsls	r1, r3, #19
 8008b32:	6022      	str	r2, [r4, #0]
 8008b34:	d504      	bpl.n	8008b40 <__sflush_r+0x78>
 8008b36:	1c42      	adds	r2, r0, #1
 8008b38:	d101      	bne.n	8008b3e <__sflush_r+0x76>
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	b903      	cbnz	r3, 8008b40 <__sflush_r+0x78>
 8008b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8008b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b42:	602f      	str	r7, [r5, #0]
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d0cb      	beq.n	8008ae0 <__sflush_r+0x18>
 8008b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b4c:	4299      	cmp	r1, r3
 8008b4e:	d002      	beq.n	8008b56 <__sflush_r+0x8e>
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 f9c5 	bl	8008ee0 <_free_r>
 8008b56:	2000      	movs	r0, #0
 8008b58:	6360      	str	r0, [r4, #52]	; 0x34
 8008b5a:	e7c2      	b.n	8008ae2 <__sflush_r+0x1a>
 8008b5c:	6a21      	ldr	r1, [r4, #32]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b0      	blx	r6
 8008b64:	1c41      	adds	r1, r0, #1
 8008b66:	d1c7      	bne.n	8008af8 <__sflush_r+0x30>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0c4      	beq.n	8008af8 <__sflush_r+0x30>
 8008b6e:	2b1d      	cmp	r3, #29
 8008b70:	d001      	beq.n	8008b76 <__sflush_r+0xae>
 8008b72:	2b16      	cmp	r3, #22
 8008b74:	d101      	bne.n	8008b7a <__sflush_r+0xb2>
 8008b76:	602f      	str	r7, [r5, #0]
 8008b78:	e7b2      	b.n	8008ae0 <__sflush_r+0x18>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	e7ae      	b.n	8008ae2 <__sflush_r+0x1a>
 8008b84:	690f      	ldr	r7, [r1, #16]
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	d0aa      	beq.n	8008ae0 <__sflush_r+0x18>
 8008b8a:	0793      	lsls	r3, r2, #30
 8008b8c:	bf18      	it	ne
 8008b8e:	2300      	movne	r3, #0
 8008b90:	680e      	ldr	r6, [r1, #0]
 8008b92:	bf08      	it	eq
 8008b94:	694b      	ldreq	r3, [r1, #20]
 8008b96:	1bf6      	subs	r6, r6, r7
 8008b98:	600f      	str	r7, [r1, #0]
 8008b9a:	608b      	str	r3, [r1, #8]
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	dd9f      	ble.n	8008ae0 <__sflush_r+0x18>
 8008ba0:	4633      	mov	r3, r6
 8008ba2:	463a      	mov	r2, r7
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	6a21      	ldr	r1, [r4, #32]
 8008ba8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008bac:	47e0      	blx	ip
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	dc06      	bgt.n	8008bc0 <__sflush_r+0xf8>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	e790      	b.n	8008ae2 <__sflush_r+0x1a>
 8008bc0:	4407      	add	r7, r0
 8008bc2:	1a36      	subs	r6, r6, r0
 8008bc4:	e7ea      	b.n	8008b9c <__sflush_r+0xd4>
 8008bc6:	bf00      	nop
 8008bc8:	20400001 	.word	0x20400001

08008bcc <_fflush_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	b913      	cbnz	r3, 8008bdc <_fflush_r+0x10>
 8008bd6:	2500      	movs	r5, #0
 8008bd8:	4628      	mov	r0, r5
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	b118      	cbz	r0, 8008be6 <_fflush_r+0x1a>
 8008bde:	6983      	ldr	r3, [r0, #24]
 8008be0:	b90b      	cbnz	r3, 8008be6 <_fflush_r+0x1a>
 8008be2:	f000 f887 	bl	8008cf4 <__sinit>
 8008be6:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <_fflush_r+0x6c>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	d11b      	bne.n	8008c24 <_fflush_r+0x58>
 8008bec:	686c      	ldr	r4, [r5, #4]
 8008bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0ef      	beq.n	8008bd6 <_fflush_r+0xa>
 8008bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bf8:	07d0      	lsls	r0, r2, #31
 8008bfa:	d404      	bmi.n	8008c06 <_fflush_r+0x3a>
 8008bfc:	0599      	lsls	r1, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_fflush_r+0x3a>
 8008c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c02:	f000 f94c 	bl	8008e9e <__retarget_lock_acquire_recursive>
 8008c06:	4628      	mov	r0, r5
 8008c08:	4621      	mov	r1, r4
 8008c0a:	f7ff ff5d 	bl	8008ac8 <__sflush_r>
 8008c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c10:	4605      	mov	r5, r0
 8008c12:	07da      	lsls	r2, r3, #31
 8008c14:	d4e0      	bmi.n	8008bd8 <_fflush_r+0xc>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	059b      	lsls	r3, r3, #22
 8008c1a:	d4dd      	bmi.n	8008bd8 <_fflush_r+0xc>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1e:	f000 f93f 	bl	8008ea0 <__retarget_lock_release_recursive>
 8008c22:	e7d9      	b.n	8008bd8 <_fflush_r+0xc>
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <_fflush_r+0x70>)
 8008c26:	429c      	cmp	r4, r3
 8008c28:	d101      	bne.n	8008c2e <_fflush_r+0x62>
 8008c2a:	68ac      	ldr	r4, [r5, #8]
 8008c2c:	e7df      	b.n	8008bee <_fflush_r+0x22>
 8008c2e:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <_fflush_r+0x74>)
 8008c30:	429c      	cmp	r4, r3
 8008c32:	bf08      	it	eq
 8008c34:	68ec      	ldreq	r4, [r5, #12]
 8008c36:	e7da      	b.n	8008bee <_fflush_r+0x22>
 8008c38:	0800be08 	.word	0x0800be08
 8008c3c:	0800be28 	.word	0x0800be28
 8008c40:	0800bde8 	.word	0x0800bde8

08008c44 <std>:
 8008c44:	2300      	movs	r3, #0
 8008c46:	b510      	push	{r4, lr}
 8008c48:	4604      	mov	r4, r0
 8008c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c52:	6083      	str	r3, [r0, #8]
 8008c54:	8181      	strh	r1, [r0, #12]
 8008c56:	6643      	str	r3, [r0, #100]	; 0x64
 8008c58:	81c2      	strh	r2, [r0, #14]
 8008c5a:	6183      	str	r3, [r0, #24]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	2208      	movs	r2, #8
 8008c60:	305c      	adds	r0, #92	; 0x5c
 8008c62:	f000 f935 	bl	8008ed0 <memset>
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x38>)
 8008c68:	6224      	str	r4, [r4, #32]
 8008c6a:	6263      	str	r3, [r4, #36]	; 0x24
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <std+0x3c>)
 8008c6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c70:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <std+0x40>)
 8008c72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c74:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <std+0x44>)
 8008c76:	6323      	str	r3, [r4, #48]	; 0x30
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08009cfd 	.word	0x08009cfd
 8008c80:	08009d1f 	.word	0x08009d1f
 8008c84:	08009d57 	.word	0x08009d57
 8008c88:	08009d7b 	.word	0x08009d7b

08008c8c <_cleanup_r>:
 8008c8c:	4901      	ldr	r1, [pc, #4]	; (8008c94 <_cleanup_r+0x8>)
 8008c8e:	f000 b8c1 	b.w	8008e14 <_fwalk_reent>
 8008c92:	bf00      	nop
 8008c94:	08008bcd 	.word	0x08008bcd

08008c98 <__sfmoreglue>:
 8008c98:	2268      	movs	r2, #104	; 0x68
 8008c9a:	b570      	push	{r4, r5, r6, lr}
 8008c9c:	1e4d      	subs	r5, r1, #1
 8008c9e:	4355      	muls	r5, r2
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ca6:	f000 f983 	bl	8008fb0 <_malloc_r>
 8008caa:	4604      	mov	r4, r0
 8008cac:	b140      	cbz	r0, 8008cc0 <__sfmoreglue+0x28>
 8008cae:	2100      	movs	r1, #0
 8008cb0:	e9c0 1600 	strd	r1, r6, [r0]
 8008cb4:	300c      	adds	r0, #12
 8008cb6:	60a0      	str	r0, [r4, #8]
 8008cb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cbc:	f000 f908 	bl	8008ed0 <memset>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <__sfp_lock_acquire>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__sfp_lock_acquire+0x8>)
 8008cc6:	f000 b8ea 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	20001f2d 	.word	0x20001f2d

08008cd0 <__sfp_lock_release>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__sfp_lock_release+0x8>)
 8008cd2:	f000 b8e5 	b.w	8008ea0 <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	20001f2d 	.word	0x20001f2d

08008cdc <__sinit_lock_acquire>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__sinit_lock_acquire+0x8>)
 8008cde:	f000 b8de 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	20001f2e 	.word	0x20001f2e

08008ce8 <__sinit_lock_release>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__sinit_lock_release+0x8>)
 8008cea:	f000 b8d9 	b.w	8008ea0 <__retarget_lock_release_recursive>
 8008cee:	bf00      	nop
 8008cf0:	20001f2e 	.word	0x20001f2e

08008cf4 <__sinit>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	f7ff fff0 	bl	8008cdc <__sinit_lock_acquire>
 8008cfc:	69a3      	ldr	r3, [r4, #24]
 8008cfe:	b11b      	cbz	r3, 8008d08 <__sinit+0x14>
 8008d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d04:	f7ff bff0 	b.w	8008ce8 <__sinit_lock_release>
 8008d08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008d0e:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <__sinit+0x68>)
 8008d10:	4a13      	ldr	r2, [pc, #76]	; (8008d60 <__sinit+0x6c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	bf08      	it	eq
 8008d1a:	2301      	moveq	r3, #1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	bf08      	it	eq
 8008d20:	61a3      	streq	r3, [r4, #24]
 8008d22:	f000 f81f 	bl	8008d64 <__sfp>
 8008d26:	6060      	str	r0, [r4, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 f81b 	bl	8008d64 <__sfp>
 8008d2e:	60a0      	str	r0, [r4, #8]
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 f817 	bl	8008d64 <__sfp>
 8008d36:	2200      	movs	r2, #0
 8008d38:	2104      	movs	r1, #4
 8008d3a:	60e0      	str	r0, [r4, #12]
 8008d3c:	6860      	ldr	r0, [r4, #4]
 8008d3e:	f7ff ff81 	bl	8008c44 <std>
 8008d42:	2201      	movs	r2, #1
 8008d44:	2109      	movs	r1, #9
 8008d46:	68a0      	ldr	r0, [r4, #8]
 8008d48:	f7ff ff7c 	bl	8008c44 <std>
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	2112      	movs	r1, #18
 8008d50:	68e0      	ldr	r0, [r4, #12]
 8008d52:	f7ff ff77 	bl	8008c44 <std>
 8008d56:	2301      	movs	r3, #1
 8008d58:	61a3      	str	r3, [r4, #24]
 8008d5a:	e7d1      	b.n	8008d00 <__sinit+0xc>
 8008d5c:	0800be48 	.word	0x0800be48
 8008d60:	08008c8d 	.word	0x08008c8d

08008d64 <__sfp>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	4607      	mov	r7, r0
 8008d68:	f7ff ffac 	bl	8008cc4 <__sfp_lock_acquire>
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <__sfp+0x84>)
 8008d6e:	681e      	ldr	r6, [r3, #0]
 8008d70:	69b3      	ldr	r3, [r6, #24]
 8008d72:	b913      	cbnz	r3, 8008d7a <__sfp+0x16>
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff ffbd 	bl	8008cf4 <__sinit>
 8008d7a:	3648      	adds	r6, #72	; 0x48
 8008d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	d503      	bpl.n	8008d8c <__sfp+0x28>
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	b30b      	cbz	r3, 8008dcc <__sfp+0x68>
 8008d88:	6836      	ldr	r6, [r6, #0]
 8008d8a:	e7f7      	b.n	8008d7c <__sfp+0x18>
 8008d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d90:	b9d5      	cbnz	r5, 8008dc8 <__sfp+0x64>
 8008d92:	4b16      	ldr	r3, [pc, #88]	; (8008dec <__sfp+0x88>)
 8008d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d98:	60e3      	str	r3, [r4, #12]
 8008d9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008d9c:	f000 f87e 	bl	8008e9c <__retarget_lock_init_recursive>
 8008da0:	f7ff ff96 	bl	8008cd0 <__sfp_lock_release>
 8008da4:	2208      	movs	r2, #8
 8008da6:	4629      	mov	r1, r5
 8008da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008db0:	6025      	str	r5, [r4, #0]
 8008db2:	61a5      	str	r5, [r4, #24]
 8008db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008db8:	f000 f88a 	bl	8008ed0 <memset>
 8008dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc8:	3468      	adds	r4, #104	; 0x68
 8008dca:	e7d9      	b.n	8008d80 <__sfp+0x1c>
 8008dcc:	2104      	movs	r1, #4
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7ff ff62 	bl	8008c98 <__sfmoreglue>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	6030      	str	r0, [r6, #0]
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d1d5      	bne.n	8008d88 <__sfp+0x24>
 8008ddc:	f7ff ff78 	bl	8008cd0 <__sfp_lock_release>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	e7ee      	b.n	8008dc4 <__sfp+0x60>
 8008de6:	bf00      	nop
 8008de8:	0800be48 	.word	0x0800be48
 8008dec:	ffff0001 	.word	0xffff0001

08008df0 <fiprintf>:
 8008df0:	b40e      	push	{r1, r2, r3}
 8008df2:	b503      	push	{r0, r1, lr}
 8008df4:	4601      	mov	r1, r0
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	4805      	ldr	r0, [pc, #20]	; (8008e10 <fiprintf+0x20>)
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	f000 f971 	bl	80090e8 <_vfiprintf_r>
 8008e06:	b002      	add	sp, #8
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	4770      	bx	lr
 8008e10:	200000a0 	.word	0x200000a0

08008e14 <_fwalk_reent>:
 8008e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e18:	4606      	mov	r6, r0
 8008e1a:	4688      	mov	r8, r1
 8008e1c:	2700      	movs	r7, #0
 8008e1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e26:	f1b9 0901 	subs.w	r9, r9, #1
 8008e2a:	d505      	bpl.n	8008e38 <_fwalk_reent+0x24>
 8008e2c:	6824      	ldr	r4, [r4, #0]
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	d1f7      	bne.n	8008e22 <_fwalk_reent+0xe>
 8008e32:	4638      	mov	r0, r7
 8008e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e38:	89ab      	ldrh	r3, [r5, #12]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d907      	bls.n	8008e4e <_fwalk_reent+0x3a>
 8008e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e42:	3301      	adds	r3, #1
 8008e44:	d003      	beq.n	8008e4e <_fwalk_reent+0x3a>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	47c0      	blx	r8
 8008e4c:	4307      	orrs	r7, r0
 8008e4e:	3568      	adds	r5, #104	; 0x68
 8008e50:	e7e9      	b.n	8008e26 <_fwalk_reent+0x12>
	...

08008e54 <__libc_init_array>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	2600      	movs	r6, #0
 8008e58:	4d0c      	ldr	r5, [pc, #48]	; (8008e8c <__libc_init_array+0x38>)
 8008e5a:	4c0d      	ldr	r4, [pc, #52]	; (8008e90 <__libc_init_array+0x3c>)
 8008e5c:	1b64      	subs	r4, r4, r5
 8008e5e:	10a4      	asrs	r4, r4, #2
 8008e60:	42a6      	cmp	r6, r4
 8008e62:	d109      	bne.n	8008e78 <__libc_init_array+0x24>
 8008e64:	f002 ff0e 	bl	800bc84 <_init>
 8008e68:	2600      	movs	r6, #0
 8008e6a:	4d0a      	ldr	r5, [pc, #40]	; (8008e94 <__libc_init_array+0x40>)
 8008e6c:	4c0a      	ldr	r4, [pc, #40]	; (8008e98 <__libc_init_array+0x44>)
 8008e6e:	1b64      	subs	r4, r4, r5
 8008e70:	10a4      	asrs	r4, r4, #2
 8008e72:	42a6      	cmp	r6, r4
 8008e74:	d105      	bne.n	8008e82 <__libc_init_array+0x2e>
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7c:	4798      	blx	r3
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7ee      	b.n	8008e60 <__libc_init_array+0xc>
 8008e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e86:	4798      	blx	r3
 8008e88:	3601      	adds	r6, #1
 8008e8a:	e7f2      	b.n	8008e72 <__libc_init_array+0x1e>
 8008e8c:	0800c238 	.word	0x0800c238
 8008e90:	0800c238 	.word	0x0800c238
 8008e94:	0800c238 	.word	0x0800c238
 8008e98:	0800c23c 	.word	0x0800c23c

08008e9c <__retarget_lock_init_recursive>:
 8008e9c:	4770      	bx	lr

08008e9e <__retarget_lock_acquire_recursive>:
 8008e9e:	4770      	bx	lr

08008ea0 <__retarget_lock_release_recursive>:
 8008ea0:	4770      	bx	lr
	...

08008ea4 <malloc>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <malloc+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f000 b881 	b.w	8008fb0 <_malloc_r>
 8008eae:	bf00      	nop
 8008eb0:	200000a0 	.word	0x200000a0

08008eb4 <memcpy>:
 8008eb4:	440a      	add	r2, r1
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ebc:	d100      	bne.n	8008ec0 <memcpy+0xc>
 8008ebe:	4770      	bx	lr
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec6:	4291      	cmp	r1, r2
 8008ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ecc:	d1f9      	bne.n	8008ec2 <memcpy+0xe>
 8008ece:	bd10      	pop	{r4, pc}

08008ed0 <memset>:
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	4402      	add	r2, r0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d100      	bne.n	8008eda <memset+0xa>
 8008ed8:	4770      	bx	lr
 8008eda:	f803 1b01 	strb.w	r1, [r3], #1
 8008ede:	e7f9      	b.n	8008ed4 <memset+0x4>

08008ee0 <_free_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d040      	beq.n	8008f6a <_free_r+0x8a>
 8008ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eec:	1f0c      	subs	r4, r1, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfb8      	it	lt
 8008ef2:	18e4      	addlt	r4, r4, r3
 8008ef4:	f001 ff4c 	bl	800ad90 <__malloc_lock>
 8008ef8:	4a1c      	ldr	r2, [pc, #112]	; (8008f6c <_free_r+0x8c>)
 8008efa:	6813      	ldr	r3, [r2, #0]
 8008efc:	b933      	cbnz	r3, 8008f0c <_free_r+0x2c>
 8008efe:	6063      	str	r3, [r4, #4]
 8008f00:	6014      	str	r4, [r2, #0]
 8008f02:	4628      	mov	r0, r5
 8008f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f08:	f001 bf48 	b.w	800ad9c <__malloc_unlock>
 8008f0c:	42a3      	cmp	r3, r4
 8008f0e:	d908      	bls.n	8008f22 <_free_r+0x42>
 8008f10:	6820      	ldr	r0, [r4, #0]
 8008f12:	1821      	adds	r1, r4, r0
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf01      	itttt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	1809      	addeq	r1, r1, r0
 8008f1e:	6021      	streq	r1, [r4, #0]
 8008f20:	e7ed      	b.n	8008efe <_free_r+0x1e>
 8008f22:	461a      	mov	r2, r3
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b10b      	cbz	r3, 8008f2c <_free_r+0x4c>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d9fa      	bls.n	8008f22 <_free_r+0x42>
 8008f2c:	6811      	ldr	r1, [r2, #0]
 8008f2e:	1850      	adds	r0, r2, r1
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d10b      	bne.n	8008f4c <_free_r+0x6c>
 8008f34:	6820      	ldr	r0, [r4, #0]
 8008f36:	4401      	add	r1, r0
 8008f38:	1850      	adds	r0, r2, r1
 8008f3a:	4283      	cmp	r3, r0
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	d1e0      	bne.n	8008f02 <_free_r+0x22>
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4401      	add	r1, r0
 8008f46:	6011      	str	r1, [r2, #0]
 8008f48:	6053      	str	r3, [r2, #4]
 8008f4a:	e7da      	b.n	8008f02 <_free_r+0x22>
 8008f4c:	d902      	bls.n	8008f54 <_free_r+0x74>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	e7d6      	b.n	8008f02 <_free_r+0x22>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	1821      	adds	r1, r4, r0
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf01      	itttt	eq
 8008f5c:	6819      	ldreq	r1, [r3, #0]
 8008f5e:	685b      	ldreq	r3, [r3, #4]
 8008f60:	1809      	addeq	r1, r1, r0
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	6054      	str	r4, [r2, #4]
 8008f68:	e7cb      	b.n	8008f02 <_free_r+0x22>
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20001f30 	.word	0x20001f30

08008f70 <sbrk_aligned>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	4e0e      	ldr	r6, [pc, #56]	; (8008fac <sbrk_aligned+0x3c>)
 8008f74:	460c      	mov	r4, r1
 8008f76:	6831      	ldr	r1, [r6, #0]
 8008f78:	4605      	mov	r5, r0
 8008f7a:	b911      	cbnz	r1, 8008f82 <sbrk_aligned+0x12>
 8008f7c:	f000 feae 	bl	8009cdc <_sbrk_r>
 8008f80:	6030      	str	r0, [r6, #0]
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fea9 	bl	8009cdc <_sbrk_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d00a      	beq.n	8008fa4 <sbrk_aligned+0x34>
 8008f8e:	1cc4      	adds	r4, r0, #3
 8008f90:	f024 0403 	bic.w	r4, r4, #3
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d007      	beq.n	8008fa8 <sbrk_aligned+0x38>
 8008f98:	1a21      	subs	r1, r4, r0
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 fe9e 	bl	8009cdc <_sbrk_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d101      	bne.n	8008fa8 <sbrk_aligned+0x38>
 8008fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fa8:	4620      	mov	r0, r4
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	20001f34 	.word	0x20001f34

08008fb0 <_malloc_r>:
 8008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	1ccd      	adds	r5, r1, #3
 8008fb6:	f025 0503 	bic.w	r5, r5, #3
 8008fba:	3508      	adds	r5, #8
 8008fbc:	2d0c      	cmp	r5, #12
 8008fbe:	bf38      	it	cc
 8008fc0:	250c      	movcc	r5, #12
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	db01      	blt.n	8008fcc <_malloc_r+0x1c>
 8008fc8:	42a9      	cmp	r1, r5
 8008fca:	d905      	bls.n	8008fd8 <_malloc_r+0x28>
 8008fcc:	230c      	movs	r3, #12
 8008fce:	2600      	movs	r6, #0
 8008fd0:	603b      	str	r3, [r7, #0]
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	4e2e      	ldr	r6, [pc, #184]	; (8009094 <_malloc_r+0xe4>)
 8008fda:	f001 fed9 	bl	800ad90 <__malloc_lock>
 8008fde:	6833      	ldr	r3, [r6, #0]
 8008fe0:	461c      	mov	r4, r3
 8008fe2:	bb34      	cbnz	r4, 8009032 <_malloc_r+0x82>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7ff ffc2 	bl	8008f70 <sbrk_aligned>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	4604      	mov	r4, r0
 8008ff0:	d14d      	bne.n	800908e <_malloc_r+0xde>
 8008ff2:	6834      	ldr	r4, [r6, #0]
 8008ff4:	4626      	mov	r6, r4
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	d140      	bne.n	800907c <_malloc_r+0xcc>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4638      	mov	r0, r7
 8009000:	eb04 0803 	add.w	r8, r4, r3
 8009004:	f000 fe6a 	bl	8009cdc <_sbrk_r>
 8009008:	4580      	cmp	r8, r0
 800900a:	d13a      	bne.n	8009082 <_malloc_r+0xd2>
 800900c:	6821      	ldr	r1, [r4, #0]
 800900e:	3503      	adds	r5, #3
 8009010:	1a6d      	subs	r5, r5, r1
 8009012:	f025 0503 	bic.w	r5, r5, #3
 8009016:	3508      	adds	r5, #8
 8009018:	2d0c      	cmp	r5, #12
 800901a:	bf38      	it	cc
 800901c:	250c      	movcc	r5, #12
 800901e:	4638      	mov	r0, r7
 8009020:	4629      	mov	r1, r5
 8009022:	f7ff ffa5 	bl	8008f70 <sbrk_aligned>
 8009026:	3001      	adds	r0, #1
 8009028:	d02b      	beq.n	8009082 <_malloc_r+0xd2>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	442b      	add	r3, r5
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	e00e      	b.n	8009050 <_malloc_r+0xa0>
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	1b52      	subs	r2, r2, r5
 8009036:	d41e      	bmi.n	8009076 <_malloc_r+0xc6>
 8009038:	2a0b      	cmp	r2, #11
 800903a:	d916      	bls.n	800906a <_malloc_r+0xba>
 800903c:	1961      	adds	r1, r4, r5
 800903e:	42a3      	cmp	r3, r4
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	bf18      	it	ne
 8009044:	6059      	strne	r1, [r3, #4]
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	bf08      	it	eq
 800904a:	6031      	streq	r1, [r6, #0]
 800904c:	5162      	str	r2, [r4, r5]
 800904e:	604b      	str	r3, [r1, #4]
 8009050:	4638      	mov	r0, r7
 8009052:	f104 060b 	add.w	r6, r4, #11
 8009056:	f001 fea1 	bl	800ad9c <__malloc_unlock>
 800905a:	f026 0607 	bic.w	r6, r6, #7
 800905e:	1d23      	adds	r3, r4, #4
 8009060:	1af2      	subs	r2, r6, r3
 8009062:	d0b6      	beq.n	8008fd2 <_malloc_r+0x22>
 8009064:	1b9b      	subs	r3, r3, r6
 8009066:	50a3      	str	r3, [r4, r2]
 8009068:	e7b3      	b.n	8008fd2 <_malloc_r+0x22>
 800906a:	6862      	ldr	r2, [r4, #4]
 800906c:	42a3      	cmp	r3, r4
 800906e:	bf0c      	ite	eq
 8009070:	6032      	streq	r2, [r6, #0]
 8009072:	605a      	strne	r2, [r3, #4]
 8009074:	e7ec      	b.n	8009050 <_malloc_r+0xa0>
 8009076:	4623      	mov	r3, r4
 8009078:	6864      	ldr	r4, [r4, #4]
 800907a:	e7b2      	b.n	8008fe2 <_malloc_r+0x32>
 800907c:	4634      	mov	r4, r6
 800907e:	6876      	ldr	r6, [r6, #4]
 8009080:	e7b9      	b.n	8008ff6 <_malloc_r+0x46>
 8009082:	230c      	movs	r3, #12
 8009084:	4638      	mov	r0, r7
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	f001 fe88 	bl	800ad9c <__malloc_unlock>
 800908c:	e7a1      	b.n	8008fd2 <_malloc_r+0x22>
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	e7de      	b.n	8009050 <_malloc_r+0xa0>
 8009092:	bf00      	nop
 8009094:	20001f30 	.word	0x20001f30

08009098 <__sfputc_r>:
 8009098:	6893      	ldr	r3, [r2, #8]
 800909a:	b410      	push	{r4}
 800909c:	3b01      	subs	r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	6093      	str	r3, [r2, #8]
 80090a2:	da07      	bge.n	80090b4 <__sfputc_r+0x1c>
 80090a4:	6994      	ldr	r4, [r2, #24]
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	db01      	blt.n	80090ae <__sfputc_r+0x16>
 80090aa:	290a      	cmp	r1, #10
 80090ac:	d102      	bne.n	80090b4 <__sfputc_r+0x1c>
 80090ae:	bc10      	pop	{r4}
 80090b0:	f000 be68 	b.w	8009d84 <__swbuf_r>
 80090b4:	6813      	ldr	r3, [r2, #0]
 80090b6:	1c58      	adds	r0, r3, #1
 80090b8:	6010      	str	r0, [r2, #0]
 80090ba:	7019      	strb	r1, [r3, #0]
 80090bc:	4608      	mov	r0, r1
 80090be:	bc10      	pop	{r4}
 80090c0:	4770      	bx	lr

080090c2 <__sfputs_r>:
 80090c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c4:	4606      	mov	r6, r0
 80090c6:	460f      	mov	r7, r1
 80090c8:	4614      	mov	r4, r2
 80090ca:	18d5      	adds	r5, r2, r3
 80090cc:	42ac      	cmp	r4, r5
 80090ce:	d101      	bne.n	80090d4 <__sfputs_r+0x12>
 80090d0:	2000      	movs	r0, #0
 80090d2:	e007      	b.n	80090e4 <__sfputs_r+0x22>
 80090d4:	463a      	mov	r2, r7
 80090d6:	4630      	mov	r0, r6
 80090d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090dc:	f7ff ffdc 	bl	8009098 <__sfputc_r>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d1f3      	bne.n	80090cc <__sfputs_r+0xa>
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090e8 <_vfiprintf_r>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	460d      	mov	r5, r1
 80090ee:	4614      	mov	r4, r2
 80090f0:	4698      	mov	r8, r3
 80090f2:	4606      	mov	r6, r0
 80090f4:	b09d      	sub	sp, #116	; 0x74
 80090f6:	b118      	cbz	r0, 8009100 <_vfiprintf_r+0x18>
 80090f8:	6983      	ldr	r3, [r0, #24]
 80090fa:	b90b      	cbnz	r3, 8009100 <_vfiprintf_r+0x18>
 80090fc:	f7ff fdfa 	bl	8008cf4 <__sinit>
 8009100:	4b89      	ldr	r3, [pc, #548]	; (8009328 <_vfiprintf_r+0x240>)
 8009102:	429d      	cmp	r5, r3
 8009104:	d11b      	bne.n	800913e <_vfiprintf_r+0x56>
 8009106:	6875      	ldr	r5, [r6, #4]
 8009108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800910a:	07d9      	lsls	r1, r3, #31
 800910c:	d405      	bmi.n	800911a <_vfiprintf_r+0x32>
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	059a      	lsls	r2, r3, #22
 8009112:	d402      	bmi.n	800911a <_vfiprintf_r+0x32>
 8009114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009116:	f7ff fec2 	bl	8008e9e <__retarget_lock_acquire_recursive>
 800911a:	89ab      	ldrh	r3, [r5, #12]
 800911c:	071b      	lsls	r3, r3, #28
 800911e:	d501      	bpl.n	8009124 <_vfiprintf_r+0x3c>
 8009120:	692b      	ldr	r3, [r5, #16]
 8009122:	b9eb      	cbnz	r3, 8009160 <_vfiprintf_r+0x78>
 8009124:	4629      	mov	r1, r5
 8009126:	4630      	mov	r0, r6
 8009128:	f000 fe90 	bl	8009e4c <__swsetup_r>
 800912c:	b1c0      	cbz	r0, 8009160 <_vfiprintf_r+0x78>
 800912e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009130:	07dc      	lsls	r4, r3, #31
 8009132:	d50e      	bpl.n	8009152 <_vfiprintf_r+0x6a>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	b01d      	add	sp, #116	; 0x74
 800913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	4b7b      	ldr	r3, [pc, #492]	; (800932c <_vfiprintf_r+0x244>)
 8009140:	429d      	cmp	r5, r3
 8009142:	d101      	bne.n	8009148 <_vfiprintf_r+0x60>
 8009144:	68b5      	ldr	r5, [r6, #8]
 8009146:	e7df      	b.n	8009108 <_vfiprintf_r+0x20>
 8009148:	4b79      	ldr	r3, [pc, #484]	; (8009330 <_vfiprintf_r+0x248>)
 800914a:	429d      	cmp	r5, r3
 800914c:	bf08      	it	eq
 800914e:	68f5      	ldreq	r5, [r6, #12]
 8009150:	e7da      	b.n	8009108 <_vfiprintf_r+0x20>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	0598      	lsls	r0, r3, #22
 8009156:	d4ed      	bmi.n	8009134 <_vfiprintf_r+0x4c>
 8009158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800915a:	f7ff fea1 	bl	8008ea0 <__retarget_lock_release_recursive>
 800915e:	e7e9      	b.n	8009134 <_vfiprintf_r+0x4c>
 8009160:	2300      	movs	r3, #0
 8009162:	9309      	str	r3, [sp, #36]	; 0x24
 8009164:	2320      	movs	r3, #32
 8009166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800916a:	2330      	movs	r3, #48	; 0x30
 800916c:	f04f 0901 	mov.w	r9, #1
 8009170:	f8cd 800c 	str.w	r8, [sp, #12]
 8009174:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009334 <_vfiprintf_r+0x24c>
 8009178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800917c:	4623      	mov	r3, r4
 800917e:	469a      	mov	sl, r3
 8009180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009184:	b10a      	cbz	r2, 800918a <_vfiprintf_r+0xa2>
 8009186:	2a25      	cmp	r2, #37	; 0x25
 8009188:	d1f9      	bne.n	800917e <_vfiprintf_r+0x96>
 800918a:	ebba 0b04 	subs.w	fp, sl, r4
 800918e:	d00b      	beq.n	80091a8 <_vfiprintf_r+0xc0>
 8009190:	465b      	mov	r3, fp
 8009192:	4622      	mov	r2, r4
 8009194:	4629      	mov	r1, r5
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ff93 	bl	80090c2 <__sfputs_r>
 800919c:	3001      	adds	r0, #1
 800919e:	f000 80aa 	beq.w	80092f6 <_vfiprintf_r+0x20e>
 80091a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a4:	445a      	add	r2, fp
 80091a6:	9209      	str	r2, [sp, #36]	; 0x24
 80091a8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 80a2 	beq.w	80092f6 <_vfiprintf_r+0x20e>
 80091b2:	2300      	movs	r3, #0
 80091b4:	f04f 32ff 	mov.w	r2, #4294967295
 80091b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091bc:	f10a 0a01 	add.w	sl, sl, #1
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	9307      	str	r3, [sp, #28]
 80091c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c8:	931a      	str	r3, [sp, #104]	; 0x68
 80091ca:	4654      	mov	r4, sl
 80091cc:	2205      	movs	r2, #5
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	4858      	ldr	r0, [pc, #352]	; (8009334 <_vfiprintf_r+0x24c>)
 80091d4:	f001 fdce 	bl	800ad74 <memchr>
 80091d8:	9a04      	ldr	r2, [sp, #16]
 80091da:	b9d8      	cbnz	r0, 8009214 <_vfiprintf_r+0x12c>
 80091dc:	06d1      	lsls	r1, r2, #27
 80091de:	bf44      	itt	mi
 80091e0:	2320      	movmi	r3, #32
 80091e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e6:	0713      	lsls	r3, r2, #28
 80091e8:	bf44      	itt	mi
 80091ea:	232b      	movmi	r3, #43	; 0x2b
 80091ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091f0:	f89a 3000 	ldrb.w	r3, [sl]
 80091f4:	2b2a      	cmp	r3, #42	; 0x2a
 80091f6:	d015      	beq.n	8009224 <_vfiprintf_r+0x13c>
 80091f8:	4654      	mov	r4, sl
 80091fa:	2000      	movs	r0, #0
 80091fc:	f04f 0c0a 	mov.w	ip, #10
 8009200:	9a07      	ldr	r2, [sp, #28]
 8009202:	4621      	mov	r1, r4
 8009204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009208:	3b30      	subs	r3, #48	; 0x30
 800920a:	2b09      	cmp	r3, #9
 800920c:	d94e      	bls.n	80092ac <_vfiprintf_r+0x1c4>
 800920e:	b1b0      	cbz	r0, 800923e <_vfiprintf_r+0x156>
 8009210:	9207      	str	r2, [sp, #28]
 8009212:	e014      	b.n	800923e <_vfiprintf_r+0x156>
 8009214:	eba0 0308 	sub.w	r3, r0, r8
 8009218:	fa09 f303 	lsl.w	r3, r9, r3
 800921c:	4313      	orrs	r3, r2
 800921e:	46a2      	mov	sl, r4
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	e7d2      	b.n	80091ca <_vfiprintf_r+0xe2>
 8009224:	9b03      	ldr	r3, [sp, #12]
 8009226:	1d19      	adds	r1, r3, #4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	9103      	str	r1, [sp, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	bfbb      	ittet	lt
 8009230:	425b      	neglt	r3, r3
 8009232:	f042 0202 	orrlt.w	r2, r2, #2
 8009236:	9307      	strge	r3, [sp, #28]
 8009238:	9307      	strlt	r3, [sp, #28]
 800923a:	bfb8      	it	lt
 800923c:	9204      	strlt	r2, [sp, #16]
 800923e:	7823      	ldrb	r3, [r4, #0]
 8009240:	2b2e      	cmp	r3, #46	; 0x2e
 8009242:	d10c      	bne.n	800925e <_vfiprintf_r+0x176>
 8009244:	7863      	ldrb	r3, [r4, #1]
 8009246:	2b2a      	cmp	r3, #42	; 0x2a
 8009248:	d135      	bne.n	80092b6 <_vfiprintf_r+0x1ce>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	3402      	adds	r4, #2
 800924e:	1d1a      	adds	r2, r3, #4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	9203      	str	r2, [sp, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	bfb8      	it	lt
 8009258:	f04f 33ff 	movlt.w	r3, #4294967295
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009338 <_vfiprintf_r+0x250>
 8009262:	2203      	movs	r2, #3
 8009264:	4650      	mov	r0, sl
 8009266:	7821      	ldrb	r1, [r4, #0]
 8009268:	f001 fd84 	bl	800ad74 <memchr>
 800926c:	b140      	cbz	r0, 8009280 <_vfiprintf_r+0x198>
 800926e:	2340      	movs	r3, #64	; 0x40
 8009270:	eba0 000a 	sub.w	r0, r0, sl
 8009274:	fa03 f000 	lsl.w	r0, r3, r0
 8009278:	9b04      	ldr	r3, [sp, #16]
 800927a:	3401      	adds	r4, #1
 800927c:	4303      	orrs	r3, r0
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009284:	2206      	movs	r2, #6
 8009286:	482d      	ldr	r0, [pc, #180]	; (800933c <_vfiprintf_r+0x254>)
 8009288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800928c:	f001 fd72 	bl	800ad74 <memchr>
 8009290:	2800      	cmp	r0, #0
 8009292:	d03f      	beq.n	8009314 <_vfiprintf_r+0x22c>
 8009294:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <_vfiprintf_r+0x258>)
 8009296:	bb1b      	cbnz	r3, 80092e0 <_vfiprintf_r+0x1f8>
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	3307      	adds	r3, #7
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	3308      	adds	r3, #8
 80092a2:	9303      	str	r3, [sp, #12]
 80092a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a6:	443b      	add	r3, r7
 80092a8:	9309      	str	r3, [sp, #36]	; 0x24
 80092aa:	e767      	b.n	800917c <_vfiprintf_r+0x94>
 80092ac:	460c      	mov	r4, r1
 80092ae:	2001      	movs	r0, #1
 80092b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b4:	e7a5      	b.n	8009202 <_vfiprintf_r+0x11a>
 80092b6:	2300      	movs	r3, #0
 80092b8:	f04f 0c0a 	mov.w	ip, #10
 80092bc:	4619      	mov	r1, r3
 80092be:	3401      	adds	r4, #1
 80092c0:	9305      	str	r3, [sp, #20]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c8:	3a30      	subs	r2, #48	; 0x30
 80092ca:	2a09      	cmp	r2, #9
 80092cc:	d903      	bls.n	80092d6 <_vfiprintf_r+0x1ee>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0c5      	beq.n	800925e <_vfiprintf_r+0x176>
 80092d2:	9105      	str	r1, [sp, #20]
 80092d4:	e7c3      	b.n	800925e <_vfiprintf_r+0x176>
 80092d6:	4604      	mov	r4, r0
 80092d8:	2301      	movs	r3, #1
 80092da:	fb0c 2101 	mla	r1, ip, r1, r2
 80092de:	e7f0      	b.n	80092c2 <_vfiprintf_r+0x1da>
 80092e0:	ab03      	add	r3, sp, #12
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	462a      	mov	r2, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	4b16      	ldr	r3, [pc, #88]	; (8009344 <_vfiprintf_r+0x25c>)
 80092ea:	a904      	add	r1, sp, #16
 80092ec:	f000 f8ca 	bl	8009484 <_printf_float>
 80092f0:	4607      	mov	r7, r0
 80092f2:	1c78      	adds	r0, r7, #1
 80092f4:	d1d6      	bne.n	80092a4 <_vfiprintf_r+0x1bc>
 80092f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f8:	07d9      	lsls	r1, r3, #31
 80092fa:	d405      	bmi.n	8009308 <_vfiprintf_r+0x220>
 80092fc:	89ab      	ldrh	r3, [r5, #12]
 80092fe:	059a      	lsls	r2, r3, #22
 8009300:	d402      	bmi.n	8009308 <_vfiprintf_r+0x220>
 8009302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009304:	f7ff fdcc 	bl	8008ea0 <__retarget_lock_release_recursive>
 8009308:	89ab      	ldrh	r3, [r5, #12]
 800930a:	065b      	lsls	r3, r3, #25
 800930c:	f53f af12 	bmi.w	8009134 <_vfiprintf_r+0x4c>
 8009310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009312:	e711      	b.n	8009138 <_vfiprintf_r+0x50>
 8009314:	ab03      	add	r3, sp, #12
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	462a      	mov	r2, r5
 800931a:	4630      	mov	r0, r6
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <_vfiprintf_r+0x25c>)
 800931e:	a904      	add	r1, sp, #16
 8009320:	f000 fb4c 	bl	80099bc <_printf_i>
 8009324:	e7e4      	b.n	80092f0 <_vfiprintf_r+0x208>
 8009326:	bf00      	nop
 8009328:	0800be08 	.word	0x0800be08
 800932c:	0800be28 	.word	0x0800be28
 8009330:	0800bde8 	.word	0x0800bde8
 8009334:	0800be4c 	.word	0x0800be4c
 8009338:	0800be52 	.word	0x0800be52
 800933c:	0800be56 	.word	0x0800be56
 8009340:	08009485 	.word	0x08009485
 8009344:	080090c3 	.word	0x080090c3

08009348 <__cvt>:
 8009348:	2b00      	cmp	r3, #0
 800934a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800934e:	461f      	mov	r7, r3
 8009350:	bfbb      	ittet	lt
 8009352:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009356:	461f      	movlt	r7, r3
 8009358:	2300      	movge	r3, #0
 800935a:	232d      	movlt	r3, #45	; 0x2d
 800935c:	b088      	sub	sp, #32
 800935e:	4614      	mov	r4, r2
 8009360:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009362:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009364:	7013      	strb	r3, [r2, #0]
 8009366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009368:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800936c:	f023 0820 	bic.w	r8, r3, #32
 8009370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009374:	d005      	beq.n	8009382 <__cvt+0x3a>
 8009376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800937a:	d100      	bne.n	800937e <__cvt+0x36>
 800937c:	3501      	adds	r5, #1
 800937e:	2302      	movs	r3, #2
 8009380:	e000      	b.n	8009384 <__cvt+0x3c>
 8009382:	2303      	movs	r3, #3
 8009384:	aa07      	add	r2, sp, #28
 8009386:	9204      	str	r2, [sp, #16]
 8009388:	aa06      	add	r2, sp, #24
 800938a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800938e:	e9cd 3500 	strd	r3, r5, [sp]
 8009392:	4622      	mov	r2, r4
 8009394:	463b      	mov	r3, r7
 8009396:	f000 fe83 	bl	800a0a0 <_dtoa_r>
 800939a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800939e:	4606      	mov	r6, r0
 80093a0:	d102      	bne.n	80093a8 <__cvt+0x60>
 80093a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093a4:	07db      	lsls	r3, r3, #31
 80093a6:	d522      	bpl.n	80093ee <__cvt+0xa6>
 80093a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093ac:	eb06 0905 	add.w	r9, r6, r5
 80093b0:	d110      	bne.n	80093d4 <__cvt+0x8c>
 80093b2:	7833      	ldrb	r3, [r6, #0]
 80093b4:	2b30      	cmp	r3, #48	; 0x30
 80093b6:	d10a      	bne.n	80093ce <__cvt+0x86>
 80093b8:	2200      	movs	r2, #0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4620      	mov	r0, r4
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fb62 	bl	8000a88 <__aeabi_dcmpeq>
 80093c4:	b918      	cbnz	r0, 80093ce <__cvt+0x86>
 80093c6:	f1c5 0501 	rsb	r5, r5, #1
 80093ca:	f8ca 5000 	str.w	r5, [sl]
 80093ce:	f8da 3000 	ldr.w	r3, [sl]
 80093d2:	4499      	add	r9, r3
 80093d4:	2200      	movs	r2, #0
 80093d6:	2300      	movs	r3, #0
 80093d8:	4620      	mov	r0, r4
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 fb54 	bl	8000a88 <__aeabi_dcmpeq>
 80093e0:	b108      	cbz	r0, 80093e6 <__cvt+0x9e>
 80093e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80093e6:	2230      	movs	r2, #48	; 0x30
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	454b      	cmp	r3, r9
 80093ec:	d307      	bcc.n	80093fe <__cvt+0xb6>
 80093ee:	4630      	mov	r0, r6
 80093f0:	9b07      	ldr	r3, [sp, #28]
 80093f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093f4:	1b9b      	subs	r3, r3, r6
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	b008      	add	sp, #32
 80093fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fe:	1c59      	adds	r1, r3, #1
 8009400:	9107      	str	r1, [sp, #28]
 8009402:	701a      	strb	r2, [r3, #0]
 8009404:	e7f0      	b.n	80093e8 <__cvt+0xa0>

08009406 <__exponent>:
 8009406:	4603      	mov	r3, r0
 8009408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940a:	2900      	cmp	r1, #0
 800940c:	f803 2b02 	strb.w	r2, [r3], #2
 8009410:	bfb6      	itet	lt
 8009412:	222d      	movlt	r2, #45	; 0x2d
 8009414:	222b      	movge	r2, #43	; 0x2b
 8009416:	4249      	neglt	r1, r1
 8009418:	2909      	cmp	r1, #9
 800941a:	7042      	strb	r2, [r0, #1]
 800941c:	dd2b      	ble.n	8009476 <__exponent+0x70>
 800941e:	f10d 0407 	add.w	r4, sp, #7
 8009422:	46a4      	mov	ip, r4
 8009424:	270a      	movs	r7, #10
 8009426:	fb91 f6f7 	sdiv	r6, r1, r7
 800942a:	460a      	mov	r2, r1
 800942c:	46a6      	mov	lr, r4
 800942e:	fb07 1516 	mls	r5, r7, r6, r1
 8009432:	2a63      	cmp	r2, #99	; 0x63
 8009434:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009438:	4631      	mov	r1, r6
 800943a:	f104 34ff 	add.w	r4, r4, #4294967295
 800943e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009442:	dcf0      	bgt.n	8009426 <__exponent+0x20>
 8009444:	3130      	adds	r1, #48	; 0x30
 8009446:	f1ae 0502 	sub.w	r5, lr, #2
 800944a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800944e:	4629      	mov	r1, r5
 8009450:	1c44      	adds	r4, r0, #1
 8009452:	4561      	cmp	r1, ip
 8009454:	d30a      	bcc.n	800946c <__exponent+0x66>
 8009456:	f10d 0209 	add.w	r2, sp, #9
 800945a:	eba2 020e 	sub.w	r2, r2, lr
 800945e:	4565      	cmp	r5, ip
 8009460:	bf88      	it	hi
 8009462:	2200      	movhi	r2, #0
 8009464:	4413      	add	r3, r2
 8009466:	1a18      	subs	r0, r3, r0
 8009468:	b003      	add	sp, #12
 800946a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009470:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009474:	e7ed      	b.n	8009452 <__exponent+0x4c>
 8009476:	2330      	movs	r3, #48	; 0x30
 8009478:	3130      	adds	r1, #48	; 0x30
 800947a:	7083      	strb	r3, [r0, #2]
 800947c:	70c1      	strb	r1, [r0, #3]
 800947e:	1d03      	adds	r3, r0, #4
 8009480:	e7f1      	b.n	8009466 <__exponent+0x60>
	...

08009484 <_printf_float>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	b091      	sub	sp, #68	; 0x44
 800948a:	460c      	mov	r4, r1
 800948c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009490:	4616      	mov	r6, r2
 8009492:	461f      	mov	r7, r3
 8009494:	4605      	mov	r5, r0
 8009496:	f001 fbf1 	bl	800ac7c <_localeconv_r>
 800949a:	6803      	ldr	r3, [r0, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	9309      	str	r3, [sp, #36]	; 0x24
 80094a0:	f7f6 fec6 	bl	8000230 <strlen>
 80094a4:	2300      	movs	r3, #0
 80094a6:	930e      	str	r3, [sp, #56]	; 0x38
 80094a8:	f8d8 3000 	ldr.w	r3, [r8]
 80094ac:	900a      	str	r0, [sp, #40]	; 0x28
 80094ae:	3307      	adds	r3, #7
 80094b0:	f023 0307 	bic.w	r3, r3, #7
 80094b4:	f103 0208 	add.w	r2, r3, #8
 80094b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80094bc:	f8d4 b000 	ldr.w	fp, [r4]
 80094c0:	f8c8 2000 	str.w	r2, [r8]
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094cc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80094d0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80094d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80094d6:	f04f 32ff 	mov.w	r2, #4294967295
 80094da:	4640      	mov	r0, r8
 80094dc:	4b9c      	ldr	r3, [pc, #624]	; (8009750 <_printf_float+0x2cc>)
 80094de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094e0:	f7f7 fb04 	bl	8000aec <__aeabi_dcmpun>
 80094e4:	bb70      	cbnz	r0, 8009544 <_printf_float+0xc0>
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ea:	4640      	mov	r0, r8
 80094ec:	4b98      	ldr	r3, [pc, #608]	; (8009750 <_printf_float+0x2cc>)
 80094ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094f0:	f7f7 fade 	bl	8000ab0 <__aeabi_dcmple>
 80094f4:	bb30      	cbnz	r0, 8009544 <_printf_float+0xc0>
 80094f6:	2200      	movs	r2, #0
 80094f8:	2300      	movs	r3, #0
 80094fa:	4640      	mov	r0, r8
 80094fc:	4651      	mov	r1, sl
 80094fe:	f7f7 facd 	bl	8000a9c <__aeabi_dcmplt>
 8009502:	b110      	cbz	r0, 800950a <_printf_float+0x86>
 8009504:	232d      	movs	r3, #45	; 0x2d
 8009506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800950a:	4b92      	ldr	r3, [pc, #584]	; (8009754 <_printf_float+0x2d0>)
 800950c:	4892      	ldr	r0, [pc, #584]	; (8009758 <_printf_float+0x2d4>)
 800950e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009512:	bf94      	ite	ls
 8009514:	4698      	movls	r8, r3
 8009516:	4680      	movhi	r8, r0
 8009518:	2303      	movs	r3, #3
 800951a:	f04f 0a00 	mov.w	sl, #0
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	f02b 0304 	bic.w	r3, fp, #4
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	4633      	mov	r3, r6
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	9700      	str	r7, [sp, #0]
 800952e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009530:	f000 f9d4 	bl	80098dc <_printf_common>
 8009534:	3001      	adds	r0, #1
 8009536:	f040 8090 	bne.w	800965a <_printf_float+0x1d6>
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	b011      	add	sp, #68	; 0x44
 8009540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009544:	4642      	mov	r2, r8
 8009546:	4653      	mov	r3, sl
 8009548:	4640      	mov	r0, r8
 800954a:	4651      	mov	r1, sl
 800954c:	f7f7 face 	bl	8000aec <__aeabi_dcmpun>
 8009550:	b148      	cbz	r0, 8009566 <_printf_float+0xe2>
 8009552:	f1ba 0f00 	cmp.w	sl, #0
 8009556:	bfb8      	it	lt
 8009558:	232d      	movlt	r3, #45	; 0x2d
 800955a:	4880      	ldr	r0, [pc, #512]	; (800975c <_printf_float+0x2d8>)
 800955c:	bfb8      	it	lt
 800955e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009562:	4b7f      	ldr	r3, [pc, #508]	; (8009760 <_printf_float+0x2dc>)
 8009564:	e7d3      	b.n	800950e <_printf_float+0x8a>
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	d142      	bne.n	80095f6 <_printf_float+0x172>
 8009570:	2306      	movs	r3, #6
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	9206      	str	r2, [sp, #24]
 8009578:	aa0e      	add	r2, sp, #56	; 0x38
 800957a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800957e:	aa0d      	add	r2, sp, #52	; 0x34
 8009580:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009584:	9203      	str	r2, [sp, #12]
 8009586:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800958a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	6863      	ldr	r3, [r4, #4]
 8009592:	4642      	mov	r2, r8
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4628      	mov	r0, r5
 8009598:	4653      	mov	r3, sl
 800959a:	910b      	str	r1, [sp, #44]	; 0x2c
 800959c:	f7ff fed4 	bl	8009348 <__cvt>
 80095a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095a2:	4680      	mov	r8, r0
 80095a4:	2947      	cmp	r1, #71	; 0x47
 80095a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095a8:	d108      	bne.n	80095bc <_printf_float+0x138>
 80095aa:	1cc8      	adds	r0, r1, #3
 80095ac:	db02      	blt.n	80095b4 <_printf_float+0x130>
 80095ae:	6863      	ldr	r3, [r4, #4]
 80095b0:	4299      	cmp	r1, r3
 80095b2:	dd40      	ble.n	8009636 <_printf_float+0x1b2>
 80095b4:	f1a9 0902 	sub.w	r9, r9, #2
 80095b8:	fa5f f989 	uxtb.w	r9, r9
 80095bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80095c0:	d81f      	bhi.n	8009602 <_printf_float+0x17e>
 80095c2:	464a      	mov	r2, r9
 80095c4:	3901      	subs	r1, #1
 80095c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80095ca:	910d      	str	r1, [sp, #52]	; 0x34
 80095cc:	f7ff ff1b 	bl	8009406 <__exponent>
 80095d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d2:	4682      	mov	sl, r0
 80095d4:	1813      	adds	r3, r2, r0
 80095d6:	2a01      	cmp	r2, #1
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	dc02      	bgt.n	80095e2 <_printf_float+0x15e>
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	07d2      	lsls	r2, r2, #31
 80095e0:	d501      	bpl.n	80095e6 <_printf_float+0x162>
 80095e2:	3301      	adds	r3, #1
 80095e4:	6123      	str	r3, [r4, #16]
 80095e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d09b      	beq.n	8009526 <_printf_float+0xa2>
 80095ee:	232d      	movs	r3, #45	; 0x2d
 80095f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f4:	e797      	b.n	8009526 <_printf_float+0xa2>
 80095f6:	2947      	cmp	r1, #71	; 0x47
 80095f8:	d1bc      	bne.n	8009574 <_printf_float+0xf0>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1ba      	bne.n	8009574 <_printf_float+0xf0>
 80095fe:	2301      	movs	r3, #1
 8009600:	e7b7      	b.n	8009572 <_printf_float+0xee>
 8009602:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009606:	d118      	bne.n	800963a <_printf_float+0x1b6>
 8009608:	2900      	cmp	r1, #0
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	dd0b      	ble.n	8009626 <_printf_float+0x1a2>
 800960e:	6121      	str	r1, [r4, #16]
 8009610:	b913      	cbnz	r3, 8009618 <_printf_float+0x194>
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	07d0      	lsls	r0, r2, #31
 8009616:	d502      	bpl.n	800961e <_printf_float+0x19a>
 8009618:	3301      	adds	r3, #1
 800961a:	440b      	add	r3, r1
 800961c:	6123      	str	r3, [r4, #16]
 800961e:	f04f 0a00 	mov.w	sl, #0
 8009622:	65a1      	str	r1, [r4, #88]	; 0x58
 8009624:	e7df      	b.n	80095e6 <_printf_float+0x162>
 8009626:	b913      	cbnz	r3, 800962e <_printf_float+0x1aa>
 8009628:	6822      	ldr	r2, [r4, #0]
 800962a:	07d2      	lsls	r2, r2, #31
 800962c:	d501      	bpl.n	8009632 <_printf_float+0x1ae>
 800962e:	3302      	adds	r3, #2
 8009630:	e7f4      	b.n	800961c <_printf_float+0x198>
 8009632:	2301      	movs	r3, #1
 8009634:	e7f2      	b.n	800961c <_printf_float+0x198>
 8009636:	f04f 0967 	mov.w	r9, #103	; 0x67
 800963a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800963c:	4299      	cmp	r1, r3
 800963e:	db05      	blt.n	800964c <_printf_float+0x1c8>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	6121      	str	r1, [r4, #16]
 8009644:	07d8      	lsls	r0, r3, #31
 8009646:	d5ea      	bpl.n	800961e <_printf_float+0x19a>
 8009648:	1c4b      	adds	r3, r1, #1
 800964a:	e7e7      	b.n	800961c <_printf_float+0x198>
 800964c:	2900      	cmp	r1, #0
 800964e:	bfcc      	ite	gt
 8009650:	2201      	movgt	r2, #1
 8009652:	f1c1 0202 	rsble	r2, r1, #2
 8009656:	4413      	add	r3, r2
 8009658:	e7e0      	b.n	800961c <_printf_float+0x198>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	055a      	lsls	r2, r3, #21
 800965e:	d407      	bmi.n	8009670 <_printf_float+0x1ec>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	4642      	mov	r2, r8
 8009664:	4631      	mov	r1, r6
 8009666:	4628      	mov	r0, r5
 8009668:	47b8      	blx	r7
 800966a:	3001      	adds	r0, #1
 800966c:	d12b      	bne.n	80096c6 <_printf_float+0x242>
 800966e:	e764      	b.n	800953a <_printf_float+0xb6>
 8009670:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009674:	f240 80dd 	bls.w	8009832 <_printf_float+0x3ae>
 8009678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	f7f7 fa02 	bl	8000a88 <__aeabi_dcmpeq>
 8009684:	2800      	cmp	r0, #0
 8009686:	d033      	beq.n	80096f0 <_printf_float+0x26c>
 8009688:	2301      	movs	r3, #1
 800968a:	4631      	mov	r1, r6
 800968c:	4628      	mov	r0, r5
 800968e:	4a35      	ldr	r2, [pc, #212]	; (8009764 <_printf_float+0x2e0>)
 8009690:	47b8      	blx	r7
 8009692:	3001      	adds	r0, #1
 8009694:	f43f af51 	beq.w	800953a <_printf_float+0xb6>
 8009698:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800969c:	429a      	cmp	r2, r3
 800969e:	db02      	blt.n	80096a6 <_printf_float+0x222>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	07d8      	lsls	r0, r3, #31
 80096a4:	d50f      	bpl.n	80096c6 <_printf_float+0x242>
 80096a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	f43f af42 	beq.w	800953a <_printf_float+0xb6>
 80096b6:	f04f 0800 	mov.w	r8, #0
 80096ba:	f104 091a 	add.w	r9, r4, #26
 80096be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c0:	3b01      	subs	r3, #1
 80096c2:	4543      	cmp	r3, r8
 80096c4:	dc09      	bgt.n	80096da <_printf_float+0x256>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	079b      	lsls	r3, r3, #30
 80096ca:	f100 8102 	bmi.w	80098d2 <_printf_float+0x44e>
 80096ce:	68e0      	ldr	r0, [r4, #12]
 80096d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d2:	4298      	cmp	r0, r3
 80096d4:	bfb8      	it	lt
 80096d6:	4618      	movlt	r0, r3
 80096d8:	e731      	b.n	800953e <_printf_float+0xba>
 80096da:	2301      	movs	r3, #1
 80096dc:	464a      	mov	r2, r9
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f af28 	beq.w	800953a <_printf_float+0xb6>
 80096ea:	f108 0801 	add.w	r8, r8, #1
 80096ee:	e7e6      	b.n	80096be <_printf_float+0x23a>
 80096f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc38      	bgt.n	8009768 <_printf_float+0x2e4>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4631      	mov	r1, r6
 80096fa:	4628      	mov	r0, r5
 80096fc:	4a19      	ldr	r2, [pc, #100]	; (8009764 <_printf_float+0x2e0>)
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	f43f af1a 	beq.w	800953a <_printf_float+0xb6>
 8009706:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800970a:	4313      	orrs	r3, r2
 800970c:	d102      	bne.n	8009714 <_printf_float+0x290>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	07d9      	lsls	r1, r3, #31
 8009712:	d5d8      	bpl.n	80096c6 <_printf_float+0x242>
 8009714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009718:	4631      	mov	r1, r6
 800971a:	4628      	mov	r0, r5
 800971c:	47b8      	blx	r7
 800971e:	3001      	adds	r0, #1
 8009720:	f43f af0b 	beq.w	800953a <_printf_float+0xb6>
 8009724:	f04f 0900 	mov.w	r9, #0
 8009728:	f104 0a1a 	add.w	sl, r4, #26
 800972c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800972e:	425b      	negs	r3, r3
 8009730:	454b      	cmp	r3, r9
 8009732:	dc01      	bgt.n	8009738 <_printf_float+0x2b4>
 8009734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009736:	e794      	b.n	8009662 <_printf_float+0x1de>
 8009738:	2301      	movs	r3, #1
 800973a:	4652      	mov	r2, sl
 800973c:	4631      	mov	r1, r6
 800973e:	4628      	mov	r0, r5
 8009740:	47b8      	blx	r7
 8009742:	3001      	adds	r0, #1
 8009744:	f43f aef9 	beq.w	800953a <_printf_float+0xb6>
 8009748:	f109 0901 	add.w	r9, r9, #1
 800974c:	e7ee      	b.n	800972c <_printf_float+0x2a8>
 800974e:	bf00      	nop
 8009750:	7fefffff 	.word	0x7fefffff
 8009754:	0800be5d 	.word	0x0800be5d
 8009758:	0800be61 	.word	0x0800be61
 800975c:	0800be69 	.word	0x0800be69
 8009760:	0800be65 	.word	0x0800be65
 8009764:	0800be6d 	.word	0x0800be6d
 8009768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800976a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800976c:	429a      	cmp	r2, r3
 800976e:	bfa8      	it	ge
 8009770:	461a      	movge	r2, r3
 8009772:	2a00      	cmp	r2, #0
 8009774:	4691      	mov	r9, r2
 8009776:	dc37      	bgt.n	80097e8 <_printf_float+0x364>
 8009778:	f04f 0b00 	mov.w	fp, #0
 800977c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009780:	f104 021a 	add.w	r2, r4, #26
 8009784:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009788:	ebaa 0309 	sub.w	r3, sl, r9
 800978c:	455b      	cmp	r3, fp
 800978e:	dc33      	bgt.n	80097f8 <_printf_float+0x374>
 8009790:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009794:	429a      	cmp	r2, r3
 8009796:	db3b      	blt.n	8009810 <_printf_float+0x38c>
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	07da      	lsls	r2, r3, #31
 800979c:	d438      	bmi.n	8009810 <_printf_float+0x38c>
 800979e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80097a2:	eba3 020a 	sub.w	r2, r3, sl
 80097a6:	eba3 0901 	sub.w	r9, r3, r1
 80097aa:	4591      	cmp	r9, r2
 80097ac:	bfa8      	it	ge
 80097ae:	4691      	movge	r9, r2
 80097b0:	f1b9 0f00 	cmp.w	r9, #0
 80097b4:	dc34      	bgt.n	8009820 <_printf_float+0x39c>
 80097b6:	f04f 0800 	mov.w	r8, #0
 80097ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097be:	f104 0a1a 	add.w	sl, r4, #26
 80097c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	eba3 0309 	sub.w	r3, r3, r9
 80097cc:	4543      	cmp	r3, r8
 80097ce:	f77f af7a 	ble.w	80096c6 <_printf_float+0x242>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4652      	mov	r2, sl
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	47b8      	blx	r7
 80097dc:	3001      	adds	r0, #1
 80097de:	f43f aeac 	beq.w	800953a <_printf_float+0xb6>
 80097e2:	f108 0801 	add.w	r8, r8, #1
 80097e6:	e7ec      	b.n	80097c2 <_printf_float+0x33e>
 80097e8:	4613      	mov	r3, r2
 80097ea:	4631      	mov	r1, r6
 80097ec:	4642      	mov	r2, r8
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	d1c0      	bne.n	8009778 <_printf_float+0x2f4>
 80097f6:	e6a0      	b.n	800953a <_printf_float+0xb6>
 80097f8:	2301      	movs	r3, #1
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f ae99 	beq.w	800953a <_printf_float+0xb6>
 8009808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800980a:	f10b 0b01 	add.w	fp, fp, #1
 800980e:	e7b9      	b.n	8009784 <_printf_float+0x300>
 8009810:	4631      	mov	r1, r6
 8009812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009816:	4628      	mov	r0, r5
 8009818:	47b8      	blx	r7
 800981a:	3001      	adds	r0, #1
 800981c:	d1bf      	bne.n	800979e <_printf_float+0x31a>
 800981e:	e68c      	b.n	800953a <_printf_float+0xb6>
 8009820:	464b      	mov	r3, r9
 8009822:	4631      	mov	r1, r6
 8009824:	4628      	mov	r0, r5
 8009826:	eb08 020a 	add.w	r2, r8, sl
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	d1c2      	bne.n	80097b6 <_printf_float+0x332>
 8009830:	e683      	b.n	800953a <_printf_float+0xb6>
 8009832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009834:	2a01      	cmp	r2, #1
 8009836:	dc01      	bgt.n	800983c <_printf_float+0x3b8>
 8009838:	07db      	lsls	r3, r3, #31
 800983a:	d537      	bpl.n	80098ac <_printf_float+0x428>
 800983c:	2301      	movs	r3, #1
 800983e:	4642      	mov	r2, r8
 8009840:	4631      	mov	r1, r6
 8009842:	4628      	mov	r0, r5
 8009844:	47b8      	blx	r7
 8009846:	3001      	adds	r0, #1
 8009848:	f43f ae77 	beq.w	800953a <_printf_float+0xb6>
 800984c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009850:	4631      	mov	r1, r6
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	f43f ae6f 	beq.w	800953a <_printf_float+0xb6>
 800985c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009860:	2200      	movs	r2, #0
 8009862:	2300      	movs	r3, #0
 8009864:	f7f7 f910 	bl	8000a88 <__aeabi_dcmpeq>
 8009868:	b9d8      	cbnz	r0, 80098a2 <_printf_float+0x41e>
 800986a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800986c:	f108 0201 	add.w	r2, r8, #1
 8009870:	3b01      	subs	r3, #1
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	47b8      	blx	r7
 8009878:	3001      	adds	r0, #1
 800987a:	d10e      	bne.n	800989a <_printf_float+0x416>
 800987c:	e65d      	b.n	800953a <_printf_float+0xb6>
 800987e:	2301      	movs	r3, #1
 8009880:	464a      	mov	r2, r9
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	f43f ae56 	beq.w	800953a <_printf_float+0xb6>
 800988e:	f108 0801 	add.w	r8, r8, #1
 8009892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009894:	3b01      	subs	r3, #1
 8009896:	4543      	cmp	r3, r8
 8009898:	dcf1      	bgt.n	800987e <_printf_float+0x3fa>
 800989a:	4653      	mov	r3, sl
 800989c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098a0:	e6e0      	b.n	8009664 <_printf_float+0x1e0>
 80098a2:	f04f 0800 	mov.w	r8, #0
 80098a6:	f104 091a 	add.w	r9, r4, #26
 80098aa:	e7f2      	b.n	8009892 <_printf_float+0x40e>
 80098ac:	2301      	movs	r3, #1
 80098ae:	4642      	mov	r2, r8
 80098b0:	e7df      	b.n	8009872 <_printf_float+0x3ee>
 80098b2:	2301      	movs	r3, #1
 80098b4:	464a      	mov	r2, r9
 80098b6:	4631      	mov	r1, r6
 80098b8:	4628      	mov	r0, r5
 80098ba:	47b8      	blx	r7
 80098bc:	3001      	adds	r0, #1
 80098be:	f43f ae3c 	beq.w	800953a <_printf_float+0xb6>
 80098c2:	f108 0801 	add.w	r8, r8, #1
 80098c6:	68e3      	ldr	r3, [r4, #12]
 80098c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098ca:	1a5b      	subs	r3, r3, r1
 80098cc:	4543      	cmp	r3, r8
 80098ce:	dcf0      	bgt.n	80098b2 <_printf_float+0x42e>
 80098d0:	e6fd      	b.n	80096ce <_printf_float+0x24a>
 80098d2:	f04f 0800 	mov.w	r8, #0
 80098d6:	f104 0919 	add.w	r9, r4, #25
 80098da:	e7f4      	b.n	80098c6 <_printf_float+0x442>

080098dc <_printf_common>:
 80098dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	4616      	mov	r6, r2
 80098e2:	4699      	mov	r9, r3
 80098e4:	688a      	ldr	r2, [r1, #8]
 80098e6:	690b      	ldr	r3, [r1, #16]
 80098e8:	4607      	mov	r7, r0
 80098ea:	4293      	cmp	r3, r2
 80098ec:	bfb8      	it	lt
 80098ee:	4613      	movlt	r3, r2
 80098f0:	6033      	str	r3, [r6, #0]
 80098f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f6:	460c      	mov	r4, r1
 80098f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098fc:	b10a      	cbz	r2, 8009902 <_printf_common+0x26>
 80098fe:	3301      	adds	r3, #1
 8009900:	6033      	str	r3, [r6, #0]
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	0699      	lsls	r1, r3, #26
 8009906:	bf42      	ittt	mi
 8009908:	6833      	ldrmi	r3, [r6, #0]
 800990a:	3302      	addmi	r3, #2
 800990c:	6033      	strmi	r3, [r6, #0]
 800990e:	6825      	ldr	r5, [r4, #0]
 8009910:	f015 0506 	ands.w	r5, r5, #6
 8009914:	d106      	bne.n	8009924 <_printf_common+0x48>
 8009916:	f104 0a19 	add.w	sl, r4, #25
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	6832      	ldr	r2, [r6, #0]
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	42ab      	cmp	r3, r5
 8009922:	dc28      	bgt.n	8009976 <_printf_common+0x9a>
 8009924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009928:	1e13      	subs	r3, r2, #0
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	bf18      	it	ne
 800992e:	2301      	movne	r3, #1
 8009930:	0692      	lsls	r2, r2, #26
 8009932:	d42d      	bmi.n	8009990 <_printf_common+0xb4>
 8009934:	4649      	mov	r1, r9
 8009936:	4638      	mov	r0, r7
 8009938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800993c:	47c0      	blx	r8
 800993e:	3001      	adds	r0, #1
 8009940:	d020      	beq.n	8009984 <_printf_common+0xa8>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	68e5      	ldr	r5, [r4, #12]
 8009946:	f003 0306 	and.w	r3, r3, #6
 800994a:	2b04      	cmp	r3, #4
 800994c:	bf18      	it	ne
 800994e:	2500      	movne	r5, #0
 8009950:	6832      	ldr	r2, [r6, #0]
 8009952:	f04f 0600 	mov.w	r6, #0
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	bf08      	it	eq
 800995a:	1aad      	subeq	r5, r5, r2
 800995c:	6922      	ldr	r2, [r4, #16]
 800995e:	bf08      	it	eq
 8009960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009964:	4293      	cmp	r3, r2
 8009966:	bfc4      	itt	gt
 8009968:	1a9b      	subgt	r3, r3, r2
 800996a:	18ed      	addgt	r5, r5, r3
 800996c:	341a      	adds	r4, #26
 800996e:	42b5      	cmp	r5, r6
 8009970:	d11a      	bne.n	80099a8 <_printf_common+0xcc>
 8009972:	2000      	movs	r0, #0
 8009974:	e008      	b.n	8009988 <_printf_common+0xac>
 8009976:	2301      	movs	r3, #1
 8009978:	4652      	mov	r2, sl
 800997a:	4649      	mov	r1, r9
 800997c:	4638      	mov	r0, r7
 800997e:	47c0      	blx	r8
 8009980:	3001      	adds	r0, #1
 8009982:	d103      	bne.n	800998c <_printf_common+0xb0>
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	3501      	adds	r5, #1
 800998e:	e7c4      	b.n	800991a <_printf_common+0x3e>
 8009990:	2030      	movs	r0, #48	; 0x30
 8009992:	18e1      	adds	r1, r4, r3
 8009994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800999e:	4422      	add	r2, r4
 80099a0:	3302      	adds	r3, #2
 80099a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a6:	e7c5      	b.n	8009934 <_printf_common+0x58>
 80099a8:	2301      	movs	r3, #1
 80099aa:	4622      	mov	r2, r4
 80099ac:	4649      	mov	r1, r9
 80099ae:	4638      	mov	r0, r7
 80099b0:	47c0      	blx	r8
 80099b2:	3001      	adds	r0, #1
 80099b4:	d0e6      	beq.n	8009984 <_printf_common+0xa8>
 80099b6:	3601      	adds	r6, #1
 80099b8:	e7d9      	b.n	800996e <_printf_common+0x92>
	...

080099bc <_printf_i>:
 80099bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	7e0f      	ldrb	r7, [r1, #24]
 80099c2:	4691      	mov	r9, r2
 80099c4:	2f78      	cmp	r7, #120	; 0x78
 80099c6:	4680      	mov	r8, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	469a      	mov	sl, r3
 80099cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099d2:	d807      	bhi.n	80099e4 <_printf_i+0x28>
 80099d4:	2f62      	cmp	r7, #98	; 0x62
 80099d6:	d80a      	bhi.n	80099ee <_printf_i+0x32>
 80099d8:	2f00      	cmp	r7, #0
 80099da:	f000 80d9 	beq.w	8009b90 <_printf_i+0x1d4>
 80099de:	2f58      	cmp	r7, #88	; 0x58
 80099e0:	f000 80a4 	beq.w	8009b2c <_printf_i+0x170>
 80099e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099ec:	e03a      	b.n	8009a64 <_printf_i+0xa8>
 80099ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099f2:	2b15      	cmp	r3, #21
 80099f4:	d8f6      	bhi.n	80099e4 <_printf_i+0x28>
 80099f6:	a101      	add	r1, pc, #4	; (adr r1, 80099fc <_printf_i+0x40>)
 80099f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099fc:	08009a55 	.word	0x08009a55
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	080099e5 	.word	0x080099e5
 8009a08:	080099e5 	.word	0x080099e5
 8009a0c:	080099e5 	.word	0x080099e5
 8009a10:	080099e5 	.word	0x080099e5
 8009a14:	08009a69 	.word	0x08009a69
 8009a18:	080099e5 	.word	0x080099e5
 8009a1c:	080099e5 	.word	0x080099e5
 8009a20:	080099e5 	.word	0x080099e5
 8009a24:	080099e5 	.word	0x080099e5
 8009a28:	08009b77 	.word	0x08009b77
 8009a2c:	08009a99 	.word	0x08009a99
 8009a30:	08009b59 	.word	0x08009b59
 8009a34:	080099e5 	.word	0x080099e5
 8009a38:	080099e5 	.word	0x080099e5
 8009a3c:	08009b99 	.word	0x08009b99
 8009a40:	080099e5 	.word	0x080099e5
 8009a44:	08009a99 	.word	0x08009a99
 8009a48:	080099e5 	.word	0x080099e5
 8009a4c:	080099e5 	.word	0x080099e5
 8009a50:	08009b61 	.word	0x08009b61
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	1d1a      	adds	r2, r3, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	602a      	str	r2, [r5, #0]
 8009a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0a4      	b.n	8009bb2 <_printf_i+0x1f6>
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	6829      	ldr	r1, [r5, #0]
 8009a6c:	0606      	lsls	r6, r0, #24
 8009a6e:	f101 0304 	add.w	r3, r1, #4
 8009a72:	d50a      	bpl.n	8009a8a <_printf_i+0xce>
 8009a74:	680e      	ldr	r6, [r1, #0]
 8009a76:	602b      	str	r3, [r5, #0]
 8009a78:	2e00      	cmp	r6, #0
 8009a7a:	da03      	bge.n	8009a84 <_printf_i+0xc8>
 8009a7c:	232d      	movs	r3, #45	; 0x2d
 8009a7e:	4276      	negs	r6, r6
 8009a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a84:	230a      	movs	r3, #10
 8009a86:	485e      	ldr	r0, [pc, #376]	; (8009c00 <_printf_i+0x244>)
 8009a88:	e019      	b.n	8009abe <_printf_i+0x102>
 8009a8a:	680e      	ldr	r6, [r1, #0]
 8009a8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	bf18      	it	ne
 8009a94:	b236      	sxthne	r6, r6
 8009a96:	e7ef      	b.n	8009a78 <_printf_i+0xbc>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	6820      	ldr	r0, [r4, #0]
 8009a9c:	1d19      	adds	r1, r3, #4
 8009a9e:	6029      	str	r1, [r5, #0]
 8009aa0:	0601      	lsls	r1, r0, #24
 8009aa2:	d501      	bpl.n	8009aa8 <_printf_i+0xec>
 8009aa4:	681e      	ldr	r6, [r3, #0]
 8009aa6:	e002      	b.n	8009aae <_printf_i+0xf2>
 8009aa8:	0646      	lsls	r6, r0, #25
 8009aaa:	d5fb      	bpl.n	8009aa4 <_printf_i+0xe8>
 8009aac:	881e      	ldrh	r6, [r3, #0]
 8009aae:	2f6f      	cmp	r7, #111	; 0x6f
 8009ab0:	bf0c      	ite	eq
 8009ab2:	2308      	moveq	r3, #8
 8009ab4:	230a      	movne	r3, #10
 8009ab6:	4852      	ldr	r0, [pc, #328]	; (8009c00 <_printf_i+0x244>)
 8009ab8:	2100      	movs	r1, #0
 8009aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009abe:	6865      	ldr	r5, [r4, #4]
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	bfa8      	it	ge
 8009ac4:	6821      	ldrge	r1, [r4, #0]
 8009ac6:	60a5      	str	r5, [r4, #8]
 8009ac8:	bfa4      	itt	ge
 8009aca:	f021 0104 	bicge.w	r1, r1, #4
 8009ace:	6021      	strge	r1, [r4, #0]
 8009ad0:	b90e      	cbnz	r6, 8009ad6 <_printf_i+0x11a>
 8009ad2:	2d00      	cmp	r5, #0
 8009ad4:	d04d      	beq.n	8009b72 <_printf_i+0x1b6>
 8009ad6:	4615      	mov	r5, r2
 8009ad8:	fbb6 f1f3 	udiv	r1, r6, r3
 8009adc:	fb03 6711 	mls	r7, r3, r1, r6
 8009ae0:	5dc7      	ldrb	r7, [r0, r7]
 8009ae2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ae6:	4637      	mov	r7, r6
 8009ae8:	42bb      	cmp	r3, r7
 8009aea:	460e      	mov	r6, r1
 8009aec:	d9f4      	bls.n	8009ad8 <_printf_i+0x11c>
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	d10b      	bne.n	8009b0a <_printf_i+0x14e>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	07de      	lsls	r6, r3, #31
 8009af6:	d508      	bpl.n	8009b0a <_printf_i+0x14e>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	6861      	ldr	r1, [r4, #4]
 8009afc:	4299      	cmp	r1, r3
 8009afe:	bfde      	ittt	le
 8009b00:	2330      	movle	r3, #48	; 0x30
 8009b02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b0a:	1b52      	subs	r2, r2, r5
 8009b0c:	6122      	str	r2, [r4, #16]
 8009b0e:	464b      	mov	r3, r9
 8009b10:	4621      	mov	r1, r4
 8009b12:	4640      	mov	r0, r8
 8009b14:	f8cd a000 	str.w	sl, [sp]
 8009b18:	aa03      	add	r2, sp, #12
 8009b1a:	f7ff fedf 	bl	80098dc <_printf_common>
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d14c      	bne.n	8009bbc <_printf_i+0x200>
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295
 8009b26:	b004      	add	sp, #16
 8009b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2c:	4834      	ldr	r0, [pc, #208]	; (8009c00 <_printf_i+0x244>)
 8009b2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b32:	6829      	ldr	r1, [r5, #0]
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b3a:	6029      	str	r1, [r5, #0]
 8009b3c:	061d      	lsls	r5, r3, #24
 8009b3e:	d514      	bpl.n	8009b6a <_printf_i+0x1ae>
 8009b40:	07df      	lsls	r7, r3, #31
 8009b42:	bf44      	itt	mi
 8009b44:	f043 0320 	orrmi.w	r3, r3, #32
 8009b48:	6023      	strmi	r3, [r4, #0]
 8009b4a:	b91e      	cbnz	r6, 8009b54 <_printf_i+0x198>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	f023 0320 	bic.w	r3, r3, #32
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	2310      	movs	r3, #16
 8009b56:	e7af      	b.n	8009ab8 <_printf_i+0xfc>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	f043 0320 	orr.w	r3, r3, #32
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	2378      	movs	r3, #120	; 0x78
 8009b62:	4828      	ldr	r0, [pc, #160]	; (8009c04 <_printf_i+0x248>)
 8009b64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b68:	e7e3      	b.n	8009b32 <_printf_i+0x176>
 8009b6a:	0659      	lsls	r1, r3, #25
 8009b6c:	bf48      	it	mi
 8009b6e:	b2b6      	uxthmi	r6, r6
 8009b70:	e7e6      	b.n	8009b40 <_printf_i+0x184>
 8009b72:	4615      	mov	r5, r2
 8009b74:	e7bb      	b.n	8009aee <_printf_i+0x132>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	6826      	ldr	r6, [r4, #0]
 8009b7a:	1d18      	adds	r0, r3, #4
 8009b7c:	6961      	ldr	r1, [r4, #20]
 8009b7e:	6028      	str	r0, [r5, #0]
 8009b80:	0635      	lsls	r5, r6, #24
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	d501      	bpl.n	8009b8a <_printf_i+0x1ce>
 8009b86:	6019      	str	r1, [r3, #0]
 8009b88:	e002      	b.n	8009b90 <_printf_i+0x1d4>
 8009b8a:	0670      	lsls	r0, r6, #25
 8009b8c:	d5fb      	bpl.n	8009b86 <_printf_i+0x1ca>
 8009b8e:	8019      	strh	r1, [r3, #0]
 8009b90:	2300      	movs	r3, #0
 8009b92:	4615      	mov	r5, r2
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	e7ba      	b.n	8009b0e <_printf_i+0x152>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	602a      	str	r2, [r5, #0]
 8009ba0:	681d      	ldr	r5, [r3, #0]
 8009ba2:	6862      	ldr	r2, [r4, #4]
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f001 f8e5 	bl	800ad74 <memchr>
 8009baa:	b108      	cbz	r0, 8009bb0 <_printf_i+0x1f4>
 8009bac:	1b40      	subs	r0, r0, r5
 8009bae:	6060      	str	r0, [r4, #4]
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	6123      	str	r3, [r4, #16]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bba:	e7a8      	b.n	8009b0e <_printf_i+0x152>
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	47d0      	blx	sl
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d0ab      	beq.n	8009b22 <_printf_i+0x166>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	079b      	lsls	r3, r3, #30
 8009bce:	d413      	bmi.n	8009bf8 <_printf_i+0x23c>
 8009bd0:	68e0      	ldr	r0, [r4, #12]
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	bfb8      	it	lt
 8009bd8:	4618      	movlt	r0, r3
 8009bda:	e7a4      	b.n	8009b26 <_printf_i+0x16a>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	4632      	mov	r2, r6
 8009be0:	4649      	mov	r1, r9
 8009be2:	4640      	mov	r0, r8
 8009be4:	47d0      	blx	sl
 8009be6:	3001      	adds	r0, #1
 8009be8:	d09b      	beq.n	8009b22 <_printf_i+0x166>
 8009bea:	3501      	adds	r5, #1
 8009bec:	68e3      	ldr	r3, [r4, #12]
 8009bee:	9903      	ldr	r1, [sp, #12]
 8009bf0:	1a5b      	subs	r3, r3, r1
 8009bf2:	42ab      	cmp	r3, r5
 8009bf4:	dcf2      	bgt.n	8009bdc <_printf_i+0x220>
 8009bf6:	e7eb      	b.n	8009bd0 <_printf_i+0x214>
 8009bf8:	2500      	movs	r5, #0
 8009bfa:	f104 0619 	add.w	r6, r4, #25
 8009bfe:	e7f5      	b.n	8009bec <_printf_i+0x230>
 8009c00:	0800be6f 	.word	0x0800be6f
 8009c04:	0800be80 	.word	0x0800be80

08009c08 <cleanup_glue>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	6809      	ldr	r1, [r1, #0]
 8009c0e:	4605      	mov	r5, r0
 8009c10:	b109      	cbz	r1, 8009c16 <cleanup_glue+0xe>
 8009c12:	f7ff fff9 	bl	8009c08 <cleanup_glue>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c1e:	f7ff b95f 	b.w	8008ee0 <_free_r>
	...

08009c24 <_reclaim_reent>:
 8009c24:	4b2c      	ldr	r3, [pc, #176]	; (8009cd8 <_reclaim_reent+0xb4>)
 8009c26:	b570      	push	{r4, r5, r6, lr}
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4283      	cmp	r3, r0
 8009c2e:	d051      	beq.n	8009cd4 <_reclaim_reent+0xb0>
 8009c30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c32:	b143      	cbz	r3, 8009c46 <_reclaim_reent+0x22>
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d14a      	bne.n	8009cd0 <_reclaim_reent+0xac>
 8009c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c3c:	6819      	ldr	r1, [r3, #0]
 8009c3e:	b111      	cbz	r1, 8009c46 <_reclaim_reent+0x22>
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7ff f94d 	bl	8008ee0 <_free_r>
 8009c46:	6961      	ldr	r1, [r4, #20]
 8009c48:	b111      	cbz	r1, 8009c50 <_reclaim_reent+0x2c>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f7ff f948 	bl	8008ee0 <_free_r>
 8009c50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c52:	b111      	cbz	r1, 8009c5a <_reclaim_reent+0x36>
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff f943 	bl	8008ee0 <_free_r>
 8009c5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c5c:	b111      	cbz	r1, 8009c64 <_reclaim_reent+0x40>
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7ff f93e 	bl	8008ee0 <_free_r>
 8009c64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c66:	b111      	cbz	r1, 8009c6e <_reclaim_reent+0x4a>
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7ff f939 	bl	8008ee0 <_free_r>
 8009c6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009c70:	b111      	cbz	r1, 8009c78 <_reclaim_reent+0x54>
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff f934 	bl	8008ee0 <_free_r>
 8009c78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c7a:	b111      	cbz	r1, 8009c82 <_reclaim_reent+0x5e>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f7ff f92f 	bl	8008ee0 <_free_r>
 8009c82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009c84:	b111      	cbz	r1, 8009c8c <_reclaim_reent+0x68>
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7ff f92a 	bl	8008ee0 <_free_r>
 8009c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8e:	b111      	cbz	r1, 8009c96 <_reclaim_reent+0x72>
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7ff f925 	bl	8008ee0 <_free_r>
 8009c96:	69a3      	ldr	r3, [r4, #24]
 8009c98:	b1e3      	cbz	r3, 8009cd4 <_reclaim_reent+0xb0>
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c9e:	4798      	blx	r3
 8009ca0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ca2:	b1b9      	cbz	r1, 8009cd4 <_reclaim_reent+0xb0>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009caa:	f7ff bfad 	b.w	8009c08 <cleanup_glue>
 8009cae:	5949      	ldr	r1, [r1, r5]
 8009cb0:	b941      	cbnz	r1, 8009cc4 <_reclaim_reent+0xa0>
 8009cb2:	3504      	adds	r5, #4
 8009cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb6:	2d80      	cmp	r5, #128	; 0x80
 8009cb8:	68d9      	ldr	r1, [r3, #12]
 8009cba:	d1f8      	bne.n	8009cae <_reclaim_reent+0x8a>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7ff f90f 	bl	8008ee0 <_free_r>
 8009cc2:	e7ba      	b.n	8009c3a <_reclaim_reent+0x16>
 8009cc4:	680e      	ldr	r6, [r1, #0]
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7ff f90a 	bl	8008ee0 <_free_r>
 8009ccc:	4631      	mov	r1, r6
 8009cce:	e7ef      	b.n	8009cb0 <_reclaim_reent+0x8c>
 8009cd0:	2500      	movs	r5, #0
 8009cd2:	e7ef      	b.n	8009cb4 <_reclaim_reent+0x90>
 8009cd4:	bd70      	pop	{r4, r5, r6, pc}
 8009cd6:	bf00      	nop
 8009cd8:	200000a0 	.word	0x200000a0

08009cdc <_sbrk_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4d05      	ldr	r5, [pc, #20]	; (8009cf8 <_sbrk_r+0x1c>)
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	602b      	str	r3, [r5, #0]
 8009ce8:	f7f8 faf4 	bl	80022d4 <_sbrk>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d102      	bne.n	8009cf6 <_sbrk_r+0x1a>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	b103      	cbz	r3, 8009cf6 <_sbrk_r+0x1a>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	20001f38 	.word	0x20001f38

08009cfc <__sread>:
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	460c      	mov	r4, r1
 8009d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d04:	f001 fbe6 	bl	800b4d4 <_read_r>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	bfab      	itete	ge
 8009d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d10:	181b      	addge	r3, r3, r0
 8009d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d16:	bfac      	ite	ge
 8009d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d1a:	81a3      	strhlt	r3, [r4, #12]
 8009d1c:	bd10      	pop	{r4, pc}

08009d1e <__swrite>:
 8009d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	461f      	mov	r7, r3
 8009d24:	898b      	ldrh	r3, [r1, #12]
 8009d26:	4605      	mov	r5, r0
 8009d28:	05db      	lsls	r3, r3, #23
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	d505      	bpl.n	8009d3c <__swrite+0x1e>
 8009d30:	2302      	movs	r3, #2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d38:	f000 ffa4 	bl	800ac84 <_lseek_r>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	4632      	mov	r2, r6
 8009d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	4628      	mov	r0, r5
 8009d48:	463b      	mov	r3, r7
 8009d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d52:	f000 b869 	b.w	8009e28 <_write_r>

08009d56 <__sseek>:
 8009d56:	b510      	push	{r4, lr}
 8009d58:	460c      	mov	r4, r1
 8009d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5e:	f000 ff91 	bl	800ac84 <_lseek_r>
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	bf15      	itete	ne
 8009d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d72:	81a3      	strheq	r3, [r4, #12]
 8009d74:	bf18      	it	ne
 8009d76:	81a3      	strhne	r3, [r4, #12]
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <__sclose>:
 8009d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7e:	f000 b8f1 	b.w	8009f64 <_close_r>
	...

08009d84 <__swbuf_r>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	460e      	mov	r6, r1
 8009d88:	4614      	mov	r4, r2
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	b118      	cbz	r0, 8009d96 <__swbuf_r+0x12>
 8009d8e:	6983      	ldr	r3, [r0, #24]
 8009d90:	b90b      	cbnz	r3, 8009d96 <__swbuf_r+0x12>
 8009d92:	f7fe ffaf 	bl	8008cf4 <__sinit>
 8009d96:	4b21      	ldr	r3, [pc, #132]	; (8009e1c <__swbuf_r+0x98>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	d12b      	bne.n	8009df4 <__swbuf_r+0x70>
 8009d9c:	686c      	ldr	r4, [r5, #4]
 8009d9e:	69a3      	ldr	r3, [r4, #24]
 8009da0:	60a3      	str	r3, [r4, #8]
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	071a      	lsls	r2, r3, #28
 8009da6:	d52f      	bpl.n	8009e08 <__swbuf_r+0x84>
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	b36b      	cbz	r3, 8009e08 <__swbuf_r+0x84>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	b2f6      	uxtb	r6, r6
 8009db2:	1ac0      	subs	r0, r0, r3
 8009db4:	6963      	ldr	r3, [r4, #20]
 8009db6:	4637      	mov	r7, r6
 8009db8:	4283      	cmp	r3, r0
 8009dba:	dc04      	bgt.n	8009dc6 <__swbuf_r+0x42>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f7fe ff04 	bl	8008bcc <_fflush_r>
 8009dc4:	bb30      	cbnz	r0, 8009e14 <__swbuf_r+0x90>
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	3001      	adds	r0, #1
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	60a3      	str	r3, [r4, #8]
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	6022      	str	r2, [r4, #0]
 8009dd4:	701e      	strb	r6, [r3, #0]
 8009dd6:	6963      	ldr	r3, [r4, #20]
 8009dd8:	4283      	cmp	r3, r0
 8009dda:	d004      	beq.n	8009de6 <__swbuf_r+0x62>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	07db      	lsls	r3, r3, #31
 8009de0:	d506      	bpl.n	8009df0 <__swbuf_r+0x6c>
 8009de2:	2e0a      	cmp	r6, #10
 8009de4:	d104      	bne.n	8009df0 <__swbuf_r+0x6c>
 8009de6:	4621      	mov	r1, r4
 8009de8:	4628      	mov	r0, r5
 8009dea:	f7fe feef 	bl	8008bcc <_fflush_r>
 8009dee:	b988      	cbnz	r0, 8009e14 <__swbuf_r+0x90>
 8009df0:	4638      	mov	r0, r7
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <__swbuf_r+0x9c>)
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d101      	bne.n	8009dfe <__swbuf_r+0x7a>
 8009dfa:	68ac      	ldr	r4, [r5, #8]
 8009dfc:	e7cf      	b.n	8009d9e <__swbuf_r+0x1a>
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <__swbuf_r+0xa0>)
 8009e00:	429c      	cmp	r4, r3
 8009e02:	bf08      	it	eq
 8009e04:	68ec      	ldreq	r4, [r5, #12]
 8009e06:	e7ca      	b.n	8009d9e <__swbuf_r+0x1a>
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f000 f81e 	bl	8009e4c <__swsetup_r>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d0cb      	beq.n	8009dac <__swbuf_r+0x28>
 8009e14:	f04f 37ff 	mov.w	r7, #4294967295
 8009e18:	e7ea      	b.n	8009df0 <__swbuf_r+0x6c>
 8009e1a:	bf00      	nop
 8009e1c:	0800be08 	.word	0x0800be08
 8009e20:	0800be28 	.word	0x0800be28
 8009e24:	0800bde8 	.word	0x0800bde8

08009e28 <_write_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	2200      	movs	r2, #0
 8009e32:	4d05      	ldr	r5, [pc, #20]	; (8009e48 <_write_r+0x20>)
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f7 fee4 	bl	8001c04 <_write>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_write_r+0x1e>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_write_r+0x1e>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20001f38 	.word	0x20001f38

08009e4c <__swsetup_r>:
 8009e4c:	4b32      	ldr	r3, [pc, #200]	; (8009f18 <__swsetup_r+0xcc>)
 8009e4e:	b570      	push	{r4, r5, r6, lr}
 8009e50:	681d      	ldr	r5, [r3, #0]
 8009e52:	4606      	mov	r6, r0
 8009e54:	460c      	mov	r4, r1
 8009e56:	b125      	cbz	r5, 8009e62 <__swsetup_r+0x16>
 8009e58:	69ab      	ldr	r3, [r5, #24]
 8009e5a:	b913      	cbnz	r3, 8009e62 <__swsetup_r+0x16>
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f7fe ff49 	bl	8008cf4 <__sinit>
 8009e62:	4b2e      	ldr	r3, [pc, #184]	; (8009f1c <__swsetup_r+0xd0>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	d10f      	bne.n	8009e88 <__swsetup_r+0x3c>
 8009e68:	686c      	ldr	r4, [r5, #4]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e70:	0719      	lsls	r1, r3, #28
 8009e72:	d42c      	bmi.n	8009ece <__swsetup_r+0x82>
 8009e74:	06dd      	lsls	r5, r3, #27
 8009e76:	d411      	bmi.n	8009e9c <__swsetup_r+0x50>
 8009e78:	2309      	movs	r3, #9
 8009e7a:	6033      	str	r3, [r6, #0]
 8009e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	e03e      	b.n	8009f06 <__swsetup_r+0xba>
 8009e88:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <__swsetup_r+0xd4>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d101      	bne.n	8009e92 <__swsetup_r+0x46>
 8009e8e:	68ac      	ldr	r4, [r5, #8]
 8009e90:	e7eb      	b.n	8009e6a <__swsetup_r+0x1e>
 8009e92:	4b24      	ldr	r3, [pc, #144]	; (8009f24 <__swsetup_r+0xd8>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	bf08      	it	eq
 8009e98:	68ec      	ldreq	r4, [r5, #12]
 8009e9a:	e7e6      	b.n	8009e6a <__swsetup_r+0x1e>
 8009e9c:	0758      	lsls	r0, r3, #29
 8009e9e:	d512      	bpl.n	8009ec6 <__swsetup_r+0x7a>
 8009ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ea2:	b141      	cbz	r1, 8009eb6 <__swsetup_r+0x6a>
 8009ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <__swsetup_r+0x66>
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff f817 	bl	8008ee0 <_free_r>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6063      	str	r3, [r4, #4]
 8009ec2:	6923      	ldr	r3, [r4, #16]
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	f043 0308 	orr.w	r3, r3, #8
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	b94b      	cbnz	r3, 8009ee6 <__swsetup_r+0x9a>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009edc:	d003      	beq.n	8009ee6 <__swsetup_r+0x9a>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 ff07 	bl	800acf4 <__smakebuf_r>
 8009ee6:	89a0      	ldrh	r0, [r4, #12]
 8009ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eec:	f010 0301 	ands.w	r3, r0, #1
 8009ef0:	d00a      	beq.n	8009f08 <__swsetup_r+0xbc>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60a3      	str	r3, [r4, #8]
 8009ef6:	6963      	ldr	r3, [r4, #20]
 8009ef8:	425b      	negs	r3, r3
 8009efa:	61a3      	str	r3, [r4, #24]
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	b943      	cbnz	r3, 8009f12 <__swsetup_r+0xc6>
 8009f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f04:	d1ba      	bne.n	8009e7c <__swsetup_r+0x30>
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	0781      	lsls	r1, r0, #30
 8009f0a:	bf58      	it	pl
 8009f0c:	6963      	ldrpl	r3, [r4, #20]
 8009f0e:	60a3      	str	r3, [r4, #8]
 8009f10:	e7f4      	b.n	8009efc <__swsetup_r+0xb0>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e7f7      	b.n	8009f06 <__swsetup_r+0xba>
 8009f16:	bf00      	nop
 8009f18:	200000a0 	.word	0x200000a0
 8009f1c:	0800be08 	.word	0x0800be08
 8009f20:	0800be28 	.word	0x0800be28
 8009f24:	0800bde8 	.word	0x0800bde8

08009f28 <__assert_func>:
 8009f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f2a:	4614      	mov	r4, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <__assert_func+0x2c>)
 8009f30:	4605      	mov	r5, r0
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68d8      	ldr	r0, [r3, #12]
 8009f36:	b14c      	cbz	r4, 8009f4c <__assert_func+0x24>
 8009f38:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <__assert_func+0x30>)
 8009f3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f3e:	9100      	str	r1, [sp, #0]
 8009f40:	462b      	mov	r3, r5
 8009f42:	4906      	ldr	r1, [pc, #24]	; (8009f5c <__assert_func+0x34>)
 8009f44:	f7fe ff54 	bl	8008df0 <fiprintf>
 8009f48:	f001 fad6 	bl	800b4f8 <abort>
 8009f4c:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <__assert_func+0x38>)
 8009f4e:	461c      	mov	r4, r3
 8009f50:	e7f3      	b.n	8009f3a <__assert_func+0x12>
 8009f52:	bf00      	nop
 8009f54:	200000a0 	.word	0x200000a0
 8009f58:	0800be91 	.word	0x0800be91
 8009f5c:	0800be9e 	.word	0x0800be9e
 8009f60:	0800becc 	.word	0x0800becc

08009f64 <_close_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	2300      	movs	r3, #0
 8009f68:	4d05      	ldr	r5, [pc, #20]	; (8009f80 <_close_r+0x1c>)
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f8 f980 	bl	8002274 <_close>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_close_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_close_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001f38 	.word	0x20001f38

08009f84 <quorem>:
 8009f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	6903      	ldr	r3, [r0, #16]
 8009f8a:	690c      	ldr	r4, [r1, #16]
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	f2c0 8082 	blt.w	800a098 <quorem+0x114>
 8009f94:	3c01      	subs	r4, #1
 8009f96:	f100 0514 	add.w	r5, r0, #20
 8009f9a:	f101 0814 	add.w	r8, r1, #20
 8009f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fac:	3301      	adds	r3, #1
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fbc:	d331      	bcc.n	800a022 <quorem+0x9e>
 8009fbe:	f04f 0e00 	mov.w	lr, #0
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	46ac      	mov	ip, r5
 8009fc6:	46f2      	mov	sl, lr
 8009fc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fcc:	b293      	uxth	r3, r2
 8009fce:	fb06 e303 	mla	r3, r6, r3, lr
 8009fd2:	0c12      	lsrs	r2, r2, #16
 8009fd4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	fb06 e202 	mla	r2, r6, r2, lr
 8009fde:	ebaa 0303 	sub.w	r3, sl, r3
 8009fe2:	f8dc a000 	ldr.w	sl, [ip]
 8009fe6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fea:	fa1f fa8a 	uxth.w	sl, sl
 8009fee:	4453      	add	r3, sl
 8009ff0:	f8dc a000 	ldr.w	sl, [ip]
 8009ff4:	b292      	uxth	r2, r2
 8009ff6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a004:	4581      	cmp	r9, r0
 800a006:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a00a:	f84c 3b04 	str.w	r3, [ip], #4
 800a00e:	d2db      	bcs.n	8009fc8 <quorem+0x44>
 800a010:	f855 300b 	ldr.w	r3, [r5, fp]
 800a014:	b92b      	cbnz	r3, 800a022 <quorem+0x9e>
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	3b04      	subs	r3, #4
 800a01a:	429d      	cmp	r5, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	d32f      	bcc.n	800a080 <quorem+0xfc>
 800a020:	613c      	str	r4, [r7, #16]
 800a022:	4638      	mov	r0, r7
 800a024:	f001 f93e 	bl	800b2a4 <__mcmp>
 800a028:	2800      	cmp	r0, #0
 800a02a:	db25      	blt.n	800a078 <quorem+0xf4>
 800a02c:	4628      	mov	r0, r5
 800a02e:	f04f 0c00 	mov.w	ip, #0
 800a032:	3601      	adds	r6, #1
 800a034:	f858 1b04 	ldr.w	r1, [r8], #4
 800a038:	f8d0 e000 	ldr.w	lr, [r0]
 800a03c:	b28b      	uxth	r3, r1
 800a03e:	ebac 0303 	sub.w	r3, ip, r3
 800a042:	fa1f f28e 	uxth.w	r2, lr
 800a046:	4413      	add	r3, r2
 800a048:	0c0a      	lsrs	r2, r1, #16
 800a04a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a04e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a052:	b29b      	uxth	r3, r3
 800a054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a058:	45c1      	cmp	r9, r8
 800a05a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a05e:	f840 3b04 	str.w	r3, [r0], #4
 800a062:	d2e7      	bcs.n	800a034 <quorem+0xb0>
 800a064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a06c:	b922      	cbnz	r2, 800a078 <quorem+0xf4>
 800a06e:	3b04      	subs	r3, #4
 800a070:	429d      	cmp	r5, r3
 800a072:	461a      	mov	r2, r3
 800a074:	d30a      	bcc.n	800a08c <quorem+0x108>
 800a076:	613c      	str	r4, [r7, #16]
 800a078:	4630      	mov	r0, r6
 800a07a:	b003      	add	sp, #12
 800a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a080:	6812      	ldr	r2, [r2, #0]
 800a082:	3b04      	subs	r3, #4
 800a084:	2a00      	cmp	r2, #0
 800a086:	d1cb      	bne.n	800a020 <quorem+0x9c>
 800a088:	3c01      	subs	r4, #1
 800a08a:	e7c6      	b.n	800a01a <quorem+0x96>
 800a08c:	6812      	ldr	r2, [r2, #0]
 800a08e:	3b04      	subs	r3, #4
 800a090:	2a00      	cmp	r2, #0
 800a092:	d1f0      	bne.n	800a076 <quorem+0xf2>
 800a094:	3c01      	subs	r4, #1
 800a096:	e7eb      	b.n	800a070 <quorem+0xec>
 800a098:	2000      	movs	r0, #0
 800a09a:	e7ee      	b.n	800a07a <quorem+0xf6>
 800a09c:	0000      	movs	r0, r0
	...

0800a0a0 <_dtoa_r>:
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	461f      	mov	r7, r3
 800a0a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a0aa:	b099      	sub	sp, #100	; 0x64
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a0b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a0b6:	b974      	cbnz	r4, 800a0d6 <_dtoa_r+0x36>
 800a0b8:	2010      	movs	r0, #16
 800a0ba:	f7fe fef3 	bl	8008ea4 <malloc>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6268      	str	r0, [r5, #36]	; 0x24
 800a0c2:	b920      	cbnz	r0, 800a0ce <_dtoa_r+0x2e>
 800a0c4:	21ea      	movs	r1, #234	; 0xea
 800a0c6:	4ba8      	ldr	r3, [pc, #672]	; (800a368 <_dtoa_r+0x2c8>)
 800a0c8:	48a8      	ldr	r0, [pc, #672]	; (800a36c <_dtoa_r+0x2cc>)
 800a0ca:	f7ff ff2d 	bl	8009f28 <__assert_func>
 800a0ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0d2:	6004      	str	r4, [r0, #0]
 800a0d4:	60c4      	str	r4, [r0, #12]
 800a0d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	b151      	cbz	r1, 800a0f2 <_dtoa_r+0x52>
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	2301      	movs	r3, #1
 800a0e0:	4093      	lsls	r3, r2
 800a0e2:	604a      	str	r2, [r1, #4]
 800a0e4:	608b      	str	r3, [r1, #8]
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 fe9e 	bl	800ae28 <_Bfree>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	1e3b      	subs	r3, r7, #0
 800a0f4:	bfaf      	iteee	ge
 800a0f6:	2300      	movge	r3, #0
 800a0f8:	2201      	movlt	r2, #1
 800a0fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0fe:	9305      	strlt	r3, [sp, #20]
 800a100:	bfa8      	it	ge
 800a102:	f8c8 3000 	strge.w	r3, [r8]
 800a106:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a10a:	4b99      	ldr	r3, [pc, #612]	; (800a370 <_dtoa_r+0x2d0>)
 800a10c:	bfb8      	it	lt
 800a10e:	f8c8 2000 	strlt.w	r2, [r8]
 800a112:	ea33 0309 	bics.w	r3, r3, r9
 800a116:	d119      	bne.n	800a14c <_dtoa_r+0xac>
 800a118:	f242 730f 	movw	r3, #9999	; 0x270f
 800a11c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a124:	4333      	orrs	r3, r6
 800a126:	f000 857f 	beq.w	800ac28 <_dtoa_r+0xb88>
 800a12a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a12c:	b953      	cbnz	r3, 800a144 <_dtoa_r+0xa4>
 800a12e:	4b91      	ldr	r3, [pc, #580]	; (800a374 <_dtoa_r+0x2d4>)
 800a130:	e022      	b.n	800a178 <_dtoa_r+0xd8>
 800a132:	4b91      	ldr	r3, [pc, #580]	; (800a378 <_dtoa_r+0x2d8>)
 800a134:	9303      	str	r3, [sp, #12]
 800a136:	3308      	adds	r3, #8
 800a138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	9803      	ldr	r0, [sp, #12]
 800a13e:	b019      	add	sp, #100	; 0x64
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	4b8b      	ldr	r3, [pc, #556]	; (800a374 <_dtoa_r+0x2d4>)
 800a146:	9303      	str	r3, [sp, #12]
 800a148:	3303      	adds	r3, #3
 800a14a:	e7f5      	b.n	800a138 <_dtoa_r+0x98>
 800a14c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a150:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a158:	2200      	movs	r2, #0
 800a15a:	2300      	movs	r3, #0
 800a15c:	f7f6 fc94 	bl	8000a88 <__aeabi_dcmpeq>
 800a160:	4680      	mov	r8, r0
 800a162:	b158      	cbz	r0, 800a17c <_dtoa_r+0xdc>
 800a164:	2301      	movs	r3, #1
 800a166:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 8558 	beq.w	800ac22 <_dtoa_r+0xb82>
 800a172:	4882      	ldr	r0, [pc, #520]	; (800a37c <_dtoa_r+0x2dc>)
 800a174:	6018      	str	r0, [r3, #0]
 800a176:	1e43      	subs	r3, r0, #1
 800a178:	9303      	str	r3, [sp, #12]
 800a17a:	e7df      	b.n	800a13c <_dtoa_r+0x9c>
 800a17c:	ab16      	add	r3, sp, #88	; 0x58
 800a17e:	9301      	str	r3, [sp, #4]
 800a180:	ab17      	add	r3, sp, #92	; 0x5c
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	4628      	mov	r0, r5
 800a186:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a18a:	f001 f933 	bl	800b3f4 <__d2b>
 800a18e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a192:	4683      	mov	fp, r0
 800a194:	2c00      	cmp	r4, #0
 800a196:	d07f      	beq.n	800a298 <_dtoa_r+0x1f8>
 800a198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a19e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a1a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a1aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a1ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	4b72      	ldr	r3, [pc, #456]	; (800a380 <_dtoa_r+0x2e0>)
 800a1b6:	f7f6 f847 	bl	8000248 <__aeabi_dsub>
 800a1ba:	a365      	add	r3, pc, #404	; (adr r3, 800a350 <_dtoa_r+0x2b0>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f7f6 f9fa 	bl	80005b8 <__aeabi_dmul>
 800a1c4:	a364      	add	r3, pc, #400	; (adr r3, 800a358 <_dtoa_r+0x2b8>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	f7f6 f83f 	bl	800024c <__adddf3>
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	460f      	mov	r7, r1
 800a1d4:	f7f6 f986 	bl	80004e4 <__aeabi_i2d>
 800a1d8:	a361      	add	r3, pc, #388	; (adr r3, 800a360 <_dtoa_r+0x2c0>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 f9eb 	bl	80005b8 <__aeabi_dmul>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7f6 f82f 	bl	800024c <__adddf3>
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	f7f6 fc91 	bl	8000b18 <__aeabi_d2iz>
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4682      	mov	sl, r0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 fc4c 	bl	8000a9c <__aeabi_dcmplt>
 800a204:	b148      	cbz	r0, 800a21a <_dtoa_r+0x17a>
 800a206:	4650      	mov	r0, sl
 800a208:	f7f6 f96c 	bl	80004e4 <__aeabi_i2d>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	f7f6 fc3a 	bl	8000a88 <__aeabi_dcmpeq>
 800a214:	b908      	cbnz	r0, 800a21a <_dtoa_r+0x17a>
 800a216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a21a:	f1ba 0f16 	cmp.w	sl, #22
 800a21e:	d858      	bhi.n	800a2d2 <_dtoa_r+0x232>
 800a220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a224:	4b57      	ldr	r3, [pc, #348]	; (800a384 <_dtoa_r+0x2e4>)
 800a226:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 fc35 	bl	8000a9c <__aeabi_dcmplt>
 800a232:	2800      	cmp	r0, #0
 800a234:	d04f      	beq.n	800a2d6 <_dtoa_r+0x236>
 800a236:	2300      	movs	r3, #0
 800a238:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a23c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a23e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a240:	1b1c      	subs	r4, r3, r4
 800a242:	1e63      	subs	r3, r4, #1
 800a244:	9309      	str	r3, [sp, #36]	; 0x24
 800a246:	bf49      	itett	mi
 800a248:	f1c4 0301 	rsbmi	r3, r4, #1
 800a24c:	2300      	movpl	r3, #0
 800a24e:	9306      	strmi	r3, [sp, #24]
 800a250:	2300      	movmi	r3, #0
 800a252:	bf54      	ite	pl
 800a254:	9306      	strpl	r3, [sp, #24]
 800a256:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a258:	f1ba 0f00 	cmp.w	sl, #0
 800a25c:	db3d      	blt.n	800a2da <_dtoa_r+0x23a>
 800a25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a260:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a264:	4453      	add	r3, sl
 800a266:	9309      	str	r3, [sp, #36]	; 0x24
 800a268:	2300      	movs	r3, #0
 800a26a:	930a      	str	r3, [sp, #40]	; 0x28
 800a26c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a26e:	2b09      	cmp	r3, #9
 800a270:	f200 808c 	bhi.w	800a38c <_dtoa_r+0x2ec>
 800a274:	2b05      	cmp	r3, #5
 800a276:	bfc4      	itt	gt
 800a278:	3b04      	subgt	r3, #4
 800a27a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a27c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a27e:	bfc8      	it	gt
 800a280:	2400      	movgt	r4, #0
 800a282:	f1a3 0302 	sub.w	r3, r3, #2
 800a286:	bfd8      	it	le
 800a288:	2401      	movle	r4, #1
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	f200 808a 	bhi.w	800a3a4 <_dtoa_r+0x304>
 800a290:	e8df f003 	tbb	[pc, r3]
 800a294:	5b4d4f2d 	.word	0x5b4d4f2d
 800a298:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a29c:	441c      	add	r4, r3
 800a29e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	bfc3      	ittte	gt
 800a2a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a2ae:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2b2:	f1c3 0320 	rsble	r3, r3, #32
 800a2b6:	bfc6      	itte	gt
 800a2b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2bc:	4318      	orrgt	r0, r3
 800a2be:	fa06 f003 	lslle.w	r0, r6, r3
 800a2c2:	f7f6 f8ff 	bl	80004c4 <__aeabi_ui2d>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a2cc:	3c01      	subs	r4, #1
 800a2ce:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2d0:	e76f      	b.n	800a1b2 <_dtoa_r+0x112>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e7b2      	b.n	800a23c <_dtoa_r+0x19c>
 800a2d6:	900f      	str	r0, [sp, #60]	; 0x3c
 800a2d8:	e7b1      	b.n	800a23e <_dtoa_r+0x19e>
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	eba3 030a 	sub.w	r3, r3, sl
 800a2e0:	9306      	str	r3, [sp, #24]
 800a2e2:	f1ca 0300 	rsb	r3, sl, #0
 800a2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ec:	e7be      	b.n	800a26c <_dtoa_r+0x1cc>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dc58      	bgt.n	800a3aa <_dtoa_r+0x30a>
 800a2f8:	f04f 0901 	mov.w	r9, #1
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	f8cd 9020 	str.w	r9, [sp, #32]
 800a302:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a306:	2200      	movs	r2, #0
 800a308:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a30a:	6042      	str	r2, [r0, #4]
 800a30c:	2204      	movs	r2, #4
 800a30e:	f102 0614 	add.w	r6, r2, #20
 800a312:	429e      	cmp	r6, r3
 800a314:	6841      	ldr	r1, [r0, #4]
 800a316:	d94e      	bls.n	800a3b6 <_dtoa_r+0x316>
 800a318:	4628      	mov	r0, r5
 800a31a:	f000 fd45 	bl	800ada8 <_Balloc>
 800a31e:	9003      	str	r0, [sp, #12]
 800a320:	2800      	cmp	r0, #0
 800a322:	d14c      	bne.n	800a3be <_dtoa_r+0x31e>
 800a324:	4602      	mov	r2, r0
 800a326:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a32a:	4b17      	ldr	r3, [pc, #92]	; (800a388 <_dtoa_r+0x2e8>)
 800a32c:	e6cc      	b.n	800a0c8 <_dtoa_r+0x28>
 800a32e:	2301      	movs	r3, #1
 800a330:	e7de      	b.n	800a2f0 <_dtoa_r+0x250>
 800a332:	2300      	movs	r3, #0
 800a334:	930b      	str	r3, [sp, #44]	; 0x2c
 800a336:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a338:	eb0a 0903 	add.w	r9, sl, r3
 800a33c:	f109 0301 	add.w	r3, r9, #1
 800a340:	2b01      	cmp	r3, #1
 800a342:	9308      	str	r3, [sp, #32]
 800a344:	bfb8      	it	lt
 800a346:	2301      	movlt	r3, #1
 800a348:	e7dd      	b.n	800a306 <_dtoa_r+0x266>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e7f2      	b.n	800a334 <_dtoa_r+0x294>
 800a34e:	bf00      	nop
 800a350:	636f4361 	.word	0x636f4361
 800a354:	3fd287a7 	.word	0x3fd287a7
 800a358:	8b60c8b3 	.word	0x8b60c8b3
 800a35c:	3fc68a28 	.word	0x3fc68a28
 800a360:	509f79fb 	.word	0x509f79fb
 800a364:	3fd34413 	.word	0x3fd34413
 800a368:	0800bfdb 	.word	0x0800bfdb
 800a36c:	0800bff2 	.word	0x0800bff2
 800a370:	7ff00000 	.word	0x7ff00000
 800a374:	0800bfd7 	.word	0x0800bfd7
 800a378:	0800bfce 	.word	0x0800bfce
 800a37c:	0800be6e 	.word	0x0800be6e
 800a380:	3ff80000 	.word	0x3ff80000
 800a384:	0800c0e8 	.word	0x0800c0e8
 800a388:	0800c04d 	.word	0x0800c04d
 800a38c:	2401      	movs	r4, #1
 800a38e:	2300      	movs	r3, #0
 800a390:	940b      	str	r4, [sp, #44]	; 0x2c
 800a392:	9322      	str	r3, [sp, #136]	; 0x88
 800a394:	f04f 39ff 	mov.w	r9, #4294967295
 800a398:	2200      	movs	r2, #0
 800a39a:	2312      	movs	r3, #18
 800a39c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a3a0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a3a2:	e7b0      	b.n	800a306 <_dtoa_r+0x266>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3a8:	e7f4      	b.n	800a394 <_dtoa_r+0x2f4>
 800a3aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a3ae:	464b      	mov	r3, r9
 800a3b0:	f8cd 9020 	str.w	r9, [sp, #32]
 800a3b4:	e7a7      	b.n	800a306 <_dtoa_r+0x266>
 800a3b6:	3101      	adds	r1, #1
 800a3b8:	6041      	str	r1, [r0, #4]
 800a3ba:	0052      	lsls	r2, r2, #1
 800a3bc:	e7a7      	b.n	800a30e <_dtoa_r+0x26e>
 800a3be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3c0:	9a03      	ldr	r2, [sp, #12]
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	9b08      	ldr	r3, [sp, #32]
 800a3c6:	2b0e      	cmp	r3, #14
 800a3c8:	f200 80a8 	bhi.w	800a51c <_dtoa_r+0x47c>
 800a3cc:	2c00      	cmp	r4, #0
 800a3ce:	f000 80a5 	beq.w	800a51c <_dtoa_r+0x47c>
 800a3d2:	f1ba 0f00 	cmp.w	sl, #0
 800a3d6:	dd34      	ble.n	800a442 <_dtoa_r+0x3a2>
 800a3d8:	4a9a      	ldr	r2, [pc, #616]	; (800a644 <_dtoa_r+0x5a4>)
 800a3da:	f00a 030f 	and.w	r3, sl, #15
 800a3de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a3e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a3ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a3f2:	d016      	beq.n	800a422 <_dtoa_r+0x382>
 800a3f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3f8:	4b93      	ldr	r3, [pc, #588]	; (800a648 <_dtoa_r+0x5a8>)
 800a3fa:	2703      	movs	r7, #3
 800a3fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a400:	f7f6 fa04 	bl	800080c <__aeabi_ddiv>
 800a404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a408:	f004 040f 	and.w	r4, r4, #15
 800a40c:	4e8e      	ldr	r6, [pc, #568]	; (800a648 <_dtoa_r+0x5a8>)
 800a40e:	b954      	cbnz	r4, 800a426 <_dtoa_r+0x386>
 800a410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a418:	f7f6 f9f8 	bl	800080c <__aeabi_ddiv>
 800a41c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a420:	e029      	b.n	800a476 <_dtoa_r+0x3d6>
 800a422:	2702      	movs	r7, #2
 800a424:	e7f2      	b.n	800a40c <_dtoa_r+0x36c>
 800a426:	07e1      	lsls	r1, r4, #31
 800a428:	d508      	bpl.n	800a43c <_dtoa_r+0x39c>
 800a42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a42e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a432:	f7f6 f8c1 	bl	80005b8 <__aeabi_dmul>
 800a436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a43a:	3701      	adds	r7, #1
 800a43c:	1064      	asrs	r4, r4, #1
 800a43e:	3608      	adds	r6, #8
 800a440:	e7e5      	b.n	800a40e <_dtoa_r+0x36e>
 800a442:	f000 80a5 	beq.w	800a590 <_dtoa_r+0x4f0>
 800a446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a44a:	f1ca 0400 	rsb	r4, sl, #0
 800a44e:	4b7d      	ldr	r3, [pc, #500]	; (800a644 <_dtoa_r+0x5a4>)
 800a450:	f004 020f 	and.w	r2, r4, #15
 800a454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	f7f6 f8ac 	bl	80005b8 <__aeabi_dmul>
 800a460:	2702      	movs	r7, #2
 800a462:	2300      	movs	r3, #0
 800a464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a468:	4e77      	ldr	r6, [pc, #476]	; (800a648 <_dtoa_r+0x5a8>)
 800a46a:	1124      	asrs	r4, r4, #4
 800a46c:	2c00      	cmp	r4, #0
 800a46e:	f040 8084 	bne.w	800a57a <_dtoa_r+0x4da>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1d2      	bne.n	800a41c <_dtoa_r+0x37c>
 800a476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 808b 	beq.w	800a594 <_dtoa_r+0x4f4>
 800a47e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a482:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a48a:	2200      	movs	r2, #0
 800a48c:	4b6f      	ldr	r3, [pc, #444]	; (800a64c <_dtoa_r+0x5ac>)
 800a48e:	f7f6 fb05 	bl	8000a9c <__aeabi_dcmplt>
 800a492:	2800      	cmp	r0, #0
 800a494:	d07e      	beq.n	800a594 <_dtoa_r+0x4f4>
 800a496:	9b08      	ldr	r3, [sp, #32]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d07b      	beq.n	800a594 <_dtoa_r+0x4f4>
 800a49c:	f1b9 0f00 	cmp.w	r9, #0
 800a4a0:	dd38      	ble.n	800a514 <_dtoa_r+0x474>
 800a4a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4b69      	ldr	r3, [pc, #420]	; (800a650 <_dtoa_r+0x5b0>)
 800a4aa:	f7f6 f885 	bl	80005b8 <__aeabi_dmul>
 800a4ae:	464c      	mov	r4, r9
 800a4b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a4b8:	3701      	adds	r7, #1
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f7f6 f812 	bl	80004e4 <__aeabi_i2d>
 800a4c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4c4:	f7f6 f878 	bl	80005b8 <__aeabi_dmul>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b62      	ldr	r3, [pc, #392]	; (800a654 <_dtoa_r+0x5b4>)
 800a4cc:	f7f5 febe 	bl	800024c <__adddf3>
 800a4d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a4d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4d8:	9611      	str	r6, [sp, #68]	; 0x44
 800a4da:	2c00      	cmp	r4, #0
 800a4dc:	d15d      	bne.n	800a59a <_dtoa_r+0x4fa>
 800a4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4b5c      	ldr	r3, [pc, #368]	; (800a658 <_dtoa_r+0x5b8>)
 800a4e6:	f7f5 feaf 	bl	8000248 <__aeabi_dsub>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4f2:	4633      	mov	r3, r6
 800a4f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4f6:	f7f6 faef 	bl	8000ad8 <__aeabi_dcmpgt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f040 829c 	bne.w	800aa38 <_dtoa_r+0x998>
 800a500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a506:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a50a:	f7f6 fac7 	bl	8000a9c <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f040 8290 	bne.w	800aa34 <_dtoa_r+0x994>
 800a514:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a518:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a51c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f2c0 8152 	blt.w	800a7c8 <_dtoa_r+0x728>
 800a524:	f1ba 0f0e 	cmp.w	sl, #14
 800a528:	f300 814e 	bgt.w	800a7c8 <_dtoa_r+0x728>
 800a52c:	4b45      	ldr	r3, [pc, #276]	; (800a644 <_dtoa_r+0x5a4>)
 800a52e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a532:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a536:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a53a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f280 80db 	bge.w	800a6f8 <_dtoa_r+0x658>
 800a542:	9b08      	ldr	r3, [sp, #32]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f300 80d7 	bgt.w	800a6f8 <_dtoa_r+0x658>
 800a54a:	f040 8272 	bne.w	800aa32 <_dtoa_r+0x992>
 800a54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a552:	2200      	movs	r2, #0
 800a554:	4b40      	ldr	r3, [pc, #256]	; (800a658 <_dtoa_r+0x5b8>)
 800a556:	f7f6 f82f 	bl	80005b8 <__aeabi_dmul>
 800a55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a55e:	f7f6 fab1 	bl	8000ac4 <__aeabi_dcmpge>
 800a562:	9c08      	ldr	r4, [sp, #32]
 800a564:	4626      	mov	r6, r4
 800a566:	2800      	cmp	r0, #0
 800a568:	f040 8248 	bne.w	800a9fc <_dtoa_r+0x95c>
 800a56c:	2331      	movs	r3, #49	; 0x31
 800a56e:	9f03      	ldr	r7, [sp, #12]
 800a570:	f10a 0a01 	add.w	sl, sl, #1
 800a574:	f807 3b01 	strb.w	r3, [r7], #1
 800a578:	e244      	b.n	800aa04 <_dtoa_r+0x964>
 800a57a:	07e2      	lsls	r2, r4, #31
 800a57c:	d505      	bpl.n	800a58a <_dtoa_r+0x4ea>
 800a57e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a582:	f7f6 f819 	bl	80005b8 <__aeabi_dmul>
 800a586:	2301      	movs	r3, #1
 800a588:	3701      	adds	r7, #1
 800a58a:	1064      	asrs	r4, r4, #1
 800a58c:	3608      	adds	r6, #8
 800a58e:	e76d      	b.n	800a46c <_dtoa_r+0x3cc>
 800a590:	2702      	movs	r7, #2
 800a592:	e770      	b.n	800a476 <_dtoa_r+0x3d6>
 800a594:	46d0      	mov	r8, sl
 800a596:	9c08      	ldr	r4, [sp, #32]
 800a598:	e78f      	b.n	800a4ba <_dtoa_r+0x41a>
 800a59a:	9903      	ldr	r1, [sp, #12]
 800a59c:	4b29      	ldr	r3, [pc, #164]	; (800a644 <_dtoa_r+0x5a4>)
 800a59e:	4421      	add	r1, r4
 800a5a0:	9112      	str	r1, [sp, #72]	; 0x48
 800a5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a5ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	d055      	beq.n	800a660 <_dtoa_r+0x5c0>
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	4929      	ldr	r1, [pc, #164]	; (800a65c <_dtoa_r+0x5bc>)
 800a5b8:	f7f6 f928 	bl	800080c <__aeabi_ddiv>
 800a5bc:	463b      	mov	r3, r7
 800a5be:	4632      	mov	r2, r6
 800a5c0:	f7f5 fe42 	bl	8000248 <__aeabi_dsub>
 800a5c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5c8:	9f03      	ldr	r7, [sp, #12]
 800a5ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ce:	f7f6 faa3 	bl	8000b18 <__aeabi_d2iz>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	f7f5 ff86 	bl	80004e4 <__aeabi_i2d>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5e0:	f7f5 fe32 	bl	8000248 <__aeabi_dsub>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	3430      	adds	r4, #48	; 0x30
 800a5ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5f2:	f807 4b01 	strb.w	r4, [r7], #1
 800a5f6:	f7f6 fa51 	bl	8000a9c <__aeabi_dcmplt>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d174      	bne.n	800a6e8 <_dtoa_r+0x648>
 800a5fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a602:	2000      	movs	r0, #0
 800a604:	4911      	ldr	r1, [pc, #68]	; (800a64c <_dtoa_r+0x5ac>)
 800a606:	f7f5 fe1f 	bl	8000248 <__aeabi_dsub>
 800a60a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a60e:	f7f6 fa45 	bl	8000a9c <__aeabi_dcmplt>
 800a612:	2800      	cmp	r0, #0
 800a614:	f040 80b7 	bne.w	800a786 <_dtoa_r+0x6e6>
 800a618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a61a:	429f      	cmp	r7, r3
 800a61c:	f43f af7a 	beq.w	800a514 <_dtoa_r+0x474>
 800a620:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a624:	2200      	movs	r2, #0
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <_dtoa_r+0x5b0>)
 800a628:	f7f5 ffc6 	bl	80005b8 <__aeabi_dmul>
 800a62c:	2200      	movs	r2, #0
 800a62e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a636:	4b06      	ldr	r3, [pc, #24]	; (800a650 <_dtoa_r+0x5b0>)
 800a638:	f7f5 ffbe 	bl	80005b8 <__aeabi_dmul>
 800a63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a640:	e7c3      	b.n	800a5ca <_dtoa_r+0x52a>
 800a642:	bf00      	nop
 800a644:	0800c0e8 	.word	0x0800c0e8
 800a648:	0800c0c0 	.word	0x0800c0c0
 800a64c:	3ff00000 	.word	0x3ff00000
 800a650:	40240000 	.word	0x40240000
 800a654:	401c0000 	.word	0x401c0000
 800a658:	40140000 	.word	0x40140000
 800a65c:	3fe00000 	.word	0x3fe00000
 800a660:	4630      	mov	r0, r6
 800a662:	4639      	mov	r1, r7
 800a664:	f7f5 ffa8 	bl	80005b8 <__aeabi_dmul>
 800a668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a66a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a66e:	9c03      	ldr	r4, [sp, #12]
 800a670:	9314      	str	r3, [sp, #80]	; 0x50
 800a672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a676:	f7f6 fa4f 	bl	8000b18 <__aeabi_d2iz>
 800a67a:	9015      	str	r0, [sp, #84]	; 0x54
 800a67c:	f7f5 ff32 	bl	80004e4 <__aeabi_i2d>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a688:	f7f5 fdde 	bl	8000248 <__aeabi_dsub>
 800a68c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a68e:	4606      	mov	r6, r0
 800a690:	3330      	adds	r3, #48	; 0x30
 800a692:	f804 3b01 	strb.w	r3, [r4], #1
 800a696:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a698:	460f      	mov	r7, r1
 800a69a:	429c      	cmp	r4, r3
 800a69c:	f04f 0200 	mov.w	r2, #0
 800a6a0:	d124      	bne.n	800a6ec <_dtoa_r+0x64c>
 800a6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6a6:	4bb0      	ldr	r3, [pc, #704]	; (800a968 <_dtoa_r+0x8c8>)
 800a6a8:	f7f5 fdd0 	bl	800024c <__adddf3>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f6 fa10 	bl	8000ad8 <__aeabi_dcmpgt>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d163      	bne.n	800a784 <_dtoa_r+0x6e4>
 800a6bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	49a9      	ldr	r1, [pc, #676]	; (800a968 <_dtoa_r+0x8c8>)
 800a6c4:	f7f5 fdc0 	bl	8000248 <__aeabi_dsub>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f6 f9e4 	bl	8000a9c <__aeabi_dcmplt>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f43f af1d 	beq.w	800a514 <_dtoa_r+0x474>
 800a6da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a6dc:	1e7b      	subs	r3, r7, #1
 800a6de:	9314      	str	r3, [sp, #80]	; 0x50
 800a6e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a6e4:	2b30      	cmp	r3, #48	; 0x30
 800a6e6:	d0f8      	beq.n	800a6da <_dtoa_r+0x63a>
 800a6e8:	46c2      	mov	sl, r8
 800a6ea:	e03b      	b.n	800a764 <_dtoa_r+0x6c4>
 800a6ec:	4b9f      	ldr	r3, [pc, #636]	; (800a96c <_dtoa_r+0x8cc>)
 800a6ee:	f7f5 ff63 	bl	80005b8 <__aeabi_dmul>
 800a6f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6f6:	e7bc      	b.n	800a672 <_dtoa_r+0x5d2>
 800a6f8:	9f03      	ldr	r7, [sp, #12]
 800a6fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a6fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a702:	4640      	mov	r0, r8
 800a704:	4649      	mov	r1, r9
 800a706:	f7f6 f881 	bl	800080c <__aeabi_ddiv>
 800a70a:	f7f6 fa05 	bl	8000b18 <__aeabi_d2iz>
 800a70e:	4604      	mov	r4, r0
 800a710:	f7f5 fee8 	bl	80004e4 <__aeabi_i2d>
 800a714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a718:	f7f5 ff4e 	bl	80005b8 <__aeabi_dmul>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 fd90 	bl	8000248 <__aeabi_dsub>
 800a728:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a72c:	f807 6b01 	strb.w	r6, [r7], #1
 800a730:	9e03      	ldr	r6, [sp, #12]
 800a732:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a736:	1bbe      	subs	r6, r7, r6
 800a738:	45b4      	cmp	ip, r6
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	d136      	bne.n	800a7ae <_dtoa_r+0x70e>
 800a740:	f7f5 fd84 	bl	800024c <__adddf3>
 800a744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a748:	4680      	mov	r8, r0
 800a74a:	4689      	mov	r9, r1
 800a74c:	f7f6 f9c4 	bl	8000ad8 <__aeabi_dcmpgt>
 800a750:	bb58      	cbnz	r0, 800a7aa <_dtoa_r+0x70a>
 800a752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	f7f6 f995 	bl	8000a88 <__aeabi_dcmpeq>
 800a75e:	b108      	cbz	r0, 800a764 <_dtoa_r+0x6c4>
 800a760:	07e1      	lsls	r1, r4, #31
 800a762:	d422      	bmi.n	800a7aa <_dtoa_r+0x70a>
 800a764:	4628      	mov	r0, r5
 800a766:	4659      	mov	r1, fp
 800a768:	f000 fb5e 	bl	800ae28 <_Bfree>
 800a76c:	2300      	movs	r3, #0
 800a76e:	703b      	strb	r3, [r7, #0]
 800a770:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a772:	f10a 0001 	add.w	r0, sl, #1
 800a776:	6018      	str	r0, [r3, #0]
 800a778:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f43f acde 	beq.w	800a13c <_dtoa_r+0x9c>
 800a780:	601f      	str	r7, [r3, #0]
 800a782:	e4db      	b.n	800a13c <_dtoa_r+0x9c>
 800a784:	4627      	mov	r7, r4
 800a786:	463b      	mov	r3, r7
 800a788:	461f      	mov	r7, r3
 800a78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a78e:	2a39      	cmp	r2, #57	; 0x39
 800a790:	d107      	bne.n	800a7a2 <_dtoa_r+0x702>
 800a792:	9a03      	ldr	r2, [sp, #12]
 800a794:	429a      	cmp	r2, r3
 800a796:	d1f7      	bne.n	800a788 <_dtoa_r+0x6e8>
 800a798:	2230      	movs	r2, #48	; 0x30
 800a79a:	9903      	ldr	r1, [sp, #12]
 800a79c:	f108 0801 	add.w	r8, r8, #1
 800a7a0:	700a      	strb	r2, [r1, #0]
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	e79e      	b.n	800a6e8 <_dtoa_r+0x648>
 800a7aa:	46d0      	mov	r8, sl
 800a7ac:	e7eb      	b.n	800a786 <_dtoa_r+0x6e6>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	4b6e      	ldr	r3, [pc, #440]	; (800a96c <_dtoa_r+0x8cc>)
 800a7b2:	f7f5 ff01 	bl	80005b8 <__aeabi_dmul>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	4689      	mov	r9, r1
 800a7be:	f7f6 f963 	bl	8000a88 <__aeabi_dcmpeq>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d09b      	beq.n	800a6fe <_dtoa_r+0x65e>
 800a7c6:	e7cd      	b.n	800a764 <_dtoa_r+0x6c4>
 800a7c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	f000 80d0 	beq.w	800a970 <_dtoa_r+0x8d0>
 800a7d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7d2:	2a01      	cmp	r2, #1
 800a7d4:	f300 80ae 	bgt.w	800a934 <_dtoa_r+0x894>
 800a7d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7da:	2a00      	cmp	r2, #0
 800a7dc:	f000 80a6 	beq.w	800a92c <_dtoa_r+0x88c>
 800a7e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a7e6:	9f06      	ldr	r7, [sp, #24]
 800a7e8:	9a06      	ldr	r2, [sp, #24]
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	9206      	str	r2, [sp, #24]
 800a7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	441a      	add	r2, r3
 800a7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f8:	f000 fbcc 	bl	800af94 <__i2b>
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	dd0c      	ble.n	800a81c <_dtoa_r+0x77c>
 800a802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd09      	ble.n	800a81c <_dtoa_r+0x77c>
 800a808:	42bb      	cmp	r3, r7
 800a80a:	bfa8      	it	ge
 800a80c:	463b      	movge	r3, r7
 800a80e:	9a06      	ldr	r2, [sp, #24]
 800a810:	1aff      	subs	r7, r7, r3
 800a812:	1ad2      	subs	r2, r2, r3
 800a814:	9206      	str	r2, [sp, #24]
 800a816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	9309      	str	r3, [sp, #36]	; 0x24
 800a81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81e:	b1f3      	cbz	r3, 800a85e <_dtoa_r+0x7be>
 800a820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 80a8 	beq.w	800a978 <_dtoa_r+0x8d8>
 800a828:	2c00      	cmp	r4, #0
 800a82a:	dd10      	ble.n	800a84e <_dtoa_r+0x7ae>
 800a82c:	4631      	mov	r1, r6
 800a82e:	4622      	mov	r2, r4
 800a830:	4628      	mov	r0, r5
 800a832:	f000 fc6d 	bl	800b110 <__pow5mult>
 800a836:	465a      	mov	r2, fp
 800a838:	4601      	mov	r1, r0
 800a83a:	4606      	mov	r6, r0
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 fbbf 	bl	800afc0 <__multiply>
 800a842:	4680      	mov	r8, r0
 800a844:	4659      	mov	r1, fp
 800a846:	4628      	mov	r0, r5
 800a848:	f000 faee 	bl	800ae28 <_Bfree>
 800a84c:	46c3      	mov	fp, r8
 800a84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a850:	1b1a      	subs	r2, r3, r4
 800a852:	d004      	beq.n	800a85e <_dtoa_r+0x7be>
 800a854:	4659      	mov	r1, fp
 800a856:	4628      	mov	r0, r5
 800a858:	f000 fc5a 	bl	800b110 <__pow5mult>
 800a85c:	4683      	mov	fp, r0
 800a85e:	2101      	movs	r1, #1
 800a860:	4628      	mov	r0, r5
 800a862:	f000 fb97 	bl	800af94 <__i2b>
 800a866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a868:	4604      	mov	r4, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f340 8086 	ble.w	800a97c <_dtoa_r+0x8dc>
 800a870:	461a      	mov	r2, r3
 800a872:	4601      	mov	r1, r0
 800a874:	4628      	mov	r0, r5
 800a876:	f000 fc4b 	bl	800b110 <__pow5mult>
 800a87a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a87c:	4604      	mov	r4, r0
 800a87e:	2b01      	cmp	r3, #1
 800a880:	dd7f      	ble.n	800a982 <_dtoa_r+0x8e2>
 800a882:	f04f 0800 	mov.w	r8, #0
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a88c:	6918      	ldr	r0, [r3, #16]
 800a88e:	f000 fb33 	bl	800aef8 <__hi0bits>
 800a892:	f1c0 0020 	rsb	r0, r0, #32
 800a896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a898:	4418      	add	r0, r3
 800a89a:	f010 001f 	ands.w	r0, r0, #31
 800a89e:	f000 8092 	beq.w	800a9c6 <_dtoa_r+0x926>
 800a8a2:	f1c0 0320 	rsb	r3, r0, #32
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	f340 808a 	ble.w	800a9c0 <_dtoa_r+0x920>
 800a8ac:	f1c0 001c 	rsb	r0, r0, #28
 800a8b0:	9b06      	ldr	r3, [sp, #24]
 800a8b2:	4407      	add	r7, r0
 800a8b4:	4403      	add	r3, r0
 800a8b6:	9306      	str	r3, [sp, #24]
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	4403      	add	r3, r0
 800a8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8be:	9b06      	ldr	r3, [sp, #24]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dd05      	ble.n	800a8d0 <_dtoa_r+0x830>
 800a8c4:	4659      	mov	r1, fp
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 fc7b 	bl	800b1c4 <__lshift>
 800a8ce:	4683      	mov	fp, r0
 800a8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dd05      	ble.n	800a8e2 <_dtoa_r+0x842>
 800a8d6:	4621      	mov	r1, r4
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 fc72 	bl	800b1c4 <__lshift>
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d070      	beq.n	800a9ca <_dtoa_r+0x92a>
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	4658      	mov	r0, fp
 800a8ec:	f000 fcda 	bl	800b2a4 <__mcmp>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	da6a      	bge.n	800a9ca <_dtoa_r+0x92a>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4659      	mov	r1, fp
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 fab6 	bl	800ae6c <__multadd>
 800a900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a902:	4683      	mov	fp, r0
 800a904:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 8194 	beq.w	800ac36 <_dtoa_r+0xb96>
 800a90e:	4631      	mov	r1, r6
 800a910:	2300      	movs	r3, #0
 800a912:	220a      	movs	r2, #10
 800a914:	4628      	mov	r0, r5
 800a916:	f000 faa9 	bl	800ae6c <__multadd>
 800a91a:	f1b9 0f00 	cmp.w	r9, #0
 800a91e:	4606      	mov	r6, r0
 800a920:	f300 8093 	bgt.w	800aa4a <_dtoa_r+0x9aa>
 800a924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a926:	2b02      	cmp	r3, #2
 800a928:	dc57      	bgt.n	800a9da <_dtoa_r+0x93a>
 800a92a:	e08e      	b.n	800aa4a <_dtoa_r+0x9aa>
 800a92c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a92e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a932:	e757      	b.n	800a7e4 <_dtoa_r+0x744>
 800a934:	9b08      	ldr	r3, [sp, #32]
 800a936:	1e5c      	subs	r4, r3, #1
 800a938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	bfb7      	itett	lt
 800a93e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a940:	1b1c      	subge	r4, r3, r4
 800a942:	1ae2      	sublt	r2, r4, r3
 800a944:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a946:	bfbe      	ittt	lt
 800a948:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a94a:	189b      	addlt	r3, r3, r2
 800a94c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	bfb8      	it	lt
 800a952:	2400      	movlt	r4, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfbb      	ittet	lt
 800a958:	9b06      	ldrlt	r3, [sp, #24]
 800a95a:	9a08      	ldrlt	r2, [sp, #32]
 800a95c:	9f06      	ldrge	r7, [sp, #24]
 800a95e:	1a9f      	sublt	r7, r3, r2
 800a960:	bfac      	ite	ge
 800a962:	9b08      	ldrge	r3, [sp, #32]
 800a964:	2300      	movlt	r3, #0
 800a966:	e73f      	b.n	800a7e8 <_dtoa_r+0x748>
 800a968:	3fe00000 	.word	0x3fe00000
 800a96c:	40240000 	.word	0x40240000
 800a970:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a972:	9f06      	ldr	r7, [sp, #24]
 800a974:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a976:	e742      	b.n	800a7fe <_dtoa_r+0x75e>
 800a978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a97a:	e76b      	b.n	800a854 <_dtoa_r+0x7b4>
 800a97c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a97e:	2b01      	cmp	r3, #1
 800a980:	dc19      	bgt.n	800a9b6 <_dtoa_r+0x916>
 800a982:	9b04      	ldr	r3, [sp, #16]
 800a984:	b9bb      	cbnz	r3, 800a9b6 <_dtoa_r+0x916>
 800a986:	9b05      	ldr	r3, [sp, #20]
 800a988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a98c:	b99b      	cbnz	r3, 800a9b6 <_dtoa_r+0x916>
 800a98e:	9b05      	ldr	r3, [sp, #20]
 800a990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a994:	0d1b      	lsrs	r3, r3, #20
 800a996:	051b      	lsls	r3, r3, #20
 800a998:	b183      	cbz	r3, 800a9bc <_dtoa_r+0x91c>
 800a99a:	f04f 0801 	mov.w	r8, #1
 800a99e:	9b06      	ldr	r3, [sp, #24]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	9306      	str	r3, [sp, #24]
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f47f af6a 	bne.w	800a886 <_dtoa_r+0x7e6>
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e76f      	b.n	800a896 <_dtoa_r+0x7f6>
 800a9b6:	f04f 0800 	mov.w	r8, #0
 800a9ba:	e7f6      	b.n	800a9aa <_dtoa_r+0x90a>
 800a9bc:	4698      	mov	r8, r3
 800a9be:	e7f4      	b.n	800a9aa <_dtoa_r+0x90a>
 800a9c0:	f43f af7d 	beq.w	800a8be <_dtoa_r+0x81e>
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	301c      	adds	r0, #28
 800a9c8:	e772      	b.n	800a8b0 <_dtoa_r+0x810>
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dc36      	bgt.n	800aa3e <_dtoa_r+0x99e>
 800a9d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	dd33      	ble.n	800aa3e <_dtoa_r+0x99e>
 800a9d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9da:	f1b9 0f00 	cmp.w	r9, #0
 800a9de:	d10d      	bne.n	800a9fc <_dtoa_r+0x95c>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	2205      	movs	r2, #5
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f000 fa40 	bl	800ae6c <__multadd>
 800a9ec:	4601      	mov	r1, r0
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	f000 fc57 	bl	800b2a4 <__mcmp>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f73f adb8 	bgt.w	800a56c <_dtoa_r+0x4cc>
 800a9fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9fe:	9f03      	ldr	r7, [sp, #12]
 800aa00:	ea6f 0a03 	mvn.w	sl, r3
 800aa04:	f04f 0800 	mov.w	r8, #0
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 fa0c 	bl	800ae28 <_Bfree>
 800aa10:	2e00      	cmp	r6, #0
 800aa12:	f43f aea7 	beq.w	800a764 <_dtoa_r+0x6c4>
 800aa16:	f1b8 0f00 	cmp.w	r8, #0
 800aa1a:	d005      	beq.n	800aa28 <_dtoa_r+0x988>
 800aa1c:	45b0      	cmp	r8, r6
 800aa1e:	d003      	beq.n	800aa28 <_dtoa_r+0x988>
 800aa20:	4641      	mov	r1, r8
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 fa00 	bl	800ae28 <_Bfree>
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	f000 f9fc 	bl	800ae28 <_Bfree>
 800aa30:	e698      	b.n	800a764 <_dtoa_r+0x6c4>
 800aa32:	2400      	movs	r4, #0
 800aa34:	4626      	mov	r6, r4
 800aa36:	e7e1      	b.n	800a9fc <_dtoa_r+0x95c>
 800aa38:	46c2      	mov	sl, r8
 800aa3a:	4626      	mov	r6, r4
 800aa3c:	e596      	b.n	800a56c <_dtoa_r+0x4cc>
 800aa3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 80fd 	beq.w	800ac44 <_dtoa_r+0xba4>
 800aa4a:	2f00      	cmp	r7, #0
 800aa4c:	dd05      	ble.n	800aa5a <_dtoa_r+0x9ba>
 800aa4e:	4631      	mov	r1, r6
 800aa50:	463a      	mov	r2, r7
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 fbb6 	bl	800b1c4 <__lshift>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	f1b8 0f00 	cmp.w	r8, #0
 800aa5e:	d05c      	beq.n	800ab1a <_dtoa_r+0xa7a>
 800aa60:	4628      	mov	r0, r5
 800aa62:	6871      	ldr	r1, [r6, #4]
 800aa64:	f000 f9a0 	bl	800ada8 <_Balloc>
 800aa68:	4607      	mov	r7, r0
 800aa6a:	b928      	cbnz	r0, 800aa78 <_dtoa_r+0x9d8>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa72:	4b7f      	ldr	r3, [pc, #508]	; (800ac70 <_dtoa_r+0xbd0>)
 800aa74:	f7ff bb28 	b.w	800a0c8 <_dtoa_r+0x28>
 800aa78:	6932      	ldr	r2, [r6, #16]
 800aa7a:	f106 010c 	add.w	r1, r6, #12
 800aa7e:	3202      	adds	r2, #2
 800aa80:	0092      	lsls	r2, r2, #2
 800aa82:	300c      	adds	r0, #12
 800aa84:	f7fe fa16 	bl	8008eb4 <memcpy>
 800aa88:	2201      	movs	r2, #1
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f000 fb99 	bl	800b1c4 <__lshift>
 800aa92:	46b0      	mov	r8, r6
 800aa94:	4606      	mov	r6, r0
 800aa96:	9b03      	ldr	r3, [sp, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	9308      	str	r3, [sp, #32]
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	444b      	add	r3, r9
 800aaa0:	930a      	str	r3, [sp, #40]	; 0x28
 800aaa2:	9b04      	ldr	r3, [sp, #16]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaaa:	9b08      	ldr	r3, [sp, #32]
 800aaac:	4621      	mov	r1, r4
 800aaae:	3b01      	subs	r3, #1
 800aab0:	4658      	mov	r0, fp
 800aab2:	9304      	str	r3, [sp, #16]
 800aab4:	f7ff fa66 	bl	8009f84 <quorem>
 800aab8:	4603      	mov	r3, r0
 800aaba:	4641      	mov	r1, r8
 800aabc:	3330      	adds	r3, #48	; 0x30
 800aabe:	9006      	str	r0, [sp, #24]
 800aac0:	4658      	mov	r0, fp
 800aac2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac4:	f000 fbee 	bl	800b2a4 <__mcmp>
 800aac8:	4632      	mov	r2, r6
 800aaca:	4681      	mov	r9, r0
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 fc04 	bl	800b2dc <__mdiff>
 800aad4:	68c2      	ldr	r2, [r0, #12]
 800aad6:	4607      	mov	r7, r0
 800aad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aada:	bb02      	cbnz	r2, 800ab1e <_dtoa_r+0xa7e>
 800aadc:	4601      	mov	r1, r0
 800aade:	4658      	mov	r0, fp
 800aae0:	f000 fbe0 	bl	800b2a4 <__mcmp>
 800aae4:	4602      	mov	r2, r0
 800aae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae8:	4639      	mov	r1, r7
 800aaea:	4628      	mov	r0, r5
 800aaec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aaf0:	f000 f99a 	bl	800ae28 <_Bfree>
 800aaf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aaf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaf8:	9f08      	ldr	r7, [sp, #32]
 800aafa:	ea43 0102 	orr.w	r1, r3, r2
 800aafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab00:	430b      	orrs	r3, r1
 800ab02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab04:	d10d      	bne.n	800ab22 <_dtoa_r+0xa82>
 800ab06:	2b39      	cmp	r3, #57	; 0x39
 800ab08:	d029      	beq.n	800ab5e <_dtoa_r+0xabe>
 800ab0a:	f1b9 0f00 	cmp.w	r9, #0
 800ab0e:	dd01      	ble.n	800ab14 <_dtoa_r+0xa74>
 800ab10:	9b06      	ldr	r3, [sp, #24]
 800ab12:	3331      	adds	r3, #49	; 0x31
 800ab14:	9a04      	ldr	r2, [sp, #16]
 800ab16:	7013      	strb	r3, [r2, #0]
 800ab18:	e776      	b.n	800aa08 <_dtoa_r+0x968>
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	e7b9      	b.n	800aa92 <_dtoa_r+0x9f2>
 800ab1e:	2201      	movs	r2, #1
 800ab20:	e7e2      	b.n	800aae8 <_dtoa_r+0xa48>
 800ab22:	f1b9 0f00 	cmp.w	r9, #0
 800ab26:	db06      	blt.n	800ab36 <_dtoa_r+0xa96>
 800ab28:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ab2a:	ea41 0909 	orr.w	r9, r1, r9
 800ab2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab30:	ea59 0101 	orrs.w	r1, r9, r1
 800ab34:	d120      	bne.n	800ab78 <_dtoa_r+0xad8>
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	ddec      	ble.n	800ab14 <_dtoa_r+0xa74>
 800ab3a:	4659      	mov	r1, fp
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	4628      	mov	r0, r5
 800ab40:	9308      	str	r3, [sp, #32]
 800ab42:	f000 fb3f 	bl	800b1c4 <__lshift>
 800ab46:	4621      	mov	r1, r4
 800ab48:	4683      	mov	fp, r0
 800ab4a:	f000 fbab 	bl	800b2a4 <__mcmp>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	9b08      	ldr	r3, [sp, #32]
 800ab52:	dc02      	bgt.n	800ab5a <_dtoa_r+0xaba>
 800ab54:	d1de      	bne.n	800ab14 <_dtoa_r+0xa74>
 800ab56:	07da      	lsls	r2, r3, #31
 800ab58:	d5dc      	bpl.n	800ab14 <_dtoa_r+0xa74>
 800ab5a:	2b39      	cmp	r3, #57	; 0x39
 800ab5c:	d1d8      	bne.n	800ab10 <_dtoa_r+0xa70>
 800ab5e:	2339      	movs	r3, #57	; 0x39
 800ab60:	9a04      	ldr	r2, [sp, #16]
 800ab62:	7013      	strb	r3, [r2, #0]
 800ab64:	463b      	mov	r3, r7
 800ab66:	461f      	mov	r7, r3
 800ab68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	2a39      	cmp	r2, #57	; 0x39
 800ab70:	d050      	beq.n	800ac14 <_dtoa_r+0xb74>
 800ab72:	3201      	adds	r2, #1
 800ab74:	701a      	strb	r2, [r3, #0]
 800ab76:	e747      	b.n	800aa08 <_dtoa_r+0x968>
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	dd03      	ble.n	800ab84 <_dtoa_r+0xae4>
 800ab7c:	2b39      	cmp	r3, #57	; 0x39
 800ab7e:	d0ee      	beq.n	800ab5e <_dtoa_r+0xabe>
 800ab80:	3301      	adds	r3, #1
 800ab82:	e7c7      	b.n	800ab14 <_dtoa_r+0xa74>
 800ab84:	9a08      	ldr	r2, [sp, #32]
 800ab86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab88:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab8c:	428a      	cmp	r2, r1
 800ab8e:	d02a      	beq.n	800abe6 <_dtoa_r+0xb46>
 800ab90:	4659      	mov	r1, fp
 800ab92:	2300      	movs	r3, #0
 800ab94:	220a      	movs	r2, #10
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 f968 	bl	800ae6c <__multadd>
 800ab9c:	45b0      	cmp	r8, r6
 800ab9e:	4683      	mov	fp, r0
 800aba0:	f04f 0300 	mov.w	r3, #0
 800aba4:	f04f 020a 	mov.w	r2, #10
 800aba8:	4641      	mov	r1, r8
 800abaa:	4628      	mov	r0, r5
 800abac:	d107      	bne.n	800abbe <_dtoa_r+0xb1e>
 800abae:	f000 f95d 	bl	800ae6c <__multadd>
 800abb2:	4680      	mov	r8, r0
 800abb4:	4606      	mov	r6, r0
 800abb6:	9b08      	ldr	r3, [sp, #32]
 800abb8:	3301      	adds	r3, #1
 800abba:	9308      	str	r3, [sp, #32]
 800abbc:	e775      	b.n	800aaaa <_dtoa_r+0xa0a>
 800abbe:	f000 f955 	bl	800ae6c <__multadd>
 800abc2:	4631      	mov	r1, r6
 800abc4:	4680      	mov	r8, r0
 800abc6:	2300      	movs	r3, #0
 800abc8:	220a      	movs	r2, #10
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f94e 	bl	800ae6c <__multadd>
 800abd0:	4606      	mov	r6, r0
 800abd2:	e7f0      	b.n	800abb6 <_dtoa_r+0xb16>
 800abd4:	f1b9 0f00 	cmp.w	r9, #0
 800abd8:	bfcc      	ite	gt
 800abda:	464f      	movgt	r7, r9
 800abdc:	2701      	movle	r7, #1
 800abde:	f04f 0800 	mov.w	r8, #0
 800abe2:	9a03      	ldr	r2, [sp, #12]
 800abe4:	4417      	add	r7, r2
 800abe6:	4659      	mov	r1, fp
 800abe8:	2201      	movs	r2, #1
 800abea:	4628      	mov	r0, r5
 800abec:	9308      	str	r3, [sp, #32]
 800abee:	f000 fae9 	bl	800b1c4 <__lshift>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4683      	mov	fp, r0
 800abf6:	f000 fb55 	bl	800b2a4 <__mcmp>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	dcb2      	bgt.n	800ab64 <_dtoa_r+0xac4>
 800abfe:	d102      	bne.n	800ac06 <_dtoa_r+0xb66>
 800ac00:	9b08      	ldr	r3, [sp, #32]
 800ac02:	07db      	lsls	r3, r3, #31
 800ac04:	d4ae      	bmi.n	800ab64 <_dtoa_r+0xac4>
 800ac06:	463b      	mov	r3, r7
 800ac08:	461f      	mov	r7, r3
 800ac0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac0e:	2a30      	cmp	r2, #48	; 0x30
 800ac10:	d0fa      	beq.n	800ac08 <_dtoa_r+0xb68>
 800ac12:	e6f9      	b.n	800aa08 <_dtoa_r+0x968>
 800ac14:	9a03      	ldr	r2, [sp, #12]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d1a5      	bne.n	800ab66 <_dtoa_r+0xac6>
 800ac1a:	2331      	movs	r3, #49	; 0x31
 800ac1c:	f10a 0a01 	add.w	sl, sl, #1
 800ac20:	e779      	b.n	800ab16 <_dtoa_r+0xa76>
 800ac22:	4b14      	ldr	r3, [pc, #80]	; (800ac74 <_dtoa_r+0xbd4>)
 800ac24:	f7ff baa8 	b.w	800a178 <_dtoa_r+0xd8>
 800ac28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f47f aa81 	bne.w	800a132 <_dtoa_r+0x92>
 800ac30:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <_dtoa_r+0xbd8>)
 800ac32:	f7ff baa1 	b.w	800a178 <_dtoa_r+0xd8>
 800ac36:	f1b9 0f00 	cmp.w	r9, #0
 800ac3a:	dc03      	bgt.n	800ac44 <_dtoa_r+0xba4>
 800ac3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	f73f aecb 	bgt.w	800a9da <_dtoa_r+0x93a>
 800ac44:	9f03      	ldr	r7, [sp, #12]
 800ac46:	4621      	mov	r1, r4
 800ac48:	4658      	mov	r0, fp
 800ac4a:	f7ff f99b 	bl	8009f84 <quorem>
 800ac4e:	9a03      	ldr	r2, [sp, #12]
 800ac50:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac54:	f807 3b01 	strb.w	r3, [r7], #1
 800ac58:	1aba      	subs	r2, r7, r2
 800ac5a:	4591      	cmp	r9, r2
 800ac5c:	ddba      	ble.n	800abd4 <_dtoa_r+0xb34>
 800ac5e:	4659      	mov	r1, fp
 800ac60:	2300      	movs	r3, #0
 800ac62:	220a      	movs	r2, #10
 800ac64:	4628      	mov	r0, r5
 800ac66:	f000 f901 	bl	800ae6c <__multadd>
 800ac6a:	4683      	mov	fp, r0
 800ac6c:	e7eb      	b.n	800ac46 <_dtoa_r+0xba6>
 800ac6e:	bf00      	nop
 800ac70:	0800c04d 	.word	0x0800c04d
 800ac74:	0800be6d 	.word	0x0800be6d
 800ac78:	0800bfce 	.word	0x0800bfce

0800ac7c <_localeconv_r>:
 800ac7c:	4800      	ldr	r0, [pc, #0]	; (800ac80 <_localeconv_r+0x4>)
 800ac7e:	4770      	bx	lr
 800ac80:	200001f4 	.word	0x200001f4

0800ac84 <_lseek_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4d05      	ldr	r5, [pc, #20]	; (800aca4 <_lseek_r+0x20>)
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f7 fb12 	bl	80022bc <_lseek>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_lseek_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_lseek_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20001f38 	.word	0x20001f38

0800aca8 <__swhatbuf_r>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	460e      	mov	r6, r1
 800acac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb0:	4614      	mov	r4, r2
 800acb2:	2900      	cmp	r1, #0
 800acb4:	461d      	mov	r5, r3
 800acb6:	b096      	sub	sp, #88	; 0x58
 800acb8:	da08      	bge.n	800accc <__swhatbuf_r+0x24>
 800acba:	2200      	movs	r2, #0
 800acbc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	061a      	lsls	r2, r3, #24
 800acc4:	d410      	bmi.n	800ace8 <__swhatbuf_r+0x40>
 800acc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acca:	e00e      	b.n	800acea <__swhatbuf_r+0x42>
 800accc:	466a      	mov	r2, sp
 800acce:	f000 fc1b 	bl	800b508 <_fstat_r>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	dbf1      	blt.n	800acba <__swhatbuf_r+0x12>
 800acd6:	9a01      	ldr	r2, [sp, #4]
 800acd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ace0:	425a      	negs	r2, r3
 800ace2:	415a      	adcs	r2, r3
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	e7ee      	b.n	800acc6 <__swhatbuf_r+0x1e>
 800ace8:	2340      	movs	r3, #64	; 0x40
 800acea:	2000      	movs	r0, #0
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	b016      	add	sp, #88	; 0x58
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acf4 <__smakebuf_r>:
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acf8:	079d      	lsls	r5, r3, #30
 800acfa:	4606      	mov	r6, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	d507      	bpl.n	800ad10 <__smakebuf_r+0x1c>
 800ad00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	6163      	str	r3, [r4, #20]
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	466a      	mov	r2, sp
 800ad12:	ab01      	add	r3, sp, #4
 800ad14:	f7ff ffc8 	bl	800aca8 <__swhatbuf_r>
 800ad18:	9900      	ldr	r1, [sp, #0]
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7fe f947 	bl	8008fb0 <_malloc_r>
 800ad22:	b948      	cbnz	r0, 800ad38 <__smakebuf_r+0x44>
 800ad24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d4ef      	bmi.n	800ad0c <__smakebuf_r+0x18>
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	f043 0302 	orr.w	r3, r3, #2
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7e3      	b.n	800ad00 <__smakebuf_r+0xc>
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <__smakebuf_r+0x7c>)
 800ad3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	6120      	str	r0, [r4, #16]
 800ad4a:	6163      	str	r3, [r4, #20]
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	b15b      	cbz	r3, 800ad68 <__smakebuf_r+0x74>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad56:	f000 fbe9 	bl	800b52c <_isatty_r>
 800ad5a:	b128      	cbz	r0, 800ad68 <__smakebuf_r+0x74>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	89a0      	ldrh	r0, [r4, #12]
 800ad6a:	4305      	orrs	r5, r0
 800ad6c:	81a5      	strh	r5, [r4, #12]
 800ad6e:	e7cd      	b.n	800ad0c <__smakebuf_r+0x18>
 800ad70:	08008c8d 	.word	0x08008c8d

0800ad74 <memchr>:
 800ad74:	4603      	mov	r3, r0
 800ad76:	b510      	push	{r4, lr}
 800ad78:	b2c9      	uxtb	r1, r1
 800ad7a:	4402      	add	r2, r0
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	d101      	bne.n	800ad86 <memchr+0x12>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e003      	b.n	800ad8e <memchr+0x1a>
 800ad86:	7804      	ldrb	r4, [r0, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	428c      	cmp	r4, r1
 800ad8c:	d1f6      	bne.n	800ad7c <memchr+0x8>
 800ad8e:	bd10      	pop	{r4, pc}

0800ad90 <__malloc_lock>:
 800ad90:	4801      	ldr	r0, [pc, #4]	; (800ad98 <__malloc_lock+0x8>)
 800ad92:	f7fe b884 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	20001f2c 	.word	0x20001f2c

0800ad9c <__malloc_unlock>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__malloc_unlock+0x8>)
 800ad9e:	f7fe b87f 	b.w	8008ea0 <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	20001f2c 	.word	0x20001f2c

0800ada8 <_Balloc>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	b976      	cbnz	r6, 800add0 <_Balloc+0x28>
 800adb2:	2010      	movs	r0, #16
 800adb4:	f7fe f876 	bl	8008ea4 <malloc>
 800adb8:	4602      	mov	r2, r0
 800adba:	6260      	str	r0, [r4, #36]	; 0x24
 800adbc:	b920      	cbnz	r0, 800adc8 <_Balloc+0x20>
 800adbe:	2166      	movs	r1, #102	; 0x66
 800adc0:	4b17      	ldr	r3, [pc, #92]	; (800ae20 <_Balloc+0x78>)
 800adc2:	4818      	ldr	r0, [pc, #96]	; (800ae24 <_Balloc+0x7c>)
 800adc4:	f7ff f8b0 	bl	8009f28 <__assert_func>
 800adc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adcc:	6006      	str	r6, [r0, #0]
 800adce:	60c6      	str	r6, [r0, #12]
 800add0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800add2:	68f3      	ldr	r3, [r6, #12]
 800add4:	b183      	cbz	r3, 800adf8 <_Balloc+0x50>
 800add6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adde:	b9b8      	cbnz	r0, 800ae10 <_Balloc+0x68>
 800ade0:	2101      	movs	r1, #1
 800ade2:	fa01 f605 	lsl.w	r6, r1, r5
 800ade6:	1d72      	adds	r2, r6, #5
 800ade8:	4620      	mov	r0, r4
 800adea:	0092      	lsls	r2, r2, #2
 800adec:	f000 fb5e 	bl	800b4ac <_calloc_r>
 800adf0:	b160      	cbz	r0, 800ae0c <_Balloc+0x64>
 800adf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adf6:	e00e      	b.n	800ae16 <_Balloc+0x6e>
 800adf8:	2221      	movs	r2, #33	; 0x21
 800adfa:	2104      	movs	r1, #4
 800adfc:	4620      	mov	r0, r4
 800adfe:	f000 fb55 	bl	800b4ac <_calloc_r>
 800ae02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae04:	60f0      	str	r0, [r6, #12]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1e4      	bne.n	800add6 <_Balloc+0x2e>
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	6802      	ldr	r2, [r0, #0]
 800ae12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae16:	2300      	movs	r3, #0
 800ae18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae1c:	e7f7      	b.n	800ae0e <_Balloc+0x66>
 800ae1e:	bf00      	nop
 800ae20:	0800bfdb 	.word	0x0800bfdb
 800ae24:	0800c05e 	.word	0x0800c05e

0800ae28 <_Bfree>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	b976      	cbnz	r6, 800ae50 <_Bfree+0x28>
 800ae32:	2010      	movs	r0, #16
 800ae34:	f7fe f836 	bl	8008ea4 <malloc>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6268      	str	r0, [r5, #36]	; 0x24
 800ae3c:	b920      	cbnz	r0, 800ae48 <_Bfree+0x20>
 800ae3e:	218a      	movs	r1, #138	; 0x8a
 800ae40:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <_Bfree+0x3c>)
 800ae42:	4809      	ldr	r0, [pc, #36]	; (800ae68 <_Bfree+0x40>)
 800ae44:	f7ff f870 	bl	8009f28 <__assert_func>
 800ae48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae4c:	6006      	str	r6, [r0, #0]
 800ae4e:	60c6      	str	r6, [r0, #12]
 800ae50:	b13c      	cbz	r4, 800ae62 <_Bfree+0x3a>
 800ae52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae54:	6862      	ldr	r2, [r4, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae5c:	6021      	str	r1, [r4, #0]
 800ae5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	0800bfdb 	.word	0x0800bfdb
 800ae68:	0800c05e 	.word	0x0800c05e

0800ae6c <__multadd>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	4607      	mov	r7, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	461e      	mov	r6, r3
 800ae76:	2000      	movs	r0, #0
 800ae78:	690d      	ldr	r5, [r1, #16]
 800ae7a:	f101 0c14 	add.w	ip, r1, #20
 800ae7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae82:	3001      	adds	r0, #1
 800ae84:	b299      	uxth	r1, r3
 800ae86:	fb02 6101 	mla	r1, r2, r1, r6
 800ae8a:	0c1e      	lsrs	r6, r3, #16
 800ae8c:	0c0b      	lsrs	r3, r1, #16
 800ae8e:	fb02 3306 	mla	r3, r2, r6, r3
 800ae92:	b289      	uxth	r1, r1
 800ae94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae98:	4285      	cmp	r5, r0
 800ae9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae9e:	f84c 1b04 	str.w	r1, [ip], #4
 800aea2:	dcec      	bgt.n	800ae7e <__multadd+0x12>
 800aea4:	b30e      	cbz	r6, 800aeea <__multadd+0x7e>
 800aea6:	68a3      	ldr	r3, [r4, #8]
 800aea8:	42ab      	cmp	r3, r5
 800aeaa:	dc19      	bgt.n	800aee0 <__multadd+0x74>
 800aeac:	6861      	ldr	r1, [r4, #4]
 800aeae:	4638      	mov	r0, r7
 800aeb0:	3101      	adds	r1, #1
 800aeb2:	f7ff ff79 	bl	800ada8 <_Balloc>
 800aeb6:	4680      	mov	r8, r0
 800aeb8:	b928      	cbnz	r0, 800aec6 <__multadd+0x5a>
 800aeba:	4602      	mov	r2, r0
 800aebc:	21b5      	movs	r1, #181	; 0xb5
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <__multadd+0x84>)
 800aec0:	480c      	ldr	r0, [pc, #48]	; (800aef4 <__multadd+0x88>)
 800aec2:	f7ff f831 	bl	8009f28 <__assert_func>
 800aec6:	6922      	ldr	r2, [r4, #16]
 800aec8:	f104 010c 	add.w	r1, r4, #12
 800aecc:	3202      	adds	r2, #2
 800aece:	0092      	lsls	r2, r2, #2
 800aed0:	300c      	adds	r0, #12
 800aed2:	f7fd ffef 	bl	8008eb4 <memcpy>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff ffa5 	bl	800ae28 <_Bfree>
 800aede:	4644      	mov	r4, r8
 800aee0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aee4:	3501      	adds	r5, #1
 800aee6:	615e      	str	r6, [r3, #20]
 800aee8:	6125      	str	r5, [r4, #16]
 800aeea:	4620      	mov	r0, r4
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	0800c04d 	.word	0x0800c04d
 800aef4:	0800c05e 	.word	0x0800c05e

0800aef8 <__hi0bits>:
 800aef8:	0c02      	lsrs	r2, r0, #16
 800aefa:	0412      	lsls	r2, r2, #16
 800aefc:	4603      	mov	r3, r0
 800aefe:	b9ca      	cbnz	r2, 800af34 <__hi0bits+0x3c>
 800af00:	0403      	lsls	r3, r0, #16
 800af02:	2010      	movs	r0, #16
 800af04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af08:	bf04      	itt	eq
 800af0a:	021b      	lsleq	r3, r3, #8
 800af0c:	3008      	addeq	r0, #8
 800af0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af12:	bf04      	itt	eq
 800af14:	011b      	lsleq	r3, r3, #4
 800af16:	3004      	addeq	r0, #4
 800af18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af1c:	bf04      	itt	eq
 800af1e:	009b      	lsleq	r3, r3, #2
 800af20:	3002      	addeq	r0, #2
 800af22:	2b00      	cmp	r3, #0
 800af24:	db05      	blt.n	800af32 <__hi0bits+0x3a>
 800af26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800af2a:	f100 0001 	add.w	r0, r0, #1
 800af2e:	bf08      	it	eq
 800af30:	2020      	moveq	r0, #32
 800af32:	4770      	bx	lr
 800af34:	2000      	movs	r0, #0
 800af36:	e7e5      	b.n	800af04 <__hi0bits+0xc>

0800af38 <__lo0bits>:
 800af38:	6803      	ldr	r3, [r0, #0]
 800af3a:	4602      	mov	r2, r0
 800af3c:	f013 0007 	ands.w	r0, r3, #7
 800af40:	d00b      	beq.n	800af5a <__lo0bits+0x22>
 800af42:	07d9      	lsls	r1, r3, #31
 800af44:	d421      	bmi.n	800af8a <__lo0bits+0x52>
 800af46:	0798      	lsls	r0, r3, #30
 800af48:	bf49      	itett	mi
 800af4a:	085b      	lsrmi	r3, r3, #1
 800af4c:	089b      	lsrpl	r3, r3, #2
 800af4e:	2001      	movmi	r0, #1
 800af50:	6013      	strmi	r3, [r2, #0]
 800af52:	bf5c      	itt	pl
 800af54:	2002      	movpl	r0, #2
 800af56:	6013      	strpl	r3, [r2, #0]
 800af58:	4770      	bx	lr
 800af5a:	b299      	uxth	r1, r3
 800af5c:	b909      	cbnz	r1, 800af62 <__lo0bits+0x2a>
 800af5e:	2010      	movs	r0, #16
 800af60:	0c1b      	lsrs	r3, r3, #16
 800af62:	b2d9      	uxtb	r1, r3
 800af64:	b909      	cbnz	r1, 800af6a <__lo0bits+0x32>
 800af66:	3008      	adds	r0, #8
 800af68:	0a1b      	lsrs	r3, r3, #8
 800af6a:	0719      	lsls	r1, r3, #28
 800af6c:	bf04      	itt	eq
 800af6e:	091b      	lsreq	r3, r3, #4
 800af70:	3004      	addeq	r0, #4
 800af72:	0799      	lsls	r1, r3, #30
 800af74:	bf04      	itt	eq
 800af76:	089b      	lsreq	r3, r3, #2
 800af78:	3002      	addeq	r0, #2
 800af7a:	07d9      	lsls	r1, r3, #31
 800af7c:	d403      	bmi.n	800af86 <__lo0bits+0x4e>
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	f100 0001 	add.w	r0, r0, #1
 800af84:	d003      	beq.n	800af8e <__lo0bits+0x56>
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	4770      	bx	lr
 800af8a:	2000      	movs	r0, #0
 800af8c:	4770      	bx	lr
 800af8e:	2020      	movs	r0, #32
 800af90:	4770      	bx	lr
	...

0800af94 <__i2b>:
 800af94:	b510      	push	{r4, lr}
 800af96:	460c      	mov	r4, r1
 800af98:	2101      	movs	r1, #1
 800af9a:	f7ff ff05 	bl	800ada8 <_Balloc>
 800af9e:	4602      	mov	r2, r0
 800afa0:	b928      	cbnz	r0, 800afae <__i2b+0x1a>
 800afa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800afa6:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <__i2b+0x24>)
 800afa8:	4804      	ldr	r0, [pc, #16]	; (800afbc <__i2b+0x28>)
 800afaa:	f7fe ffbd 	bl	8009f28 <__assert_func>
 800afae:	2301      	movs	r3, #1
 800afb0:	6144      	str	r4, [r0, #20]
 800afb2:	6103      	str	r3, [r0, #16]
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	bf00      	nop
 800afb8:	0800c04d 	.word	0x0800c04d
 800afbc:	0800c05e 	.word	0x0800c05e

0800afc0 <__multiply>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	4691      	mov	r9, r2
 800afc6:	690a      	ldr	r2, [r1, #16]
 800afc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afcc:	460c      	mov	r4, r1
 800afce:	429a      	cmp	r2, r3
 800afd0:	bfbe      	ittt	lt
 800afd2:	460b      	movlt	r3, r1
 800afd4:	464c      	movlt	r4, r9
 800afd6:	4699      	movlt	r9, r3
 800afd8:	6927      	ldr	r7, [r4, #16]
 800afda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	6861      	ldr	r1, [r4, #4]
 800afe2:	eb07 060a 	add.w	r6, r7, sl
 800afe6:	42b3      	cmp	r3, r6
 800afe8:	b085      	sub	sp, #20
 800afea:	bfb8      	it	lt
 800afec:	3101      	addlt	r1, #1
 800afee:	f7ff fedb 	bl	800ada8 <_Balloc>
 800aff2:	b930      	cbnz	r0, 800b002 <__multiply+0x42>
 800aff4:	4602      	mov	r2, r0
 800aff6:	f240 115d 	movw	r1, #349	; 0x15d
 800affa:	4b43      	ldr	r3, [pc, #268]	; (800b108 <__multiply+0x148>)
 800affc:	4843      	ldr	r0, [pc, #268]	; (800b10c <__multiply+0x14c>)
 800affe:	f7fe ff93 	bl	8009f28 <__assert_func>
 800b002:	f100 0514 	add.w	r5, r0, #20
 800b006:	462b      	mov	r3, r5
 800b008:	2200      	movs	r2, #0
 800b00a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b00e:	4543      	cmp	r3, r8
 800b010:	d321      	bcc.n	800b056 <__multiply+0x96>
 800b012:	f104 0314 	add.w	r3, r4, #20
 800b016:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b01a:	f109 0314 	add.w	r3, r9, #20
 800b01e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b022:	9202      	str	r2, [sp, #8]
 800b024:	1b3a      	subs	r2, r7, r4
 800b026:	3a15      	subs	r2, #21
 800b028:	f022 0203 	bic.w	r2, r2, #3
 800b02c:	3204      	adds	r2, #4
 800b02e:	f104 0115 	add.w	r1, r4, #21
 800b032:	428f      	cmp	r7, r1
 800b034:	bf38      	it	cc
 800b036:	2204      	movcc	r2, #4
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	9a02      	ldr	r2, [sp, #8]
 800b03c:	9303      	str	r3, [sp, #12]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d80c      	bhi.n	800b05c <__multiply+0x9c>
 800b042:	2e00      	cmp	r6, #0
 800b044:	dd03      	ble.n	800b04e <__multiply+0x8e>
 800b046:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d059      	beq.n	800b102 <__multiply+0x142>
 800b04e:	6106      	str	r6, [r0, #16]
 800b050:	b005      	add	sp, #20
 800b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b056:	f843 2b04 	str.w	r2, [r3], #4
 800b05a:	e7d8      	b.n	800b00e <__multiply+0x4e>
 800b05c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b060:	f1ba 0f00 	cmp.w	sl, #0
 800b064:	d023      	beq.n	800b0ae <__multiply+0xee>
 800b066:	46a9      	mov	r9, r5
 800b068:	f04f 0c00 	mov.w	ip, #0
 800b06c:	f104 0e14 	add.w	lr, r4, #20
 800b070:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b074:	f8d9 1000 	ldr.w	r1, [r9]
 800b078:	fa1f fb82 	uxth.w	fp, r2
 800b07c:	b289      	uxth	r1, r1
 800b07e:	fb0a 110b 	mla	r1, sl, fp, r1
 800b082:	4461      	add	r1, ip
 800b084:	f8d9 c000 	ldr.w	ip, [r9]
 800b088:	0c12      	lsrs	r2, r2, #16
 800b08a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b08e:	fb0a c202 	mla	r2, sl, r2, ip
 800b092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b096:	b289      	uxth	r1, r1
 800b098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b09c:	4577      	cmp	r7, lr
 800b09e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b0a2:	f849 1b04 	str.w	r1, [r9], #4
 800b0a6:	d8e3      	bhi.n	800b070 <__multiply+0xb0>
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	f845 c002 	str.w	ip, [r5, r2]
 800b0ae:	9a03      	ldr	r2, [sp, #12]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0b6:	f1b9 0f00 	cmp.w	r9, #0
 800b0ba:	d020      	beq.n	800b0fe <__multiply+0x13e>
 800b0bc:	46ae      	mov	lr, r5
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	6829      	ldr	r1, [r5, #0]
 800b0c4:	f104 0c14 	add.w	ip, r4, #20
 800b0c8:	f8bc b000 	ldrh.w	fp, [ip]
 800b0cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0d0:	b289      	uxth	r1, r1
 800b0d2:	fb09 220b 	mla	r2, r9, fp, r2
 800b0d6:	4492      	add	sl, r2
 800b0d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b0dc:	f84e 1b04 	str.w	r1, [lr], #4
 800b0e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0e4:	f8be 1000 	ldrh.w	r1, [lr]
 800b0e8:	0c12      	lsrs	r2, r2, #16
 800b0ea:	fb09 1102 	mla	r1, r9, r2, r1
 800b0ee:	4567      	cmp	r7, ip
 800b0f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b0f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0f8:	d8e6      	bhi.n	800b0c8 <__multiply+0x108>
 800b0fa:	9a01      	ldr	r2, [sp, #4]
 800b0fc:	50a9      	str	r1, [r5, r2]
 800b0fe:	3504      	adds	r5, #4
 800b100:	e79b      	b.n	800b03a <__multiply+0x7a>
 800b102:	3e01      	subs	r6, #1
 800b104:	e79d      	b.n	800b042 <__multiply+0x82>
 800b106:	bf00      	nop
 800b108:	0800c04d 	.word	0x0800c04d
 800b10c:	0800c05e 	.word	0x0800c05e

0800b110 <__pow5mult>:
 800b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b114:	4615      	mov	r5, r2
 800b116:	f012 0203 	ands.w	r2, r2, #3
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	d007      	beq.n	800b130 <__pow5mult+0x20>
 800b120:	4c25      	ldr	r4, [pc, #148]	; (800b1b8 <__pow5mult+0xa8>)
 800b122:	3a01      	subs	r2, #1
 800b124:	2300      	movs	r3, #0
 800b126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b12a:	f7ff fe9f 	bl	800ae6c <__multadd>
 800b12e:	4607      	mov	r7, r0
 800b130:	10ad      	asrs	r5, r5, #2
 800b132:	d03d      	beq.n	800b1b0 <__pow5mult+0xa0>
 800b134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b136:	b97c      	cbnz	r4, 800b158 <__pow5mult+0x48>
 800b138:	2010      	movs	r0, #16
 800b13a:	f7fd feb3 	bl	8008ea4 <malloc>
 800b13e:	4602      	mov	r2, r0
 800b140:	6270      	str	r0, [r6, #36]	; 0x24
 800b142:	b928      	cbnz	r0, 800b150 <__pow5mult+0x40>
 800b144:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b148:	4b1c      	ldr	r3, [pc, #112]	; (800b1bc <__pow5mult+0xac>)
 800b14a:	481d      	ldr	r0, [pc, #116]	; (800b1c0 <__pow5mult+0xb0>)
 800b14c:	f7fe feec 	bl	8009f28 <__assert_func>
 800b150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b154:	6004      	str	r4, [r0, #0]
 800b156:	60c4      	str	r4, [r0, #12]
 800b158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b15c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b160:	b94c      	cbnz	r4, 800b176 <__pow5mult+0x66>
 800b162:	f240 2171 	movw	r1, #625	; 0x271
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff ff14 	bl	800af94 <__i2b>
 800b16c:	2300      	movs	r3, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	f8c8 0008 	str.w	r0, [r8, #8]
 800b174:	6003      	str	r3, [r0, #0]
 800b176:	f04f 0900 	mov.w	r9, #0
 800b17a:	07eb      	lsls	r3, r5, #31
 800b17c:	d50a      	bpl.n	800b194 <__pow5mult+0x84>
 800b17e:	4639      	mov	r1, r7
 800b180:	4622      	mov	r2, r4
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff1c 	bl	800afc0 <__multiply>
 800b188:	4680      	mov	r8, r0
 800b18a:	4639      	mov	r1, r7
 800b18c:	4630      	mov	r0, r6
 800b18e:	f7ff fe4b 	bl	800ae28 <_Bfree>
 800b192:	4647      	mov	r7, r8
 800b194:	106d      	asrs	r5, r5, #1
 800b196:	d00b      	beq.n	800b1b0 <__pow5mult+0xa0>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	b938      	cbnz	r0, 800b1ac <__pow5mult+0x9c>
 800b19c:	4622      	mov	r2, r4
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff ff0d 	bl	800afc0 <__multiply>
 800b1a6:	6020      	str	r0, [r4, #0]
 800b1a8:	f8c0 9000 	str.w	r9, [r0]
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	e7e4      	b.n	800b17a <__pow5mult+0x6a>
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b6:	bf00      	nop
 800b1b8:	0800c1b0 	.word	0x0800c1b0
 800b1bc:	0800bfdb 	.word	0x0800bfdb
 800b1c0:	0800c05e 	.word	0x0800c05e

0800b1c4 <__lshift>:
 800b1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	4691      	mov	r9, r2
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	6849      	ldr	r1, [r1, #4]
 800b1d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1d6:	68a3      	ldr	r3, [r4, #8]
 800b1d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1dc:	f108 0601 	add.w	r6, r8, #1
 800b1e0:	42b3      	cmp	r3, r6
 800b1e2:	db0b      	blt.n	800b1fc <__lshift+0x38>
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7ff fddf 	bl	800ada8 <_Balloc>
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	b948      	cbnz	r0, 800b202 <__lshift+0x3e>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b1f4:	4b29      	ldr	r3, [pc, #164]	; (800b29c <__lshift+0xd8>)
 800b1f6:	482a      	ldr	r0, [pc, #168]	; (800b2a0 <__lshift+0xdc>)
 800b1f8:	f7fe fe96 	bl	8009f28 <__assert_func>
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	e7ee      	b.n	800b1e0 <__lshift+0x1c>
 800b202:	2300      	movs	r3, #0
 800b204:	f100 0114 	add.w	r1, r0, #20
 800b208:	f100 0210 	add.w	r2, r0, #16
 800b20c:	4618      	mov	r0, r3
 800b20e:	4553      	cmp	r3, sl
 800b210:	db37      	blt.n	800b282 <__lshift+0xbe>
 800b212:	6920      	ldr	r0, [r4, #16]
 800b214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b218:	f104 0314 	add.w	r3, r4, #20
 800b21c:	f019 091f 	ands.w	r9, r9, #31
 800b220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b224:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b228:	d02f      	beq.n	800b28a <__lshift+0xc6>
 800b22a:	468a      	mov	sl, r1
 800b22c:	f04f 0c00 	mov.w	ip, #0
 800b230:	f1c9 0e20 	rsb	lr, r9, #32
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	fa02 f209 	lsl.w	r2, r2, r9
 800b23a:	ea42 020c 	orr.w	r2, r2, ip
 800b23e:	f84a 2b04 	str.w	r2, [sl], #4
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	4298      	cmp	r0, r3
 800b248:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b24c:	d8f2      	bhi.n	800b234 <__lshift+0x70>
 800b24e:	1b03      	subs	r3, r0, r4
 800b250:	3b15      	subs	r3, #21
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	3304      	adds	r3, #4
 800b258:	f104 0215 	add.w	r2, r4, #21
 800b25c:	4290      	cmp	r0, r2
 800b25e:	bf38      	it	cc
 800b260:	2304      	movcc	r3, #4
 800b262:	f841 c003 	str.w	ip, [r1, r3]
 800b266:	f1bc 0f00 	cmp.w	ip, #0
 800b26a:	d001      	beq.n	800b270 <__lshift+0xac>
 800b26c:	f108 0602 	add.w	r6, r8, #2
 800b270:	3e01      	subs	r6, #1
 800b272:	4638      	mov	r0, r7
 800b274:	4621      	mov	r1, r4
 800b276:	612e      	str	r6, [r5, #16]
 800b278:	f7ff fdd6 	bl	800ae28 <_Bfree>
 800b27c:	4628      	mov	r0, r5
 800b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b282:	f842 0f04 	str.w	r0, [r2, #4]!
 800b286:	3301      	adds	r3, #1
 800b288:	e7c1      	b.n	800b20e <__lshift+0x4a>
 800b28a:	3904      	subs	r1, #4
 800b28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b290:	4298      	cmp	r0, r3
 800b292:	f841 2f04 	str.w	r2, [r1, #4]!
 800b296:	d8f9      	bhi.n	800b28c <__lshift+0xc8>
 800b298:	e7ea      	b.n	800b270 <__lshift+0xac>
 800b29a:	bf00      	nop
 800b29c:	0800c04d 	.word	0x0800c04d
 800b2a0:	0800c05e 	.word	0x0800c05e

0800b2a4 <__mcmp>:
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	690a      	ldr	r2, [r1, #16]
 800b2a8:	6900      	ldr	r0, [r0, #16]
 800b2aa:	b530      	push	{r4, r5, lr}
 800b2ac:	1a80      	subs	r0, r0, r2
 800b2ae:	d10d      	bne.n	800b2cc <__mcmp+0x28>
 800b2b0:	3314      	adds	r3, #20
 800b2b2:	3114      	adds	r1, #20
 800b2b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2c4:	4295      	cmp	r5, r2
 800b2c6:	d002      	beq.n	800b2ce <__mcmp+0x2a>
 800b2c8:	d304      	bcc.n	800b2d4 <__mcmp+0x30>
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	bd30      	pop	{r4, r5, pc}
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	d3f4      	bcc.n	800b2bc <__mcmp+0x18>
 800b2d2:	e7fb      	b.n	800b2cc <__mcmp+0x28>
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	e7f8      	b.n	800b2cc <__mcmp+0x28>
	...

0800b2dc <__mdiff>:
 800b2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	f7ff ffdb 	bl	800b2a4 <__mcmp>
 800b2ee:	1e06      	subs	r6, r0, #0
 800b2f0:	d111      	bne.n	800b316 <__mdiff+0x3a>
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	f7ff fd57 	bl	800ada8 <_Balloc>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	b928      	cbnz	r0, 800b30a <__mdiff+0x2e>
 800b2fe:	f240 2132 	movw	r1, #562	; 0x232
 800b302:	4b3a      	ldr	r3, [pc, #232]	; (800b3ec <__mdiff+0x110>)
 800b304:	483a      	ldr	r0, [pc, #232]	; (800b3f0 <__mdiff+0x114>)
 800b306:	f7fe fe0f 	bl	8009f28 <__assert_func>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b310:	4610      	mov	r0, r2
 800b312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b316:	bfa4      	itt	ge
 800b318:	4623      	movge	r3, r4
 800b31a:	462c      	movge	r4, r5
 800b31c:	4638      	mov	r0, r7
 800b31e:	6861      	ldr	r1, [r4, #4]
 800b320:	bfa6      	itte	ge
 800b322:	461d      	movge	r5, r3
 800b324:	2600      	movge	r6, #0
 800b326:	2601      	movlt	r6, #1
 800b328:	f7ff fd3e 	bl	800ada8 <_Balloc>
 800b32c:	4602      	mov	r2, r0
 800b32e:	b918      	cbnz	r0, 800b338 <__mdiff+0x5c>
 800b330:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <__mdiff+0x110>)
 800b336:	e7e5      	b.n	800b304 <__mdiff+0x28>
 800b338:	f102 0814 	add.w	r8, r2, #20
 800b33c:	46c2      	mov	sl, r8
 800b33e:	f04f 0c00 	mov.w	ip, #0
 800b342:	6927      	ldr	r7, [r4, #16]
 800b344:	60c6      	str	r6, [r0, #12]
 800b346:	692e      	ldr	r6, [r5, #16]
 800b348:	f104 0014 	add.w	r0, r4, #20
 800b34c:	f105 0914 	add.w	r9, r5, #20
 800b350:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b354:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b358:	3410      	adds	r4, #16
 800b35a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b35e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b362:	fa1f f18b 	uxth.w	r1, fp
 800b366:	448c      	add	ip, r1
 800b368:	b299      	uxth	r1, r3
 800b36a:	0c1b      	lsrs	r3, r3, #16
 800b36c:	ebac 0101 	sub.w	r1, ip, r1
 800b370:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b374:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b378:	b289      	uxth	r1, r1
 800b37a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b37e:	454e      	cmp	r6, r9
 800b380:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b384:	f84a 3b04 	str.w	r3, [sl], #4
 800b388:	d8e7      	bhi.n	800b35a <__mdiff+0x7e>
 800b38a:	1b73      	subs	r3, r6, r5
 800b38c:	3b15      	subs	r3, #21
 800b38e:	f023 0303 	bic.w	r3, r3, #3
 800b392:	3515      	adds	r5, #21
 800b394:	3304      	adds	r3, #4
 800b396:	42ae      	cmp	r6, r5
 800b398:	bf38      	it	cc
 800b39a:	2304      	movcc	r3, #4
 800b39c:	4418      	add	r0, r3
 800b39e:	4443      	add	r3, r8
 800b3a0:	461e      	mov	r6, r3
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	4575      	cmp	r5, lr
 800b3a6:	d30e      	bcc.n	800b3c6 <__mdiff+0xea>
 800b3a8:	f10e 0103 	add.w	r1, lr, #3
 800b3ac:	1a09      	subs	r1, r1, r0
 800b3ae:	f021 0103 	bic.w	r1, r1, #3
 800b3b2:	3803      	subs	r0, #3
 800b3b4:	4586      	cmp	lr, r0
 800b3b6:	bf38      	it	cc
 800b3b8:	2100      	movcc	r1, #0
 800b3ba:	4419      	add	r1, r3
 800b3bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b3c0:	b18b      	cbz	r3, 800b3e6 <__mdiff+0x10a>
 800b3c2:	6117      	str	r7, [r2, #16]
 800b3c4:	e7a4      	b.n	800b310 <__mdiff+0x34>
 800b3c6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b3ca:	fa1f f188 	uxth.w	r1, r8
 800b3ce:	4461      	add	r1, ip
 800b3d0:	140c      	asrs	r4, r1, #16
 800b3d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3d6:	b289      	uxth	r1, r1
 800b3d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b3dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b3e0:	f846 1b04 	str.w	r1, [r6], #4
 800b3e4:	e7de      	b.n	800b3a4 <__mdiff+0xc8>
 800b3e6:	3f01      	subs	r7, #1
 800b3e8:	e7e8      	b.n	800b3bc <__mdiff+0xe0>
 800b3ea:	bf00      	nop
 800b3ec:	0800c04d 	.word	0x0800c04d
 800b3f0:	0800c05e 	.word	0x0800c05e

0800b3f4 <__d2b>:
 800b3f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b3fe:	4690      	mov	r8, r2
 800b400:	461d      	mov	r5, r3
 800b402:	f7ff fcd1 	bl	800ada8 <_Balloc>
 800b406:	4604      	mov	r4, r0
 800b408:	b930      	cbnz	r0, 800b418 <__d2b+0x24>
 800b40a:	4602      	mov	r2, r0
 800b40c:	f240 310a 	movw	r1, #778	; 0x30a
 800b410:	4b24      	ldr	r3, [pc, #144]	; (800b4a4 <__d2b+0xb0>)
 800b412:	4825      	ldr	r0, [pc, #148]	; (800b4a8 <__d2b+0xb4>)
 800b414:	f7fe fd88 	bl	8009f28 <__assert_func>
 800b418:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b41c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b420:	bb2d      	cbnz	r5, 800b46e <__d2b+0x7a>
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	f1b8 0300 	subs.w	r3, r8, #0
 800b428:	d026      	beq.n	800b478 <__d2b+0x84>
 800b42a:	4668      	mov	r0, sp
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	f7ff fd83 	bl	800af38 <__lo0bits>
 800b432:	9900      	ldr	r1, [sp, #0]
 800b434:	b1f0      	cbz	r0, 800b474 <__d2b+0x80>
 800b436:	9a01      	ldr	r2, [sp, #4]
 800b438:	f1c0 0320 	rsb	r3, r0, #32
 800b43c:	fa02 f303 	lsl.w	r3, r2, r3
 800b440:	430b      	orrs	r3, r1
 800b442:	40c2      	lsrs	r2, r0
 800b444:	6163      	str	r3, [r4, #20]
 800b446:	9201      	str	r2, [sp, #4]
 800b448:	9b01      	ldr	r3, [sp, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bf14      	ite	ne
 800b44e:	2102      	movne	r1, #2
 800b450:	2101      	moveq	r1, #1
 800b452:	61a3      	str	r3, [r4, #24]
 800b454:	6121      	str	r1, [r4, #16]
 800b456:	b1c5      	cbz	r5, 800b48a <__d2b+0x96>
 800b458:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b45c:	4405      	add	r5, r0
 800b45e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b462:	603d      	str	r5, [r7, #0]
 800b464:	6030      	str	r0, [r6, #0]
 800b466:	4620      	mov	r0, r4
 800b468:	b002      	add	sp, #8
 800b46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b472:	e7d6      	b.n	800b422 <__d2b+0x2e>
 800b474:	6161      	str	r1, [r4, #20]
 800b476:	e7e7      	b.n	800b448 <__d2b+0x54>
 800b478:	a801      	add	r0, sp, #4
 800b47a:	f7ff fd5d 	bl	800af38 <__lo0bits>
 800b47e:	2101      	movs	r1, #1
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	6121      	str	r1, [r4, #16]
 800b484:	6163      	str	r3, [r4, #20]
 800b486:	3020      	adds	r0, #32
 800b488:	e7e5      	b.n	800b456 <__d2b+0x62>
 800b48a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b48e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b492:	6038      	str	r0, [r7, #0]
 800b494:	6918      	ldr	r0, [r3, #16]
 800b496:	f7ff fd2f 	bl	800aef8 <__hi0bits>
 800b49a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b49e:	6031      	str	r1, [r6, #0]
 800b4a0:	e7e1      	b.n	800b466 <__d2b+0x72>
 800b4a2:	bf00      	nop
 800b4a4:	0800c04d 	.word	0x0800c04d
 800b4a8:	0800c05e 	.word	0x0800c05e

0800b4ac <_calloc_r>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	fba1 5402 	umull	r5, r4, r1, r2
 800b4b2:	b934      	cbnz	r4, 800b4c2 <_calloc_r+0x16>
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	f7fd fd7b 	bl	8008fb0 <_malloc_r>
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	b928      	cbnz	r0, 800b4ca <_calloc_r+0x1e>
 800b4be:	4630      	mov	r0, r6
 800b4c0:	bd70      	pop	{r4, r5, r6, pc}
 800b4c2:	220c      	movs	r2, #12
 800b4c4:	2600      	movs	r6, #0
 800b4c6:	6002      	str	r2, [r0, #0]
 800b4c8:	e7f9      	b.n	800b4be <_calloc_r+0x12>
 800b4ca:	462a      	mov	r2, r5
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	f7fd fcff 	bl	8008ed0 <memset>
 800b4d2:	e7f4      	b.n	800b4be <_calloc_r+0x12>

0800b4d4 <_read_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4608      	mov	r0, r1
 800b4da:	4611      	mov	r1, r2
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4d05      	ldr	r5, [pc, #20]	; (800b4f4 <_read_r+0x20>)
 800b4e0:	602a      	str	r2, [r5, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f7f6 fea9 	bl	800223a <_read>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_read_r+0x1e>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_read_r+0x1e>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	20001f38 	.word	0x20001f38

0800b4f8 <abort>:
 800b4f8:	2006      	movs	r0, #6
 800b4fa:	b508      	push	{r3, lr}
 800b4fc:	f000 f860 	bl	800b5c0 <raise>
 800b500:	2001      	movs	r0, #1
 800b502:	f7f6 fe90 	bl	8002226 <_exit>
	...

0800b508 <_fstat_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	2300      	movs	r3, #0
 800b50c:	4d06      	ldr	r5, [pc, #24]	; (800b528 <_fstat_r+0x20>)
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	f7f6 feb8 	bl	800228a <_fstat>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d102      	bne.n	800b524 <_fstat_r+0x1c>
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	b103      	cbz	r3, 800b524 <_fstat_r+0x1c>
 800b522:	6023      	str	r3, [r4, #0]
 800b524:	bd38      	pop	{r3, r4, r5, pc}
 800b526:	bf00      	nop
 800b528:	20001f38 	.word	0x20001f38

0800b52c <_isatty_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	2300      	movs	r3, #0
 800b530:	4d05      	ldr	r5, [pc, #20]	; (800b548 <_isatty_r+0x1c>)
 800b532:	4604      	mov	r4, r0
 800b534:	4608      	mov	r0, r1
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	f7f6 feb6 	bl	80022a8 <_isatty>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_isatty_r+0x1a>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_isatty_r+0x1a>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	20001f38 	.word	0x20001f38

0800b54c <__ascii_mbtowc>:
 800b54c:	b082      	sub	sp, #8
 800b54e:	b901      	cbnz	r1, 800b552 <__ascii_mbtowc+0x6>
 800b550:	a901      	add	r1, sp, #4
 800b552:	b142      	cbz	r2, 800b566 <__ascii_mbtowc+0x1a>
 800b554:	b14b      	cbz	r3, 800b56a <__ascii_mbtowc+0x1e>
 800b556:	7813      	ldrb	r3, [r2, #0]
 800b558:	600b      	str	r3, [r1, #0]
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	1e10      	subs	r0, r2, #0
 800b55e:	bf18      	it	ne
 800b560:	2001      	movne	r0, #1
 800b562:	b002      	add	sp, #8
 800b564:	4770      	bx	lr
 800b566:	4610      	mov	r0, r2
 800b568:	e7fb      	b.n	800b562 <__ascii_mbtowc+0x16>
 800b56a:	f06f 0001 	mvn.w	r0, #1
 800b56e:	e7f8      	b.n	800b562 <__ascii_mbtowc+0x16>

0800b570 <_raise_r>:
 800b570:	291f      	cmp	r1, #31
 800b572:	b538      	push	{r3, r4, r5, lr}
 800b574:	4604      	mov	r4, r0
 800b576:	460d      	mov	r5, r1
 800b578:	d904      	bls.n	800b584 <_raise_r+0x14>
 800b57a:	2316      	movs	r3, #22
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	f04f 30ff 	mov.w	r0, #4294967295
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b586:	b112      	cbz	r2, 800b58e <_raise_r+0x1e>
 800b588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b58c:	b94b      	cbnz	r3, 800b5a2 <_raise_r+0x32>
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 f830 	bl	800b5f4 <_getpid_r>
 800b594:	462a      	mov	r2, r5
 800b596:	4601      	mov	r1, r0
 800b598:	4620      	mov	r0, r4
 800b59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b59e:	f000 b817 	b.w	800b5d0 <_kill_r>
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d00a      	beq.n	800b5bc <_raise_r+0x4c>
 800b5a6:	1c59      	adds	r1, r3, #1
 800b5a8:	d103      	bne.n	800b5b2 <_raise_r+0x42>
 800b5aa:	2316      	movs	r3, #22
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e7e7      	b.n	800b582 <_raise_r+0x12>
 800b5b2:	2400      	movs	r4, #0
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5ba:	4798      	blx	r3
 800b5bc:	2000      	movs	r0, #0
 800b5be:	e7e0      	b.n	800b582 <_raise_r+0x12>

0800b5c0 <raise>:
 800b5c0:	4b02      	ldr	r3, [pc, #8]	; (800b5cc <raise+0xc>)
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	6818      	ldr	r0, [r3, #0]
 800b5c6:	f7ff bfd3 	b.w	800b570 <_raise_r>
 800b5ca:	bf00      	nop
 800b5cc:	200000a0 	.word	0x200000a0

0800b5d0 <_kill_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4d06      	ldr	r5, [pc, #24]	; (800b5f0 <_kill_r+0x20>)
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	f7f6 fe12 	bl	8002206 <_kill>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d102      	bne.n	800b5ec <_kill_r+0x1c>
 800b5e6:	682b      	ldr	r3, [r5, #0]
 800b5e8:	b103      	cbz	r3, 800b5ec <_kill_r+0x1c>
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	bd38      	pop	{r3, r4, r5, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20001f38 	.word	0x20001f38

0800b5f4 <_getpid_r>:
 800b5f4:	f7f6 be00 	b.w	80021f8 <_getpid>

0800b5f8 <__ascii_wctomb>:
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	4608      	mov	r0, r1
 800b5fc:	b141      	cbz	r1, 800b610 <__ascii_wctomb+0x18>
 800b5fe:	2aff      	cmp	r2, #255	; 0xff
 800b600:	d904      	bls.n	800b60c <__ascii_wctomb+0x14>
 800b602:	228a      	movs	r2, #138	; 0x8a
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	4770      	bx	lr
 800b60c:	2001      	movs	r0, #1
 800b60e:	700a      	strb	r2, [r1, #0]
 800b610:	4770      	bx	lr
 800b612:	0000      	movs	r0, r0
 800b614:	0000      	movs	r0, r0
	...

0800b618 <atan>:
 800b618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4bb6      	ldr	r3, [pc, #728]	; (800b8f8 <atan+0x2e0>)
 800b61e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b622:	429e      	cmp	r6, r3
 800b624:	4604      	mov	r4, r0
 800b626:	460d      	mov	r5, r1
 800b628:	468b      	mov	fp, r1
 800b62a:	dd17      	ble.n	800b65c <atan+0x44>
 800b62c:	4bb3      	ldr	r3, [pc, #716]	; (800b8fc <atan+0x2e4>)
 800b62e:	429e      	cmp	r6, r3
 800b630:	dc01      	bgt.n	800b636 <atan+0x1e>
 800b632:	d109      	bne.n	800b648 <atan+0x30>
 800b634:	b140      	cbz	r0, 800b648 <atan+0x30>
 800b636:	4622      	mov	r2, r4
 800b638:	462b      	mov	r3, r5
 800b63a:	4620      	mov	r0, r4
 800b63c:	4629      	mov	r1, r5
 800b63e:	f7f4 fe05 	bl	800024c <__adddf3>
 800b642:	4604      	mov	r4, r0
 800b644:	460d      	mov	r5, r1
 800b646:	e005      	b.n	800b654 <atan+0x3c>
 800b648:	f1bb 0f00 	cmp.w	fp, #0
 800b64c:	4cac      	ldr	r4, [pc, #688]	; (800b900 <atan+0x2e8>)
 800b64e:	f300 8121 	bgt.w	800b894 <atan+0x27c>
 800b652:	4dac      	ldr	r5, [pc, #688]	; (800b904 <atan+0x2ec>)
 800b654:	4620      	mov	r0, r4
 800b656:	4629      	mov	r1, r5
 800b658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65c:	4baa      	ldr	r3, [pc, #680]	; (800b908 <atan+0x2f0>)
 800b65e:	429e      	cmp	r6, r3
 800b660:	dc11      	bgt.n	800b686 <atan+0x6e>
 800b662:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b666:	429e      	cmp	r6, r3
 800b668:	dc0a      	bgt.n	800b680 <atan+0x68>
 800b66a:	a38b      	add	r3, pc, #556	; (adr r3, 800b898 <atan+0x280>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 fdec 	bl	800024c <__adddf3>
 800b674:	2200      	movs	r2, #0
 800b676:	4ba5      	ldr	r3, [pc, #660]	; (800b90c <atan+0x2f4>)
 800b678:	f7f5 fa2e 	bl	8000ad8 <__aeabi_dcmpgt>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1e9      	bne.n	800b654 <atan+0x3c>
 800b680:	f04f 3aff 	mov.w	sl, #4294967295
 800b684:	e027      	b.n	800b6d6 <atan+0xbe>
 800b686:	f000 f951 	bl	800b92c <fabs>
 800b68a:	4ba1      	ldr	r3, [pc, #644]	; (800b910 <atan+0x2f8>)
 800b68c:	4604      	mov	r4, r0
 800b68e:	429e      	cmp	r6, r3
 800b690:	460d      	mov	r5, r1
 800b692:	f300 80b8 	bgt.w	800b806 <atan+0x1ee>
 800b696:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b69a:	429e      	cmp	r6, r3
 800b69c:	f300 809c 	bgt.w	800b7d8 <atan+0x1c0>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	f7f4 fdd2 	bl	800024c <__adddf3>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4b98      	ldr	r3, [pc, #608]	; (800b90c <atan+0x2f4>)
 800b6ac:	f7f4 fdcc 	bl	8000248 <__aeabi_dsub>
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	f7f4 fdc5 	bl	800024c <__adddf3>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7f5 f89f 	bl	800080c <__aeabi_ddiv>
 800b6ce:	f04f 0a00 	mov.w	sl, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	4622      	mov	r2, r4
 800b6d8:	462b      	mov	r3, r5
 800b6da:	4620      	mov	r0, r4
 800b6dc:	4629      	mov	r1, r5
 800b6de:	f7f4 ff6b 	bl	80005b8 <__aeabi_dmul>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4680      	mov	r8, r0
 800b6e8:	4689      	mov	r9, r1
 800b6ea:	f7f4 ff65 	bl	80005b8 <__aeabi_dmul>
 800b6ee:	a36c      	add	r3, pc, #432	; (adr r3, 800b8a0 <atan+0x288>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	460f      	mov	r7, r1
 800b6f8:	f7f4 ff5e 	bl	80005b8 <__aeabi_dmul>
 800b6fc:	a36a      	add	r3, pc, #424	; (adr r3, 800b8a8 <atan+0x290>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f7f4 fda3 	bl	800024c <__adddf3>
 800b706:	4632      	mov	r2, r6
 800b708:	463b      	mov	r3, r7
 800b70a:	f7f4 ff55 	bl	80005b8 <__aeabi_dmul>
 800b70e:	a368      	add	r3, pc, #416	; (adr r3, 800b8b0 <atan+0x298>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f7f4 fd9a 	bl	800024c <__adddf3>
 800b718:	4632      	mov	r2, r6
 800b71a:	463b      	mov	r3, r7
 800b71c:	f7f4 ff4c 	bl	80005b8 <__aeabi_dmul>
 800b720:	a365      	add	r3, pc, #404	; (adr r3, 800b8b8 <atan+0x2a0>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fd91 	bl	800024c <__adddf3>
 800b72a:	4632      	mov	r2, r6
 800b72c:	463b      	mov	r3, r7
 800b72e:	f7f4 ff43 	bl	80005b8 <__aeabi_dmul>
 800b732:	a363      	add	r3, pc, #396	; (adr r3, 800b8c0 <atan+0x2a8>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fd88 	bl	800024c <__adddf3>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	f7f4 ff3a 	bl	80005b8 <__aeabi_dmul>
 800b744:	a360      	add	r3, pc, #384	; (adr r3, 800b8c8 <atan+0x2b0>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd7f 	bl	800024c <__adddf3>
 800b74e:	4642      	mov	r2, r8
 800b750:	464b      	mov	r3, r9
 800b752:	f7f4 ff31 	bl	80005b8 <__aeabi_dmul>
 800b756:	a35e      	add	r3, pc, #376	; (adr r3, 800b8d0 <atan+0x2b8>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	4680      	mov	r8, r0
 800b75e:	4689      	mov	r9, r1
 800b760:	4630      	mov	r0, r6
 800b762:	4639      	mov	r1, r7
 800b764:	f7f4 ff28 	bl	80005b8 <__aeabi_dmul>
 800b768:	a35b      	add	r3, pc, #364	; (adr r3, 800b8d8 <atan+0x2c0>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7f4 fd6b 	bl	8000248 <__aeabi_dsub>
 800b772:	4632      	mov	r2, r6
 800b774:	463b      	mov	r3, r7
 800b776:	f7f4 ff1f 	bl	80005b8 <__aeabi_dmul>
 800b77a:	a359      	add	r3, pc, #356	; (adr r3, 800b8e0 <atan+0x2c8>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7f4 fd62 	bl	8000248 <__aeabi_dsub>
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	f7f4 ff16 	bl	80005b8 <__aeabi_dmul>
 800b78c:	a356      	add	r3, pc, #344	; (adr r3, 800b8e8 <atan+0x2d0>)
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	f7f4 fd59 	bl	8000248 <__aeabi_dsub>
 800b796:	4632      	mov	r2, r6
 800b798:	463b      	mov	r3, r7
 800b79a:	f7f4 ff0d 	bl	80005b8 <__aeabi_dmul>
 800b79e:	a354      	add	r3, pc, #336	; (adr r3, 800b8f0 <atan+0x2d8>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f7f4 fd50 	bl	8000248 <__aeabi_dsub>
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	f7f4 ff04 	bl	80005b8 <__aeabi_dmul>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	f7f4 fd48 	bl	800024c <__adddf3>
 800b7bc:	4622      	mov	r2, r4
 800b7be:	462b      	mov	r3, r5
 800b7c0:	f7f4 fefa 	bl	80005b8 <__aeabi_dmul>
 800b7c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	d144      	bne.n	800b858 <atan+0x240>
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	f7f4 fd39 	bl	8000248 <__aeabi_dsub>
 800b7d6:	e734      	b.n	800b642 <atan+0x2a>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	4b4c      	ldr	r3, [pc, #304]	; (800b90c <atan+0x2f4>)
 800b7dc:	f7f4 fd34 	bl	8000248 <__aeabi_dsub>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4b48      	ldr	r3, [pc, #288]	; (800b90c <atan+0x2f4>)
 800b7ec:	f7f4 fd2e 	bl	800024c <__adddf3>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f5 f808 	bl	800080c <__aeabi_ddiv>
 800b7fc:	f04f 0a01 	mov.w	sl, #1
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	e767      	b.n	800b6d6 <atan+0xbe>
 800b806:	4b43      	ldr	r3, [pc, #268]	; (800b914 <atan+0x2fc>)
 800b808:	429e      	cmp	r6, r3
 800b80a:	da1a      	bge.n	800b842 <atan+0x22a>
 800b80c:	2200      	movs	r2, #0
 800b80e:	4b42      	ldr	r3, [pc, #264]	; (800b918 <atan+0x300>)
 800b810:	f7f4 fd1a 	bl	8000248 <__aeabi_dsub>
 800b814:	2200      	movs	r2, #0
 800b816:	4606      	mov	r6, r0
 800b818:	460f      	mov	r7, r1
 800b81a:	4620      	mov	r0, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	4b3e      	ldr	r3, [pc, #248]	; (800b918 <atan+0x300>)
 800b820:	f7f4 feca 	bl	80005b8 <__aeabi_dmul>
 800b824:	2200      	movs	r2, #0
 800b826:	4b39      	ldr	r3, [pc, #228]	; (800b90c <atan+0x2f4>)
 800b828:	f7f4 fd10 	bl	800024c <__adddf3>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4630      	mov	r0, r6
 800b832:	4639      	mov	r1, r7
 800b834:	f7f4 ffea 	bl	800080c <__aeabi_ddiv>
 800b838:	f04f 0a02 	mov.w	sl, #2
 800b83c:	4604      	mov	r4, r0
 800b83e:	460d      	mov	r5, r1
 800b840:	e749      	b.n	800b6d6 <atan+0xbe>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	2000      	movs	r0, #0
 800b848:	4934      	ldr	r1, [pc, #208]	; (800b91c <atan+0x304>)
 800b84a:	f7f4 ffdf 	bl	800080c <__aeabi_ddiv>
 800b84e:	f04f 0a03 	mov.w	sl, #3
 800b852:	4604      	mov	r4, r0
 800b854:	460d      	mov	r5, r1
 800b856:	e73e      	b.n	800b6d6 <atan+0xbe>
 800b858:	4b31      	ldr	r3, [pc, #196]	; (800b920 <atan+0x308>)
 800b85a:	4e32      	ldr	r6, [pc, #200]	; (800b924 <atan+0x30c>)
 800b85c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b860:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b864:	e9da 2300 	ldrd	r2, r3, [sl]
 800b868:	f7f4 fcee 	bl	8000248 <__aeabi_dsub>
 800b86c:	4622      	mov	r2, r4
 800b86e:	462b      	mov	r3, r5
 800b870:	f7f4 fcea 	bl	8000248 <__aeabi_dsub>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b87c:	f7f4 fce4 	bl	8000248 <__aeabi_dsub>
 800b880:	f1bb 0f00 	cmp.w	fp, #0
 800b884:	4604      	mov	r4, r0
 800b886:	460d      	mov	r5, r1
 800b888:	f6bf aee4 	bge.w	800b654 <atan+0x3c>
 800b88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b890:	461d      	mov	r5, r3
 800b892:	e6df      	b.n	800b654 <atan+0x3c>
 800b894:	4d24      	ldr	r5, [pc, #144]	; (800b928 <atan+0x310>)
 800b896:	e6dd      	b.n	800b654 <atan+0x3c>
 800b898:	8800759c 	.word	0x8800759c
 800b89c:	7e37e43c 	.word	0x7e37e43c
 800b8a0:	e322da11 	.word	0xe322da11
 800b8a4:	3f90ad3a 	.word	0x3f90ad3a
 800b8a8:	24760deb 	.word	0x24760deb
 800b8ac:	3fa97b4b 	.word	0x3fa97b4b
 800b8b0:	a0d03d51 	.word	0xa0d03d51
 800b8b4:	3fb10d66 	.word	0x3fb10d66
 800b8b8:	c54c206e 	.word	0xc54c206e
 800b8bc:	3fb745cd 	.word	0x3fb745cd
 800b8c0:	920083ff 	.word	0x920083ff
 800b8c4:	3fc24924 	.word	0x3fc24924
 800b8c8:	5555550d 	.word	0x5555550d
 800b8cc:	3fd55555 	.word	0x3fd55555
 800b8d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8d4:	bfa2b444 	.word	0xbfa2b444
 800b8d8:	52defd9a 	.word	0x52defd9a
 800b8dc:	3fadde2d 	.word	0x3fadde2d
 800b8e0:	af749a6d 	.word	0xaf749a6d
 800b8e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8e8:	fe231671 	.word	0xfe231671
 800b8ec:	3fbc71c6 	.word	0x3fbc71c6
 800b8f0:	9998ebc4 	.word	0x9998ebc4
 800b8f4:	3fc99999 	.word	0x3fc99999
 800b8f8:	440fffff 	.word	0x440fffff
 800b8fc:	7ff00000 	.word	0x7ff00000
 800b900:	54442d18 	.word	0x54442d18
 800b904:	bff921fb 	.word	0xbff921fb
 800b908:	3fdbffff 	.word	0x3fdbffff
 800b90c:	3ff00000 	.word	0x3ff00000
 800b910:	3ff2ffff 	.word	0x3ff2ffff
 800b914:	40038000 	.word	0x40038000
 800b918:	3ff80000 	.word	0x3ff80000
 800b91c:	bff00000 	.word	0xbff00000
 800b920:	0800c1e8 	.word	0x0800c1e8
 800b924:	0800c1c8 	.word	0x0800c1c8
 800b928:	3ff921fb 	.word	0x3ff921fb

0800b92c <fabs>:
 800b92c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b930:	4770      	bx	lr

0800b932 <atan2>:
 800b932:	f000 b825 	b.w	800b980 <__ieee754_atan2>

0800b936 <sqrt>:
 800b936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b938:	4606      	mov	r6, r0
 800b93a:	460f      	mov	r7, r1
 800b93c:	f000 f8f2 	bl	800bb24 <__ieee754_sqrt>
 800b940:	4632      	mov	r2, r6
 800b942:	4604      	mov	r4, r0
 800b944:	460d      	mov	r5, r1
 800b946:	463b      	mov	r3, r7
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f5 f8ce 	bl	8000aec <__aeabi_dcmpun>
 800b950:	b990      	cbnz	r0, 800b978 <sqrt+0x42>
 800b952:	2200      	movs	r2, #0
 800b954:	2300      	movs	r3, #0
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f7f5 f89f 	bl	8000a9c <__aeabi_dcmplt>
 800b95e:	b158      	cbz	r0, 800b978 <sqrt+0x42>
 800b960:	f7fd f8ac 	bl	8008abc <__errno>
 800b964:	2321      	movs	r3, #33	; 0x21
 800b966:	2200      	movs	r2, #0
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	2300      	movs	r3, #0
 800b96c:	4610      	mov	r0, r2
 800b96e:	4619      	mov	r1, r3
 800b970:	f7f4 ff4c 	bl	800080c <__aeabi_ddiv>
 800b974:	4604      	mov	r4, r0
 800b976:	460d      	mov	r5, r1
 800b978:	4620      	mov	r0, r4
 800b97a:	4629      	mov	r1, r5
 800b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b980 <__ieee754_atan2>:
 800b980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	4692      	mov	sl, r2
 800b986:	4699      	mov	r9, r3
 800b988:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b98c:	461f      	mov	r7, r3
 800b98e:	f1ca 0300 	rsb	r3, sl, #0
 800b992:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bb18 <__ieee754_atan2+0x198>
 800b996:	ea43 030a 	orr.w	r3, r3, sl
 800b99a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b99e:	4573      	cmp	r3, lr
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	d808      	bhi.n	800b9b8 <__ieee754_atan2+0x38>
 800b9a6:	4246      	negs	r6, r0
 800b9a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9ac:	4306      	orrs	r6, r0
 800b9ae:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800b9b2:	4576      	cmp	r6, lr
 800b9b4:	468c      	mov	ip, r1
 800b9b6:	d908      	bls.n	800b9ca <__ieee754_atan2+0x4a>
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	464b      	mov	r3, r9
 800b9bc:	4620      	mov	r0, r4
 800b9be:	4629      	mov	r1, r5
 800b9c0:	f7f4 fc44 	bl	800024c <__adddf3>
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	e019      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800b9ca:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800b9ce:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b9d2:	ea56 060a 	orrs.w	r6, r6, sl
 800b9d6:	d103      	bne.n	800b9e0 <__ieee754_atan2+0x60>
 800b9d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	f7ff be1c 	b.w	800b618 <atan>
 800b9e0:	17be      	asrs	r6, r7, #30
 800b9e2:	f006 0602 	and.w	r6, r6, #2
 800b9e6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b9ea:	ea53 0100 	orrs.w	r1, r3, r0
 800b9ee:	d10a      	bne.n	800ba06 <__ieee754_atan2+0x86>
 800b9f0:	2e02      	cmp	r6, #2
 800b9f2:	d067      	beq.n	800bac4 <__ieee754_atan2+0x144>
 800b9f4:	2e03      	cmp	r6, #3
 800b9f6:	d102      	bne.n	800b9fe <__ieee754_atan2+0x7e>
 800b9f8:	a53b      	add	r5, pc, #236	; (adr r5, 800bae8 <__ieee754_atan2+0x168>)
 800b9fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4629      	mov	r1, r5
 800ba02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba06:	ea52 010a 	orrs.w	r1, r2, sl
 800ba0a:	d106      	bne.n	800ba1a <__ieee754_atan2+0x9a>
 800ba0c:	f1bc 0f00 	cmp.w	ip, #0
 800ba10:	da63      	bge.n	800bada <__ieee754_atan2+0x15a>
 800ba12:	a537      	add	r5, pc, #220	; (adr r5, 800baf0 <__ieee754_atan2+0x170>)
 800ba14:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba18:	e7f1      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800ba1a:	4572      	cmp	r2, lr
 800ba1c:	d10f      	bne.n	800ba3e <__ieee754_atan2+0xbe>
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	f106 36ff 	add.w	r6, r6, #4294967295
 800ba24:	d107      	bne.n	800ba36 <__ieee754_atan2+0xb6>
 800ba26:	2e02      	cmp	r6, #2
 800ba28:	d850      	bhi.n	800bacc <__ieee754_atan2+0x14c>
 800ba2a:	4b3c      	ldr	r3, [pc, #240]	; (800bb1c <__ieee754_atan2+0x19c>)
 800ba2c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba30:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ba34:	e7e3      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800ba36:	2e02      	cmp	r6, #2
 800ba38:	d84c      	bhi.n	800bad4 <__ieee754_atan2+0x154>
 800ba3a:	4b39      	ldr	r3, [pc, #228]	; (800bb20 <__ieee754_atan2+0x1a0>)
 800ba3c:	e7f6      	b.n	800ba2c <__ieee754_atan2+0xac>
 800ba3e:	4573      	cmp	r3, lr
 800ba40:	d0e4      	beq.n	800ba0c <__ieee754_atan2+0x8c>
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ba48:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba4c:	da20      	bge.n	800ba90 <__ieee754_atan2+0x110>
 800ba4e:	2f00      	cmp	r7, #0
 800ba50:	da01      	bge.n	800ba56 <__ieee754_atan2+0xd6>
 800ba52:	323c      	adds	r2, #60	; 0x3c
 800ba54:	db20      	blt.n	800ba98 <__ieee754_atan2+0x118>
 800ba56:	4652      	mov	r2, sl
 800ba58:	464b      	mov	r3, r9
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	f7f4 fed5 	bl	800080c <__aeabi_ddiv>
 800ba62:	f7ff ff63 	bl	800b92c <fabs>
 800ba66:	f7ff fdd7 	bl	800b618 <atan>
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	2e01      	cmp	r6, #1
 800ba70:	d015      	beq.n	800ba9e <__ieee754_atan2+0x11e>
 800ba72:	2e02      	cmp	r6, #2
 800ba74:	d017      	beq.n	800baa6 <__ieee754_atan2+0x126>
 800ba76:	2e00      	cmp	r6, #0
 800ba78:	d0c1      	beq.n	800b9fe <__ieee754_atan2+0x7e>
 800ba7a:	a31f      	add	r3, pc, #124	; (adr r3, 800baf8 <__ieee754_atan2+0x178>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	4620      	mov	r0, r4
 800ba82:	4629      	mov	r1, r5
 800ba84:	f7f4 fbe0 	bl	8000248 <__aeabi_dsub>
 800ba88:	a31d      	add	r3, pc, #116	; (adr r3, 800bb00 <__ieee754_atan2+0x180>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	e016      	b.n	800babe <__ieee754_atan2+0x13e>
 800ba90:	a51d      	add	r5, pc, #116	; (adr r5, 800bb08 <__ieee754_atan2+0x188>)
 800ba92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba96:	e7ea      	b.n	800ba6e <__ieee754_atan2+0xee>
 800ba98:	2400      	movs	r4, #0
 800ba9a:	2500      	movs	r5, #0
 800ba9c:	e7e7      	b.n	800ba6e <__ieee754_atan2+0xee>
 800ba9e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800baa2:	461d      	mov	r5, r3
 800baa4:	e7ab      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800baa6:	a314      	add	r3, pc, #80	; (adr r3, 800baf8 <__ieee754_atan2+0x178>)
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	4620      	mov	r0, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	f7f4 fbca 	bl	8000248 <__aeabi_dsub>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	a111      	add	r1, pc, #68	; (adr r1, 800bb00 <__ieee754_atan2+0x180>)
 800baba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800babe:	f7f4 fbc3 	bl	8000248 <__aeabi_dsub>
 800bac2:	e77f      	b.n	800b9c4 <__ieee754_atan2+0x44>
 800bac4:	a50e      	add	r5, pc, #56	; (adr r5, 800bb00 <__ieee754_atan2+0x180>)
 800bac6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800baca:	e798      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800bacc:	a510      	add	r5, pc, #64	; (adr r5, 800bb10 <__ieee754_atan2+0x190>)
 800bace:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bad2:	e794      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800bad4:	2400      	movs	r4, #0
 800bad6:	2500      	movs	r5, #0
 800bad8:	e791      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800bada:	a50b      	add	r5, pc, #44	; (adr r5, 800bb08 <__ieee754_atan2+0x188>)
 800badc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bae0:	e78d      	b.n	800b9fe <__ieee754_atan2+0x7e>
 800bae2:	bf00      	nop
 800bae4:	f3af 8000 	nop.w
 800bae8:	54442d18 	.word	0x54442d18
 800baec:	c00921fb 	.word	0xc00921fb
 800baf0:	54442d18 	.word	0x54442d18
 800baf4:	bff921fb 	.word	0xbff921fb
 800baf8:	33145c07 	.word	0x33145c07
 800bafc:	3ca1a626 	.word	0x3ca1a626
 800bb00:	54442d18 	.word	0x54442d18
 800bb04:	400921fb 	.word	0x400921fb
 800bb08:	54442d18 	.word	0x54442d18
 800bb0c:	3ff921fb 	.word	0x3ff921fb
 800bb10:	54442d18 	.word	0x54442d18
 800bb14:	3fe921fb 	.word	0x3fe921fb
 800bb18:	7ff00000 	.word	0x7ff00000
 800bb1c:	0800c208 	.word	0x0800c208
 800bb20:	0800c220 	.word	0x0800c220

0800bb24 <__ieee754_sqrt>:
 800bb24:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bc80 <__ieee754_sqrt+0x15c>
 800bb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2c:	ea3c 0c01 	bics.w	ip, ip, r1
 800bb30:	4606      	mov	r6, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	460c      	mov	r4, r1
 800bb36:	460a      	mov	r2, r1
 800bb38:	4607      	mov	r7, r0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	d10f      	bne.n	800bb5e <__ieee754_sqrt+0x3a>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	f7f4 fd39 	bl	80005b8 <__aeabi_dmul>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f7f4 fb7d 	bl	800024c <__adddf3>
 800bb52:	4606      	mov	r6, r0
 800bb54:	460d      	mov	r5, r1
 800bb56:	4630      	mov	r0, r6
 800bb58:	4629      	mov	r1, r5
 800bb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	dc0e      	bgt.n	800bb80 <__ieee754_sqrt+0x5c>
 800bb62:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bb66:	ea5c 0707 	orrs.w	r7, ip, r7
 800bb6a:	d0f4      	beq.n	800bb56 <__ieee754_sqrt+0x32>
 800bb6c:	b141      	cbz	r1, 800bb80 <__ieee754_sqrt+0x5c>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	f7f4 fb69 	bl	8000248 <__aeabi_dsub>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	f7f4 fe47 	bl	800080c <__aeabi_ddiv>
 800bb7e:	e7e8      	b.n	800bb52 <__ieee754_sqrt+0x2e>
 800bb80:	1521      	asrs	r1, r4, #20
 800bb82:	d075      	beq.n	800bc70 <__ieee754_sqrt+0x14c>
 800bb84:	07cc      	lsls	r4, r1, #31
 800bb86:	f04f 0400 	mov.w	r4, #0
 800bb8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bb8e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800bb92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bb96:	bf5e      	ittt	pl
 800bb98:	0fd9      	lsrpl	r1, r3, #31
 800bb9a:	005b      	lslpl	r3, r3, #1
 800bb9c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800bba0:	0fd9      	lsrs	r1, r3, #31
 800bba2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bba6:	2516      	movs	r5, #22
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbae:	107f      	asrs	r7, r7, #1
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	1846      	adds	r6, r0, r1
 800bbb4:	4296      	cmp	r6, r2
 800bbb6:	bfde      	ittt	le
 800bbb8:	1b92      	suble	r2, r2, r6
 800bbba:	1870      	addle	r0, r6, r1
 800bbbc:	1864      	addle	r4, r4, r1
 800bbbe:	0052      	lsls	r2, r2, #1
 800bbc0:	3d01      	subs	r5, #1
 800bbc2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bbc6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bbca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbce:	d1f0      	bne.n	800bbb2 <__ieee754_sqrt+0x8e>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f04f 0e20 	mov.w	lr, #32
 800bbd6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bbda:	4282      	cmp	r2, r0
 800bbdc:	eb06 0c05 	add.w	ip, r6, r5
 800bbe0:	dc02      	bgt.n	800bbe8 <__ieee754_sqrt+0xc4>
 800bbe2:	d113      	bne.n	800bc0c <__ieee754_sqrt+0xe8>
 800bbe4:	459c      	cmp	ip, r3
 800bbe6:	d811      	bhi.n	800bc0c <__ieee754_sqrt+0xe8>
 800bbe8:	f1bc 0f00 	cmp.w	ip, #0
 800bbec:	eb0c 0506 	add.w	r5, ip, r6
 800bbf0:	da43      	bge.n	800bc7a <__ieee754_sqrt+0x156>
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	db41      	blt.n	800bc7a <__ieee754_sqrt+0x156>
 800bbf6:	f100 0801 	add.w	r8, r0, #1
 800bbfa:	1a12      	subs	r2, r2, r0
 800bbfc:	4640      	mov	r0, r8
 800bbfe:	459c      	cmp	ip, r3
 800bc00:	bf88      	it	hi
 800bc02:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bc06:	eba3 030c 	sub.w	r3, r3, ip
 800bc0a:	4431      	add	r1, r6
 800bc0c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bc10:	f1be 0e01 	subs.w	lr, lr, #1
 800bc14:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bc18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc20:	d1db      	bne.n	800bbda <__ieee754_sqrt+0xb6>
 800bc22:	4313      	orrs	r3, r2
 800bc24:	d006      	beq.n	800bc34 <__ieee754_sqrt+0x110>
 800bc26:	1c48      	adds	r0, r1, #1
 800bc28:	bf0b      	itete	eq
 800bc2a:	4671      	moveq	r1, lr
 800bc2c:	3101      	addne	r1, #1
 800bc2e:	3401      	addeq	r4, #1
 800bc30:	f021 0101 	bicne.w	r1, r1, #1
 800bc34:	1063      	asrs	r3, r4, #1
 800bc36:	0849      	lsrs	r1, r1, #1
 800bc38:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc3c:	07e2      	lsls	r2, r4, #31
 800bc3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc42:	bf48      	it	mi
 800bc44:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bc48:	460e      	mov	r6, r1
 800bc4a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc4e:	e782      	b.n	800bb56 <__ieee754_sqrt+0x32>
 800bc50:	0ada      	lsrs	r2, r3, #11
 800bc52:	3815      	subs	r0, #21
 800bc54:	055b      	lsls	r3, r3, #21
 800bc56:	2a00      	cmp	r2, #0
 800bc58:	d0fa      	beq.n	800bc50 <__ieee754_sqrt+0x12c>
 800bc5a:	02d5      	lsls	r5, r2, #11
 800bc5c:	d50a      	bpl.n	800bc74 <__ieee754_sqrt+0x150>
 800bc5e:	f1c1 0420 	rsb	r4, r1, #32
 800bc62:	fa23 f404 	lsr.w	r4, r3, r4
 800bc66:	1e4d      	subs	r5, r1, #1
 800bc68:	408b      	lsls	r3, r1
 800bc6a:	4322      	orrs	r2, r4
 800bc6c:	1b41      	subs	r1, r0, r5
 800bc6e:	e789      	b.n	800bb84 <__ieee754_sqrt+0x60>
 800bc70:	4608      	mov	r0, r1
 800bc72:	e7f0      	b.n	800bc56 <__ieee754_sqrt+0x132>
 800bc74:	0052      	lsls	r2, r2, #1
 800bc76:	3101      	adds	r1, #1
 800bc78:	e7ef      	b.n	800bc5a <__ieee754_sqrt+0x136>
 800bc7a:	4680      	mov	r8, r0
 800bc7c:	e7bd      	b.n	800bbfa <__ieee754_sqrt+0xd6>
 800bc7e:	bf00      	nop
 800bc80:	7ff00000 	.word	0x7ff00000

0800bc84 <_init>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	bf00      	nop
 800bc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8a:	bc08      	pop	{r3}
 800bc8c:	469e      	mov	lr, r3
 800bc8e:	4770      	bx	lr

0800bc90 <_fini>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr
