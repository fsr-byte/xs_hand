
XS_HAND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001545c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001708  08015650  08015650  00025650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d58  08016d58  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08016d58  08016d58  00026d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d60  08016d60  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d60  08016d60  00026d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d64  08016d64  00026d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08016d68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a28  20000230  08016f98  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002c58  08016f98  00032c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295cd  00000000  00000000  00030259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007189  00000000  00000000  00059826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002398  00000000  00000000  000609b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002400  00000000  00000000  00062d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023976  00000000  00000000  00065148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d54f  00000000  00000000  00088abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b339a  00000000  00000000  000b600d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001693a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b214  00000000  00000000  00169468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000038aa  00000000  00000000  0017467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  00177f26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000230 	.word	0x20000230
 800020c:	00000000 	.word	0x00000000
 8000210:	08015634 	.word	0x08015634

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000234 	.word	0x20000234
 800022c:	08015634 	.word	0x08015634

08000230 <inv_fast_nomot_parameter.part.3>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	2200      	movs	r2, #0
 8000236:	b087      	sub	sp, #28
 8000238:	2300      	movs	r3, #0
 800023a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800023e:	f04f 0b03 	mov.w	fp, #3
 8000242:	f8cd b00c 	str.w	fp, [sp, #12]
 8000246:	9002      	str	r0, [sp, #8]
 8000248:	9b02      	ldr	r3, [sp, #8]
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	6858      	ldr	r0, [r3, #4]
 800024e:	fba1 2301 	umull	r2, r3, r1, r1
 8000252:	461d      	mov	r5, r3
 8000254:	4614      	mov	r4, r2
 8000256:	9b02      	ldr	r3, [sp, #8]
 8000258:	e9cd 4500 	strd	r4, r5, [sp]
 800025c:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8000260:	fb01 f300 	mul.w	r3, r1, r0
 8000264:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	e9dd ab00 	ldrd	sl, fp, [sp]
 800026e:	ebb8 040a 	subs.w	r4, r8, sl
 8000272:	eb69 050b 	sbc.w	r5, r9, fp
 8000276:	4622      	mov	r2, r4
 8000278:	462b      	mov	r3, r5
 800027a:	e9cd 2300 	strd	r2, r3, [sp]
 800027e:	fba8 2308 	umull	r2, r3, r8, r8
 8000282:	1926      	adds	r6, r4, r4
 8000284:	eb45 0705 	adc.w	r7, r5, r5
 8000288:	fb08 f509 	mul.w	r5, r8, r9
 800028c:	4690      	mov	r8, r2
 800028e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8000292:	f1d8 0400 	rsbs	r4, r8, #0
 8000296:	eb63 0543 	sbc.w	r5, r3, r3, lsl #1
 800029a:	4699      	mov	r9, r3
 800029c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80002a0:	1992      	adds	r2, r2, r6
 80002a2:	417b      	adcs	r3, r7
 80002a4:	00ae      	lsls	r6, r5, #2
 80002a6:	00a7      	lsls	r7, r4, #2
 80002a8:	ea46 7694 	orr.w	r6, r6, r4, lsr #30
 80002ac:	463c      	mov	r4, r7
 80002ae:	4635      	mov	r5, r6
 80002b0:	e9cd ab00 	strd	sl, fp, [sp]
 80002b4:	eb1a 0a02 	adds.w	sl, sl, r2
 80002b8:	eb4b 0b03 	adc.w	fp, fp, r3
 80002bc:	fb01 f60b 	mul.w	r6, r1, fp
 80002c0:	fba1 230a 	umull	r2, r3, r1, sl
 80002c4:	fb00 660a 	mla	r6, r0, sl, r6
 80002c8:	e9dd ab00 	ldrd	sl, fp, [sp]
 80002cc:	4433      	add	r3, r6
 80002ce:	9e02      	ldr	r6, [sp, #8]
 80002d0:	f106 0730 	add.w	r7, r6, #48	; 0x30
 80002d4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80002d8:	1ab6      	subs	r6, r6, r2
 80002da:	eb67 0703 	sbc.w	r7, r7, r3
 80002de:	eb18 0204 	adds.w	r2, r8, r4
 80002e2:	eb49 0305 	adc.w	r3, r9, r5
 80002e6:	4614      	mov	r4, r2
 80002e8:	461d      	mov	r5, r3
 80002ea:	eb1a 080a 	adds.w	r8, sl, sl
 80002ee:	eb4b 090b 	adc.w	r9, fp, fp
 80002f2:	fb01 fc09 	mul.w	ip, r1, r9
 80002f6:	9b02      	ldr	r3, [sp, #8]
 80002f8:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 80002fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000300:	1912      	adds	r2, r2, r4
 8000302:	416b      	adcs	r3, r5
 8000304:	4614      	mov	r4, r2
 8000306:	461d      	mov	r5, r3
 8000308:	fba1 2308 	umull	r2, r3, r1, r8
 800030c:	fb00 c808 	mla	r8, r0, r8, ip
 8000310:	ea4e 7e96 	orr.w	lr, lr, r6, lsr #30
 8000314:	4443      	add	r3, r8
 8000316:	fb01 f703 	mul.w	r7, r1, r3
 800031a:	4673      	mov	r3, lr
 800031c:	00b6      	lsls	r6, r6, #2
 800031e:	46b2      	mov	sl, r6
 8000320:	fba1 8902 	umull	r8, r9, r1, r2
 8000324:	fb00 7602 	mla	r6, r0, r2, r7
 8000328:	fb01 f303 	mul.w	r3, r1, r3
 800032c:	eb14 0408 	adds.w	r4, r4, r8
 8000330:	44b1      	add	r9, r6
 8000332:	eb45 0509 	adc.w	r5, r5, r9
 8000336:	fb00 320a 	mla	r2, r0, sl, r3
 800033a:	fba1 890a 	umull	r8, r9, r1, sl
 800033e:	eb14 0008 	adds.w	r0, r4, r8
 8000342:	4491      	add	r9, r2
 8000344:	eb45 0109 	adc.w	r1, r5, r9
 8000348:	2800      	cmp	r0, #0
 800034a:	f171 0300 	sbcs.w	r3, r1, #0
 800034e:	9b02      	ldr	r3, [sp, #8]
 8000350:	f103 0308 	add.w	r3, r3, #8
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	db2b      	blt.n	80003b0 <inv_fast_nomot_parameter.part.3+0x180>
 8000358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800035c:	4282      	cmp	r2, r0
 800035e:	418b      	sbcs	r3, r1
 8000360:	da01      	bge.n	8000366 <inv_fast_nomot_parameter.part.3+0x136>
 8000362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000366:	9b03      	ldr	r3, [sp, #12]
 8000368:	3b01      	subs	r3, #1
 800036a:	9303      	str	r3, [sp, #12]
 800036c:	f47f af6c 	bne.w	8000248 <inv_fast_nomot_parameter.part.3+0x18>
 8000370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000374:	f003 fa80 	bl	8003878 <__aeabi_l2f>
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <inv_fast_nomot_parameter.part.3+0x188>)
 800037a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800037c:	f003 fb6e 	bl	8003a5c <__aeabi_fdiv>
 8000380:	f003 fd2a 	bl	8003dd8 <__aeabi_f2lz>
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <inv_fast_nomot_parameter.part.3+0x18c>)
 8000386:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	f1c3 0220 	rsb	r2, r3, #32
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	f1b3 0420 	subs.w	r4, r3, #32
 8000398:	fa20 f003 	lsr.w	r0, r0, r3
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	bf5c      	itt	pl
 80003a2:	fa41 f404 	asrpl.w	r4, r1, r4
 80003a6:	4320      	orrpl	r0, r4
 80003a8:	4119      	asrs	r1, r3
 80003aa:	b007      	add	sp, #28
 80003ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003b0:	4240      	negs	r0, r0
 80003b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b6:	e7cf      	b.n	8000358 <inv_fast_nomot_parameter.part.3+0x128>
 80003b8:	20000250 	.word	0x20000250
 80003bc:	200028c0 	.word	0x200028c0

080003c0 <inv_init_maxmin>:
 80003c0:	07c1      	lsls	r1, r0, #31
 80003c2:	d50a      	bpl.n	80003da <inv_init_maxmin+0x1a>
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <inv_init_maxmin+0x68>)
 80003c6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ce:	6699      	str	r1, [r3, #104]	; 0x68
 80003d0:	66d9      	str	r1, [r3, #108]	; 0x6c
 80003d2:	6719      	str	r1, [r3, #112]	; 0x70
 80003d4:	675a      	str	r2, [r3, #116]	; 0x74
 80003d6:	679a      	str	r2, [r3, #120]	; 0x78
 80003d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80003da:	0782      	lsls	r2, r0, #30
 80003dc:	d510      	bpl.n	8000400 <inv_init_maxmin+0x40>
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <inv_init_maxmin+0x68>)
 80003e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 80003ec:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 80003f0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 80003f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80003f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80003fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8000400:	0743      	lsls	r3, r0, #29
 8000402:	d510      	bpl.n	8000426 <inv_init_maxmin+0x66>
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <inv_init_maxmin+0x68>)
 8000406:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
 8000412:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 8000416:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
 800041a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800041e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8000422:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8000426:	4770      	bx	lr
 8000428:	200028c0 	.word	0x200028c0

0800042c <inv_reset_packet>:
 800042c:	b538      	push	{r3, r4, r5, lr}
 800042e:	4d09      	ldr	r5, [pc, #36]	; (8000454 <inv_reset_packet+0x28>)
 8000430:	2498      	movs	r4, #152	; 0x98
 8000432:	4622      	mov	r2, r4
 8000434:	4628      	mov	r0, r5
 8000436:	2100      	movs	r1, #0
 8000438:	f011 fb3c 	bl	8011ab4 <memset>
 800043c:	f505 7098 	add.w	r0, r5, #304	; 0x130
 8000440:	4622      	mov	r2, r4
 8000442:	2100      	movs	r1, #0
 8000444:	f011 fb36 	bl	8011ab4 <memset>
 8000448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800044c:	2005      	movs	r0, #5
 800044e:	f7ff bfb7 	b.w	80003c0 <inv_init_maxmin>
 8000452:	bf00      	nop
 8000454:	200028c8 	.word	0x200028c8

08000458 <inv_start_fast_nomot>:
 8000458:	b510      	push	{r4, lr}
 800045a:	4c0d      	ldr	r4, [pc, #52]	; (8000490 <inv_start_fast_nomot+0x38>)
 800045c:	2100      	movs	r1, #0
 800045e:	f44f 7218 	mov.w	r2, #608	; 0x260
 8000462:	4620      	mov	r0, r4
 8000464:	f011 fb26 	bl	8011ab4 <memset>
 8000468:	2007      	movs	r0, #7
 800046a:	f7ff ffa9 	bl	80003c0 <inv_init_maxmin>
 800046e:	2301      	movs	r3, #1
 8000470:	4618      	mov	r0, r3
 8000472:	2103      	movs	r1, #3
 8000474:	2200      	movs	r2, #0
 8000476:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
 800047a:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 800047e:	f00c fde7 	bl	800d050 <inv_set_message>
 8000482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <inv_start_fast_nomot+0x3c>)
 8000488:	2164      	movs	r1, #100	; 0x64
 800048a:	2207      	movs	r2, #7
 800048c:	f00c b8c0 	b.w	800c610 <inv_register_data_cb>
 8000490:	200028c0 	.word	0x200028c0
 8000494:	08000b29 	.word	0x08000b29

08000498 <inv_fast_nomot_parameter>:
 8000498:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800049a:	b103      	cbz	r3, 800049e <inv_fast_nomot_parameter+0x6>
 800049c:	e6c8      	b.n	8000230 <inv_fast_nomot_parameter.part.3>
 800049e:	2000      	movs	r0, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	4770      	bx	lr

080004a4 <inv_fast_nomot_parameter_3rd>:
 80004a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004a8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d057      	beq.n	800055e <inv_fast_nomot_parameter_3rd+0xba>
 80004ae:	f1a0 0e08 	sub.w	lr, r0, #8
 80004b2:	2600      	movs	r6, #0
 80004b4:	2700      	movs	r7, #0
 80004b6:	3010      	adds	r0, #16
 80004b8:	f85e 1f08 	ldr.w	r1, [lr, #8]!
 80004bc:	f8de c004 	ldr.w	ip, [lr, #4]
 80004c0:	fba1 4501 	umull	r4, r5, r1, r1
 80004c4:	e9de 2306 	ldrd	r2, r3, [lr, #24]
 80004c8:	e9de ab0c 	ldrd	sl, fp, [lr, #48]	; 0x30
 80004cc:	fb01 f80c 	mul.w	r8, r1, ip
 80004d0:	1b12      	subs	r2, r2, r4
 80004d2:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 80004d6:	eb63 0305 	sbc.w	r3, r3, r5
 80004da:	eb12 0802 	adds.w	r8, r2, r2
 80004de:	eb43 0903 	adc.w	r9, r3, r3
 80004e2:	eb12 0208 	adds.w	r2, r2, r8
 80004e6:	eb43 0309 	adc.w	r3, r3, r9
 80004ea:	1912      	adds	r2, r2, r4
 80004ec:	fb02 fc0c 	mul.w	ip, r2, ip
 80004f0:	416b      	adcs	r3, r5
 80004f2:	fba2 4501 	umull	r4, r5, r2, r1
 80004f6:	fb01 c103 	mla	r1, r1, r3, ip
 80004fa:	ebb4 040a 	subs.w	r4, r4, sl
 80004fe:	440d      	add	r5, r1
 8000500:	eb65 050b 	sbc.w	r5, r5, fp
 8000504:	2c00      	cmp	r4, #0
 8000506:	f175 0300 	sbcs.w	r3, r5, #0
 800050a:	db2c      	blt.n	8000566 <inv_fast_nomot_parameter_3rd+0xc2>
 800050c:	42a6      	cmp	r6, r4
 800050e:	eb77 0305 	sbcs.w	r3, r7, r5
 8000512:	bfbc      	itt	lt
 8000514:	4626      	movlt	r6, r4
 8000516:	462f      	movlt	r7, r5
 8000518:	4586      	cmp	lr, r0
 800051a:	d1cd      	bne.n	80004b8 <inv_fast_nomot_parameter_3rd+0x14>
 800051c:	4639      	mov	r1, r7
 800051e:	4630      	mov	r0, r6
 8000520:	f003 f9aa 	bl	8003878 <__aeabi_l2f>
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <inv_fast_nomot_parameter_3rd+0xcc>)
 8000526:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000528:	f003 fa98 	bl	8003a5c <__aeabi_fdiv>
 800052c:	f003 fc54 	bl	8003dd8 <__aeabi_f2lz>
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <inv_fast_nomot_parameter_3rd+0xd0>)
 8000532:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800053a:	f1c3 0220 	rsb	r2, r3, #32
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	f1b3 0420 	subs.w	r4, r3, #32
 8000546:	fa20 f003 	lsr.w	r0, r0, r3
 800054a:	bf58      	it	pl
 800054c:	fa41 f404 	asrpl.w	r4, r1, r4
 8000550:	ea40 0002 	orr.w	r0, r0, r2
 8000554:	bf58      	it	pl
 8000556:	4320      	orrpl	r0, r4
 8000558:	4119      	asrs	r1, r3
 800055a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800055e:	4618      	mov	r0, r3
 8000560:	4619      	mov	r1, r3
 8000562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000566:	4264      	negs	r4, r4
 8000568:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800056c:	e7ce      	b.n	800050c <inv_fast_nomot_parameter_3rd+0x68>
 800056e:	bf00      	nop
 8000570:	20000250 	.word	0x20000250
 8000574:	200028c0 	.word	0x200028c0

08000578 <inv_fast_nomot_set_gyro_bias>:
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <inv_fast_nomot_set_gyro_bias+0xbc>)
 800057a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057c:	461a      	mov	r2, r3
 800057e:	461c      	mov	r4, r3
 8000580:	b085      	sub	sp, #20
 8000582:	f8d3 e210 	ldr.w	lr, [r3, #528]	; 0x210
 8000586:	4605      	mov	r5, r0
 8000588:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800058c:	a801      	add	r0, sp, #4
 800058e:	f103 0718 	add.w	r7, r3, #24
 8000592:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8000596:	f851 6f04 	ldr.w	r6, [r1, #4]!
 800059a:	fa03 f30e 	lsl.w	r3, r3, lr
 800059e:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80005a2:	42ba      	cmp	r2, r7
 80005a4:	f840 3b04 	str.w	r3, [r0], #4
 80005a8:	d1f3      	bne.n	8000592 <inv_fast_nomot_set_gyro_bias+0x1a>
 80005aa:	2298      	movs	r2, #152	; 0x98
 80005ac:	2100      	movs	r1, #0
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <inv_fast_nomot_set_gyro_bias+0xc0>)
 80005b0:	f011 fa80 	bl	8011ab4 <memset>
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ff03 	bl	80003c0 <inv_init_maxmin>
 80005ba:	f894 31e8 	ldrb.w	r3, [r4, #488]	; 0x1e8
 80005be:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <inv_fast_nomot_set_gyro_bias+0xbc>)
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d02e      	beq.n	8000622 <inv_fast_nomot_set_gyro_bias+0xaa>
 80005c4:	4e1d      	ldr	r6, [pc, #116]	; (800063c <inv_fast_nomot_set_gyro_bias+0xc4>)
 80005c6:	9b02      	ldr	r3, [sp, #8]
 80005c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80005ca:	9901      	ldr	r1, [sp, #4]
 80005cc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80005ce:	1a09      	subs	r1, r1, r0
 80005d0:	1a9a      	subs	r2, r3, r2
 80005d2:	2900      	cmp	r1, #0
 80005d4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80005d8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80005dc:	bfb8      	it	lt
 80005de:	4249      	neglt	r1, r1
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bfb8      	it	lt
 80005e4:	460b      	movlt	r3, r1
 80005e6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80005e8:	9a03      	ldr	r2, [sp, #12]
 80005ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80005ec:	1a10      	subs	r0, r2, r0
 80005ee:	2800      	cmp	r0, #0
 80005f0:	bfb8      	it	lt
 80005f2:	4240      	neglt	r0, r0
 80005f4:	4298      	cmp	r0, r3
 80005f6:	bfb8      	it	lt
 80005f8:	4618      	movlt	r0, r3
 80005fa:	f00c fe43 	bl	800d284 <inv_q30_mult>
 80005fe:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8000602:	4298      	cmp	r0, r3
 8000604:	da06      	bge.n	8000614 <inv_fast_nomot_set_gyro_bias+0x9c>
 8000606:	a801      	add	r0, sp, #4
 8000608:	2103      	movs	r1, #3
 800060a:	f00b fe81 	bl	800c310 <inv_set_gyro_bias>
 800060e:	2002      	movs	r0, #2
 8000610:	f00d fe18 	bl	800e244 <inv_set_motion_state>
 8000614:	a901      	add	r1, sp, #4
 8000616:	c90e      	ldmia	r1, {r1, r2, r3}
 8000618:	6271      	str	r1, [r6, #36]	; 0x24
 800061a:	62b2      	str	r2, [r6, #40]	; 0x28
 800061c:	62f3      	str	r3, [r6, #44]	; 0x2c
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8000626:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800062a:	bfc4      	itt	gt
 800062c:	2305      	movgt	r3, #5
 800062e:	f882 31e8 	strbgt.w	r3, [r2, #488]	; 0x1e8
 8000632:	e7c7      	b.n	80005c4 <inv_fast_nomot_set_gyro_bias+0x4c>
 8000634:	200028c0 	.word	0x200028c0
 8000638:	200028c8 	.word	0x200028c8
 800063c:	20000250 	.word	0x20000250

08000640 <inv_set_fast_nomot_compass_threshold>:
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <inv_set_fast_nomot_compass_threshold+0x8>)
 8000642:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8000646:	4770      	bx	lr
 8000648:	20000250 	.word	0x20000250

0800064c <int_set_fast_nomot_gyro_threshold>:
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <int_set_fast_nomot_gyro_threshold+0x8>)
 800064e:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8000652:	4770      	bx	lr
 8000654:	20000250 	.word	0x20000250

08000658 <inv_set_fast_nomot_accel_threshold>:
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <inv_set_fast_nomot_accel_threshold+0x8>)
 800065a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800065e:	4770      	bx	lr
 8000660:	20000250 	.word	0x20000250

08000664 <inv_get_fast_nomot_compass_param>:
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <inv_get_fast_nomot_compass_param+0x18>)
 8000666:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800066a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800066e:	6002      	str	r2, [r0, #0]
 8000670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000674:	e9c1 2300 	strd	r2, r3, [r1]
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	200028c0 	.word	0x200028c0

08000680 <inv_get_fast_nomot_accel_param>:
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <inv_get_fast_nomot_accel_param+0x18>)
 8000682:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8000686:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800068a:	6002      	str	r2, [r0, #0]
 800068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000690:	e9c1 2300 	strd	r2, r3, [r1]
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200028c0 	.word	0x200028c0

0800069c <inv_fast_nomot_store_data>:
 800069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a0:	460d      	mov	r5, r1
 80006a2:	b083      	sub	sp, #12
 80006a4:	f101 0318 	add.w	r3, r1, #24
 80006a8:	f8d1 b078 	ldr.w	fp, [r1, #120]	; 0x78
 80006ac:	f101 0c68 	add.w	ip, r1, #104	; 0x68
 80006b0:	f101 0a5c 	add.w	sl, r1, #92	; 0x5c
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	f1bb 0f00 	cmp.w	fp, #0
 80006ba:	d037      	beq.n	800072c <inv_fast_nomot_store_data+0x90>
 80006bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80006c0:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	461e      	mov	r6, r3
 80006c8:	17df      	asrs	r7, r3, #31
 80006ca:	462c      	mov	r4, r5
 80006cc:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 80006d0:	f105 0e60 	add.w	lr, r5, #96	; 0x60
 80006d4:	429a      	cmp	r2, r3
 80006d6:	bfb8      	it	lt
 80006d8:	f8ca 3000 	strlt.w	r3, [sl]
 80006dc:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 80006e0:	429a      	cmp	r2, r3
 80006e2:	bfc8      	it	gt
 80006e4:	f8cc 3000 	strgt.w	r3, [ip]
 80006e8:	2201      	movs	r2, #1
 80006ea:	2300      	movs	r3, #0
 80006ec:	fb02 f807 	mul.w	r8, r2, r7
 80006f0:	fb06 8803 	mla	r8, r6, r3, r8
 80006f4:	fba2 2306 	umull	r2, r3, r2, r6
 80006f8:	4443      	add	r3, r8
 80006fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80006fe:	eb18 0802 	adds.w	r8, r8, r2
 8000702:	eb49 0903 	adc.w	r9, r9, r3
 8000706:	e8e4 8906 	strd	r8, r9, [r4], #24
 800070a:	4574      	cmp	r4, lr
 800070c:	d1ee      	bne.n	80006ec <inv_fast_nomot_store_data+0x50>
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	3508      	adds	r5, #8
 8000712:	429d      	cmp	r5, r3
 8000714:	f100 0002 	add.w	r0, r0, #2
 8000718:	d1cd      	bne.n	80006b6 <inv_fast_nomot_store_data+0x1a>
 800071a:	f10b 0301 	add.w	r3, fp, #1
 800071e:	2201      	movs	r2, #1
 8000720:	678b      	str	r3, [r1, #120]	; 0x78
 8000722:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8000726:	b003      	add	sp, #12
 8000728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800072c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8000730:	2600      	movs	r6, #0
 8000732:	2700      	movs	r7, #0
 8000734:	465b      	mov	r3, fp
 8000736:	f8cc 2014 	str.w	r2, [ip, #20]
 800073a:	e7c6      	b.n	80006ca <inv_fast_nomot_store_data+0x2e>

0800073c <inv_fast_nomot_store_data_compass>:
 800073c:	6803      	ldr	r3, [r0, #0]
 800073e:	b4f0      	push	{r4, r5, r6, r7}
 8000740:	66d3      	str	r3, [r2, #108]	; 0x6c
 8000742:	6843      	ldr	r3, [r0, #4]
 8000744:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8000746:	6713      	str	r3, [r2, #112]	; 0x70
 8000748:	6883      	ldr	r3, [r0, #8]
 800074a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 800074e:	6753      	str	r3, [r2, #116]	; 0x74
 8000750:	b194      	cbz	r4, 8000778 <inv_fast_nomot_store_data_compass+0x3c>
 8000752:	3804      	subs	r0, #4
 8000754:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8000758:	f102 0768 	add.w	r7, r2, #104	; 0x68
 800075c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8000760:	6a0e      	ldr	r6, [r1, #32]
 8000762:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8000766:	1b9b      	subs	r3, r3, r6
 8000768:	2b00      	cmp	r3, #0
 800076a:	bfb8      	it	lt
 800076c:	425b      	neglt	r3, r3
 800076e:	42ab      	cmp	r3, r5
 8000770:	bfc8      	it	gt
 8000772:	600b      	strgt	r3, [r1, #0]
 8000774:	42b9      	cmp	r1, r7
 8000776:	d1f1      	bne.n	800075c <inv_fast_nomot_store_data_compass+0x20>
 8000778:	3401      	adds	r4, #1
 800077a:	2301      	movs	r3, #1
 800077c:	6794      	str	r4, [r2, #120]	; 0x78
 800077e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000782:	bcf0      	pop	{r4, r5, r6, r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <inv_fast_nomot_reset_data_compass>:
 8000788:	b430      	push	{r4, r5}
 800078a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800078c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800078e:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8000790:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8000794:	2300      	movs	r3, #0
 8000796:	67c5      	str	r5, [r0, #124]	; 0x7c
 8000798:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800079c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80007a0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 80007a4:	6603      	str	r3, [r0, #96]	; 0x60
 80007a6:	6643      	str	r3, [r0, #100]	; 0x64
 80007a8:	6683      	str	r3, [r0, #104]	; 0x68
 80007aa:	6783      	str	r3, [r0, #120]	; 0x78
 80007ac:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80007b0:	bc30      	pop	{r4, r5}
 80007b2:	4770      	bx	lr

080007b4 <inv_fast_nomot_get_time_elaps>:
 80007b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80007b8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80007bc:	1a10      	subs	r0, r2, r0
 80007be:	4770      	bx	lr

080007c0 <inv_fast_nomot_parameter_compass>:
 80007c0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80007c2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80007c4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80007c6:	4299      	cmp	r1, r3
 80007c8:	bfb8      	it	lt
 80007ca:	4619      	movlt	r1, r3
 80007cc:	4291      	cmp	r1, r2
 80007ce:	4608      	mov	r0, r1
 80007d0:	bfb8      	it	lt
 80007d2:	4610      	movlt	r0, r2
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <inv_get_right_shift_by_rounding>:
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	4603      	mov	r3, r0
 80007dc:	468e      	mov	lr, r1
 80007de:	f1c2 0420 	rsb	r4, r2, #32
 80007e2:	f1b2 0720 	subs.w	r7, r2, #32
 80007e6:	fa0e fc04 	lsl.w	ip, lr, r4
 80007ea:	fa23 f002 	lsr.w	r0, r3, r2
 80007ee:	f102 35ff 	add.w	r5, r2, #4294967295
 80007f2:	f04f 0601 	mov.w	r6, #1
 80007f6:	bf58      	it	pl
 80007f8:	fa4e f707 	asrpl.w	r7, lr, r7
 80007fc:	fa06 f605 	lsl.w	r6, r6, r5
 8000800:	ea4c 0000 	orr.w	r0, ip, r0
 8000804:	f1a4 0520 	sub.w	r5, r4, #32
 8000808:	bf58      	it	pl
 800080a:	4338      	orrpl	r0, r7
 800080c:	fa03 f505 	lsl.w	r5, r3, r5
 8000810:	f1c4 0720 	rsb	r7, r4, #32
 8000814:	fa23 f707 	lsr.w	r7, r3, r7
 8000818:	ea4c 0505 	orr.w	r5, ip, r5
 800081c:	433d      	orrs	r5, r7
 800081e:	40a3      	lsls	r3, r4
 8000820:	f1c4 0720 	rsb	r7, r4, #32
 8000824:	40e3      	lsrs	r3, r4
 8000826:	fa05 f707 	lsl.w	r7, r5, r7
 800082a:	3c20      	subs	r4, #32
 800082c:	ea43 0307 	orr.w	r3, r3, r7
 8000830:	bf5c      	itt	pl
 8000832:	fa45 f404 	asrpl.w	r4, r5, r4
 8000836:	4323      	orrpl	r3, r4
 8000838:	429e      	cmp	r6, r3
 800083a:	fa4e f102 	asr.w	r1, lr, r2
 800083e:	db07      	blt.n	8000850 <inv_get_right_shift_by_rounding+0x78>
 8000840:	4276      	negs	r6, r6
 8000842:	42b3      	cmp	r3, r6
 8000844:	da03      	bge.n	800084e <inv_get_right_shift_by_rounding+0x76>
 8000846:	f110 30ff 	adds.w	r0, r0, #4294967295
 800084a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	3001      	adds	r0, #1
 8000852:	f141 0100 	adc.w	r1, r1, #0
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000858 <inv_reset_min_max_gyro_accel_statistics>:
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <inv_reset_min_max_gyro_accel_statistics+0x30>)
 800085a:	2300      	movs	r3, #0
 800085c:	4611      	mov	r1, r2
 800085e:	f841 3b04 	str.w	r3, [r1], #4
 8000862:	3104      	adds	r1, #4
 8000864:	6053      	str	r3, [r2, #4]
 8000866:	f841 3b04 	str.w	r3, [r1], #4
 800086a:	600b      	str	r3, [r1, #0]
 800086c:	6213      	str	r3, [r2, #32]
 800086e:	6253      	str	r3, [r2, #36]	; 0x24
 8000870:	6293      	str	r3, [r2, #40]	; 0x28
 8000872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000874:	6113      	str	r3, [r2, #16]
 8000876:	6153      	str	r3, [r2, #20]
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	6353      	str	r3, [r2, #52]	; 0x34
 8000880:	6393      	str	r3, [r2, #56]	; 0x38
 8000882:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20002ae0 	.word	0x20002ae0

0800088c <inv_record_max_moment_in_no_motion_gyro>:
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <inv_record_max_moment_in_no_motion_gyro+0x30>)
 800088e:	b4f0      	push	{r4, r5, r6, r7}
 8000890:	f8d2 3248 	ldr.w	r3, [r2, #584]	; 0x248
 8000894:	4604      	mov	r4, r0
 8000896:	460d      	mov	r5, r1
 8000898:	b16b      	cbz	r3, 80008b6 <inv_record_max_moment_in_no_motion_gyro+0x2a>
 800089a:	4611      	mov	r1, r2
 800089c:	e9f1 6790 	ldrd	r6, r7, [r1, #576]!	; 0x240
 80008a0:	4286      	cmp	r6, r0
 80008a2:	eb77 0005 	sbcs.w	r0, r7, r5
 80008a6:	da01      	bge.n	80008ac <inv_record_max_moment_in_no_motion_gyro+0x20>
 80008a8:	e9c1 4500 	strd	r4, r5, [r1]
 80008ac:	bcf0      	pop	{r4, r5, r6, r7}
 80008ae:	3301      	adds	r3, #1
 80008b0:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
 80008b4:	4770      	bx	lr
 80008b6:	f502 7110 	add.w	r1, r2, #576	; 0x240
 80008ba:	e7f5      	b.n	80008a8 <inv_record_max_moment_in_no_motion_gyro+0x1c>
 80008bc:	200028c0 	.word	0x200028c0

080008c0 <inv_record_max_moment_in_no_motion_accel>:
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <inv_record_max_moment_in_no_motion_accel+0x30>)
 80008c2:	b4f0      	push	{r4, r5, r6, r7}
 80008c4:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
 80008c8:	4604      	mov	r4, r0
 80008ca:	460d      	mov	r5, r1
 80008cc:	b16b      	cbz	r3, 80008ea <inv_record_max_moment_in_no_motion_accel+0x2a>
 80008ce:	4611      	mov	r1, r2
 80008d0:	e9f1 6794 	ldrd	r6, r7, [r1, #592]!	; 0x250
 80008d4:	4286      	cmp	r6, r0
 80008d6:	eb77 0005 	sbcs.w	r0, r7, r5
 80008da:	da01      	bge.n	80008e0 <inv_record_max_moment_in_no_motion_accel+0x20>
 80008dc:	e9c1 4500 	strd	r4, r5, [r1]
 80008e0:	bcf0      	pop	{r4, r5, r6, r7}
 80008e2:	3301      	adds	r3, #1
 80008e4:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
 80008e8:	4770      	bx	lr
 80008ea:	f502 7114 	add.w	r1, r2, #592	; 0x250
 80008ee:	e7f5      	b.n	80008dc <inv_record_max_moment_in_no_motion_accel+0x1c>
 80008f0:	200028c0 	.word	0x200028c0

080008f4 <inv_record_min_moment_in_motion_gyro>:
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <inv_record_min_moment_in_motion_gyro+0x30>)
 80008f6:	b4f0      	push	{r4, r5, r6, r7}
 80008f8:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
 80008fc:	4604      	mov	r4, r0
 80008fe:	460d      	mov	r5, r1
 8000900:	b16b      	cbz	r3, 800091e <inv_record_min_moment_in_motion_gyro+0x2a>
 8000902:	4611      	mov	r1, r2
 8000904:	e9f1 6788 	ldrd	r6, r7, [r1, #544]!	; 0x220
 8000908:	42b0      	cmp	r0, r6
 800090a:	eb75 0007 	sbcs.w	r0, r5, r7
 800090e:	da01      	bge.n	8000914 <inv_record_min_moment_in_motion_gyro+0x20>
 8000910:	e9c1 4500 	strd	r4, r5, [r1]
 8000914:	bcf0      	pop	{r4, r5, r6, r7}
 8000916:	3301      	adds	r3, #1
 8000918:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
 800091c:	4770      	bx	lr
 800091e:	f502 7108 	add.w	r1, r2, #544	; 0x220
 8000922:	e7f5      	b.n	8000910 <inv_record_min_moment_in_motion_gyro+0x1c>
 8000924:	200028c0 	.word	0x200028c0

08000928 <inv_record_min_moment_in_motion_accel>:
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <inv_record_min_moment_in_motion_accel+0x30>)
 800092a:	b4f0      	push	{r4, r5, r6, r7}
 800092c:	f8d2 3238 	ldr.w	r3, [r2, #568]	; 0x238
 8000930:	4604      	mov	r4, r0
 8000932:	460d      	mov	r5, r1
 8000934:	b16b      	cbz	r3, 8000952 <inv_record_min_moment_in_motion_accel+0x2a>
 8000936:	4611      	mov	r1, r2
 8000938:	e9f1 678c 	ldrd	r6, r7, [r1, #560]!	; 0x230
 800093c:	42b0      	cmp	r0, r6
 800093e:	eb75 0007 	sbcs.w	r0, r5, r7
 8000942:	da01      	bge.n	8000948 <inv_record_min_moment_in_motion_accel+0x20>
 8000944:	e9c1 4500 	strd	r4, r5, [r1]
 8000948:	bcf0      	pop	{r4, r5, r6, r7}
 800094a:	3301      	adds	r3, #1
 800094c:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
 8000950:	4770      	bx	lr
 8000952:	f502 710c 	add.w	r1, r2, #560	; 0x230
 8000956:	e7f5      	b.n	8000944 <inv_record_min_moment_in_motion_accel+0x1c>
 8000958:	200028c0 	.word	0x200028c0

0800095c <inv_detect_motion_by_gyro_accel>:
 800095c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000960:	4c4c      	ldr	r4, [pc, #304]	; (8000a94 <inv_detect_motion_by_gyro_accel+0x138>)
 8000962:	4e4d      	ldr	r6, [pc, #308]	; (8000a98 <inv_detect_motion_by_gyro_accel+0x13c>)
 8000964:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8000966:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000968:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800096a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800096c:	1a52      	subs	r2, r2, r1
 800096e:	1aeb      	subs	r3, r5, r3
 8000970:	4293      	cmp	r3, r2
 8000972:	bfb8      	it	lt
 8000974:	4613      	movlt	r3, r2
 8000976:	4619      	mov	r1, r3
 8000978:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800097a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800097c:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 800097e:	1a9a      	subs	r2, r3, r2
 8000980:	4291      	cmp	r1, r2
 8000982:	460b      	mov	r3, r1
 8000984:	bfb8      	it	lt
 8000986:	4613      	movlt	r3, r2
 8000988:	429d      	cmp	r5, r3
 800098a:	db5a      	blt.n	8000a42 <inv_detect_motion_by_gyro_accel+0xe6>
 800098c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800098e:	05dd      	lsls	r5, r3, #23
 8000990:	d402      	bmi.n	8000998 <inv_detect_motion_by_gyro_accel+0x3c>
 8000992:	2002      	movs	r0, #2
 8000994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000998:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	4293      	cmp	r3, r2
 80009a0:	dbf7      	blt.n	8000992 <inv_detect_motion_by_gyro_accel+0x36>
 80009a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80009a4:	05c9      	lsls	r1, r1, #23
 80009a6:	d551      	bpl.n	8000a4c <inv_detect_motion_by_gyro_accel+0xf0>
 80009a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dcf0      	bgt.n	8000992 <inv_detect_motion_by_gyro_accel+0x36>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d15b      	bne.n	8000a6c <inv_detect_motion_by_gyro_accel+0x110>
 80009b4:	f04f 0800 	mov.w	r8, #0
 80009b8:	f04f 0900 	mov.w	r9, #0
 80009bc:	4935      	ldr	r1, [pc, #212]	; (8000a94 <inv_detect_motion_by_gyro_accel+0x138>)
 80009be:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80009c2:	4542      	cmp	r2, r8
 80009c4:	f501 70ec 	add.w	r0, r1, #472	; 0x1d8
 80009c8:	eb73 0309 	sbcs.w	r3, r3, r9
 80009cc:	e9c0 8900 	strd	r8, r9, [r0]
 80009d0:	da4a      	bge.n	8000a68 <inv_detect_motion_by_gyro_accel+0x10c>
 80009d2:	f8d1 3238 	ldr.w	r3, [r1, #568]	; 0x238
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d153      	bne.n	8000a82 <inv_detect_motion_by_gyro_accel+0x126>
 80009da:	f501 710c 	add.w	r1, r1, #560	; 0x230
 80009de:	e9c1 8900 	strd	r8, r9, [r1]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
 80009e8:	2500      	movs	r5, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2298      	movs	r2, #152	; 0x98
 80009ee:	482b      	ldr	r0, [pc, #172]	; (8000a9c <inv_detect_motion_by_gyro_accel+0x140>)
 80009f0:	f011 f860 	bl	8011ab4 <memset>
 80009f4:	2004      	movs	r0, #4
 80009f6:	f7ff fce3 	bl	80003c0 <inv_init_maxmin>
 80009fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80009fe:	b343      	cbz	r3, 8000a52 <inv_detect_motion_by_gyro_accel+0xf6>
 8000a00:	4827      	ldr	r0, [pc, #156]	; (8000aa0 <inv_detect_motion_by_gyro_accel+0x144>)
 8000a02:	f7ff fc15 	bl	8000230 <inv_fast_nomot_parameter.part.3>
 8000a06:	f106 0718 	add.w	r7, r6, #24
 8000a0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <inv_detect_motion_by_gyro_accel+0x138>)
 8000a10:	4286      	cmp	r6, r0
 8000a12:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8000a16:	e9c2 0100 	strd	r0, r1, [r2]
 8000a1a:	eb77 0201 	sbcs.w	r2, r7, r1
 8000a1e:	da1b      	bge.n	8000a58 <inv_detect_motion_by_gyro_accel+0xfc>
 8000a20:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8000a24:	b1da      	cbz	r2, 8000a5e <inv_detect_motion_by_gyro_accel+0x102>
 8000a26:	e9f3 6788 	ldrd	r6, r7, [r3, #544]!	; 0x220
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	eb71 0507 	sbcs.w	r5, r1, r7
 8000a30:	da01      	bge.n	8000a36 <inv_detect_motion_by_gyro_accel+0xda>
 8000a32:	e9c3 0100 	strd	r0, r1, [r3]
 8000a36:	3201      	adds	r2, #1
 8000a38:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a42:	f7ff fcf3 	bl	800042c <inv_reset_packet>
 8000a46:	2000      	movs	r0, #0
 8000a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4c:	2501      	movs	r5, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d6      	bne.n	8000a00 <inv_detect_motion_by_gyro_accel+0xa4>
 8000a52:	2000      	movs	r0, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	e7d6      	b.n	8000a06 <inv_detect_motion_by_gyro_accel+0xaa>
 8000a58:	4628      	mov	r0, r5
 8000a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a62:	e9c3 0100 	strd	r0, r1, [r3]
 8000a66:	e7e6      	b.n	8000a36 <inv_detect_motion_by_gyro_accel+0xda>
 8000a68:	2501      	movs	r5, #1
 8000a6a:	e7be      	b.n	80009ea <inv_detect_motion_by_gyro_accel+0x8e>
 8000a6c:	f504 709c 	add.w	r0, r4, #312	; 0x138
 8000a70:	f7ff fbde 	bl	8000230 <inv_fast_nomot_parameter.part.3>
 8000a74:	ea4f 5810 	mov.w	r8, r0, lsr #20
 8000a78:	ea48 3801 	orr.w	r8, r8, r1, lsl #12
 8000a7c:	ea4f 5921 	mov.w	r9, r1, asr #20
 8000a80:	e79c      	b.n	80009bc <inv_detect_motion_by_gyro_accel+0x60>
 8000a82:	e9f1 ab8c 	ldrd	sl, fp, [r1, #560]!	; 0x230
 8000a86:	45d0      	cmp	r8, sl
 8000a88:	eb79 020b 	sbcs.w	r2, r9, fp
 8000a8c:	daa9      	bge.n	80009e2 <inv_detect_motion_by_gyro_accel+0x86>
 8000a8e:	e9c1 8900 	strd	r8, r9, [r1]
 8000a92:	e7a6      	b.n	80009e2 <inv_detect_motion_by_gyro_accel+0x86>
 8000a94:	200028c0 	.word	0x200028c0
 8000a98:	20000250 	.word	0x20000250
 8000a9c:	200029f8 	.word	0x200029f8
 8000aa0:	200028c8 	.word	0x200028c8

08000aa4 <inv_sensor_data_preprocess>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000aae:	2bc0      	cmp	r3, #192	; 0xc0
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	d02e      	beq.n	8000b12 <inv_sensor_data_preprocess+0x6e>
 8000ab4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000ab6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000aba:	2bc0      	cmp	r3, #192	; 0xc0
 8000abc:	d023      	beq.n	8000b06 <inv_sensor_data_preprocess+0x62>
 8000abe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000ac2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8000ac6:	2ac0      	cmp	r2, #192	; 0xc0
 8000ac8:	d016      	beq.n	8000af8 <inv_sensor_data_preprocess+0x54>
 8000aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000ace:	2b60      	cmp	r3, #96	; 0x60
 8000ad0:	d001      	beq.n	8000ad6 <inv_sensor_data_preprocess+0x32>
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8000ada:	c90e      	ldmia	r1, {r1, r2, r3}
 8000adc:	138e      	asrs	r6, r1, #14
 8000ade:	1395      	asrs	r5, r2, #14
 8000ae0:	139b      	asrs	r3, r3, #14
 8000ae2:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8000ae6:	a801      	add	r0, sp, #4
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <inv_sensor_data_preprocess+0x78>)
 8000aea:	9601      	str	r6, [sp, #4]
 8000aec:	9502      	str	r5, [sp, #8]
 8000aee:	9303      	str	r3, [sp, #12]
 8000af0:	f7ff fe24 	bl	800073c <inv_fast_nomot_store_data_compass>
 8000af4:	b004      	add	sp, #16
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f9b4 608c 	ldrsh.w	r6, [r4, #140]	; 0x8c
 8000afc:	f9b4 508e 	ldrsh.w	r5, [r4, #142]	; 0x8e
 8000b00:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
 8000b04:	e7ed      	b.n	8000ae2 <inv_sensor_data_preprocess+0x3e>
 8000b06:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000b0a:	4905      	ldr	r1, [pc, #20]	; (8000b20 <inv_sensor_data_preprocess+0x7c>)
 8000b0c:	f7ff fdc6 	bl	800069c <inv_fast_nomot_store_data>
 8000b10:	e7d5      	b.n	8000abe <inv_sensor_data_preprocess+0x1a>
 8000b12:	3004      	adds	r0, #4
 8000b14:	4903      	ldr	r1, [pc, #12]	; (8000b24 <inv_sensor_data_preprocess+0x80>)
 8000b16:	f7ff fdc1 	bl	800069c <inv_fast_nomot_store_data>
 8000b1a:	e7cb      	b.n	8000ab4 <inv_sensor_data_preprocess+0x10>
 8000b1c:	20002960 	.word	0x20002960
 8000b20:	200029f8 	.word	0x200029f8
 8000b24:	200028c8 	.word	0x200028c8

08000b28 <inv_generate_fast_nomot>:
 8000b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b2e:	05d9      	lsls	r1, r3, #23
 8000b30:	f140 8082 	bpl.w	8000c38 <inv_generate_fast_nomot+0x110>
 8000b34:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8000b36:	4604      	mov	r4, r0
 8000b38:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000b3c:	2a40      	cmp	r2, #64	; 0x40
 8000b3e:	d07e      	beq.n	8000c3e <inv_generate_fast_nomot+0x116>
 8000b40:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8000b44:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000b48:	2a40      	cmp	r2, #64	; 0x40
 8000b4a:	d078      	beq.n	8000c3e <inv_generate_fast_nomot+0x116>
 8000b4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000b50:	2b40      	cmp	r3, #64	; 0x40
 8000b52:	d074      	beq.n	8000c3e <inv_generate_fast_nomot+0x116>
 8000b54:	4db8      	ldr	r5, [pc, #736]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b58:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8000b5c:	4eb6      	ldr	r6, [pc, #728]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d019      	beq.n	8000b96 <inv_generate_fast_nomot+0x6e>
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
 8000b68:	4fb4      	ldr	r7, [pc, #720]	; (8000e3c <inv_generate_fast_nomot+0x314>)
 8000b6a:	f340 8124 	ble.w	8000db6 <inv_generate_fast_nomot+0x28e>
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b72:	4619      	mov	r1, r3
 8000b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b76:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
 8000b7a:	6030      	str	r0, [r6, #0]
 8000b7c:	f8c6 2214 	str.w	r2, [r6, #532]	; 0x214
 8000b80:	2219      	movs	r2, #25
 8000b82:	408a      	lsls	r2, r1
 8000b84:	f1c3 0310 	rsb	r3, r3, #16
 8000b88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 8000b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000b92:	f8c5 1218 	str.w	r1, [r5, #536]	; 0x218
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff ff84 	bl	8000aa4 <inv_sensor_data_preprocess>
 8000b9c:	f895 31e8 	ldrb.w	r3, [r5, #488]	; 0x1e8
 8000ba0:	2b06      	cmp	r3, #6
 8000ba2:	d849      	bhi.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000ba4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ba8:	00c800f4 	.word	0x00c800f4
 8000bac:	000700bf 	.word	0x000700bf
 8000bb0:	0077009b 	.word	0x0077009b
 8000bb4:	0054      	.short	0x0054
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff fed0 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	f000 80f6 	beq.w	8000dae <inv_generate_fast_nomot+0x286>
 8000bc2:	2801      	cmp	r0, #1
 8000bc4:	d138      	bne.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000bc6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000bca:	05da      	lsls	r2, r3, #23
 8000bcc:	f140 812c 	bpl.w	8000e28 <inv_generate_fast_nomot+0x300>
 8000bd0:	f505 7080 	add.w	r0, r5, #256	; 0x100
 8000bd4:	c80d      	ldmia	r0, {r0, r2, r3}
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	bfb8      	it	lt
 8000bda:	4610      	movlt	r0, r2
 8000bdc:	4283      	cmp	r3, r0
 8000bde:	bfb8      	it	lt
 8000be0:	4603      	movlt	r3, r0
 8000be2:	4618      	mov	r0, r3
 8000be4:	4e94      	ldr	r6, [pc, #592]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000be6:	4f95      	ldr	r7, [pc, #596]	; (8000e3c <inv_generate_fast_nomot+0x314>)
 8000be8:	17d9      	asrs	r1, r3, #31
 8000bea:	f506 73e8 	add.w	r3, r6, #464	; 0x1d0
 8000bee:	e9c3 0100 	strd	r0, r1, [r3]
 8000bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	418b      	sbcs	r3, r1
 8000bfa:	f280 810c 	bge.w	8000e16 <inv_generate_fast_nomot+0x2ee>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
 8000c04:	4b8e      	ldr	r3, [pc, #568]	; (8000e40 <inv_generate_fast_nomot+0x318>)
 8000c06:	f8d5 2258 	ldr.w	r2, [r5, #600]	; 0x258
 8000c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 80f1 	bne.w	8000df6 <inv_generate_fast_nomot+0x2ce>
 8000c14:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
 8000c18:	498a      	ldr	r1, [pc, #552]	; (8000e44 <inv_generate_fast_nomot+0x31c>)
 8000c1a:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
 8000c1e:	3201      	adds	r2, #1
 8000c20:	f8c5 2258 	str.w	r2, [r5, #600]	; 0x258
 8000c24:	e9d1 6700 	ldrd	r6, r7, [r1]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 80da 	bne.w	8000de2 <inv_generate_fast_nomot+0x2ba>
 8000c2e:	e9c1 6714 	strd	r6, r7, [r1, #80]	; 0x50
 8000c32:	3301      	adds	r3, #1
 8000c34:	f8c5 3248 	str.w	r3, [r5, #584]	; 0x248
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c3e:	4d7e      	ldr	r5, [pc, #504]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000c40:	f7ff fbf4 	bl	800042c <inv_reset_packet>
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
 8000c4a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000c4e:	e782      	b.n	8000b56 <inv_generate_fast_nomot+0x2e>
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fe83 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000c56:	2801      	cmp	r0, #1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	f000 80be 	beq.w	8000dda <inv_generate_fast_nomot+0x2b2>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d1ea      	bne.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000c62:	f7ff fbe3 	bl	800042c <inv_reset_packet>
 8000c66:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8000c6a:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8000c6e:	c807      	ldmia	r0, {r0, r1, r2}
 8000c70:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
 8000c74:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
 8000c78:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
 8000c7c:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
 8000c80:	f8c5 4130 	str.w	r4, [r5, #304]	; 0x130
 8000c84:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
 8000c88:	f8c5 1120 	str.w	r1, [r5, #288]	; 0x120
 8000c8c:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8000c90:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
 8000c94:	e7d0      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000c96:	2306      	movs	r3, #6
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000c9e:	f00d fad1 	bl	800e244 <inv_set_motion_state>
 8000ca2:	f7ff fbc3 	bl	800042c <inv_reset_packet>
 8000ca6:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
 8000caa:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8000cae:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8000cb2:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 8000cbc:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8000cc0:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
 8000cc4:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
 8000cc8:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000ccc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8000cd0:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
 8000cd4:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8000cd8:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8000cdc:	e7ac      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000cde:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	d514      	bpl.n	8000d10 <inv_generate_fast_nomot+0x1e8>
 8000ce6:	f505 7180 	add.w	r1, r5, #256	; 0x100
 8000cea:	c90e      	ldmia	r1, {r1, r2, r3}
 8000cec:	428a      	cmp	r2, r1
 8000cee:	bfb8      	it	lt
 8000cf0:	460a      	movlt	r2, r1
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	bfb8      	it	lt
 8000cf6:	4613      	movlt	r3, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4853      	ldr	r0, [pc, #332]	; (8000e48 <inv_generate_fast_nomot+0x320>)
 8000cfc:	494f      	ldr	r1, [pc, #316]	; (8000e3c <inv_generate_fast_nomot+0x314>)
 8000cfe:	17db      	asrs	r3, r3, #31
 8000d00:	e9c0 2300 	strd	r2, r3, [r0]
 8000d04:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8000d0e:	db4e      	blt.n	8000dae <inv_generate_fast_nomot+0x286>
 8000d10:	4620      	mov	r0, r4
 8000d12:	f7ff fe23 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d049      	beq.n	8000dae <inv_generate_fast_nomot+0x286>
 8000d1a:	2801      	cmp	r0, #1
 8000d1c:	d18c      	bne.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fc2a 	bl	8000578 <inv_fast_nomot_set_gyro_bias>
 8000d24:	e76e      	b.n	8000c04 <inv_generate_fast_nomot+0xdc>
 8000d26:	2303      	movs	r3, #3
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000d2e:	f7ff fc23 	bl	8000578 <inv_fast_nomot_set_gyro_bias>
 8000d32:	f7ff fb7b 	bl	800042c <inv_reset_packet>
 8000d36:	e77f      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000d38:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d3c:	4e3e      	ldr	r6, [pc, #248]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	f47f af7a 	bne.w	8000c38 <inv_generate_fast_nomot+0x110>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff fe09 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d15d      	bne.n	8000e0a <inv_generate_fast_nomot+0x2e2>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
 8000d54:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
 8000d58:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8000d5c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8000d60:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 8000d6a:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8000d6e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
 8000d72:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
 8000d76:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000d7a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8000d7e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
 8000d82:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8000d86:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8000d8a:	f7ff fd65 	bl	8000858 <inv_reset_min_max_gyro_accel_statistics>
 8000d8e:	e753      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000d90:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 8000d94:	4c28      	ldr	r4, [pc, #160]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	2b09      	cmp	r3, #9
 8000d9a:	f8c5 21e0 	str.w	r2, [r5, #480]	; 0x1e0
 8000d9e:	f77f af4b 	ble.w	8000c38 <inv_generate_fast_nomot+0x110>
 8000da2:	f7ff fb43 	bl	800042c <inv_reset_packet>
 8000da6:	2301      	movs	r3, #1
 8000da8:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 8000dac:	e744      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000dae:	2305      	movs	r3, #5
 8000db0:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000db4:	e740      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	3201      	adds	r2, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	6033      	str	r3, [r6, #0]
 8000dc2:	f8c6 220c 	str.w	r2, [r6, #524]	; 0x20c
 8000dc6:	f002 fd41 	bl	800384c <__aeabi_i2f>
 8000dca:	f013 fb37 	bl	801443c <sqrtf>
 8000dce:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
 8000dd2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8000dd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000dd8:	e6d2      	b.n	8000b80 <inv_generate_fast_nomot+0x58>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000de0:	e72a      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000de2:	e9f1 8914 	ldrd	r8, r9, [r1, #80]!	; 0x50
 8000de6:	45b0      	cmp	r8, r6
 8000de8:	eb79 0207 	sbcs.w	r2, r9, r7
 8000dec:	f6bf af21 	bge.w	8000c32 <inv_generate_fast_nomot+0x10a>
 8000df0:	e9c1 6700 	strd	r6, r7, [r1]
 8000df4:	e71d      	b.n	8000c32 <inv_generate_fast_nomot+0x10a>
 8000df6:	e9f3 671e 	ldrd	r6, r7, [r3, #120]!	; 0x78
 8000dfa:	4286      	cmp	r6, r0
 8000dfc:	eb77 0401 	sbcs.w	r4, r7, r1
 8000e00:	f6bf af0a 	bge.w	8000c18 <inv_generate_fast_nomot+0xf0>
 8000e04:	e9c3 0100 	strd	r0, r1, [r3]
 8000e08:	e706      	b.n	8000c18 <inv_generate_fast_nomot+0xf0>
 8000e0a:	2801      	cmp	r0, #1
 8000e0c:	bf04      	itt	eq
 8000e0e:	2302      	moveq	r3, #2
 8000e10:	f886 31e8 	strbeq.w	r3, [r6, #488]	; 0x1e8
 8000e14:	e79e      	b.n	8000d54 <inv_generate_fast_nomot+0x22c>
 8000e16:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 8000e1a:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
 8000e1e:	6a3a      	ldr	r2, [r7, #32]
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f4ff aeee 	bcc.w	8000c04 <inv_generate_fast_nomot+0xdc>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000e30:	f7ff fba2 	bl	8000578 <inv_fast_nomot_set_gyro_bias>
 8000e34:	e6e6      	b.n	8000c04 <inv_generate_fast_nomot+0xdc>
 8000e36:	bf00      	nop
 8000e38:	200028c0 	.word	0x200028c0
 8000e3c:	20000250 	.word	0x20000250
 8000e40:	20002a98 	.word	0x20002a98
 8000e44:	20002ab0 	.word	0x20002ab0
 8000e48:	20002a90 	.word	0x20002a90

08000e4c <inv_set_default_number_of_samples>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	2300      	movs	r3, #0
 8000e50:	1040      	asrs	r0, r0, #1
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d110      	bne.n	8000e78 <inv_set_default_number_of_samples+0x2c>
 8000e56:	3301      	adds	r3, #1
 8000e58:	4c09      	ldr	r4, [pc, #36]	; (8000e80 <inv_set_default_number_of_samples+0x34>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	6363      	str	r3, [r4, #52]	; 0x34
 8000e62:	6322      	str	r2, [r4, #48]	; 0x30
 8000e64:	f002 fcf2 	bl	800384c <__aeabi_i2f>
 8000e68:	f013 fae8 	bl	801443c <sqrtf>
 8000e6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e6e:	2319      	movs	r3, #25
 8000e70:	4093      	lsls	r3, r2
 8000e72:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e74:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000e76:	bd10      	pop	{r4, pc}
 8000e78:	f103 0301 	add.w	r3, r3, #1
 8000e7c:	dce8      	bgt.n	8000e50 <inv_set_default_number_of_samples+0x4>
 8000e7e:	e7ea      	b.n	8000e56 <inv_set_default_number_of_samples+0xa>
 8000e80:	20000250 	.word	0x20000250

08000e84 <inv_init_fast_nomot>:
 8000e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e88:	f240 58dc 	movw	r8, #1500	; 0x5dc
 8000e8c:	4d15      	ldr	r5, [pc, #84]	; (8000ee4 <inv_init_fast_nomot+0x60>)
 8000e8e:	4c16      	ldr	r4, [pc, #88]	; (8000ee8 <inv_init_fast_nomot+0x64>)
 8000e90:	4628      	mov	r0, r5
 8000e92:	2100      	movs	r1, #0
 8000e94:	f44f 7218 	mov.w	r2, #608	; 0x260
 8000e98:	f010 fe0c 	bl	8011ab4 <memset>
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f010 fe07 	bl	8011ab4 <memset>
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f7ff fa8a 	bl	80003c0 <inv_init_maxmin>
 8000eac:	490f      	ldr	r1, [pc, #60]	; (8000eec <inv_init_fast_nomot+0x68>)
 8000eae:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f04f 0e01 	mov.w	lr, #1
 8000eb8:	f04f 0900 	mov.w	r9, #0
 8000ebc:	2614      	movs	r6, #20
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	2019      	movs	r0, #25
 8000ec2:	f8c5 e1e4 	str.w	lr, [r5, #484]	; 0x1e4
 8000ec6:	e9c4 8906 	strd	r8, r9, [r4, #24]
 8000eca:	e9c4 6702 	strd	r6, r7, [r4, #8]
 8000ece:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8000ed2:	6221      	str	r1, [r4, #32]
 8000ed4:	f7ff ffba 	bl	8000e4c <inv_set_default_number_of_samples>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
 8000ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200028c0 	.word	0x200028c0
 8000ee8:	20000250 	.word	0x20000250
 8000eec:	2faf0800 	.word	0x2faf0800

08000ef0 <inv_stop_fast_nomot>:
 8000ef0:	b508      	push	{r3, lr}
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f00d f9a6 	bl	800e244 <inv_set_motion_state>
 8000ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000efc:	4801      	ldr	r0, [pc, #4]	; (8000f04 <inv_stop_fast_nomot+0x14>)
 8000efe:	f00b bc25 	b.w	800c74c <inv_unregister_data_cb>
 8000f02:	bf00      	nop
 8000f04:	08000b29 	.word	0x08000b29

08000f08 <inv_enable_fast_nomot>:
 8000f08:	b508      	push	{r3, lr}
 8000f0a:	f7ff ffbb 	bl	8000e84 <inv_init_fast_nomot>
 8000f0e:	b100      	cbz	r0, 8000f12 <inv_enable_fast_nomot+0xa>
 8000f10:	bd08      	pop	{r3, pc}
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <inv_enable_fast_nomot+0x14>)
 8000f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f18:	f00d bb84 	b.w	800e624 <inv_register_mpl_start_notification>
 8000f1c:	08000459 	.word	0x08000459

08000f20 <inv_disable_fast_nomot>:
 8000f20:	b508      	push	{r3, lr}
 8000f22:	f7ff ffe5 	bl	8000ef0 <inv_stop_fast_nomot>
 8000f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f2a:	4801      	ldr	r0, [pc, #4]	; (8000f30 <inv_disable_fast_nomot+0x10>)
 8000f2c:	f00d bb3a 	b.w	800e5a4 <inv_unregister_mpl_start_notification>
 8000f30:	08000459 	.word	0x08000459

08000f34 <inv_get_fnm_gyro_no_motion_param>:
 8000f34:	4b01      	ldr	r3, [pc, #4]	; (8000f3c <inv_get_fnm_gyro_no_motion_param+0x8>)
 8000f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f3a:	4770      	bx	lr
 8000f3c:	20002ab0 	.word	0x20002ab0

08000f40 <inv_fnm_debug_print>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <inv_start_9x_sensor_fusion>:
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <inv_start_9x_sensor_fusion+0xc>)
 8000f4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f4e:	2204      	movs	r2, #4
 8000f50:	f00b bb5e 	b.w	800c610 <inv_register_data_cb>
 8000f54:	08001539 	.word	0x08001539

08000f58 <inv_filter_correction_angle>:
 8000f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000f5e:	4688      	mov	r8, r1
 8000f60:	2c00      	cmp	r4, #0
 8000f62:	4692      	mov	sl, r2
 8000f64:	461f      	mov	r7, r3
 8000f66:	f2c0 80b9 	blt.w	80010dc <inv_filter_correction_angle+0x184>
 8000f6a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8000f6e:	f1a3 0903 	sub.w	r9, r3, #3
 8000f72:	fab9 f989 	clz	r9, r9
 8000f76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8000f7a:	486b      	ldr	r0, [pc, #428]	; (8001128 <inv_filter_correction_angle+0x1d0>)
 8000f7c:	2224      	movs	r2, #36	; 0x24
 8000f7e:	f1a0 06bc 	sub.w	r6, r0, #188	; 0xbc
 8000f82:	1d01      	adds	r1, r0, #4
 8000f84:	f010 fd7c 	bl	8011a80 <memmove>
 8000f88:	f106 04b8 	add.w	r4, r6, #184	; 0xb8
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c6 80e0 	str.w	r8, [r6, #224]	; 0xe0
 8000f92:	f106 05e0 	add.w	r5, r6, #224	; 0xe0
 8000f96:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fba2 	bl	80036e4 <__addsf3>
 8000fa0:	42ac      	cmp	r4, r5
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	d1f7      	bne.n	8000f96 <inv_filter_correction_angle+0x3e>
 8000fa6:	4961      	ldr	r1, [pc, #388]	; (800112c <inv_filter_correction_angle+0x1d4>)
 8000fa8:	f002 fd58 	bl	8003a5c <__aeabi_fdiv>
 8000fac:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4d5f      	ldr	r5, [pc, #380]	; (8001130 <inv_filter_correction_angle+0x1d8>)
 8000fb4:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 8000fb8:	dd16      	ble.n	8000fe8 <inv_filter_correction_angle+0x90>
 8000fba:	23c8      	movs	r3, #200	; 0xc8
 8000fbc:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f002 fc43 	bl	800384c <__aeabi_i2f>
 8000fc6:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4640      	mov	r0, r8
 8000fce:	db76      	blt.n	80010be <inv_filter_correction_angle+0x166>
 8000fd0:	4958      	ldr	r1, [pc, #352]	; (8001134 <inv_filter_correction_angle+0x1dc>)
 8000fd2:	f002 fd43 	bl	8003a5c <__aeabi_fdiv>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f002 fc8b 	bl	80038f4 <__aeabi_fmul>
 8000fde:	4956      	ldr	r1, [pc, #344]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 8000fe0:	f002 fd3c 	bl	8003a5c <__aeabi_fdiv>
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	e023      	b.n	8001030 <inv_filter_correction_angle+0xd8>
 8000fe8:	4854      	ldr	r0, [pc, #336]	; (800113c <inv_filter_correction_angle+0x1e4>)
 8000fea:	17fb      	asrs	r3, r7, #31
 8000fec:	fb80 2007 	smull	r2, r0, r0, r7
 8000ff0:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
 8000ff4:	eba3 23e0 	sub.w	r3, r3, r0, asr #11
 8000ff8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ffc:	eb03 0a01 	add.w	sl, r3, r1
 8001000:	f1ba 0f00 	cmp.w	sl, #0
 8001004:	f8c5 a11c 	str.w	sl, [r5, #284]	; 0x11c
 8001008:	db6b      	blt.n	80010e2 <inv_filter_correction_angle+0x18a>
 800100a:	494d      	ldr	r1, [pc, #308]	; (8001140 <inv_filter_correction_angle+0x1e8>)
 800100c:	4640      	mov	r0, r8
 800100e:	f002 fd25 	bl	8003a5c <__aeabi_fdiv>
 8001012:	4605      	mov	r5, r0
 8001014:	4638      	mov	r0, r7
 8001016:	f002 fc19 	bl	800384c <__aeabi_i2f>
 800101a:	4601      	mov	r1, r0
 800101c:	4628      	mov	r0, r5
 800101e:	f002 fc69 	bl	80038f4 <__aeabi_fmul>
 8001022:	4945      	ldr	r1, [pc, #276]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 8001024:	f002 fd1a 	bl	8003a5c <__aeabi_fdiv>
 8001028:	4605      	mov	r5, r0
 800102a:	f1ba 0f00 	cmp.w	sl, #0
 800102e:	d06b      	beq.n	8001108 <inv_filter_correction_angle+0x1b0>
 8001030:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 8001034:	b103      	cbz	r3, 8001038 <inv_filter_correction_angle+0xe0>
 8001036:	4645      	mov	r5, r8
 8001038:	4b42      	ldr	r3, [pc, #264]	; (8001144 <inv_filter_correction_angle+0x1ec>)
 800103a:	2100      	movs	r1, #0
 800103c:	429f      	cmp	r7, r3
 800103e:	bf08      	it	eq
 8001040:	4645      	moveq	r5, r8
 8001042:	4628      	mov	r0, r5
 8001044:	f002 fdea 	bl	8003c1c <__aeabi_fcmpeq>
 8001048:	2800      	cmp	r0, #0
 800104a:	d043      	beq.n	80010d4 <inv_filter_correction_angle+0x17c>
 800104c:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
 8001050:	4621      	mov	r1, r4
 8001052:	f002 fb45 	bl	80036e0 <__aeabi_fsub>
 8001056:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800105a:	f001 ffbd 	bl	8002fd8 <__aeabi_f2d>
 800105e:	a32e      	add	r3, pc, #184	; (adr r3, 8001118 <inv_filter_correction_angle+0x1c0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f002 faa0 	bl	80035a8 <__aeabi_dcmpgt>
 8001068:	b330      	cbz	r0, 80010b8 <inv_filter_correction_angle+0x160>
 800106a:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
 800106e:	2100      	movs	r1, #0
 8001070:	4c2f      	ldr	r4, [pc, #188]	; (8001130 <inv_filter_correction_angle+0x1d8>)
 8001072:	f002 fdd3 	bl	8003c1c <__aeabi_fcmpeq>
 8001076:	b1f8      	cbz	r0, 80010b8 <inv_filter_correction_angle+0x160>
 8001078:	f1b9 0f00 	cmp.w	r9, #0
 800107c:	d01c      	beq.n	80010b8 <inv_filter_correction_angle+0x160>
 800107e:	23c8      	movs	r3, #200	; 0xc8
 8001080:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8001084:	4640      	mov	r0, r8
 8001086:	f001 ffa7 	bl	8002fd8 <__aeabi_f2d>
 800108a:	2200      	movs	r2, #0
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <inv_filter_correction_angle+0x1f0>)
 800108e:	f002 f925 	bl	80032dc <__aeabi_ddiv>
 8001092:	4604      	mov	r4, r0
 8001094:	4638      	mov	r0, r7
 8001096:	460d      	mov	r5, r1
 8001098:	f001 ff8c 	bl	8002fb4 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f001 fff0 	bl	8003088 <__aeabi_dmul>
 80010a8:	a31d      	add	r3, pc, #116	; (adr r3, 8001120 <inv_filter_correction_angle+0x1c8>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f002 f915 	bl	80032dc <__aeabi_ddiv>
 80010b2:	f002 fac1 	bl	8003638 <__aeabi_d2f>
 80010b6:	4605      	mov	r5, r0
 80010b8:	4628      	mov	r0, r5
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	4923      	ldr	r1, [pc, #140]	; (800114c <inv_filter_correction_angle+0x1f4>)
 80010c0:	f002 fccc 	bl	8003a5c <__aeabi_fdiv>
 80010c4:	4629      	mov	r1, r5
 80010c6:	f002 fc15 	bl	80038f4 <__aeabi_fmul>
 80010ca:	491b      	ldr	r1, [pc, #108]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 80010cc:	f002 fcc6 	bl	8003a5c <__aeabi_fdiv>
 80010d0:	4605      	mov	r5, r0
 80010d2:	e7ad      	b.n	8001030 <inv_filter_correction_angle+0xd8>
 80010d4:	4620      	mov	r0, r4
 80010d6:	f8c6 40e8 	str.w	r4, [r6, #232]	; 0xe8
 80010da:	e7b9      	b.n	8001050 <inv_filter_correction_angle+0xf8>
 80010dc:	f04f 0900 	mov.w	r9, #0
 80010e0:	e74b      	b.n	8000f7a <inv_filter_correction_angle+0x22>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 80010e8:	4915      	ldr	r1, [pc, #84]	; (8001140 <inv_filter_correction_angle+0x1e8>)
 80010ea:	4640      	mov	r0, r8
 80010ec:	f002 fcb6 	bl	8003a5c <__aeabi_fdiv>
 80010f0:	4605      	mov	r5, r0
 80010f2:	4638      	mov	r0, r7
 80010f4:	f002 fbaa 	bl	800384c <__aeabi_i2f>
 80010f8:	4601      	mov	r1, r0
 80010fa:	4628      	mov	r0, r5
 80010fc:	f002 fbfa 	bl	80038f4 <__aeabi_fmul>
 8001100:	490d      	ldr	r1, [pc, #52]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 8001102:	f002 fcab 	bl	8003a5c <__aeabi_fdiv>
 8001106:	4605      	mov	r5, r0
 8001108:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800110c:	2b01      	cmp	r3, #1
 800110e:	bf08      	it	eq
 8001110:	2500      	moveq	r5, #0
 8001112:	e78d      	b.n	8001030 <inv_filter_correction_angle+0xd8>
 8001114:	f3af 8000 	nop.w
 8001118:	cac08312 	.word	0xcac08312
 800111c:	3fb645a1 	.word	0x3fb645a1
 8001120:	00000000 	.word	0x00000000
 8001124:	40b38800 	.word	0x40b38800
 8001128:	20002bdc 	.word	0x20002bdc
 800112c:	41200000 	.word	0x41200000
 8001130:	20002b20 	.word	0x20002b20
 8001134:	42480000 	.word	0x42480000
 8001138:	459c4000 	.word	0x459c4000
 800113c:	68db8bad 	.word	0x68db8bad
 8001140:	43c80000 	.word	0x43c80000
 8001144:	000f4240 	.word	0x000f4240
 8001148:	40790000 	.word	0x40790000
 800114c:	43480000 	.word	0x43480000

08001150 <inv_perform_9x_fusion>:
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	4ed0      	ldr	r6, [pc, #832]	; (8001498 <inv_perform_9x_fusion+0x348>)
 8001156:	b0ab      	sub	sp, #172	; 0xac
 8001158:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
 800115c:	2300      	movs	r3, #0
 800115e:	2a03      	cmp	r2, #3
 8001160:	9303      	str	r3, [sp, #12]
 8001162:	9304      	str	r3, [sp, #16]
 8001164:	9305      	str	r3, [sp, #20]
 8001166:	f000 81a9 	beq.w	80014bc <inv_perform_9x_fusion+0x36c>
 800116a:	f106 03a4 	add.w	r3, r6, #164	; 0xa4
 800116e:	461c      	mov	r4, r3
 8001170:	9000      	str	r0, [sp, #0]
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	ad09      	add	r5, sp, #36	; 0x24
 8001176:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800117a:	f002 fb67 	bl	800384c <__aeabi_i2f>
 800117e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8001182:	f002 fbb7 	bl	80038f4 <__aeabi_fmul>
 8001186:	4bc5      	ldr	r3, [pc, #788]	; (800149c <inv_perform_9x_fusion+0x34c>)
 8001188:	f845 0b04 	str.w	r0, [r5], #4
 800118c:	429c      	cmp	r4, r3
 800118e:	d1f2      	bne.n	8001176 <inv_perform_9x_fusion+0x26>
 8001190:	ad06      	add	r5, sp, #24
 8001192:	a81d      	add	r0, sp, #116	; 0x74
 8001194:	f1a3 04b4 	sub.w	r4, r3, #180	; 0xb4
 8001198:	f00d f8e4 	bl	800e364 <inv_get_6axis_quaternion>
 800119c:	4628      	mov	r0, r5
 800119e:	f00d f893 	bl	800e2c8 <inv_get_gravity>
 80011a2:	f104 010c 	add.w	r1, r4, #12
 80011a6:	223c      	movs	r2, #60	; 0x3c
 80011a8:	4620      	mov	r0, r4
 80011aa:	f010 fc69 	bl	8011a80 <memmove>
 80011ae:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80011b2:	2250      	movs	r2, #80	; 0x50
 80011b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80011b8:	f010 fc62 	bl	8011a80 <memmove>
 80011bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80011c4:	f8d6 c124 	ldr.w	ip, [r6, #292]	; 0x124
 80011c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011cc:	f10c 0e01 	add.w	lr, ip, #1
 80011d0:	f104 0598 	add.w	r5, r4, #152	; 0x98
 80011d4:	ab1d      	add	r3, sp, #116	; 0x74
 80011d6:	f1be 0f06 	cmp.w	lr, #6
 80011da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011dc:	f8c6 e124 	str.w	lr, [r6, #292]	; 0x124
 80011e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011e4:	f340 8116 	ble.w	8001414 <inv_perform_9x_fusion+0x2c4>
 80011e8:	2306      	movs	r3, #6
 80011ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80011ee:	f04f 0900 	mov.w	r9, #0
 80011f2:	9b00      	ldr	r3, [sp, #0]
 80011f4:	eb06 1c09 	add.w	ip, r6, r9, lsl #4
 80011f8:	eb09 0449 	add.w	r4, r9, r9, lsl #1
 80011fc:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 80014b4 <inv_perform_9x_fusion+0x364>
 8001200:	f10c 0848 	add.w	r8, ip, #72	; 0x48
 8001204:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001208:	f103 0ba0 	add.w	fp, r3, #160	; 0xa0
 800120c:	ad21      	add	r5, sp, #132	; 0x84
 800120e:	4641      	mov	r1, r8
 8001210:	48a3      	ldr	r0, [pc, #652]	; (80014a0 <inv_perform_9x_fusion+0x350>)
 8001212:	462a      	mov	r2, r5
 8001214:	f00c f864 	bl	800d2e0 <inv_q_mult>
 8001218:	4621      	mov	r1, r4
 800121a:	462a      	mov	r2, r5
 800121c:	4658      	mov	r0, fp
 800121e:	f00b ff5d 	bl	800d0dc <inv_compass_angle>
 8001222:	f02a 4100 	bic.w	r1, sl, #2147483648	; 0x80000000
 8001226:	4607      	mov	r7, r0
 8001228:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800122c:	f002 fd00 	bl	8003c30 <__aeabi_fcmplt>
 8001230:	f109 0901 	add.w	r9, r9, #1
 8001234:	f108 0810 	add.w	r8, r8, #16
 8001238:	340c      	adds	r4, #12
 800123a:	b100      	cbz	r0, 800123e <inv_perform_9x_fusion+0xee>
 800123c:	46ba      	mov	sl, r7
 800123e:	f1b9 0f06 	cmp.w	r9, #6
 8001242:	d1e4      	bne.n	800120e <inv_perform_9x_fusion+0xbe>
 8001244:	9f00      	ldr	r7, [sp, #0]
 8001246:	4c97      	ldr	r4, [pc, #604]	; (80014a4 <inv_perform_9x_fusion+0x354>)
 8001248:	f107 0018 	add.w	r0, r7, #24
 800124c:	f00b ffc9 	bl	800d1e2 <inv_get_gyro_sum_of_sqr>
 8001250:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
 8001254:	0982      	lsrs	r2, r0, #6
 8001256:	42a3      	cmp	r3, r4
 8001258:	bfa8      	it	ge
 800125a:	4623      	movge	r3, r4
 800125c:	4651      	mov	r1, sl
 800125e:	4638      	mov	r0, r7
 8001260:	f7ff fe7a 	bl	8000f58 <inv_filter_correction_angle>
 8001264:	f8d6 10ec 	ldr.w	r1, [r6, #236]	; 0xec
 8001268:	f002 fb44 	bl	80038f4 <__aeabi_fmul>
 800126c:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
 8001270:	a819      	add	r0, sp, #100	; 0x64
 8001272:	f00d f877 	bl	800e364 <inv_get_6axis_quaternion>
 8001276:	a819      	add	r0, sp, #100	; 0x64
 8001278:	4629      	mov	r1, r5
 800127a:	f00c fcb2 	bl	800dbe2 <inv_quaternion_to_rotation>
 800127e:	a919      	add	r1, sp, #100	; 0x64
 8001280:	4889      	ldr	r0, [pc, #548]	; (80014a8 <inv_perform_9x_fusion+0x358>)
 8001282:	aa1d      	add	r2, sp, #116	; 0x74
 8001284:	f00c f82c 	bl	800d2e0 <inv_q_mult>
 8001288:	a819      	add	r0, sp, #100	; 0x64
 800128a:	4987      	ldr	r1, [pc, #540]	; (80014a8 <inv_perform_9x_fusion+0x358>)
 800128c:	f00c f921 	bl	800d4d2 <inv_q_invert>
 8001290:	f10d 0b0c 	add.w	fp, sp, #12
 8001294:	f04f 0c00 	mov.w	ip, #0
 8001298:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 800129c:	eb05 020c 	add.w	r2, r5, ip
 80012a0:	ab1d      	add	r3, sp, #116	; 0x74
 80012a2:	2000      	movs	r0, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80012aa:	f852 7b04 	ldr.w	r7, [r2], #4
 80012ae:	4553      	cmp	r3, sl
 80012b0:	fbc4 0107 	smlal	r0, r1, r4, r7
 80012b4:	d1f7      	bne.n	80012a6 <inv_perform_9x_fusion+0x156>
 80012b6:	0f83      	lsrs	r3, r0, #30
 80012b8:	f10c 0c0c 	add.w	ip, ip, #12
 80012bc:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80012c0:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
 80012c4:	f84b 3b04 	str.w	r3, [fp], #4
 80012c8:	d1e8      	bne.n	800129c <inv_perform_9x_fusion+0x14c>
 80012ca:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 80aa 	bne.w	8001428 <inv_perform_9x_fusion+0x2d8>
 80012d4:	9c05      	ldr	r4, [sp, #20]
 80012d6:	4260      	negs	r0, r4
 80012d8:	f002 fab8 	bl	800384c <__aeabi_i2f>
 80012dc:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80012e0:	f002 fb08 	bl	80038f4 <__aeabi_fmul>
 80012e4:	4605      	mov	r5, r0
 80012e6:	f013 f815 	bl	8014314 <cosf>
 80012ea:	4682      	mov	sl, r0
 80012ec:	4628      	mov	r0, r5
 80012ee:	f013 f849 	bl	8014384 <sinf>
 80012f2:	4605      	mov	r5, r0
 80012f4:	4620      	mov	r0, r4
 80012f6:	f002 faa9 	bl	800384c <__aeabi_i2f>
 80012fa:	496c      	ldr	r1, [pc, #432]	; (80014ac <inv_perform_9x_fusion+0x35c>)
 80012fc:	f002 fbae 	bl	8003a5c <__aeabi_fdiv>
 8001300:	4607      	mov	r7, r0
 8001302:	4a6b      	ldr	r2, [pc, #428]	; (80014b0 <inv_perform_9x_fusion+0x360>)
 8001304:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
 8001308:	2400      	movs	r4, #0
 800130a:	17d8      	asrs	r0, r3, #31
 800130c:	fb82 2303 	smull	r2, r3, r2, r3
 8001310:	ebc0 20e3 	rsb	r0, r0, r3, asr #11
 8001314:	9514      	str	r5, [sp, #80]	; 0x50
 8001316:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800131a:	9412      	str	r4, [sp, #72]	; 0x48
 800131c:	9413      	str	r4, [sp, #76]	; 0x4c
 800131e:	f002 fa95 	bl	800384c <__aeabi_i2f>
 8001322:	4605      	mov	r5, r0
 8001324:	4638      	mov	r0, r7
 8001326:	4629      	mov	r1, r5
 8001328:	f002 fb98 	bl	8003a5c <__aeabi_fdiv>
 800132c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001330:	f002 fae0 	bl	80038f4 <__aeabi_fmul>
 8001334:	f002 fcba 	bl	8003cac <__aeabi_f2iz>
 8001338:	0040      	lsls	r0, r0, #1
 800133a:	f002 fa87 	bl	800384c <__aeabi_i2f>
 800133e:	495b      	ldr	r1, [pc, #364]	; (80014ac <inv_perform_9x_fusion+0x35c>)
 8001340:	f002 fad8 	bl	80038f4 <__aeabi_fmul>
 8001344:	4601      	mov	r1, r0
 8001346:	4628      	mov	r0, r5
 8001348:	f002 fad4 	bl	80038f4 <__aeabi_fmul>
 800134c:	f002 fcae 	bl	8003cac <__aeabi_f2iz>
 8001350:	f002 fa7c 	bl	800384c <__aeabi_i2f>
 8001354:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8001358:	f002 facc 	bl	80038f4 <__aeabi_fmul>
 800135c:	4605      	mov	r5, r0
 800135e:	f012 ffd9 	bl	8014314 <cosf>
 8001362:	9015      	str	r0, [sp, #84]	; 0x54
 8001364:	4628      	mov	r0, r5
 8001366:	9416      	str	r4, [sp, #88]	; 0x58
 8001368:	9417      	str	r4, [sp, #92]	; 0x5c
 800136a:	f013 f80b 	bl	8014384 <sinf>
 800136e:	ad11      	add	r5, sp, #68	; 0x44
 8001370:	9018      	str	r0, [sp, #96]	; 0x60
 8001372:	4629      	mov	r1, r5
 8001374:	aa0d      	add	r2, sp, #52	; 0x34
 8001376:	a809      	add	r0, sp, #36	; 0x24
 8001378:	f00c f901 	bl	800d57e <inv_q_multf>
 800137c:	a80d      	add	r0, sp, #52	; 0x34
 800137e:	462a      	mov	r2, r5
 8001380:	a915      	add	r1, sp, #84	; 0x54
 8001382:	f00c f8fc 	bl	800d57e <inv_q_multf>
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
 800138c:	2f00      	cmp	r7, #0
 800138e:	dd16      	ble.n	80013be <inv_perform_9x_fusion+0x26e>
 8001390:	f8df a124 	ldr.w	sl, [pc, #292]	; 80014b8 <inv_perform_9x_fusion+0x368>
 8001394:	2400      	movs	r4, #0
 8001396:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800139a:	aa09      	add	r2, sp, #36	; 0x24
 800139c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80013a0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 faa5 	bl	80038f4 <__aeabi_fmul>
 80013aa:	f002 fc7f 	bl	8003cac <__aeabi_f2iz>
 80013ae:	3401      	adds	r4, #1
 80013b0:	2c04      	cmp	r4, #4
 80013b2:	f84a 0f04 	str.w	r0, [sl, #4]!
 80013b6:	d1ee      	bne.n	8001396 <inv_perform_9x_fusion+0x246>
 80013b8:	2f03      	cmp	r7, #3
 80013ba:	f000 8085 	beq.w	80014c8 <inv_perform_9x_fusion+0x378>
 80013be:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 80013c2:	f002 fa43 	bl	800384c <__aeabi_i2f>
 80013c6:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80013ca:	f002 fa93 	bl	80038f4 <__aeabi_fmul>
 80013ce:	900d      	str	r0, [sp, #52]	; 0x34
 80013d0:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 80013d4:	f002 fa3a 	bl	800384c <__aeabi_i2f>
 80013d8:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80013dc:	f002 fa8a 	bl	80038f4 <__aeabi_fmul>
 80013e0:	900e      	str	r0, [sp, #56]	; 0x38
 80013e2:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 80013e6:	f002 fa31 	bl	800384c <__aeabi_i2f>
 80013ea:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80013ee:	f002 fa81 	bl	80038f4 <__aeabi_fmul>
 80013f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80013f4:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
 80013f8:	f002 fa28 	bl	800384c <__aeabi_i2f>
 80013fc:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8001400:	f002 fa78 	bl	80038f4 <__aeabi_fmul>
 8001404:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 8001408:	9010      	str	r0, [sp, #64]	; 0x40
 800140a:	4c23      	ldr	r4, [pc, #140]	; (8001498 <inv_perform_9x_fusion+0x348>)
 800140c:	b98b      	cbnz	r3, 8001432 <inv_perform_9x_fusion+0x2e2>
 800140e:	b02b      	add	sp, #172	; 0xac
 8001410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001414:	f1cc 0905 	rsb	r9, ip, #5
 8001418:	f1b9 0f05 	cmp.w	r9, #5
 800141c:	f77f aee9 	ble.w	80011f2 <inv_perform_9x_fusion+0xa2>
 8001420:	f8df a090 	ldr.w	sl, [pc, #144]	; 80014b4 <inv_perform_9x_fusion+0x364>
 8001424:	ad21      	add	r5, sp, #132	; 0x84
 8001426:	e70d      	b.n	8001244 <inv_perform_9x_fusion+0xf4>
 8001428:	2700      	movs	r7, #0
 800142a:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 800142e:	463d      	mov	r5, r7
 8001430:	e767      	b.n	8001302 <inv_perform_9x_fusion+0x1b2>
 8001432:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001436:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800143a:	f002 fa5b 	bl	80038f4 <__aeabi_fmul>
 800143e:	4605      	mov	r5, r0
 8001440:	f012 ff68 	bl	8014314 <cosf>
 8001444:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001448:	f002 fa54 	bl	80038f4 <__aeabi_fmul>
 800144c:	f002 fc2e 	bl	8003cac <__aeabi_f2iz>
 8001450:	2300      	movs	r3, #0
 8001452:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8001456:	4628      	mov	r0, r5
 8001458:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800145c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8001460:	f012 ff90 	bl	8014384 <sinf>
 8001464:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001468:	f002 fa44 	bl	80038f4 <__aeabi_fmul>
 800146c:	f002 fc1e 	bl	8003cac <__aeabi_f2iz>
 8001470:	9b00      	ldr	r3, [sp, #0]
 8001472:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001476:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 800147a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800147e:	f00c fe93 	bl	800e1a8 <inv_set_compass_correction>
 8001482:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <inv_perform_9x_fusion+0x348>)
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0c0      	beq.n	800140e <inv_perform_9x_fusion+0x2be>
 800148c:	3b01      	subs	r3, #1
 800148e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
 8001492:	b02b      	add	sp, #172	; 0xac
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001498:	20002b20 	.word	0x20002b20
 800149c:	20002bd4 	.word	0x20002bd4
 80014a0:	20002bc8 	.word	0x20002bc8
 80014a4:	000f4240 	.word	0x000f4240
 80014a8:	20002c1c 	.word	0x20002c1c
 80014ac:	473702e1 	.word	0x473702e1
 80014b0:	68db8bad 	.word	0x68db8bad
 80014b4:	49742400 	.word	0x49742400
 80014b8:	20002bc4 	.word	0x20002bc4
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
 80014c2:	b02b      	add	sp, #172	; 0xac
 80014c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014c8:	f000 fec6 	bl	8002258 <inv_get_magnetic_disturbance_state>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	f47f af76 	bne.w	80013be <inv_perform_9x_fusion+0x26e>
 80014d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014d6:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
 80014da:	f002 fa0b 	bl	80038f4 <__aeabi_fmul>
 80014de:	4604      	mov	r4, r0
 80014e0:	f012 ff18 	bl	8014314 <cosf>
 80014e4:	2300      	movs	r3, #0
 80014e6:	9015      	str	r0, [sp, #84]	; 0x54
 80014e8:	4620      	mov	r0, r4
 80014ea:	9316      	str	r3, [sp, #88]	; 0x58
 80014ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80014ee:	f012 ff49 	bl	8014384 <sinf>
 80014f2:	a915      	add	r1, sp, #84	; 0x54
 80014f4:	9018      	str	r0, [sp, #96]	; 0x60
 80014f6:	462a      	mov	r2, r5
 80014f8:	a809      	add	r0, sp, #36	; 0x24
 80014fa:	f00c f840 	bl	800d57e <inv_q_multf>
 80014fe:	4628      	mov	r0, r5
 8001500:	f00c f987 	bl	800d812 <inv_q_normalizef>
 8001504:	9c01      	ldr	r4, [sp, #4]
 8001506:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 800150a:	f855 0b04 	ldr.w	r0, [r5], #4
 800150e:	f002 f9f1 	bl	80038f4 <__aeabi_fmul>
 8001512:	f002 fbcb 	bl	8003cac <__aeabi_f2iz>
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <inv_perform_9x_fusion+0x3e0>)
 8001518:	f844 0f04 	str.w	r0, [r4, #4]!
 800151c:	429c      	cmp	r4, r3
 800151e:	d1f2      	bne.n	8001506 <inv_perform_9x_fusion+0x3b6>
 8001520:	9b00      	ldr	r3, [sp, #0]
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <inv_perform_9x_fusion+0x3e4>)
 8001524:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001528:	f00c fe3e 	bl	800e1a8 <inv_set_compass_correction>
 800152c:	e7a9      	b.n	8001482 <inv_perform_9x_fusion+0x332>
 800152e:	bf00      	nop
 8001530:	20002bd4 	.word	0x20002bd4
 8001534:	20002bc8 	.word	0x20002bc8

08001538 <inv_process_9x_sensor_fusion_cb>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <inv_process_9x_sensor_fusion_cb+0x90>)
 8001540:	f013 0310 	ands.w	r3, r3, #16
 8001544:	bf08      	it	eq
 8001546:	f8c2 3124 	streq.w	r3, [r2, #292]	; 0x124
 800154a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800154e:	bf04      	itt	eq
 8001550:	2103      	moveq	r1, #3
 8001552:	f8c2 1120 	streq.w	r1, [r2, #288]	; 0x120
 8001556:	05dc      	lsls	r4, r3, #23
 8001558:	d405      	bmi.n	8001566 <inv_process_9x_sensor_fusion_cb+0x2e>
 800155a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800155c:	05d9      	lsls	r1, r3, #23
 800155e:	d527      	bpl.n	80015b0 <inv_process_9x_sensor_fusion_cb+0x78>
 8001560:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	d524      	bpl.n	80015b0 <inv_process_9x_sensor_fusion_cb+0x78>
 8001566:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <inv_process_9x_sensor_fusion_cb+0x90>)
 800156c:	b173      	cbz	r3, 800158c <inv_process_9x_sensor_fusion_cb+0x54>
 800156e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8001572:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
 8001576:	4915      	ldr	r1, [pc, #84]	; (80015cc <inv_process_9x_sensor_fusion_cb+0x94>)
 8001578:	1b1b      	subs	r3, r3, r4
 800157a:	fba1 1303 	umull	r1, r3, r1, r3
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8001584:	f7ff fde4 	bl	8001150 <inv_perform_9x_fusion>
 8001588:	2000      	movs	r0, #0
 800158a:	bd38      	pop	{r3, r4, r5, pc}
 800158c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8001590:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8001594:	42a9      	cmp	r1, r5
 8001596:	dc13      	bgt.n	80015c0 <inv_process_9x_sensor_fusion_cb+0x88>
 8001598:	f8d2 412c 	ldr.w	r4, [r2, #300]	; 0x12c
 800159c:	4421      	add	r1, r4
 800159e:	42a9      	cmp	r1, r5
 80015a0:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
 80015a4:	ddf0      	ble.n	8001588 <inv_process_9x_sensor_fusion_cb+0x50>
 80015a6:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 80015aa:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
 80015ae:	e7e9      	b.n	8001584 <inv_process_9x_sensor_fusion_cb+0x4c>
 80015b0:	2103      	movs	r1, #3
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 80015b8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 80015bc:	2000      	movs	r0, #0
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 80015c4:	e7de      	b.n	8001584 <inv_process_9x_sensor_fusion_cb+0x4c>
 80015c6:	bf00      	nop
 80015c8:	20002b20 	.word	0x20002b20
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <inv_init_9x_fusion>:
 80015d0:	b510      	push	{r4, lr}
 80015d2:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <inv_init_9x_fusion+0x38>)
 80015d4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80015d8:	2100      	movs	r1, #0
 80015da:	4620      	mov	r0, r4
 80015dc:	f010 fa6a 	bl	8011ab4 <memset>
 80015e0:	4620      	mov	r0, r4
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e6:	f840 3fa8 	str.w	r3, [r0, #168]!
 80015ea:	2100      	movs	r1, #0
 80015ec:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 80015f0:	f00c fdda 	bl	800e1a8 <inv_set_compass_correction>
 80015f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015fc:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8001600:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	20002b20 	.word	0x20002b20

0800160c <inv_9x_fusion_set_mag_fb>:
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <inv_9x_fusion_set_mag_fb+0xc>)
 800160e:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
 8001612:	2000      	movs	r0, #0
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20002b20 	.word	0x20002b20

0800161c <inv_9x_fusion_enable_jitter_reduction>:
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <inv_9x_fusion_enable_jitter_reduction+0xc>)
 800161e:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
 8001622:	2000      	movs	r0, #0
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20002b20 	.word	0x20002b20

0800162c <inv_9x_fusion_use_timestamps>:
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <inv_9x_fusion_use_timestamps+0xc>)
 800162e:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8001632:	2000      	movs	r0, #0
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20002b20 	.word	0x20002b20

0800163c <inv_stop_9x_sensor_fusion>:
 800163c:	4801      	ldr	r0, [pc, #4]	; (8001644 <inv_stop_9x_sensor_fusion+0x8>)
 800163e:	f00b b885 	b.w	800c74c <inv_unregister_data_cb>
 8001642:	bf00      	nop
 8001644:	08001539 	.word	0x08001539

08001648 <inv_enable_9x_sensor_fusion>:
 8001648:	b508      	push	{r3, lr}
 800164a:	f7ff ffc1 	bl	80015d0 <inv_init_9x_fusion>
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <inv_enable_9x_sensor_fusion+0x1c>)
 8001650:	2200      	movs	r2, #0
 8001652:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8001656:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800165a:	4803      	ldr	r0, [pc, #12]	; (8001668 <inv_enable_9x_sensor_fusion+0x20>)
 800165c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001660:	f00c bfe0 	b.w	800e624 <inv_register_mpl_start_notification>
 8001664:	20002b20 	.word	0x20002b20
 8001668:	08000f49 	.word	0x08000f49

0800166c <inv_disable_9x_sensor_fusion>:
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <inv_disable_9x_sensor_fusion+0x8>)
 800166e:	f00c bf99 	b.w	800e5a4 <inv_unregister_mpl_start_notification>
 8001672:	bf00      	nop
 8001674:	08000f49 	.word	0x08000f49

08001678 <inv_start_gyro_tc>:
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <inv_start_gyro_tc+0xc>)
 800167a:	2196      	movs	r1, #150	; 0x96
 800167c:	2208      	movs	r2, #8
 800167e:	f00a bfc7 	b.w	800c610 <inv_register_data_cb>
 8001682:	bf00      	nop
 8001684:	08001689 	.word	0x08001689

08001688 <inv_gtc_data_cb>:
 8001688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800168c:	b0af      	sub	sp, #188	; 0xbc
 800168e:	a91d      	add	r1, sp, #116	; 0x74
 8001690:	4604      	mov	r4, r0
 8001692:	a81f      	add	r0, sp, #124	; 0x7c
 8001694:	f00a fe98 	bl	800c3c8 <inv_get_gyro_bias>
 8001698:	a81e      	add	r0, sp, #120	; 0x78
 800169a:	f00c fdc1 	bl	800e220 <inv_get_motion_state>
 800169e:	2802      	cmp	r0, #2
 80016a0:	d00d      	beq.n	80016be <inv_gtc_data_cb+0x36>
 80016a2:	4996      	ldr	r1, [pc, #600]	; (80018fc <inv_gtc_data_cb+0x274>)
 80016a4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80016a8:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
 80016ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80016ae:	b110      	cbz	r0, 80016b6 <inv_gtc_data_cb+0x2e>
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	f040 80fa 	bne.w	80018aa <inv_gtc_data_cb+0x222>
 80016b6:	2000      	movs	r0, #0
 80016b8:	b02f      	add	sp, #188	; 0xbc
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d1f8      	bne.n	80016b6 <inv_gtc_data_cb+0x2e>
 80016c4:	f00a fe68 	bl	800c398 <inv_get_gyro_bias_tc_set>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d0f4      	beq.n	80016b6 <inv_gtc_data_cb+0x2e>
 80016cc:	4f8b      	ldr	r7, [pc, #556]	; (80018fc <inv_gtc_data_cb+0x274>)
 80016ce:	4c8c      	ldr	r4, [pc, #560]	; (8001900 <inv_gtc_data_cb+0x278>)
 80016d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016d4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80016d8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	fb84 1403 	smull	r1, r4, r4, r3
 80016e0:	17db      	asrs	r3, r3, #31
 80016e2:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 80016e6:	1aaa      	subs	r2, r5, r2
 80016e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ec:	b2dc      	uxtb	r4, r3
 80016ee:	2c04      	cmp	r4, #4
 80016f0:	d8e1      	bhi.n	80016b6 <inv_gtc_data_cb+0x2e>
 80016f2:	2654      	movs	r6, #84	; 0x54
 80016f4:	fb06 f604 	mul.w	r6, r6, r4
 80016f8:	eb07 0c06 	add.w	ip, r7, r6
 80016fc:	f89c 3050 	ldrb.w	r3, [ip, #80]	; 0x50
 8001700:	2b05      	cmp	r3, #5
 8001702:	f000 819b 	beq.w	8001a3c <inv_gtc_data_cb+0x3b4>
 8001706:	4619      	mov	r1, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f88c 3050 	strb.w	r3, [ip, #80]	; 0x50
 800170e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001712:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001716:	1862      	adds	r2, r4, r1
 8001718:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800171a:	eb07 0682 	add.w	r6, r7, r2, lsl #2
 800171e:	f102 000a 	add.w	r0, r2, #10
 8001722:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
 8001726:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001728:	f897 e1c0 	ldrb.w	lr, [r7, #448]	; 0x1c0
 800172c:	6172      	str	r2, [r6, #20]
 800172e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001730:	2300      	movs	r3, #0
 8001732:	f1be 0f01 	cmp.w	lr, #1
 8001736:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
 800173a:	63f5      	str	r5, [r6, #60]	; 0x3c
 800173c:	9322      	str	r3, [sp, #136]	; 0x88
 800173e:	9323      	str	r3, [sp, #140]	; 0x8c
 8001740:	9324      	str	r3, [sp, #144]	; 0x90
 8001742:	9325      	str	r3, [sp, #148]	; 0x94
 8001744:	9326      	str	r3, [sp, #152]	; 0x98
 8001746:	9327      	str	r3, [sp, #156]	; 0x9c
 8001748:	9328      	str	r3, [sp, #160]	; 0xa0
 800174a:	9329      	str	r3, [sp, #164]	; 0xa4
 800174c:	932a      	str	r3, [sp, #168]	; 0xa8
 800174e:	932b      	str	r3, [sp, #172]	; 0xac
 8001750:	932c      	str	r3, [sp, #176]	; 0xb0
 8001752:	932d      	str	r3, [sp, #180]	; 0xb4
 8001754:	4a69      	ldr	r2, [pc, #420]	; (80018fc <inv_gtc_data_cb+0x274>)
 8001756:	d1ae      	bne.n	80016b6 <inv_gtc_data_cb+0x2e>
 8001758:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800175c:	4694      	mov	ip, r2
 800175e:	469e      	mov	lr, r3
 8001760:	9317      	str	r3, [sp, #92]	; 0x5c
 8001762:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
 8001766:	46e1      	mov	r9, ip
 8001768:	469c      	mov	ip, r3
 800176a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800176e:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8001772:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001776:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800177a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800177e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8001782:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001786:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800178a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800178e:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8001792:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001796:	2000      	movs	r0, #0
 8001798:	2100      	movs	r1, #0
 800179a:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800179e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80017a2:	9216      	str	r2, [sp, #88]	; 0x58
 80017a4:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a8:	9719      	str	r7, [sp, #100]	; 0x64
 80017aa:	f899 e050 	ldrb.w	lr, [r9, #80]	; 0x50
 80017ae:	f1be 0f00 	cmp.w	lr, #0
 80017b2:	f000 80ae 	beq.w	8001912 <inv_gtc_data_cb+0x28a>
 80017b6:	464a      	mov	r2, r9
 80017b8:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80017bc:	f04f 0800 	mov.w	r8, #0
 80017c0:	46f1      	mov	r9, lr
 80017c2:	e00b      	b.n	80017dc <inv_gtc_data_cb+0x154>
 80017c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80017c6:	4299      	cmp	r1, r3
 80017c8:	bfb8      	it	lt
 80017ca:	4619      	movlt	r1, r3
 80017cc:	9116      	str	r1, [sp, #88]	; 0x58
 80017ce:	f108 0801 	add.w	r8, r8, #1
 80017d2:	45c8      	cmp	r8, r9
 80017d4:	f102 0204 	add.w	r2, r2, #4
 80017d8:	f000 8094 	beq.w	8001904 <inv_gtc_data_cb+0x27c>
 80017dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80017de:	6811      	ldr	r1, [r2, #0]
 80017e0:	f8d2 e028 	ldr.w	lr, [r2, #40]	; 0x28
 80017e4:	fb81 4503 	smull	r4, r5, r1, r3
 80017e8:	6951      	ldr	r1, [r2, #20]
 80017ea:	0c26      	lsrs	r6, r4, #16
 80017ec:	fb81 0103 	smull	r0, r1, r1, r3
 80017f0:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 80017f4:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 80017f8:	ea4f 4b21 	mov.w	fp, r1, asr #16
 80017fc:	fb8e 0103 	smull	r0, r1, lr, r3
 8001800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001804:	0c01      	lsrs	r1, r0, #16
 8001806:	9100      	str	r1, [sp, #0]
 8001808:	fb83 0103 	smull	r0, r1, r3, r3
 800180c:	0c04      	lsrs	r4, r0, #16
 800180e:	9402      	str	r4, [sp, #8]
 8001810:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8001814:	9c00      	ldr	r4, [sp, #0]
 8001816:	142f      	asrs	r7, r5, #16
 8001818:	9d05      	ldr	r5, [sp, #20]
 800181a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800181e:	9400      	str	r4, [sp, #0]
 8001820:	9c02      	ldr	r4, [sp, #8]
 8001822:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001826:	1409      	asrs	r1, r1, #16
 8001828:	9103      	str	r1, [sp, #12]
 800182a:	6811      	ldr	r1, [r2, #0]
 800182c:	9402      	str	r4, [sp, #8]
 800182e:	142c      	asrs	r4, r5, #16
 8001830:	9401      	str	r4, [sp, #4]
 8001832:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8001836:	1864      	adds	r4, r4, r1
 8001838:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 800183c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800183e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001842:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8001846:	4419      	add	r1, r3
 8001848:	9113      	str	r1, [sp, #76]	; 0x4c
 800184a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800184e:	1980      	adds	r0, r0, r6
 8001850:	4179      	adcs	r1, r7
 8001852:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001856:	6951      	ldr	r1, [r2, #20]
 8001858:	1864      	adds	r4, r4, r1
 800185a:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 800185e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001862:	eb10 000a 	adds.w	r0, r0, sl
 8001866:	eb41 010b 	adc.w	r1, r1, fp
 800186a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800186e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001872:	eb10 000e 	adds.w	r0, r0, lr
 8001876:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
 800187a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800187e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8001882:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800188a:	1900      	adds	r0, r0, r4
 800188c:	4169      	adcs	r1, r5
 800188e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001892:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8001896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800189a:	1900      	adds	r0, r0, r4
 800189c:	4169      	adcs	r1, r5
 800189e:	4563      	cmp	r3, ip
 80018a0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80018a4:	da8e      	bge.n	80017c4 <inv_gtc_data_cb+0x13c>
 80018a6:	469c      	mov	ip, r3
 80018a8:	e791      	b.n	80017ce <inv_gtc_data_cb+0x146>
 80018aa:	f8d1 41a4 	ldr.w	r4, [r1, #420]	; 0x1a4
 80018ae:	f8d1 21ac 	ldr.w	r2, [r1, #428]	; 0x1ac
 80018b2:	f8d1 01a8 	ldr.w	r0, [r1, #424]	; 0x1a8
 80018b6:	fb83 8904 	smull	r8, r9, r3, r4
 80018ba:	fb83 0100 	smull	r0, r1, r3, r0
 80018be:	fb83 ab02 	smull	sl, fp, r3, r2
 80018c2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80018c4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80018c6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80018c8:	ea4f 4c18 	mov.w	ip, r8, lsr #16
 80018cc:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 80018d0:	ea4f 421a 	mov.w	r2, sl, lsr #16
 80018d4:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 80018d8:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80018dc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80018e0:	a81f      	add	r0, sp, #124	; 0x7c
 80018e2:	4464      	add	r4, ip
 80018e4:	4476      	add	r6, lr
 80018e6:	443a      	add	r2, r7
 80018e8:	2103      	movs	r1, #3
 80018ea:	941f      	str	r4, [sp, #124]	; 0x7c
 80018ec:	9620      	str	r6, [sp, #128]	; 0x80
 80018ee:	9221      	str	r2, [sp, #132]	; 0x84
 80018f0:	f00a fd0e 	bl	800c310 <inv_set_gyro_bias>
 80018f4:	2000      	movs	r0, #0
 80018f6:	b02f      	add	sp, #188	; 0xbc
 80018f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018fc:	20000290 	.word	0x20000290
 8001900:	66666667 	.word	0x66666667
 8001904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001906:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800190a:	4498      	add	r8, r3
 800190c:	f008 03ff 	and.w	r3, r8, #255	; 0xff
 8001910:	9317      	str	r3, [sp, #92]	; 0x5c
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <inv_gtc_data_cb+0x3fc>)
 8001914:	f109 0954 	add.w	r9, r9, #84	; 0x54
 8001918:	4599      	cmp	r9, r3
 800191a:	f47f af46 	bne.w	80017aa <inv_gtc_data_cb+0x122>
 800191e:	4661      	mov	r1, ip
 8001920:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8001922:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001924:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001928:	1a52      	subs	r2, r2, r1
 800192a:	429a      	cmp	r2, r3
 800192c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8001930:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8001934:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 8001938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800193c:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 8001940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001944:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8001948:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800194c:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8001950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001954:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 8001958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800195c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
 8001960:	f6ff aea9 	blt.w	80016b6 <inv_gtc_data_cb+0x2e>
 8001964:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8001968:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800196a:	f507 79d2 	add.w	r9, r7, #420	; 0x1a4
 800196e:	fba0 2306 	umull	r2, r3, r0, r6
 8001972:	461d      	mov	r5, r3
 8001974:	4614      	mov	r4, r2
 8001976:	fb8e 230e 	smull	r2, r3, lr, lr
 800197a:	fb06 5101 	mla	r1, r6, r1, r5
 800197e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8001982:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001986:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800198a:	9105      	str	r1, [sp, #20]
 800198c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8001990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001994:	ebb2 020a 	subs.w	r2, r2, sl
 8001998:	eb63 030b 	sbc.w	r3, r3, fp
 800199c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80019a0:	4672      	mov	r2, lr
 80019a2:	17d3      	asrs	r3, r2, #31
 80019a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80019a8:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80019ac:	ac28      	add	r4, sp, #160	; 0xa0
 80019ae:	ad22      	add	r5, sp, #136	; 0x88
 80019b0:	f8cd 9000 	str.w	r9, [sp]
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	6861      	ldr	r1, [r4, #4]
 80019b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80019c2:	4599      	cmp	r9, r3
 80019c4:	bf08      	it	eq
 80019c6:	4590      	cmpeq	r8, r2
 80019c8:	9106      	str	r1, [sp, #24]
 80019ca:	6828      	ldr	r0, [r5, #0]
 80019cc:	6869      	ldr	r1, [r5, #4]
 80019ce:	f104 0408 	add.w	r4, r4, #8
 80019d2:	f105 0508 	add.w	r5, r5, #8
 80019d6:	d027      	beq.n	8001a28 <inv_gtc_data_cb+0x3a0>
 80019d8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80019dc:	9a02      	ldr	r2, [sp, #8]
 80019de:	fb00 fc09 	mul.w	ip, r0, r9
 80019e2:	2300      	movs	r3, #0
 80019e4:	fb02 fe03 	mul.w	lr, r2, r3
 80019e8:	fb01 cc08 	mla	ip, r1, r8, ip
 80019ec:	9a06      	ldr	r2, [sp, #24]
 80019ee:	fba0 0108 	umull	r0, r1, r0, r8
 80019f2:	9b02      	ldr	r3, [sp, #8]
 80019f4:	fb02 ee06 	mla	lr, r2, r6, lr
 80019f8:	fba3 2306 	umull	r2, r3, r3, r6
 80019fc:	4461      	add	r1, ip
 80019fe:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 8001a02:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 8001a06:	ebb2 020a 	subs.w	r2, r2, sl
 8001a0a:	ea4f 4b21 	mov.w	fp, r1, asr #16
 8001a0e:	4473      	add	r3, lr
 8001a10:	eb63 030b 	sbc.w	r3, r3, fp
 8001a14:	0419      	lsls	r1, r3, #16
 8001a16:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001a1a:	0410      	lsls	r0, r2, #16
 8001a1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001a20:	f002 f98a 	bl	8003d38 <__aeabi_ldivmod>
 8001a24:	9b00      	ldr	r3, [sp, #0]
 8001a26:	6018      	str	r0, [r3, #0]
 8001a28:	9b00      	ldr	r3, [sp, #0]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	ab2e      	add	r3, sp, #184	; 0xb8
 8001a30:	429c      	cmp	r4, r3
 8001a32:	d1bf      	bne.n	80019b4 <inv_gtc_data_cb+0x32c>
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 8001a3a:	e63c      	b.n	80016b6 <inv_gtc_data_cb+0x2e>
 8001a3c:	19b8      	adds	r0, r7, r6
 8001a3e:	4601      	mov	r1, r0
 8001a40:	2210      	movs	r2, #16
 8001a42:	3140      	adds	r1, #64	; 0x40
 8001a44:	303c      	adds	r0, #60	; 0x3c
 8001a46:	f8cd c010 	str.w	ip, [sp, #16]
 8001a4a:	f010 f819 	bl	8011a80 <memmove>
 8001a4e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001a52:	1d31      	adds	r1, r6, #4
 8001a54:	4660      	mov	r0, ip
 8001a56:	4439      	add	r1, r7
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f010 f811 	bl	8011a80 <memmove>
 8001a5e:	19b8      	adds	r0, r7, r6
 8001a60:	4601      	mov	r1, r0
 8001a62:	2210      	movs	r2, #16
 8001a64:	3118      	adds	r1, #24
 8001a66:	3014      	adds	r0, #20
 8001a68:	f010 f80a 	bl	8011a80 <memmove>
 8001a6c:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8001a70:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 8001a74:	4439      	add	r1, r7
 8001a76:	4438      	add	r0, r7
 8001a78:	2210      	movs	r2, #16
 8001a7a:	f010 f801 	bl	8011a80 <memmove>
 8001a7e:	2104      	movs	r1, #4
 8001a80:	e645      	b.n	800170e <inv_gtc_data_cb+0x86>
 8001a82:	bf00      	nop
 8001a84:	20000434 	.word	0x20000434

08001a88 <inv_gtc_store>:
 8001a88:	b470      	push	{r4, r5, r6}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	466c      	mov	r4, sp
 8001a90:	4e09      	ldr	r6, [pc, #36]	; (8001ab8 <inv_gtc_store+0x30>)
 8001a92:	f506 72d2 	add.w	r2, r6, #420	; 0x1a4
 8001a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001a9c:	f896 31b0 	ldrb.w	r3, [r6, #432]	; 0x1b0
 8001aa0:	f88d 300c 	strb.w	r3, [sp, #12]
 8001aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa6:	6028      	str	r0, [r5, #0]
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	6069      	str	r1, [r5, #4]
 8001aac:	60aa      	str	r2, [r5, #8]
 8001aae:	60eb      	str	r3, [r5, #12]
 8001ab0:	b005      	add	sp, #20
 8001ab2:	bc70      	pop	{r4, r5, r6}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000290 	.word	0x20000290

08001abc <inv_gtc_load>:
 8001abc:	b470      	push	{r4, r5, r6}
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	466c      	mov	r4, sp
 8001ac4:	6800      	ldr	r0, [r0, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4e06      	ldr	r6, [pc, #24]	; (8001ae8 <inv_gtc_load+0x2c>)
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8001ad4:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
 8001ad8:	f886 41b0 	strb.w	r4, [r6, #432]	; 0x1b0
 8001adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	b005      	add	sp, #20
 8001ae4:	bc70      	pop	{r4, r5, r6}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000290 	.word	0x20000290

08001aec <inv_init_gyro_ts>:
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <inv_init_gyro_ts+0x30>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	4620      	mov	r0, r4
 8001af4:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001af8:	f00f ffdc 	bl	8011ab4 <memset>
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <inv_init_gyro_ts+0x34>)
 8001afe:	2301      	movs	r3, #1
 8001b00:	f44f 01aa 	mov.w	r1, #5570560	; 0x550000
 8001b04:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001b08:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
 8001b0c:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
 8001b10:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
 8001b14:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
 8001b18:	2000      	movs	r0, #0
 8001b1a:	bd10      	pop	{r4, pc}
 8001b1c:	20000290 	.word	0x20000290
 8001b20:	ffd80000 	.word	0xffd80000

08001b24 <inv_set_gtc_max_temp>:
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <inv_set_gtc_max_temp+0xc>)
 8001b26:	f8c3 01b8 	str.w	r0, [r3, #440]	; 0x1b8
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000290 	.word	0x20000290

08001b34 <inv_set_gtc_min_temp>:
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <inv_set_gtc_min_temp+0xc>)
 8001b36:	f8c3 01b4 	str.w	r0, [r3, #436]	; 0x1b4
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000290 	.word	0x20000290

08001b44 <inv_set_gtc_min_diff>:
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <inv_set_gtc_min_diff+0xc>)
 8001b46:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000290 	.word	0x20000290

08001b54 <inv_get_gyro_ts>:
 8001b54:	4603      	mov	r3, r0
 8001b56:	b158      	cbz	r0, 8001b70 <inv_get_gyro_ts+0x1c>
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <inv_get_gyro_ts+0x20>)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f8d2 11a4 	ldr.w	r1, [r2, #420]	; 0x1a4
 8001b60:	6019      	str	r1, [r3, #0]
 8001b62:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
 8001b66:	6059      	str	r1, [r3, #4]
 8001b68:	f8d2 21ac 	ldr.w	r2, [r2, #428]	; 0x1ac
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	4770      	bx	lr
 8001b70:	2016      	movs	r0, #22
 8001b72:	4770      	bx	lr
 8001b74:	20000290 	.word	0x20000290

08001b78 <inv_set_gyro_ts>:
 8001b78:	2024      	movs	r0, #36	; 0x24
 8001b7a:	4770      	bx	lr

08001b7c <inv_set_gtc_order>:
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b908      	cbnz	r0, 8001b84 <inv_set_gtc_order+0x8>
 8001b80:	2024      	movs	r0, #36	; 0x24
 8001b82:	4770      	bx	lr
 8001b84:	4a02      	ldr	r2, [pc, #8]	; (8001b90 <inv_set_gtc_order+0x14>)
 8001b86:	2000      	movs	r0, #0
 8001b88:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000290 	.word	0x20000290

08001b94 <inv_print_gtc_data>:
 8001b94:	2000      	movs	r0, #0
 8001b96:	4770      	bx	lr

08001b98 <inv_stop_gyro_tc>:
 8001b98:	4801      	ldr	r0, [pc, #4]	; (8001ba0 <inv_stop_gyro_tc+0x8>)
 8001b9a:	f00a bdd7 	b.w	800c74c <inv_unregister_data_cb>
 8001b9e:	bf00      	nop
 8001ba0:	08001689 	.word	0x08001689

08001ba4 <inv_enable_gyro_tc>:
 8001ba4:	b508      	push	{r3, lr}
 8001ba6:	f7ff ffa1 	bl	8001aec <inv_init_gyro_ts>
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <inv_enable_gyro_tc+0x30>)
 8001bac:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <inv_enable_gyro_tc+0x34>)
 8001bae:	2210      	movs	r2, #16
 8001bb0:	f44f 739a 	mov.w	r3, #308	; 0x134
 8001bb4:	f00c fd8a 	bl	800e6cc <inv_register_load_store>
 8001bb8:	b108      	cbz	r0, 8001bbe <inv_enable_gyro_tc+0x1a>
 8001bba:	2001      	movs	r0, #1
 8001bbc:	bd08      	pop	{r3, pc}
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <inv_enable_gyro_tc+0x38>)
 8001bc0:	f00c fd30 	bl	800e624 <inv_register_mpl_start_notification>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d1f8      	bne.n	8001bba <inv_enable_gyro_tc+0x16>
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <inv_enable_gyro_tc+0x3c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001bd0:	bd08      	pop	{r3, pc}
 8001bd2:	bf00      	nop
 8001bd4:	08001abd 	.word	0x08001abd
 8001bd8:	08001a89 	.word	0x08001a89
 8001bdc:	08001679 	.word	0x08001679
 8001be0:	20000290 	.word	0x20000290

08001be4 <inv_disable_gyro_tc>:
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4c08      	ldr	r4, [pc, #32]	; (8001c08 <inv_disable_gyro_tc+0x24>)
 8001be8:	f894 01b1 	ldrb.w	r0, [r4, #433]	; 0x1b1
 8001bec:	b900      	cbnz	r0, 8001bf0 <inv_disable_gyro_tc+0xc>
 8001bee:	bd10      	pop	{r4, pc}
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <inv_disable_gyro_tc+0x28>)
 8001bf2:	f00a fdab 	bl	800c74c <inv_unregister_data_cb>
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <inv_disable_gyro_tc+0x2c>)
 8001bf8:	f00c fcd4 	bl	800e5a4 <inv_unregister_mpl_start_notification>
 8001bfc:	b910      	cbnz	r0, 8001c04 <inv_disable_gyro_tc+0x20>
 8001bfe:	f884 01b1 	strb.w	r0, [r4, #433]	; 0x1b1
 8001c02:	bd10      	pop	{r4, pc}
 8001c04:	2001      	movs	r0, #1
 8001c06:	bd10      	pop	{r4, pc}
 8001c08:	20000290 	.word	0x20000290
 8001c0c:	08001689 	.word	0x08001689
 8001c10:	08001679 	.word	0x08001679

08001c14 <inv_start_magnetic_disturbance>:
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <inv_start_magnetic_disturbance+0xc>)
 8001c16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	f00a bcf8 	b.w	800c610 <inv_register_data_cb>
 8001c20:	08002221 	.word	0x08002221

08001c24 <inv_set_magnetic_disturbance>:
 8001c24:	2800      	cmp	r0, #0
 8001c26:	dd05      	ble.n	8001c34 <inv_set_magnetic_disturbance+0x10>
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <inv_set_magnetic_disturbance+0x14>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8001c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr
 8001c38:	20000454 	.word	0x20000454

08001c3c <inv_init_magnetic_disturbance>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	4c0c      	ldr	r4, [pc, #48]	; (8001c70 <inv_init_magnetic_disturbance+0x34>)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4620      	mov	r0, r4
 8001c44:	22b8      	movs	r2, #184	; 0xb8
 8001c46:	f00f ff35 	bl	8011ab4 <memset>
 8001c4a:	4f0a      	ldr	r7, [pc, #40]	; (8001c74 <inv_init_magnetic_disturbance+0x38>)
 8001c4c:	4e0a      	ldr	r6, [pc, #40]	; (8001c78 <inv_init_magnetic_disturbance+0x3c>)
 8001c4e:	4d0b      	ldr	r5, [pc, #44]	; (8001c7c <inv_init_magnetic_disturbance+0x40>)
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <inv_init_magnetic_disturbance+0x44>)
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <inv_init_magnetic_disturbance+0x48>)
 8001c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c5c:	6060      	str	r0, [r4, #4]
 8001c5e:	60e7      	str	r7, [r4, #12]
 8001c60:	60a6      	str	r6, [r4, #8]
 8001c62:	6025      	str	r5, [r4, #0]
 8001c64:	6661      	str	r1, [r4, #100]	; 0x64
 8001c66:	67e2      	str	r2, [r4, #124]	; 0x7c
 8001c68:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c70:	20000454 	.word	0x20000454
 8001c74:	42b40000 	.word	0x42b40000
 8001c78:	c2b40000 	.word	0xc2b40000
 8001c7c:	42700000 	.word	0x42700000
 8001c80:	41f00000 	.word	0x41f00000
 8001c84:	3e2e147b 	.word	0x3e2e147b

08001c88 <inv_stop_magnetic_disturbance>:
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <inv_stop_magnetic_disturbance+0x8>)
 8001c8a:	f00a bd5f 	b.w	800c74c <inv_unregister_data_cb>
 8001c8e:	bf00      	nop
 8001c90:	08002221 	.word	0x08002221

08001c94 <inv_enable_magnetic_disturbance>:
 8001c94:	b508      	push	{r3, lr}
 8001c96:	f7ff ffd1 	bl	8001c3c <inv_init_magnetic_disturbance>
 8001c9a:	b100      	cbz	r0, 8001c9e <inv_enable_magnetic_disturbance+0xa>
 8001c9c:	bd08      	pop	{r3, pc}
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <inv_enable_magnetic_disturbance+0x24>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <inv_enable_magnetic_disturbance+0x28>)
 8001caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cae:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 8001cb2:	f00c bcb7 	b.w	800e624 <inv_register_mpl_start_notification>
 8001cb6:	bf00      	nop
 8001cb8:	20000454 	.word	0x20000454
 8001cbc:	08001c15 	.word	0x08001c15

08001cc0 <inv_disable_magnetic_disturbance>:
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4c04      	ldr	r4, [pc, #16]	; (8001cd4 <inv_disable_magnetic_disturbance+0x14>)
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f00a fd41 	bl	800c74c <inv_unregister_data_cb>
 8001cca:	4620      	mov	r0, r4
 8001ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd0:	f00a bd3c 	b.w	800c74c <inv_unregister_data_cb>
 8001cd4:	08002221 	.word	0x08002221

08001cd8 <inv_disable_dip_tracking>:
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <inv_disable_dip_tracking+0xc>)
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000454 	.word	0x20000454

08001ce8 <inv_enable_dip_tracking>:
 8001ce8:	4b02      	ldr	r3, [pc, #8]	; (8001cf4 <inv_enable_dip_tracking+0xc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4770      	bx	lr
 8001cf4:	20000454 	.word	0x20000454

08001cf8 <inv_track_dip_angle>:
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	b158      	cbz	r0, 8001d14 <inv_track_dip_angle+0x1c>
 8001cfc:	2801      	cmp	r0, #1
 8001cfe:	d019      	beq.n	8001d34 <inv_track_dip_angle+0x3c>
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <inv_track_dip_angle+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	2101      	movs	r1, #1
 8001d06:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8001d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <inv_track_dip_angle+0x94>)
 8001d16:	2400      	movs	r4, #0
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8001d1e:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8001d22:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8001d26:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 8001d2a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 8001d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	4d15      	ldr	r5, [pc, #84]	; (8001d8c <inv_track_dip_angle+0x94>)
 8001d36:	4608      	mov	r0, r1
 8001d38:	460c      	mov	r4, r1
 8001d3a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001d3e:	f001 fccf 	bl	80036e0 <__aeabi_fsub>
 8001d42:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8001d46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d4a:	f001 ff71 	bl	8003c30 <__aeabi_fcmplt>
 8001d4e:	b1b0      	cbz	r0, 8001d7e <inv_track_dip_angle+0x86>
 8001d50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d54:	4620      	mov	r0, r4
 8001d56:	1c5c      	adds	r4, r3, #1
 8001d58:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8001d5c:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
 8001d60:	f001 fcc0 	bl	80036e4 <__addsf3>
 8001d64:	2c31      	cmp	r4, #49	; 0x31
 8001d66:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
 8001d6a:	dd0d      	ble.n	8001d88 <inv_track_dip_angle+0x90>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <inv_track_dip_angle+0x98>)
 8001d70:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001d74:	f001 fe72 	bl	8003a5c <__aeabi_fdiv>
 8001d78:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8001d7c:	bd38      	pop	{r3, r4, r5, pc}
 8001d7e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 8001d82:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	bd38      	pop	{r3, r4, r5, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000454 	.word	0x20000454
 8001d90:	42480000 	.word	0x42480000

08001d94 <ComputeAngleVelocity>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	4606      	mov	r6, r0
 8001d98:	460d      	mov	r5, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	b08f      	sub	sp, #60	; 0x3c
 8001d9e:	a905      	add	r1, sp, #20
 8001da0:	f00b ff1f 	bl	800dbe2 <inv_quaternion_to_rotation>
 8001da4:	aa01      	add	r2, sp, #4
 8001da6:	4628      	mov	r0, r5
 8001da8:	4631      	mov	r1, r6
 8001daa:	f00b fa99 	bl	800d2e0 <inv_q_mult>
 8001dae:	4630      	mov	r0, r6
 8001db0:	4629      	mov	r1, r5
 8001db2:	f00b fb8e 	bl	800d4d2 <inv_q_invert>
 8001db6:	af05      	add	r7, sp, #20
 8001db8:	f1a4 0c04 	sub.w	ip, r4, #4
 8001dbc:	f104 0208 	add.w	r2, r4, #8
 8001dc0:	f10d 0e10 	add.w	lr, sp, #16
 8001dc4:	463c      	mov	r4, r7
 8001dc6:	ab01      	add	r3, sp, #4
 8001dc8:	2000      	movs	r0, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8001dd0:	f854 6b04 	ldr.w	r6, [r4], #4
 8001dd4:	4573      	cmp	r3, lr
 8001dd6:	fbc5 0106 	smlal	r0, r1, r5, r6
 8001dda:	d1f7      	bne.n	8001dcc <ComputeAngleVelocity+0x38>
 8001ddc:	0f83      	lsrs	r3, r0, #30
 8001dde:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8001de2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8001de6:	4594      	cmp	ip, r2
 8001de8:	f107 070c 	add.w	r7, r7, #12
 8001dec:	d1ea      	bne.n	8001dc4 <ComputeAngleVelocity+0x30>
 8001dee:	b00f      	add	sp, #60	; 0x3c
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	bf00      	nop

08001df4 <Mag3ofNormalizedLong>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	4604      	mov	r4, r0
 8001df8:	6800      	ldr	r0, [r0, #0]
 8001dfa:	f001 fd27 	bl	800384c <__aeabi_i2f>
 8001dfe:	4607      	mov	r7, r0
 8001e00:	6860      	ldr	r0, [r4, #4]
 8001e02:	f001 fd23 	bl	800384c <__aeabi_i2f>
 8001e06:	4606      	mov	r6, r0
 8001e08:	68a0      	ldr	r0, [r4, #8]
 8001e0a:	f001 fd1f 	bl	800384c <__aeabi_i2f>
 8001e0e:	4639      	mov	r1, r7
 8001e10:	4605      	mov	r5, r0
 8001e12:	4638      	mov	r0, r7
 8001e14:	f001 fd6e 	bl	80038f4 <__aeabi_fmul>
 8001e18:	4631      	mov	r1, r6
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f001 fd69 	bl	80038f4 <__aeabi_fmul>
 8001e22:	4601      	mov	r1, r0
 8001e24:	4620      	mov	r0, r4
 8001e26:	f001 fc5d 	bl	80036e4 <__addsf3>
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f001 fd60 	bl	80038f4 <__aeabi_fmul>
 8001e34:	4601      	mov	r1, r0
 8001e36:	4620      	mov	r0, r4
 8001e38:	f001 fc54 	bl	80036e4 <__addsf3>
 8001e3c:	f012 fafe 	bl	801443c <sqrtf>
 8001e40:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8001e44:	f001 fd56 	bl	80038f4 <__aeabi_fmul>
 8001e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4a:	bf00      	nop

08001e4c <MagDisturbSetDisturbance>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4605      	mov	r5, r0
 8001e50:	4c1b      	ldr	r4, [pc, #108]	; (8001ec0 <MagDisturbSetDisturbance+0x74>)
 8001e52:	460e      	mov	r6, r1
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	4629      	mov	r1, r5
 8001e58:	f001 feea 	bl	8003c30 <__aeabi_fcmplt>
 8001e5c:	b920      	cbnz	r0, 8001e68 <MagDisturbSetDisturbance+0x1c>
 8001e5e:	4628      	mov	r0, r5
 8001e60:	6861      	ldr	r1, [r4, #4]
 8001e62:	f001 fee5 	bl	8003c30 <__aeabi_fcmplt>
 8001e66:	b198      	cbz	r0, 8001e90 <MagDisturbSetDisturbance+0x44>
 8001e68:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MagDisturbSetDisturbance+0x74>)
 8001e6c:	b1ab      	cbz	r3, 8001e9a <MagDisturbSetDisturbance+0x4e>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	461a      	mov	r2, r3
 8001e72:	2101      	movs	r1, #1
 8001e74:	67a3      	str	r3, [r4, #120]	; 0x78
 8001e76:	6761      	str	r1, [r4, #116]	; 0x74
 8001e78:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e7a:	4911      	ldr	r1, [pc, #68]	; (8001ec0 <MagDisturbSetDisturbance+0x74>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	dc06      	bgt.n	8001e8e <MagDisturbSetDisturbance+0x42>
 8001e80:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	bf04      	itt	eq
 8001e86:	2300      	moveq	r3, #0
 8001e88:	65cb      	streq	r3, [r1, #92]	; 0x5c
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6763      	str	r3, [r4, #116]	; 0x74
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	6923      	ldr	r3, [r4, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d007      	beq.n	8001ea6 <MagDisturbSetDisturbance+0x5a>
 8001e96:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001e98:	e7ee      	b.n	8001e78 <MagDisturbSetDisturbance+0x2c>
 8001e9a:	f102 0018 	add.w	r0, r2, #24
 8001e9e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001ea0:	f00c f982 	bl	800e1a8 <inv_set_compass_correction>
 8001ea4:	e7e3      	b.n	8001e6e <MagDisturbSetDisturbance+0x22>
 8001ea6:	68e0      	ldr	r0, [r4, #12]
 8001ea8:	4631      	mov	r1, r6
 8001eaa:	f001 fec1 	bl	8003c30 <__aeabi_fcmplt>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1da      	bne.n	8001e68 <MagDisturbSetDisturbance+0x1c>
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	68a1      	ldr	r1, [r4, #8]
 8001eb6:	f001 febb 	bl	8003c30 <__aeabi_fcmplt>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d0eb      	beq.n	8001e96 <MagDisturbSetDisturbance+0x4a>
 8001ebe:	e7d3      	b.n	8001e68 <MagDisturbSetDisturbance+0x1c>
 8001ec0:	20000454 	.word	0x20000454

08001ec4 <MagDisturbCheckSettling>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	f00c f99f 	bl	800e20c <inv_get_acc_state>
 8001ece:	b920      	cbnz	r0, 8001eda <MagDisturbCheckSettling+0x16>
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	490c      	ldr	r1, [pc, #48]	; (8001f04 <MagDisturbCheckSettling+0x40>)
 8001ed4:	f001 feca 	bl	8003c6c <__aeabi_fcmpgt>
 8001ed8:	b178      	cbz	r0, 8001efa <MagDisturbCheckSettling+0x36>
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MagDisturbCheckSettling+0x44>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <MagDisturbCheckSettling+0x44>)
 8001ee6:	4421      	add	r1, r4
 8001ee8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8001eec:	6159      	str	r1, [r3, #20]
 8001eee:	dd03      	ble.n	8001ef8 <MagDisturbCheckSettling+0x34>
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6111      	str	r1, [r2, #16]
 8001ef6:	6153      	str	r3, [r2, #20]
 8001ef8:	bd38      	pop	{r3, r4, r5, pc}
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <MagDisturbCheckSettling+0x44>)
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d0ef      	beq.n	8001ee2 <MagDisturbCheckSettling+0x1e>
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	461c4000 	.word	0x461c4000
 8001f08:	20000454 	.word	0x20000454

08001f0c <inv_check_magnetic_disturbance>:
 8001f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	4db0      	ldr	r5, [pc, #704]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8001f12:	b08d      	sub	sp, #52	; 0x34
 8001f14:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
 8001f18:	2400      	movs	r4, #0
 8001f1a:	9406      	str	r4, [sp, #24]
 8001f1c:	9407      	str	r4, [sp, #28]
 8001f1e:	9408      	str	r4, [sp, #32]
 8001f20:	b926      	cbnz	r6, 8001f2c <inv_check_magnetic_disturbance+0x20>
 8001f22:	2300      	movs	r3, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	b00d      	add	sp, #52	; 0x34
 8001f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	4617      	mov	r7, r2
 8001f30:	9100      	str	r1, [sp, #0]
 8001f32:	4680      	mov	r8, r0
 8001f34:	f00a f918 	bl	800c168 <inv_get_gyro_on>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	f040 8129 	bne.w	8002190 <inv_check_magnetic_disturbance+0x284>
 8001f3e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8001f42:	4ea4      	ldr	r6, [pc, #656]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd12      	ble.n	8001f6e <inv_check_magnetic_disturbance+0x62>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
 8001f4e:	f00a f90b 	bl	800c168 <inv_get_gyro_on>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	f040 80b0 	bne.w	80020b8 <inv_check_magnetic_disturbance+0x1ac>
 8001f58:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8001f5c:	ebc8 0303 	rsb	r3, r8, r3
 8001f60:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfdc      	itt	le
 8001f68:	2300      	movle	r3, #0
 8001f6a:	f8c5 3084 	strle.w	r3, [r5, #132]	; 0x84
 8001f6e:	f00c fac3 	bl	800e4f8 <inv_got_compass_bias>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d0d5      	beq.n	8001f22 <inv_check_magnetic_disturbance+0x16>
 8001f76:	f04f 0a00 	mov.w	sl, #0
 8001f7a:	3c04      	subs	r4, #4
 8001f7c:	1f3e      	subs	r6, r7, #4
 8001f7e:	f107 0b08 	add.w	fp, r7, #8
 8001f82:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8001f86:	f001 fc61 	bl	800384c <__aeabi_i2f>
 8001f8a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8001f8e:	f001 fcb1 	bl	80038f4 <__aeabi_fmul>
 8001f92:	4681      	mov	r9, r0
 8001f94:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8001f98:	f001 fc58 	bl	800384c <__aeabi_i2f>
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	4648      	mov	r0, r9
 8001fa0:	f001 fca8 	bl	80038f4 <__aeabi_fmul>
 8001fa4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8001fa8:	f001 fca4 	bl	80038f4 <__aeabi_fmul>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4650      	mov	r0, sl
 8001fb0:	f001 fb98 	bl	80036e4 <__addsf3>
 8001fb4:	455e      	cmp	r6, fp
 8001fb6:	4682      	mov	sl, r0
 8001fb8:	d1e3      	bne.n	8001f82 <inv_check_magnetic_disturbance+0x76>
 8001fba:	4638      	mov	r0, r7
 8001fbc:	f7ff ff1a 	bl	8001df4 <Mag3ofNormalizedLong>
 8001fc0:	4606      	mov	r6, r0
 8001fc2:	4650      	mov	r0, sl
 8001fc4:	4631      	mov	r1, r6
 8001fc6:	f001 fd49 	bl	8003a5c <__aeabi_fdiv>
 8001fca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001fce:	4604      	mov	r4, r0
 8001fd0:	f001 fe4c 	bl	8003c6c <__aeabi_fcmpgt>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d067      	beq.n	80020a8 <inv_check_magnetic_disturbance+0x19c>
 8001fd8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f012 fa0b 	bl	80143f8 <acosf>
 8001fe2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001fe6:	4607      	mov	r7, r0
 8001fe8:	4c7a      	ldr	r4, [pc, #488]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8001fea:	b15b      	cbz	r3, 8002004 <inv_check_magnetic_disturbance+0xf8>
 8001fec:	4630      	mov	r0, r6
 8001fee:	6821      	ldr	r1, [r4, #0]
 8001ff0:	f001 fe1e 	bl	8003c30 <__aeabi_fcmplt>
 8001ff4:	b130      	cbz	r0, 8002004 <inv_check_magnetic_disturbance+0xf8>
 8001ff6:	4630      	mov	r0, r6
 8001ff8:	6861      	ldr	r1, [r4, #4]
 8001ffa:	f001 fe37 	bl	8003c6c <__aeabi_fcmpgt>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	f040 80ca 	bne.w	8002198 <inv_check_magnetic_disturbance+0x28c>
 8002004:	ac09      	add	r4, sp, #36	; 0x24
 8002006:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80021d4 <inv_check_magnetic_disturbance+0x2c8>
 800200a:	4620      	mov	r0, r4
 800200c:	f00c f94c 	bl	800e2a8 <inv_get_local_field>
 8002010:	4620      	mov	r0, r4
 8002012:	f10a 01ac 	add.w	r1, sl, #172	; 0xac
 8002016:	220c      	movs	r2, #12
 8002018:	f00f fd14 	bl	8011a44 <memcmp>
 800201c:	2800      	cmp	r0, #0
 800201e:	d155      	bne.n	80020cc <inv_check_magnetic_disturbance+0x1c0>
 8002020:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8002024:	2b01      	cmp	r3, #1
 8002026:	d051      	beq.n	80020cc <inv_check_magnetic_disturbance+0x1c0>
 8002028:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800202a:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 800202c:	b962      	cbnz	r2, 8002048 <inv_check_magnetic_disturbance+0x13c>
 800202e:	2201      	movs	r2, #1
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
 8002032:	f103 0418 	add.w	r4, r3, #24
 8002036:	f103 0a58 	add.w	sl, r3, #88	; 0x58
 800203a:	4620      	mov	r0, r4
 800203c:	4966      	ldr	r1, [pc, #408]	; (80021d8 <inv_check_magnetic_disturbance+0x2cc>)
 800203e:	3410      	adds	r4, #16
 8002040:	f00c f8ce 	bl	800e1e0 <inv_get_compass_correction>
 8002044:	4554      	cmp	r4, sl
 8002046:	d1f8      	bne.n	800203a <inv_check_magnetic_disturbance+0x12e>
 8002048:	f8dd 9000 	ldr.w	r9, [sp]
 800204c:	4c61      	ldr	r4, [pc, #388]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 800204e:	aa03      	add	r2, sp, #12
 8002050:	4648      	mov	r0, r9
 8002052:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8002056:	f7ff fe9d 	bl	8001d94 <ComputeAngleVelocity>
 800205a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800205e:	4648      	mov	r0, r9
 8002060:	f00b fa37 	bl	800d4d2 <inv_q_invert>
 8002064:	a806      	add	r0, sp, #24
 8002066:	f00b f8bc 	bl	800d1e2 <inv_get_gyro_sum_of_sqr>
 800206a:	f001 fbeb 	bl	8003844 <__aeabi_ui2f>
 800206e:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
 8002072:	f001 fc3f 	bl	80038f4 <__aeabi_fmul>
 8002076:	4641      	mov	r1, r8
 8002078:	f7ff ff24 	bl	8001ec4 <MagDisturbCheckSettling>
 800207c:	4630      	mov	r0, r6
 800207e:	4639      	mov	r1, r7
 8002080:	f7ff fee4 	bl	8001e4c <MagDisturbSetDisturbance>
 8002084:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002086:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002088:	4293      	cmp	r3, r2
 800208a:	da01      	bge.n	8002090 <inv_check_magnetic_disturbance+0x184>
 800208c:	4443      	add	r3, r8
 800208e:	67a3      	str	r3, [r4, #120]	; 0x78
 8002090:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002092:	4c50      	ldr	r4, [pc, #320]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f af45 	bne.w	8001f24 <inv_check_magnetic_disturbance+0x18>
 800209a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800209c:	4440      	add	r0, r8
 800209e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020a2:	dc7f      	bgt.n	80021a4 <inv_check_magnetic_disturbance+0x298>
 80020a4:	6620      	str	r0, [r4, #96]	; 0x60
 80020a6:	e73d      	b.n	8001f24 <inv_check_magnetic_disturbance+0x18>
 80020a8:	4620      	mov	r0, r4
 80020aa:	494c      	ldr	r1, [pc, #304]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80020ac:	f001 fdc0 	bl	8003c30 <__aeabi_fcmplt>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d093      	beq.n	8001fdc <inv_check_magnetic_disturbance+0xd0>
 80020b4:	4c49      	ldr	r4, [pc, #292]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80020b6:	e791      	b.n	8001fdc <inv_check_magnetic_disturbance+0xd0>
 80020b8:	a806      	add	r0, sp, #24
 80020ba:	f00b f892 	bl	800d1e2 <inv_get_gyro_sum_of_sqr>
 80020be:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
 80020c2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80020c6:	f4bf af49 	bcs.w	8001f5c <inv_check_magnetic_disturbance+0x50>
 80020ca:	e74b      	b.n	8001f64 <inv_check_magnetic_disturbance+0x58>
 80020cc:	f8df a104 	ldr.w	sl, [pc, #260]	; 80021d4 <inv_check_magnetic_disturbance+0x2c8>
 80020d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020d2:	f10a 0eac 	add.w	lr, sl, #172	; 0xac
 80020d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020da:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80020de:	b9a3      	cbnz	r3, 800210a <inv_check_magnetic_disturbance+0x1fe>
 80020e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020e2:	b993      	cbnz	r3, 800210a <inv_check_magnetic_disturbance+0x1fe>
 80020e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020e6:	b983      	cbnz	r3, 800210a <inv_check_magnetic_disturbance+0x1fe>
 80020e8:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
 80020ec:	483c      	ldr	r0, [pc, #240]	; (80021e0 <inv_check_magnetic_disturbance+0x2d4>)
 80020ee:	493d      	ldr	r1, [pc, #244]	; (80021e4 <inv_check_magnetic_disturbance+0x2d8>)
 80020f0:	2a01      	cmp	r2, #1
 80020f2:	f8ca 0000 	str.w	r0, [sl]
 80020f6:	f8ca 1004 	str.w	r1, [sl, #4]
 80020fa:	d07b      	beq.n	80021f4 <inv_check_magnetic_disturbance+0x2e8>
 80020fc:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <inv_check_magnetic_disturbance+0x2dc>)
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <inv_check_magnetic_disturbance+0x2e0>)
 8002100:	f8ca 2008 	str.w	r2, [sl, #8]
 8002104:	f8ca 300c 	str.w	r3, [sl, #12]
 8002108:	e78e      	b.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff fe72 	bl	8001df4 <Mag3ofNormalizedLong>
 8002110:	2100      	movs	r1, #0
 8002112:	4604      	mov	r4, r0
 8002114:	f001 fd82 	bl	8003c1c <__aeabi_fcmpeq>
 8002118:	2800      	cmp	r0, #0
 800211a:	d185      	bne.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 800211c:	4620      	mov	r0, r4
 800211e:	4934      	ldr	r1, [pc, #208]	; (80021f0 <inv_check_magnetic_disturbance+0x2e4>)
 8002120:	f001 fade 	bl	80036e0 <__aeabi_fsub>
 8002124:	4601      	mov	r1, r0
 8002126:	f001 fbe5 	bl	80038f4 <__aeabi_fmul>
 800212a:	f012 f987 	bl	801443c <sqrtf>
 800212e:	4930      	ldr	r1, [pc, #192]	; (80021f0 <inv_check_magnetic_disturbance+0x2e4>)
 8002130:	6068      	str	r0, [r5, #4]
 8002132:	4620      	mov	r0, r4
 8002134:	f001 fad6 	bl	80036e4 <__addsf3>
 8002138:	4601      	mov	r1, r0
 800213a:	f001 fbdb 	bl	80038f4 <__aeabi_fmul>
 800213e:	f012 f97d 	bl	801443c <sqrtf>
 8002142:	6028      	str	r0, [r5, #0]
 8002144:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002146:	f001 fb81 	bl	800384c <__aeabi_i2f>
 800214a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800214e:	f001 fbd1 	bl	80038f4 <__aeabi_fmul>
 8002152:	4621      	mov	r1, r4
 8002154:	f001 fc82 	bl	8003a5c <__aeabi_fdiv>
 8002158:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800215c:	4604      	mov	r4, r0
 800215e:	f001 fd85 	bl	8003c6c <__aeabi_fcmpgt>
 8002162:	b378      	cbz	r0, 80021c4 <inv_check_magnetic_disturbance+0x2b8>
 8002164:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8002168:	4620      	mov	r0, r4
 800216a:	f012 f945 	bl	80143f8 <acosf>
 800216e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8002172:	f001 fab5 	bl	80036e0 <__aeabi_fsub>
 8002176:	60a8      	str	r0, [r5, #8]
 8002178:	4620      	mov	r0, r4
 800217a:	f012 f93d 	bl	80143f8 <acosf>
 800217e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8002182:	f001 faaf 	bl	80036e4 <__addsf3>
 8002186:	2300      	movs	r3, #0
 8002188:	60e8      	str	r0, [r5, #12]
 800218a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800218e:	e74b      	b.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 8002190:	a806      	add	r0, sp, #24
 8002192:	f00a fc79 	bl	800ca88 <inv_get_gyro>
 8002196:	e6d2      	b.n	8001f3e <inv_check_magnetic_disturbance+0x32>
 8002198:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800219c:	4639      	mov	r1, r7
 800219e:	f7ff fdab 	bl	8001cf8 <inv_track_dip_angle>
 80021a2:	e72f      	b.n	8002004 <inv_check_magnetic_disturbance+0xf8>
 80021a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80021a8:	2230      	movs	r2, #48	; 0x30
 80021aa:	f104 0018 	add.w	r0, r4, #24
 80021ae:	6623      	str	r3, [r4, #96]	; 0x60
 80021b0:	f00f fc66 	bl	8011a80 <memmove>
 80021b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80021b8:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80021bc:	f00c f810 	bl	800e1e0 <inv_get_compass_correction>
 80021c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80021c2:	e6af      	b.n	8001f24 <inv_check_magnetic_disturbance+0x18>
 80021c4:	4620      	mov	r0, r4
 80021c6:	4905      	ldr	r1, [pc, #20]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80021c8:	f001 fd32 	bl	8003c30 <__aeabi_fcmplt>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d0cb      	beq.n	8002168 <inv_check_magnetic_disturbance+0x25c>
 80021d0:	4c02      	ldr	r4, [pc, #8]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80021d2:	e7c9      	b.n	8002168 <inv_check_magnetic_disturbance+0x25c>
 80021d4:	20000454 	.word	0x20000454
 80021d8:	200004ac 	.word	0x200004ac
 80021dc:	bf800000 	.word	0xbf800000
 80021e0:	42700000 	.word	0x42700000
 80021e4:	41f00000 	.word	0x41f00000
 80021e8:	c2b40000 	.word	0xc2b40000
 80021ec:	42b40000 	.word	0x42b40000
 80021f0:	41200000 	.word	0x41200000
 80021f4:	f8da 40a8 	ldr.w	r4, [sl, #168]	; 0xa8
 80021f8:	f8da b09c 	ldr.w	fp, [sl, #156]	; 0x9c
 80021fc:	4620      	mov	r0, r4
 80021fe:	4659      	mov	r1, fp
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f001 fa6d 	bl	80036e0 <__aeabi_fsub>
 8002206:	4659      	mov	r1, fp
 8002208:	f8ca 0008 	str.w	r0, [sl, #8]
 800220c:	4620      	mov	r0, r4
 800220e:	f001 fa69 	bl	80036e4 <__addsf3>
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	f8ca 000c 	str.w	r0, [sl, #12]
 8002218:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 800221c:	e704      	b.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 800221e:	bf00      	nop

08002220 <inv_magnetic_disturbance_process>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	4604      	mov	r4, r0
 8002224:	b088      	sub	sp, #32
 8002226:	a801      	add	r0, sp, #4
 8002228:	f00c f84e 	bl	800e2c8 <inv_get_gravity>
 800222c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8002230:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8002234:	a804      	add	r0, sp, #16
 8002236:	1b5d      	subs	r5, r3, r5
 8002238:	f00c f894 	bl	800e364 <inv_get_6axis_quaternion>
 800223c:	4606      	mov	r6, r0
 800223e:	a904      	add	r1, sp, #16
 8002240:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 8002244:	ab01      	add	r3, sp, #4
 8002246:	4628      	mov	r0, r5
 8002248:	f7ff fe60 	bl	8001f0c <inv_check_magnetic_disturbance>
 800224c:	f00a f850 	bl	800c2f0 <inv_set_compass_disturbance>
 8002250:	4630      	mov	r0, r6
 8002252:	b008      	add	sp, #32
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	bf00      	nop

08002258 <inv_get_magnetic_disturbance_state>:
 8002258:	4b01      	ldr	r3, [pc, #4]	; (8002260 <inv_get_magnetic_disturbance_state+0x8>)
 800225a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000454 	.word	0x20000454
 8002264:	00000000 	.word	0x00000000

08002268 <inv_normalize_quat>:
 8002268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800226c:	4604      	mov	r4, r0
 800226e:	6800      	ldr	r0, [r0, #0]
 8002270:	460d      	mov	r5, r1
 8002272:	f001 faeb 	bl	800384c <__aeabi_i2f>
 8002276:	4606      	mov	r6, r0
 8002278:	6860      	ldr	r0, [r4, #4]
 800227a:	f001 fae7 	bl	800384c <__aeabi_i2f>
 800227e:	4681      	mov	r9, r0
 8002280:	68a0      	ldr	r0, [r4, #8]
 8002282:	f001 fae3 	bl	800384c <__aeabi_i2f>
 8002286:	4680      	mov	r8, r0
 8002288:	68e0      	ldr	r0, [r4, #12]
 800228a:	f001 fadf 	bl	800384c <__aeabi_i2f>
 800228e:	4631      	mov	r1, r6
 8002290:	4607      	mov	r7, r0
 8002292:	4630      	mov	r0, r6
 8002294:	f001 fb2e 	bl	80038f4 <__aeabi_fmul>
 8002298:	4649      	mov	r1, r9
 800229a:	4606      	mov	r6, r0
 800229c:	4648      	mov	r0, r9
 800229e:	f001 fb29 	bl	80038f4 <__aeabi_fmul>
 80022a2:	4601      	mov	r1, r0
 80022a4:	4630      	mov	r0, r6
 80022a6:	f001 fa1d 	bl	80036e4 <__addsf3>
 80022aa:	4641      	mov	r1, r8
 80022ac:	4606      	mov	r6, r0
 80022ae:	4640      	mov	r0, r8
 80022b0:	f001 fb20 	bl	80038f4 <__aeabi_fmul>
 80022b4:	4601      	mov	r1, r0
 80022b6:	4630      	mov	r0, r6
 80022b8:	f001 fa14 	bl	80036e4 <__addsf3>
 80022bc:	4639      	mov	r1, r7
 80022be:	4606      	mov	r6, r0
 80022c0:	4638      	mov	r0, r7
 80022c2:	f001 fb17 	bl	80038f4 <__aeabi_fmul>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4630      	mov	r0, r6
 80022ca:	f001 fa0b 	bl	80036e4 <__addsf3>
 80022ce:	2100      	movs	r1, #0
 80022d0:	4606      	mov	r6, r0
 80022d2:	f001 fcb7 	bl	8003c44 <__aeabi_fcmple>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d132      	bne.n	8002340 <inv_normalize_quat+0xd8>
 80022da:	4630      	mov	r0, r6
 80022dc:	f012 f8ae 	bl	801443c <sqrtf>
 80022e0:	4601      	mov	r1, r0
 80022e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80022e6:	f001 fbb9 	bl	8003a5c <__aeabi_fdiv>
 80022ea:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80022ee:	f001 fb01 	bl	80038f4 <__aeabi_fmul>
 80022f2:	4606      	mov	r6, r0
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f001 faa9 	bl	800384c <__aeabi_i2f>
 80022fa:	4631      	mov	r1, r6
 80022fc:	f001 fafa 	bl	80038f4 <__aeabi_fmul>
 8002300:	f001 fcd4 	bl	8003cac <__aeabi_f2iz>
 8002304:	6028      	str	r0, [r5, #0]
 8002306:	6860      	ldr	r0, [r4, #4]
 8002308:	f001 faa0 	bl	800384c <__aeabi_i2f>
 800230c:	4631      	mov	r1, r6
 800230e:	f001 faf1 	bl	80038f4 <__aeabi_fmul>
 8002312:	f001 fccb 	bl	8003cac <__aeabi_f2iz>
 8002316:	6068      	str	r0, [r5, #4]
 8002318:	68a0      	ldr	r0, [r4, #8]
 800231a:	f001 fa97 	bl	800384c <__aeabi_i2f>
 800231e:	4631      	mov	r1, r6
 8002320:	f001 fae8 	bl	80038f4 <__aeabi_fmul>
 8002324:	f001 fcc2 	bl	8003cac <__aeabi_f2iz>
 8002328:	60a8      	str	r0, [r5, #8]
 800232a:	68e0      	ldr	r0, [r4, #12]
 800232c:	f001 fa8e 	bl	800384c <__aeabi_i2f>
 8002330:	4631      	mov	r1, r6
 8002332:	f001 fadf 	bl	80038f4 <__aeabi_fmul>
 8002336:	f001 fcb9 	bl	8003cac <__aeabi_f2iz>
 800233a:	60e8      	str	r0, [r5, #12]
 800233c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002340:	2300      	movs	r3, #0
 8002342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002346:	e885 000c 	stmia.w	r5, {r2, r3}
 800234a:	60ab      	str	r3, [r5, #8]
 800234c:	60eb      	str	r3, [r5, #12]
 800234e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002352:	bf00      	nop

08002354 <inv_start_quaternion>:
 8002354:	b508      	push	{r3, lr}
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <inv_start_quaternion+0x24>)
 8002358:	4908      	ldr	r1, [pc, #32]	; (800237c <inv_start_quaternion+0x28>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	f00f fb71 	bl	8011a44 <memcmp>
 8002362:	b108      	cbz	r0, 8002368 <inv_start_quaternion+0x14>
 8002364:	2032      	movs	r0, #50	; 0x32
 8002366:	bd08      	pop	{r3, pc}
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <inv_start_quaternion+0x2c>)
 800236a:	21c8      	movs	r1, #200	; 0xc8
 800236c:	2213      	movs	r2, #19
 800236e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002372:	f00a b94d 	b.w	800c610 <inv_register_data_cb>
 8002376:	bf00      	nop
 8002378:	2000004c 	.word	0x2000004c
 800237c:	08016564 	.word	0x08016564
 8002380:	08002c3d 	.word	0x08002c3d

08002384 <inv_generate_gyro_quaternion.part.1>:
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	6986      	ldr	r6, [r0, #24]
 8002388:	b089      	sub	sp, #36	; 0x24
 800238a:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800238e:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	da5c      	bge.n	8002452 <inv_generate_gyro_quaternion.part.1+0xce>
 8002398:	69c3      	ldr	r3, [r0, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	bfb8      	it	lt
 800239e:	425b      	neglt	r3, r3
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	db5d      	blt.n	8002462 <inv_generate_gyro_quaternion.part.1+0xde>
 80023a6:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80023aa:	dd71      	ble.n	8002490 <inv_generate_gyro_quaternion.part.1+0x10c>
 80023ac:	4d3c      	ldr	r5, [pc, #240]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 80023ae:	2303      	movs	r3, #3
 80023b0:	63ab      	str	r3, [r5, #56]	; 0x38
 80023b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80023b6:	4604      	mov	r4, r0
 80023b8:	429a      	cmp	r2, r3
 80023ba:	4f39      	ldr	r7, [pc, #228]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 80023bc:	d06a      	beq.n	8002494 <inv_generate_gyro_quaternion.part.1+0x110>
 80023be:	4618      	mov	r0, r3
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
 80023c2:	f001 fa43 	bl	800384c <__aeabi_i2f>
 80023c6:	4937      	ldr	r1, [pc, #220]	; (80024a4 <inv_generate_gyro_quaternion.part.1+0x120>)
 80023c8:	f001 fb48 	bl	8003a5c <__aeabi_fdiv>
 80023cc:	f04f 419c 	mov.w	r1, #1308622848	; 0x4e000000
 80023d0:	f001 fa90 	bl	80038f4 <__aeabi_fmul>
 80023d4:	f000 fe00 	bl	8002fd8 <__aeabi_f2d>
 80023d8:	a32f      	add	r3, pc, #188	; (adr r3, 8002498 <inv_generate_gyro_quaternion.part.1+0x114>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f000 fe53 	bl	8003088 <__aeabi_dmul>
 80023e2:	2200      	movs	r2, #0
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <inv_generate_gyro_quaternion.part.1+0x124>)
 80023e6:	f000 fe4f 	bl	8003088 <__aeabi_dmul>
 80023ea:	2200      	movs	r2, #0
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <inv_generate_gyro_quaternion.part.1+0x128>)
 80023ee:	f000 ff75 	bl	80032dc <__aeabi_ddiv>
 80023f2:	f001 f8f9 	bl	80035e8 <__aeabi_d2iz>
 80023f6:	4601      	mov	r1, r0
 80023f8:	6338      	str	r0, [r7, #48]	; 0x30
 80023fa:	2300      	movs	r3, #0
 80023fc:	4630      	mov	r0, r6
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f00a ff40 	bl	800d284 <inv_q30_mult>
 8002404:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002406:	9001      	str	r0, [sp, #4]
 8002408:	69e0      	ldr	r0, [r4, #28]
 800240a:	f00a ff3b 	bl	800d284 <inv_q30_mult>
 800240e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002410:	9002      	str	r0, [sp, #8]
 8002412:	6a20      	ldr	r0, [r4, #32]
 8002414:	f00a ff36 	bl	800d284 <inv_q30_mult>
 8002418:	aa04      	add	r2, sp, #16
 800241a:	9003      	str	r0, [sp, #12]
 800241c:	4669      	mov	r1, sp
 800241e:	4820      	ldr	r0, [pc, #128]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002420:	f00a ff5e 	bl	800d2e0 <inv_q_mult>
 8002424:	9d04      	ldr	r5, [sp, #16]
 8002426:	9c05      	ldr	r4, [sp, #20]
 8002428:	9a06      	ldr	r2, [sp, #24]
 800242a:	9b07      	ldr	r3, [sp, #28]
 800242c:	481c      	ldr	r0, [pc, #112]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 800242e:	019b      	lsls	r3, r3, #6
 8002430:	a904      	add	r1, sp, #16
 8002432:	01ae      	lsls	r6, r5, #6
 8002434:	01a5      	lsls	r5, r4, #6
 8002436:	0194      	lsls	r4, r2, #6
 8002438:	4602      	mov	r2, r0
 800243a:	9307      	str	r3, [sp, #28]
 800243c:	9604      	str	r6, [sp, #16]
 800243e:	9505      	str	r5, [sp, #20]
 8002440:	9406      	str	r4, [sp, #24]
 8002442:	f00b f816 	bl	800d472 <inv_q_add>
 8002446:	4816      	ldr	r0, [pc, #88]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002448:	4601      	mov	r1, r0
 800244a:	f7ff ff0d 	bl	8002268 <inv_normalize_quat>
 800244e:	b009      	add	sp, #36	; 0x24
 8002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002452:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8002456:	dca9      	bgt.n	80023ac <inv_generate_gyro_quaternion.part.1+0x28>
 8002458:	69c3      	ldr	r3, [r0, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfb8      	it	lt
 800245e:	425b      	neglt	r3, r3
 8002460:	e7a1      	b.n	80023a6 <inv_generate_gyro_quaternion.part.1+0x22>
 8002462:	6a03      	ldr	r3, [r0, #32]
 8002464:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002468:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800246c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002470:	db09      	blt.n	8002486 <inv_generate_gyro_quaternion.part.1+0x102>
 8002472:	2b00      	cmp	r3, #0
 8002474:	bfb8      	it	lt
 8002476:	425b      	neglt	r3, r3
 8002478:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800247c:	dc96      	bgt.n	80023ac <inv_generate_gyro_quaternion.part.1+0x28>
 800247e:	4d08      	ldr	r5, [pc, #32]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002480:	2302      	movs	r3, #2
 8002482:	63ab      	str	r3, [r5, #56]	; 0x38
 8002484:	e795      	b.n	80023b2 <inv_generate_gyro_quaternion.part.1+0x2e>
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002488:	2200      	movs	r2, #0
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
 800248c:	b009      	add	sp, #36	; 0x24
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	6a03      	ldr	r3, [r0, #32]
 8002492:	e7ee      	b.n	8002472 <inv_generate_gyro_quaternion.part.1+0xee>
 8002494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002496:	e7b0      	b.n	80023fa <inv_generate_gyro_quaternion.part.1+0x76>
 8002498:	54442d18 	.word	0x54442d18
 800249c:	400921fb 	.word	0x400921fb
 80024a0:	2000050c 	.word	0x2000050c
 80024a4:	49742400 	.word	0x49742400
 80024a8:	40700000 	.word	0x40700000
 80024ac:	40668000 	.word	0x40668000

080024b0 <inv_generate_gyro_quaternion>:
 80024b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024b2:	065b      	lsls	r3, r3, #25
 80024b4:	d500      	bpl.n	80024b8 <inv_generate_gyro_quaternion+0x8>
 80024b6:	e765      	b.n	8002384 <inv_generate_gyro_quaternion.part.1>
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <inv_set_quaternion>:
 80024bc:	b530      	push	{r4, r5, lr}
 80024be:	4605      	mov	r5, r0
 80024c0:	4c09      	ldr	r4, [pc, #36]	; (80024e8 <inv_set_quaternion+0x2c>)
 80024c2:	b085      	sub	sp, #20
 80024c4:	4620      	mov	r0, r4
 80024c6:	4669      	mov	r1, sp
 80024c8:	f00b f803 	bl	800d4d2 <inv_q_invert>
 80024cc:	4628      	mov	r0, r5
 80024ce:	4669      	mov	r1, sp
 80024d0:	f104 0220 	add.w	r2, r4, #32
 80024d4:	f00a ff04 	bl	800d2e0 <inv_q_mult>
 80024d8:	6828      	ldr	r0, [r5, #0]
 80024da:	6869      	ldr	r1, [r5, #4]
 80024dc:	68aa      	ldr	r2, [r5, #8]
 80024de:	68eb      	ldr	r3, [r5, #12]
 80024e0:	3410      	adds	r4, #16
 80024e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e4:	b005      	add	sp, #20
 80024e6:	bd30      	pop	{r4, r5, pc}
 80024e8:	2000050c 	.word	0x2000050c

080024ec <inv_generate_accel_gyro_quaternion>:
 80024ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024f2:	b09d      	sub	sp, #116	; 0x74
 80024f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	4604      	mov	r4, r0
 80024fc:	f000 8220 	beq.w	8002940 <inv_generate_accel_gyro_quaternion+0x454>
 8002500:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8002504:	4e87      	ldr	r6, [pc, #540]	; (8002724 <inv_generate_accel_gyro_quaternion+0x238>)
 8002506:	f001 0350 	and.w	r3, r1, #80	; 0x50
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	f000 82d3 	beq.w	8002ab6 <inv_generate_accel_gyro_quaternion+0x5ca>
 8002510:	05cd      	lsls	r5, r1, #23
 8002512:	f100 8115 	bmi.w	8002740 <inv_generate_accel_gyro_quaternion+0x254>
 8002516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002518:	0659      	lsls	r1, r3, #25
 800251a:	f100 81e8 	bmi.w	80028ee <inv_generate_accel_gyro_quaternion+0x402>
 800251e:	4d81      	ldr	r5, [pc, #516]	; (8002724 <inv_generate_accel_gyro_quaternion+0x238>)
 8002520:	f105 0210 	add.w	r2, r5, #16
 8002524:	f105 0020 	add.w	r0, r5, #32
 8002528:	4629      	mov	r1, r5
 800252a:	f00a fed9 	bl	800d2e0 <inv_q_mult>
 800252e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002530:	065a      	lsls	r2, r3, #25
 8002532:	d556      	bpl.n	80025e2 <inv_generate_accel_gyro_quaternion+0xf6>
 8002534:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8002538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800253a:	4313      	orrs	r3, r2
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	d554      	bpl.n	80025ea <inv_generate_accel_gyro_quaternion+0xfe>
 8002540:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 8002544:	aa10      	add	r2, sp, #64	; 0x40
 8002546:	f105 0010 	add.w	r0, r5, #16
 800254a:	f00a ffe5 	bl	800d518 <inv_q_rotate>
 800254e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002550:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002552:	fb82 2302 	smull	r2, r3, r2, r2
 8002556:	fbc1 2301 	smlal	r2, r3, r1, r1
 800255a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800255c:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 8002560:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002564:	f04f 0902 	mov.w	r9, #2
 8002568:	4590      	cmp	r8, r2
 800256a:	eb79 0303 	sbcs.w	r3, r9, r3
 800256e:	f2c0 82af 	blt.w	8002ad0 <inv_generate_accel_gyro_quaternion+0x5e4>
 8002572:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002574:	2b04      	cmp	r3, #4
 8002576:	f000 82be 	beq.w	8002af6 <inv_generate_accel_gyro_quaternion+0x60a>
 800257a:	1e9a      	subs	r2, r3, #2
 800257c:	2a01      	cmp	r2, #1
 800257e:	f240 81ba 	bls.w	80028f6 <inv_generate_accel_gyro_quaternion+0x40a>
 8002582:	2b01      	cmp	r3, #1
 8002584:	f000 831e 	beq.w	8002bc4 <inv_generate_accel_gyro_quaternion+0x6d8>
 8002588:	2401      	movs	r4, #1
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <inv_generate_accel_gyro_quaternion+0x23c>)
 800258c:	00a4      	lsls	r4, r4, #2
 800258e:	fb03 f404 	mul.w	r4, r3, r4
 8002592:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002594:	2500      	movs	r5, #0
 8002596:	4621      	mov	r1, r4
 8002598:	0280      	lsls	r0, r0, #10
 800259a:	9514      	str	r5, [sp, #80]	; 0x50
 800259c:	f00a fe72 	bl	800d284 <inv_q30_mult>
 80025a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025a2:	9015      	str	r0, [sp, #84]	; 0x54
 80025a4:	4258      	negs	r0, r3
 80025a6:	4621      	mov	r1, r4
 80025a8:	0280      	lsls	r0, r0, #10
 80025aa:	f00a fe6b 	bl	800d284 <inv_q30_mult>
 80025ae:	aa18      	add	r2, sp, #96	; 0x60
 80025b0:	9016      	str	r0, [sp, #88]	; 0x58
 80025b2:	495e      	ldr	r1, [pc, #376]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025b4:	a814      	add	r0, sp, #80	; 0x50
 80025b6:	9517      	str	r5, [sp, #92]	; 0x5c
 80025b8:	f00a fe92 	bl	800d2e0 <inv_q_mult>
 80025bc:	485b      	ldr	r0, [pc, #364]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025be:	a918      	add	r1, sp, #96	; 0x60
 80025c0:	4602      	mov	r2, r0
 80025c2:	f00a ff56 	bl	800d472 <inv_q_add>
 80025c6:	4859      	ldr	r0, [pc, #356]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025c8:	4601      	mov	r1, r0
 80025ca:	f7ff fe4d 	bl	8002268 <inv_normalize_quat>
 80025ce:	4669      	mov	r1, sp
 80025d0:	4854      	ldr	r0, [pc, #336]	; (8002724 <inv_generate_accel_gyro_quaternion+0x238>)
 80025d2:	f00a ff7e 	bl	800d4d2 <inv_q_invert>
 80025d6:	4855      	ldr	r0, [pc, #340]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025d8:	4669      	mov	r1, sp
 80025da:	f100 0210 	add.w	r2, r0, #16
 80025de:	f00a fe7f 	bl	800d2e0 <inv_q_mult>
 80025e2:	2000      	movs	r0, #0
 80025e4:	b01d      	add	sp, #116	; 0x74
 80025e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025ec:	f001 f92e 	bl	800384c <__aeabi_i2f>
 80025f0:	4607      	mov	r7, r0
 80025f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80025f4:	f001 f92a 	bl	800384c <__aeabi_i2f>
 80025f8:	4681      	mov	r9, r0
 80025fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80025fc:	f001 f926 	bl	800384c <__aeabi_i2f>
 8002600:	4639      	mov	r1, r7
 8002602:	4680      	mov	r8, r0
 8002604:	4638      	mov	r0, r7
 8002606:	f001 f975 	bl	80038f4 <__aeabi_fmul>
 800260a:	4649      	mov	r1, r9
 800260c:	4607      	mov	r7, r0
 800260e:	4648      	mov	r0, r9
 8002610:	f001 f970 	bl	80038f4 <__aeabi_fmul>
 8002614:	4601      	mov	r1, r0
 8002616:	4638      	mov	r0, r7
 8002618:	f001 f864 	bl	80036e4 <__addsf3>
 800261c:	4641      	mov	r1, r8
 800261e:	4607      	mov	r7, r0
 8002620:	4640      	mov	r0, r8
 8002622:	f001 f967 	bl	80038f4 <__aeabi_fmul>
 8002626:	4601      	mov	r1, r0
 8002628:	4638      	mov	r0, r7
 800262a:	f001 f85b 	bl	80036e4 <__addsf3>
 800262e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8002632:	f011 ff03 	bl	801443c <sqrtf>
 8002636:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800263a:	4607      	mov	r7, r0
 800263c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002640:	f001 fb14 	bl	8003c6c <__aeabi_fcmpgt>
 8002644:	2800      	cmp	r0, #0
 8002646:	d0c2      	beq.n	80025ce <inv_generate_accel_gyro_quaternion+0xe2>
 8002648:	6928      	ldr	r0, [r5, #16]
 800264a:	f001 f8ff 	bl	800384c <__aeabi_i2f>
 800264e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002652:	f001 f94f 	bl	80038f4 <__aeabi_fmul>
 8002656:	9018      	str	r0, [sp, #96]	; 0x60
 8002658:	6968      	ldr	r0, [r5, #20]
 800265a:	f001 f8f7 	bl	800384c <__aeabi_i2f>
 800265e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002662:	f001 f947 	bl	80038f4 <__aeabi_fmul>
 8002666:	9019      	str	r0, [sp, #100]	; 0x64
 8002668:	69a8      	ldr	r0, [r5, #24]
 800266a:	f001 f8ef 	bl	800384c <__aeabi_i2f>
 800266e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002672:	f001 f93f 	bl	80038f4 <__aeabi_fmul>
 8002676:	901a      	str	r0, [sp, #104]	; 0x68
 8002678:	69e8      	ldr	r0, [r5, #28]
 800267a:	f001 f8e7 	bl	800384c <__aeabi_i2f>
 800267e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002682:	f001 f937 	bl	80038f4 <__aeabi_fmul>
 8002686:	2300      	movs	r3, #0
 8002688:	901b      	str	r0, [sp, #108]	; 0x6c
 800268a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800268c:	9314      	str	r3, [sp, #80]	; 0x50
 800268e:	f001 f8dd 	bl	800384c <__aeabi_i2f>
 8002692:	4639      	mov	r1, r7
 8002694:	f001 f9e2 	bl	8003a5c <__aeabi_fdiv>
 8002698:	9015      	str	r0, [sp, #84]	; 0x54
 800269a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800269c:	f001 f8d6 	bl	800384c <__aeabi_i2f>
 80026a0:	4639      	mov	r1, r7
 80026a2:	f001 f9db 	bl	8003a5c <__aeabi_fdiv>
 80026a6:	9016      	str	r0, [sp, #88]	; 0x58
 80026a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80026aa:	f001 f8cf 	bl	800384c <__aeabi_i2f>
 80026ae:	4639      	mov	r1, r7
 80026b0:	f001 f9d4 	bl	8003a5c <__aeabi_fdiv>
 80026b4:	ad18      	add	r5, sp, #96	; 0x60
 80026b6:	aa04      	add	r2, sp, #16
 80026b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80026ba:	a914      	add	r1, sp, #80	; 0x50
 80026bc:	4628      	mov	r0, r5
 80026be:	f00a ff5e 	bl	800d57e <inv_q_multf>
 80026c2:	4628      	mov	r0, r5
 80026c4:	a90c      	add	r1, sp, #48	; 0x30
 80026c6:	f00b fa66 	bl	800db96 <inv_q_invertf>
 80026ca:	aa08      	add	r2, sp, #32
 80026cc:	a804      	add	r0, sp, #16
 80026ce:	a90c      	add	r1, sp, #48	; 0x30
 80026d0:	f00a ff55 	bl	800d57e <inv_q_multf>
 80026d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80026d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80026d8:	4639      	mov	r1, r7
 80026da:	4638      	mov	r0, r7
 80026dc:	f001 f90a 	bl	80038f4 <__aeabi_fmul>
 80026e0:	4621      	mov	r1, r4
 80026e2:	4681      	mov	r9, r0
 80026e4:	4620      	mov	r0, r4
 80026e6:	f001 f905 	bl	80038f4 <__aeabi_fmul>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4648      	mov	r0, r9
 80026ee:	f000 fff9 	bl	80036e4 <__addsf3>
 80026f2:	490f      	ldr	r1, [pc, #60]	; (8002730 <inv_generate_accel_gyro_quaternion+0x244>)
 80026f4:	4681      	mov	r9, r0
 80026f6:	f001 fa9b 	bl	8003c30 <__aeabi_fcmplt>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f040 8203 	bne.w	8002b06 <inv_generate_accel_gyro_quaternion+0x61a>
 8002700:	4648      	mov	r0, r9
 8002702:	490c      	ldr	r1, [pc, #48]	; (8002734 <inv_generate_accel_gyro_quaternion+0x248>)
 8002704:	f001 fa94 	bl	8003c30 <__aeabi_fcmplt>
 8002708:	2800      	cmp	r0, #0
 800270a:	f040 826f 	bne.w	8002bec <inv_generate_accel_gyro_quaternion+0x700>
 800270e:	4648      	mov	r0, r9
 8002710:	4909      	ldr	r1, [pc, #36]	; (8002738 <inv_generate_accel_gyro_quaternion+0x24c>)
 8002712:	f001 fa8d 	bl	8003c30 <__aeabi_fcmplt>
 8002716:	2800      	cmp	r0, #0
 8002718:	f040 8248 	bne.w	8002bac <inv_generate_accel_gyro_quaternion+0x6c0>
 800271c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 800273c <inv_generate_accel_gyro_quaternion+0x250>
 8002720:	e1f3      	b.n	8002b0a <inv_generate_accel_gyro_quaternion+0x61e>
 8002722:	bf00      	nop
 8002724:	2000050c 	.word	0x2000050c
 8002728:	00c49ba6 	.word	0x00c49ba6
 800272c:	2000051c 	.word	0x2000051c
 8002730:	3951b717 	.word	0x3951b717
 8002734:	3c23d70a 	.word	0x3c23d70a
 8002738:	3e4ccccd 	.word	0x3e4ccccd
 800273c:	3ecccccd 	.word	0x3ecccccd
 8002740:	0648      	lsls	r0, r1, #25
 8002742:	f57f aeec 	bpl.w	800251e <inv_generate_accel_gyro_quaternion+0x32>
 8002746:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <inv_generate_accel_gyro_quaternion+0x42c>)
 800274c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002750:	fb03 f300 	mul.w	r3, r3, r0
 8002754:	6835      	ldr	r5, [r6, #0]
 8002756:	4871      	ldr	r0, [pc, #452]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 8002758:	1b52      	subs	r2, r2, r5
 800275a:	429a      	cmp	r2, r3
 800275c:	bfcc      	ite	gt
 800275e:	2303      	movgt	r3, #3
 8002760:	2302      	movle	r3, #2
 8002762:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8002766:	6383      	str	r3, [r0, #56]	; 0x38
 8002768:	f040 81c7 	bne.w	8002afa <inv_generate_accel_gyro_quaternion+0x60e>
 800276c:	af10      	add	r7, sp, #64	; 0x40
 800276e:	4d6b      	ldr	r5, [pc, #428]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 8002770:	4638      	mov	r0, r7
 8002772:	f009 fe29 	bl	800c3c8 <inv_get_gyro_bias>
 8002776:	4638      	mov	r0, r7
 8002778:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 800277c:	220c      	movs	r2, #12
 800277e:	f00f f961 	bl	8011a44 <memcmp>
 8002782:	b928      	cbnz	r0, 8002790 <inv_generate_accel_gyro_quaternion+0x2a4>
 8002784:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002786:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800278a:	429a      	cmp	r2, r3
 800278c:	f000 8241 	beq.w	8002c12 <inv_generate_accel_gyro_quaternion+0x726>
 8002790:	ad18      	add	r5, sp, #96	; 0x60
 8002792:	462b      	mov	r3, r5
 8002794:	463a      	mov	r2, r7
 8002796:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002798:	8820      	ldrh	r0, [r4, #0]
 800279a:	f00b fb76 	bl	800de8a <inv_convert_to_body_with_scale>
 800279e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80027a0:	f001 f854 	bl	800384c <__aeabi_i2f>
 80027a4:	4680      	mov	r8, r0
 80027a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80027a8:	f001 f850 	bl	800384c <__aeabi_i2f>
 80027ac:	4682      	mov	sl, r0
 80027ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80027b0:	f001 f84c 	bl	800384c <__aeabi_i2f>
 80027b4:	4641      	mov	r1, r8
 80027b6:	4681      	mov	r9, r0
 80027b8:	4640      	mov	r0, r8
 80027ba:	f001 f89b 	bl	80038f4 <__aeabi_fmul>
 80027be:	4651      	mov	r1, sl
 80027c0:	4680      	mov	r8, r0
 80027c2:	4650      	mov	r0, sl
 80027c4:	f001 f896 	bl	80038f4 <__aeabi_fmul>
 80027c8:	4601      	mov	r1, r0
 80027ca:	4640      	mov	r0, r8
 80027cc:	f000 ff8a 	bl	80036e4 <__addsf3>
 80027d0:	4649      	mov	r1, r9
 80027d2:	4680      	mov	r8, r0
 80027d4:	4648      	mov	r0, r9
 80027d6:	f001 f88d 	bl	80038f4 <__aeabi_fmul>
 80027da:	4601      	mov	r1, r0
 80027dc:	4640      	mov	r0, r8
 80027de:	f000 ff81 	bl	80036e4 <__addsf3>
 80027e2:	f011 fe2b 	bl	801443c <sqrtf>
 80027e6:	494e      	ldr	r1, [pc, #312]	; (8002920 <inv_generate_accel_gyro_quaternion+0x434>)
 80027e8:	4680      	mov	r8, r0
 80027ea:	f001 f883 	bl	80038f4 <__aeabi_fmul>
 80027ee:	494d      	ldr	r1, [pc, #308]	; (8002924 <inv_generate_accel_gyro_quaternion+0x438>)
 80027f0:	f001 f934 	bl	8003a5c <__aeabi_fdiv>
 80027f4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80027f8:	f001 f87c 	bl	80038f4 <__aeabi_fmul>
 80027fc:	f8d4 9128 	ldr.w	r9, [r4, #296]	; 0x128
 8002800:	4682      	mov	sl, r0
 8002802:	4648      	mov	r0, r9
 8002804:	f001 f822 	bl	800384c <__aeabi_i2f>
 8002808:	4601      	mov	r1, r0
 800280a:	4650      	mov	r0, sl
 800280c:	f001 f872 	bl	80038f4 <__aeabi_fmul>
 8002810:	4945      	ldr	r1, [pc, #276]	; (8002928 <inv_generate_accel_gyro_quaternion+0x43c>)
 8002812:	f001 f923 	bl	8003a5c <__aeabi_fdiv>
 8002816:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800281a:	f001 f86b 	bl	80038f4 <__aeabi_fmul>
 800281e:	4682      	mov	sl, r0
 8002820:	f011 fd78 	bl	8014314 <cosf>
 8002824:	4683      	mov	fp, r0
 8002826:	4650      	mov	r0, sl
 8002828:	f011 fdac 	bl	8014384 <sinf>
 800282c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002830:	4682      	mov	sl, r0
 8002832:	4640      	mov	r0, r8
 8002834:	f001 f9fc 	bl	8003c30 <__aeabi_fcmplt>
 8002838:	2800      	cmp	r0, #0
 800283a:	f040 81af 	bne.w	8002b9c <inv_generate_accel_gyro_quaternion+0x6b0>
 800283e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002842:	4658      	mov	r0, fp
 8002844:	f001 f856 	bl	80038f4 <__aeabi_fmul>
 8002848:	f001 fa30 	bl	8003cac <__aeabi_f2iz>
 800284c:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 8002850:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002854:	64b0      	str	r0, [r6, #72]	; 0x48
 8002856:	4650      	mov	r0, sl
 8002858:	f001 f84c 	bl	80038f4 <__aeabi_fmul>
 800285c:	4682      	mov	sl, r0
 800285e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002860:	f000 fff4 	bl	800384c <__aeabi_i2f>
 8002864:	4601      	mov	r1, r0
 8002866:	4650      	mov	r0, sl
 8002868:	f001 f844 	bl	80038f4 <__aeabi_fmul>
 800286c:	4641      	mov	r1, r8
 800286e:	f001 f8f5 	bl	8003a5c <__aeabi_fdiv>
 8002872:	f001 fa1b 	bl	8003cac <__aeabi_f2iz>
 8002876:	64f0      	str	r0, [r6, #76]	; 0x4c
 8002878:	9819      	ldr	r0, [sp, #100]	; 0x64
 800287a:	f000 ffe7 	bl	800384c <__aeabi_i2f>
 800287e:	4601      	mov	r1, r0
 8002880:	4650      	mov	r0, sl
 8002882:	f001 f837 	bl	80038f4 <__aeabi_fmul>
 8002886:	4641      	mov	r1, r8
 8002888:	f001 f8e8 	bl	8003a5c <__aeabi_fdiv>
 800288c:	f001 fa0e 	bl	8003cac <__aeabi_f2iz>
 8002890:	6530      	str	r0, [r6, #80]	; 0x50
 8002892:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002894:	f000 ffda 	bl	800384c <__aeabi_i2f>
 8002898:	4601      	mov	r1, r0
 800289a:	4650      	mov	r0, sl
 800289c:	f001 f82a 	bl	80038f4 <__aeabi_fmul>
 80028a0:	4641      	mov	r1, r8
 80028a2:	f001 f8db 	bl	8003a5c <__aeabi_fdiv>
 80028a6:	f001 fa01 	bl	8003cac <__aeabi_f2iz>
 80028aa:	6570      	str	r0, [r6, #84]	; 0x54
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <inv_generate_accel_gyro_quaternion+0x440>)
 80028ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80028b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028b6:	f8c6 9058 	str.w	r9, [r6, #88]	; 0x58
 80028ba:	f504 7788 	add.w	r7, r4, #272	; 0x110
 80028be:	4638      	mov	r0, r7
 80028c0:	462a      	mov	r2, r5
 80028c2:	491b      	ldr	r1, [pc, #108]	; (8002930 <inv_generate_accel_gyro_quaternion+0x444>)
 80028c4:	f00a fd0c 	bl	800d2e0 <inv_q_mult>
 80028c8:	aa14      	add	r2, sp, #80	; 0x50
 80028ca:	4629      	mov	r1, r5
 80028cc:	4819      	ldr	r0, [pc, #100]	; (8002934 <inv_generate_accel_gyro_quaternion+0x448>)
 80028ce:	f00a fd07 	bl	800d2e0 <inv_q_mult>
 80028d2:	4638      	mov	r0, r7
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <inv_generate_accel_gyro_quaternion+0x448>)
 80028d6:	f00a fdfc 	bl	800d4d2 <inv_q_invert>
 80028da:	a914      	add	r1, sp, #80	; 0x50
 80028dc:	480f      	ldr	r0, [pc, #60]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 80028de:	462a      	mov	r2, r5
 80028e0:	f00a fcfe 	bl	800d2e0 <inv_q_mult>
 80028e4:	4628      	mov	r0, r5
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 80028e8:	f7ff fcbe 	bl	8002268 <inv_normalize_quat>
 80028ec:	e617      	b.n	800251e <inv_generate_accel_gyro_quaternion+0x32>
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7ff fd48 	bl	8002384 <inv_generate_gyro_quaternion.part.1>
 80028f4:	e613      	b.n	800251e <inv_generate_accel_gyro_quaternion+0x32>
 80028f6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80028f8:	4c0f      	ldr	r4, [pc, #60]	; (8002938 <inv_generate_accel_gyro_quaternion+0x44c>)
 80028fa:	17ca      	asrs	r2, r1, #31
 80028fc:	fb84 1401 	smull	r1, r4, r4, r1
 8002900:	ebc2 24e4 	rsb	r4, r2, r4, asr #11
 8002904:	2c01      	cmp	r4, #1
 8002906:	bfb8      	it	lt
 8002908:	2401      	movlt	r4, #1
 800290a:	2b03      	cmp	r3, #3
 800290c:	f47f ae3d 	bne.w	800258a <inv_generate_accel_gyro_quaternion+0x9e>
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <inv_generate_accel_gyro_quaternion+0x450>)
 8002912:	fb03 f404 	mul.w	r4, r3, r4
 8002916:	e63c      	b.n	8002592 <inv_generate_accel_gyro_quaternion+0xa6>
 8002918:	001c9871 	.word	0x001c9871
 800291c:	2000050c 	.word	0x2000050c
 8002920:	40490fdb 	.word	0x40490fdb
 8002924:	43340000 	.word	0x43340000
 8002928:	49742400 	.word	0x49742400
 800292c:	20000548 	.word	0x20000548
 8002930:	20000554 	.word	0x20000554
 8002934:	20000568 	.word	0x20000568
 8002938:	68db8bad 	.word	0x68db8bad
 800293c:	00c49ba6 	.word	0x00c49ba6
 8002940:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002942:	f000 ff83 	bl	800384c <__aeabi_i2f>
 8002946:	4605      	mov	r5, r0
 8002948:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800294a:	f000 ff7f 	bl	800384c <__aeabi_i2f>
 800294e:	4607      	mov	r7, r0
 8002950:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002952:	f000 ff7b 	bl	800384c <__aeabi_i2f>
 8002956:	4629      	mov	r1, r5
 8002958:	4606      	mov	r6, r0
 800295a:	4628      	mov	r0, r5
 800295c:	f000 ffca 	bl	80038f4 <__aeabi_fmul>
 8002960:	4639      	mov	r1, r7
 8002962:	4605      	mov	r5, r0
 8002964:	4638      	mov	r0, r7
 8002966:	f000 ffc5 	bl	80038f4 <__aeabi_fmul>
 800296a:	4601      	mov	r1, r0
 800296c:	4628      	mov	r0, r5
 800296e:	f000 feb9 	bl	80036e4 <__addsf3>
 8002972:	4631      	mov	r1, r6
 8002974:	4605      	mov	r5, r0
 8002976:	4630      	mov	r0, r6
 8002978:	f000 ffbc 	bl	80038f4 <__aeabi_fmul>
 800297c:	4601      	mov	r1, r0
 800297e:	4628      	mov	r0, r5
 8002980:	f000 feb0 	bl	80036e4 <__addsf3>
 8002984:	f011 fd5a 	bl	801443c <sqrtf>
 8002988:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800298c:	4605      	mov	r5, r0
 800298e:	f001 f959 	bl	8003c44 <__aeabi_fcmple>
 8002992:	2800      	cmp	r0, #0
 8002994:	f040 810d 	bne.w	8002bb2 <inv_generate_accel_gyro_quaternion+0x6c6>
 8002998:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800299a:	f000 ff57 	bl	800384c <__aeabi_i2f>
 800299e:	4629      	mov	r1, r5
 80029a0:	f001 f85c 	bl	8003a5c <__aeabi_fdiv>
 80029a4:	4605      	mov	r5, r0
 80029a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80029aa:	4629      	mov	r1, r5
 80029ac:	f000 fe98 	bl	80036e0 <__aeabi_fsub>
 80029b0:	2100      	movs	r1, #0
 80029b2:	4606      	mov	r6, r0
 80029b4:	f001 f95a 	bl	8003c6c <__aeabi_fcmpgt>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f000 8128 	beq.w	8002c0e <inv_generate_accel_gyro_quaternion+0x722>
 80029be:	4630      	mov	r0, r6
 80029c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029c4:	f000 ff96 	bl	80038f4 <__aeabi_fmul>
 80029c8:	f011 fd38 	bl	801443c <sqrtf>
 80029cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029d0:	4680      	mov	r8, r0
 80029d2:	4628      	mov	r0, r5
 80029d4:	f000 fe86 	bl	80036e4 <__addsf3>
 80029d8:	2100      	movs	r1, #0
 80029da:	4605      	mov	r5, r0
 80029dc:	f001 f946 	bl	8003c6c <__aeabi_fcmpgt>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	f000 8112 	beq.w	8002c0a <inv_generate_accel_gyro_quaternion+0x71e>
 80029e6:	4628      	mov	r0, r5
 80029e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029ec:	f000 ff82 	bl	80038f4 <__aeabi_fmul>
 80029f0:	f011 fd24 	bl	801443c <sqrtf>
 80029f4:	4681      	mov	r9, r0
 80029f6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80029f8:	f000 ff28 	bl	800384c <__aeabi_i2f>
 80029fc:	4605      	mov	r5, r0
 80029fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a00:	f000 ff24 	bl	800384c <__aeabi_i2f>
 8002a04:	4629      	mov	r1, r5
 8002a06:	4606      	mov	r6, r0
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 ff73 	bl	80038f4 <__aeabi_fmul>
 8002a0e:	4631      	mov	r1, r6
 8002a10:	4605      	mov	r5, r0
 8002a12:	4630      	mov	r0, r6
 8002a14:	f000 ff6e 	bl	80038f4 <__aeabi_fmul>
 8002a18:	4601      	mov	r1, r0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f000 fe62 	bl	80036e4 <__addsf3>
 8002a20:	f011 fd0c 	bl	801443c <sqrtf>
 8002a24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a28:	4607      	mov	r7, r0
 8002a2a:	f001 f90b 	bl	8003c44 <__aeabi_fcmple>
 8002a2e:	4605      	mov	r5, r0
 8002a30:	2800      	cmp	r0, #0
 8002a32:	f040 80be 	bne.w	8002bb2 <inv_generate_accel_gyro_quaternion+0x6c6>
 8002a36:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002a3a:	4648      	mov	r0, r9
 8002a3c:	f000 ff5a 	bl	80038f4 <__aeabi_fmul>
 8002a40:	f001 f934 	bl	8003cac <__aeabi_f2iz>
 8002a44:	4e74      	ldr	r6, [pc, #464]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002a46:	f108 4900 	add.w	r9, r8, #2147483648	; 0x80000000
 8002a4a:	6130      	str	r0, [r6, #16]
 8002a4c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a4e:	f000 fefd 	bl	800384c <__aeabi_i2f>
 8002a52:	4639      	mov	r1, r7
 8002a54:	f001 f802 	bl	8003a5c <__aeabi_fdiv>
 8002a58:	4601      	mov	r1, r0
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	f000 ff4a 	bl	80038f4 <__aeabi_fmul>
 8002a60:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002a64:	f000 ff46 	bl	80038f4 <__aeabi_fmul>
 8002a68:	f001 f920 	bl	8003cac <__aeabi_f2iz>
 8002a6c:	6170      	str	r0, [r6, #20]
 8002a6e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002a70:	f000 feec 	bl	800384c <__aeabi_i2f>
 8002a74:	4639      	mov	r1, r7
 8002a76:	f000 fff1 	bl	8003a5c <__aeabi_fdiv>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4648      	mov	r0, r9
 8002a7e:	f000 ff39 	bl	80038f4 <__aeabi_fmul>
 8002a82:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002a86:	f000 ff35 	bl	80038f4 <__aeabi_fmul>
 8002a8a:	f001 f90f 	bl	8003cac <__aeabi_f2iz>
 8002a8e:	61f5      	str	r5, [r6, #28]
 8002a90:	61b0      	str	r0, [r6, #24]
 8002a92:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	f100 80a2 	bmi.w	8002be0 <inv_generate_accel_gyro_quaternion+0x6f4>
 8002a9c:	4669      	mov	r1, sp
 8002a9e:	485e      	ldr	r0, [pc, #376]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002aa0:	f00a fd17 	bl	800d4d2 <inv_q_invert>
 8002aa4:	485d      	ldr	r0, [pc, #372]	; (8002c1c <inv_generate_accel_gyro_quaternion+0x730>)
 8002aa6:	4669      	mov	r1, sp
 8002aa8:	f100 0210 	add.w	r2, r0, #16
 8002aac:	f00a fc18 	bl	800d2e0 <inv_q_mult>
 8002ab0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8002ab4:	e52c      	b.n	8002510 <inv_generate_accel_gyro_quaternion+0x24>
 8002ab6:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8002aba:	f106 015c 	add.w	r1, r6, #92	; 0x5c
 8002abe:	f00a fd08 	bl	800d4d2 <inv_q_invert>
 8002ac2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002ac4:	05df      	lsls	r7, r3, #23
 8002ac6:	f100 8094 	bmi.w	8002bf2 <inv_generate_accel_gyro_quaternion+0x706>
 8002aca:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8002ace:	e51f      	b.n	8002510 <inv_generate_accel_gyro_quaternion+0x24>
 8002ad0:	a80c      	add	r0, sp, #48	; 0x30
 8002ad2:	f00b fd29 	bl	800e528 <inv_get_linear_accel>
 8002ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ada:	fb82 2302 	smull	r2, r3, r2, r2
 8002ade:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002ae2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ae4:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002ae8:	4590      	cmp	r8, r2
 8002aea:	eb79 0303 	sbcs.w	r3, r9, r3
 8002aee:	f6bf ad40 	bge.w	8002572 <inv_generate_accel_gyro_quaternion+0x86>
 8002af2:	2304      	movs	r3, #4
 8002af4:	63ab      	str	r3, [r5, #56]	; 0x38
 8002af6:	2400      	movs	r4, #0
 8002af8:	e54b      	b.n	8002592 <inv_generate_accel_gyro_quaternion+0xa6>
 8002afa:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002afe:	4946      	ldr	r1, [pc, #280]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002b00:	f7ff fbb2 	bl	8002268 <inv_normalize_quat>
 8002b04:	e50b      	b.n	800251e <inv_generate_accel_gyro_quaternion+0x32>
 8002b06:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002c34 <inv_generate_accel_gyro_quaternion+0x748>
 8002b0a:	4640      	mov	r0, r8
 8002b0c:	f000 fe9e 	bl	800384c <__aeabi_i2f>
 8002b10:	4943      	ldr	r1, [pc, #268]	; (8002c20 <inv_generate_accel_gyro_quaternion+0x734>)
 8002b12:	f000 ffa3 	bl	8003a5c <__aeabi_fdiv>
 8002b16:	4649      	mov	r1, r9
 8002b18:	f000 feec 	bl	80038f4 <__aeabi_fmul>
 8002b1c:	4681      	mov	r9, r0
 8002b1e:	f04f 0800 	mov.w	r8, #0
 8002b22:	4649      	mov	r1, r9
 8002b24:	4638      	mov	r0, r7
 8002b26:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002b2a:	f000 fee3 	bl	80038f4 <__aeabi_fmul>
 8002b2e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8002b32:	9011      	str	r0, [sp, #68]	; 0x44
 8002b34:	4648      	mov	r0, r9
 8002b36:	f000 fedd 	bl	80038f4 <__aeabi_fmul>
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	9012      	str	r0, [sp, #72]	; 0x48
 8002b3e:	aa08      	add	r2, sp, #32
 8002b40:	a810      	add	r0, sp, #64	; 0x40
 8002b42:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002b46:	f00a fd1a 	bl	800d57e <inv_q_multf>
 8002b4a:	a808      	add	r0, sp, #32
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f00a fe20 	bl	800d794 <inv_q_addf>
 8002b54:	a808      	add	r0, sp, #32
 8002b56:	f00a ff8d 	bl	800da74 <inv_q_norm4>
 8002b5a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b5e:	9808      	ldr	r0, [sp, #32]
 8002b60:	f000 fec8 	bl	80038f4 <__aeabi_fmul>
 8002b64:	f001 f8a2 	bl	8003cac <__aeabi_f2iz>
 8002b68:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b6c:	6130      	str	r0, [r6, #16]
 8002b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b70:	f000 fec0 	bl	80038f4 <__aeabi_fmul>
 8002b74:	f001 f89a 	bl	8003cac <__aeabi_f2iz>
 8002b78:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b7c:	6170      	str	r0, [r6, #20]
 8002b7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b80:	f000 feb8 	bl	80038f4 <__aeabi_fmul>
 8002b84:	f001 f892 	bl	8003cac <__aeabi_f2iz>
 8002b88:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b8c:	61b0      	str	r0, [r6, #24]
 8002b8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002b90:	f000 feb0 	bl	80038f4 <__aeabi_fmul>
 8002b94:	f001 f88a 	bl	8003cac <__aeabi_f2iz>
 8002b98:	61f0      	str	r0, [r6, #28]
 8002b9a:	e518      	b.n	80025ce <inv_generate_accel_gyro_quaternion+0xe2>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba2:	64b2      	str	r2, [r6, #72]	; 0x48
 8002ba4:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002ba6:	6533      	str	r3, [r6, #80]	; 0x50
 8002ba8:	6573      	str	r3, [r6, #84]	; 0x54
 8002baa:	e67f      	b.n	80028ac <inv_generate_accel_gyro_quaternion+0x3c0>
 8002bac:	f04f 597a 	mov.w	r9, #1048576000	; 0x3e800000
 8002bb0:	e7ab      	b.n	8002b0a <inv_generate_accel_gyro_quaternion+0x61e>
 8002bb2:	4e19      	ldr	r6, [pc, #100]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bba:	6132      	str	r2, [r6, #16]
 8002bbc:	6173      	str	r3, [r6, #20]
 8002bbe:	61b3      	str	r3, [r6, #24]
 8002bc0:	61f3      	str	r3, [r6, #28]
 8002bc2:	e766      	b.n	8002a92 <inv_generate_accel_gyro_quaternion+0x5a6>
 8002bc4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002bc6:	4c17      	ldr	r4, [pc, #92]	; (8002c24 <inv_generate_accel_gyro_quaternion+0x738>)
 8002bc8:	17d3      	asrs	r3, r2, #31
 8002bca:	fb84 2402 	smull	r2, r4, r4, r2
 8002bce:	ebc3 24e4 	rsb	r4, r3, r4, asr #11
 8002bd2:	2c00      	cmp	r4, #0
 8002bd4:	bfc3      	ittte	gt
 8002bd6:	4b14      	ldrgt	r3, [pc, #80]	; (8002c28 <inv_generate_accel_gyro_quaternion+0x73c>)
 8002bd8:	00e4      	lslgt	r4, r4, #3
 8002bda:	435c      	mulgt	r4, r3
 8002bdc:	4c13      	ldrle	r4, [pc, #76]	; (8002c2c <inv_generate_accel_gyro_quaternion+0x740>)
 8002bde:	e4d8      	b.n	8002592 <inv_generate_accel_gyro_quaternion+0xa6>
 8002be0:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002be4:	4912      	ldr	r1, [pc, #72]	; (8002c30 <inv_generate_accel_gyro_quaternion+0x744>)
 8002be6:	f00a fc74 	bl	800d4d2 <inv_q_invert>
 8002bea:	e757      	b.n	8002a9c <inv_generate_accel_gyro_quaternion+0x5b0>
 8002bec:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002c38 <inv_generate_accel_gyro_quaternion+0x74c>
 8002bf0:	e78b      	b.n	8002b0a <inv_generate_accel_gyro_quaternion+0x61e>
 8002bf2:	4669      	mov	r1, sp
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f00a fc6c 	bl	800d4d2 <inv_q_invert>
 8002bfa:	4669      	mov	r1, sp
 8002bfc:	f106 0010 	add.w	r0, r6, #16
 8002c00:	f106 0220 	add.w	r2, r6, #32
 8002c04:	f00a fb6c 	bl	800d2e0 <inv_q_mult>
 8002c08:	e75f      	b.n	8002aca <inv_generate_accel_gyro_quaternion+0x5de>
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	e6f0      	b.n	80029f0 <inv_generate_accel_gyro_quaternion+0x504>
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e6da      	b.n	80029c8 <inv_generate_accel_gyro_quaternion+0x4dc>
 8002c12:	ad18      	add	r5, sp, #96	; 0x60
 8002c14:	e651      	b.n	80028ba <inv_generate_accel_gyro_quaternion+0x3ce>
 8002c16:	bf00      	nop
 8002c18:	2000050c 	.word	0x2000050c
 8002c1c:	2000051c 	.word	0x2000051c
 8002c20:	47cd1400 	.word	0x47cd1400
 8002c24:	68db8bad 	.word	0x68db8bad
 8002c28:	00c49ba6 	.word	0x00c49ba6
 8002c2c:	0624dd30 	.word	0x0624dd30
 8002c30:	20000568 	.word	0x20000568
 8002c34:	3bc49ba6 	.word	0x3bc49ba6
 8002c38:	3d75c28f 	.word	0x3d75c28f

08002c3c <inv_generate_quaternion>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c40:	05dc      	lsls	r4, r3, #23
 8002c42:	d402      	bmi.n	8002c4a <inv_generate_quaternion+0xe>
 8002c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002c46:	05d9      	lsls	r1, r3, #23
 8002c48:	d50f      	bpl.n	8002c6a <inv_generate_quaternion+0x2e>
 8002c4a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8002c4e:	4604      	mov	r4, r0
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c58:	d011      	beq.n	8002c7e <inv_generate_quaternion+0x42>
 8002c5a:	f7ff fc47 	bl	80024ec <inv_generate_accel_gyro_quaternion>
 8002c5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <inv_generate_quaternion+0x58>)
 8002c62:	f00b fa85 	bl	800e170 <inv_store_gaming_quaternion>
 8002c66:	2000      	movs	r0, #0
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
 8002c6a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8002c6e:	05da      	lsls	r2, r3, #23
 8002c70:	d5f9      	bpl.n	8002c66 <inv_generate_quaternion+0x2a>
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	d1ed      	bne.n	8002c5a <inv_generate_quaternion+0x1e>
 8002c7e:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8002c82:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002c86:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8002c8a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002c8e:	4d01      	ldr	r5, [pc, #4]	; (8002c94 <inv_generate_quaternion+0x58>)
 8002c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c92:	e7e4      	b.n	8002c5e <inv_generate_quaternion+0x22>
 8002c94:	2000051c 	.word	0x2000051c

08002c98 <inv_stop_quaternion>:
 8002c98:	4801      	ldr	r0, [pc, #4]	; (8002ca0 <inv_stop_quaternion+0x8>)
 8002c9a:	f009 bd57 	b.w	800c74c <inv_unregister_data_cb>
 8002c9e:	bf00      	nop
 8002ca0:	08002c3d 	.word	0x08002c3d

08002ca4 <inv_init_quaternion>:
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	4c07      	ldr	r4, [pc, #28]	; (8002cc4 <inv_init_quaternion+0x20>)
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4620      	mov	r0, r4
 8002cac:	226c      	movs	r2, #108	; 0x6c
 8002cae:	f00e ff01 	bl	8011ab4 <memset>
 8002cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cb6:	6123      	str	r3, [r4, #16]
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	6223      	str	r3, [r4, #32]
 8002cbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002cbe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	bd10      	pop	{r4, pc}
 8002cc4:	2000050c 	.word	0x2000050c

08002cc8 <inv_enable_quaternion>:
 8002cc8:	b508      	push	{r3, lr}
 8002cca:	f7ff ffeb 	bl	8002ca4 <inv_init_quaternion>
 8002cce:	b100      	cbz	r0, 8002cd2 <inv_enable_quaternion+0xa>
 8002cd0:	bd08      	pop	{r3, pc}
 8002cd2:	4802      	ldr	r0, [pc, #8]	; (8002cdc <inv_enable_quaternion+0x14>)
 8002cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cd8:	f00b bca4 	b.w	800e624 <inv_register_mpl_start_notification>
 8002cdc:	08002355 	.word	0x08002355

08002ce0 <inv_disable_quaternion>:
 8002ce0:	b508      	push	{r3, lr}
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <inv_disable_quaternion+0x14>)
 8002ce4:	f009 fd32 	bl	800c74c <inv_unregister_data_cb>
 8002ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <inv_disable_quaternion+0x18>)
 8002cee:	f00b bc59 	b.w	800e5a4 <inv_unregister_mpl_start_notification>
 8002cf2:	bf00      	nop
 8002cf4:	08002c3d 	.word	0x08002c3d
 8002cf8:	08002355 	.word	0x08002355
 8002cfc:	f3af 8000 	nop.w

08002d00 <strlen>:
 8002d00:	4603      	mov	r3, r0
 8002d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	d1fb      	bne.n	8002d02 <strlen+0x2>
 8002d0a:	1a18      	subs	r0, r3, r0
 8002d0c:	3801      	subs	r0, #1
 8002d0e:	4770      	bx	lr

08002d10 <__aeabi_drsub>:
 8002d10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002d14:	e002      	b.n	8002d1c <__adddf3>
 8002d16:	bf00      	nop

08002d18 <__aeabi_dsub>:
 8002d18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002d1c <__adddf3>:
 8002d1c:	b530      	push	{r4, r5, lr}
 8002d1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002d22:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002d26:	ea94 0f05 	teq	r4, r5
 8002d2a:	bf08      	it	eq
 8002d2c:	ea90 0f02 	teqeq	r0, r2
 8002d30:	bf1f      	itttt	ne
 8002d32:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002d36:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002d3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002d3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002d42:	f000 80e2 	beq.w	8002f0a <__adddf3+0x1ee>
 8002d46:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002d4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002d4e:	bfb8      	it	lt
 8002d50:	426d      	neglt	r5, r5
 8002d52:	dd0c      	ble.n	8002d6e <__adddf3+0x52>
 8002d54:	442c      	add	r4, r5
 8002d56:	ea80 0202 	eor.w	r2, r0, r2
 8002d5a:	ea81 0303 	eor.w	r3, r1, r3
 8002d5e:	ea82 0000 	eor.w	r0, r2, r0
 8002d62:	ea83 0101 	eor.w	r1, r3, r1
 8002d66:	ea80 0202 	eor.w	r2, r0, r2
 8002d6a:	ea81 0303 	eor.w	r3, r1, r3
 8002d6e:	2d36      	cmp	r5, #54	; 0x36
 8002d70:	bf88      	it	hi
 8002d72:	bd30      	pophi	{r4, r5, pc}
 8002d74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002d78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002d7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002d80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002d84:	d002      	beq.n	8002d8c <__adddf3+0x70>
 8002d86:	4240      	negs	r0, r0
 8002d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002d8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002d90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002d94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002d98:	d002      	beq.n	8002da0 <__adddf3+0x84>
 8002d9a:	4252      	negs	r2, r2
 8002d9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002da0:	ea94 0f05 	teq	r4, r5
 8002da4:	f000 80a7 	beq.w	8002ef6 <__adddf3+0x1da>
 8002da8:	f1a4 0401 	sub.w	r4, r4, #1
 8002dac:	f1d5 0e20 	rsbs	lr, r5, #32
 8002db0:	db0d      	blt.n	8002dce <__adddf3+0xb2>
 8002db2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002db6:	fa22 f205 	lsr.w	r2, r2, r5
 8002dba:	1880      	adds	r0, r0, r2
 8002dbc:	f141 0100 	adc.w	r1, r1, #0
 8002dc0:	fa03 f20e 	lsl.w	r2, r3, lr
 8002dc4:	1880      	adds	r0, r0, r2
 8002dc6:	fa43 f305 	asr.w	r3, r3, r5
 8002dca:	4159      	adcs	r1, r3
 8002dcc:	e00e      	b.n	8002dec <__adddf3+0xd0>
 8002dce:	f1a5 0520 	sub.w	r5, r5, #32
 8002dd2:	f10e 0e20 	add.w	lr, lr, #32
 8002dd6:	2a01      	cmp	r2, #1
 8002dd8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002ddc:	bf28      	it	cs
 8002dde:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002de2:	fa43 f305 	asr.w	r3, r3, r5
 8002de6:	18c0      	adds	r0, r0, r3
 8002de8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002df0:	d507      	bpl.n	8002e02 <__adddf3+0xe6>
 8002df2:	f04f 0e00 	mov.w	lr, #0
 8002df6:	f1dc 0c00 	rsbs	ip, ip, #0
 8002dfa:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002dfe:	eb6e 0101 	sbc.w	r1, lr, r1
 8002e02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002e06:	d31b      	bcc.n	8002e40 <__adddf3+0x124>
 8002e08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002e0c:	d30c      	bcc.n	8002e28 <__adddf3+0x10c>
 8002e0e:	0849      	lsrs	r1, r1, #1
 8002e10:	ea5f 0030 	movs.w	r0, r0, rrx
 8002e14:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002e18:	f104 0401 	add.w	r4, r4, #1
 8002e1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002e20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002e24:	f080 809a 	bcs.w	8002f5c <__adddf3+0x240>
 8002e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002e2c:	bf08      	it	eq
 8002e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002e32:	f150 0000 	adcs.w	r0, r0, #0
 8002e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002e3a:	ea41 0105 	orr.w	r1, r1, r5
 8002e3e:	bd30      	pop	{r4, r5, pc}
 8002e40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002e44:	4140      	adcs	r0, r0
 8002e46:	eb41 0101 	adc.w	r1, r1, r1
 8002e4a:	3c01      	subs	r4, #1
 8002e4c:	bf28      	it	cs
 8002e4e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8002e52:	d2e9      	bcs.n	8002e28 <__adddf3+0x10c>
 8002e54:	f091 0f00 	teq	r1, #0
 8002e58:	bf04      	itt	eq
 8002e5a:	4601      	moveq	r1, r0
 8002e5c:	2000      	moveq	r0, #0
 8002e5e:	fab1 f381 	clz	r3, r1
 8002e62:	bf08      	it	eq
 8002e64:	3320      	addeq	r3, #32
 8002e66:	f1a3 030b 	sub.w	r3, r3, #11
 8002e6a:	f1b3 0220 	subs.w	r2, r3, #32
 8002e6e:	da0c      	bge.n	8002e8a <__adddf3+0x16e>
 8002e70:	320c      	adds	r2, #12
 8002e72:	dd08      	ble.n	8002e86 <__adddf3+0x16a>
 8002e74:	f102 0c14 	add.w	ip, r2, #20
 8002e78:	f1c2 020c 	rsb	r2, r2, #12
 8002e7c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002e80:	fa21 f102 	lsr.w	r1, r1, r2
 8002e84:	e00c      	b.n	8002ea0 <__adddf3+0x184>
 8002e86:	f102 0214 	add.w	r2, r2, #20
 8002e8a:	bfd8      	it	le
 8002e8c:	f1c2 0c20 	rsble	ip, r2, #32
 8002e90:	fa01 f102 	lsl.w	r1, r1, r2
 8002e94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002e98:	bfdc      	itt	le
 8002e9a:	ea41 010c 	orrle.w	r1, r1, ip
 8002e9e:	4090      	lslle	r0, r2
 8002ea0:	1ae4      	subs	r4, r4, r3
 8002ea2:	bfa2      	ittt	ge
 8002ea4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002ea8:	4329      	orrge	r1, r5
 8002eaa:	bd30      	popge	{r4, r5, pc}
 8002eac:	ea6f 0404 	mvn.w	r4, r4
 8002eb0:	3c1f      	subs	r4, #31
 8002eb2:	da1c      	bge.n	8002eee <__adddf3+0x1d2>
 8002eb4:	340c      	adds	r4, #12
 8002eb6:	dc0e      	bgt.n	8002ed6 <__adddf3+0x1ba>
 8002eb8:	f104 0414 	add.w	r4, r4, #20
 8002ebc:	f1c4 0220 	rsb	r2, r4, #32
 8002ec0:	fa20 f004 	lsr.w	r0, r0, r4
 8002ec4:	fa01 f302 	lsl.w	r3, r1, r2
 8002ec8:	ea40 0003 	orr.w	r0, r0, r3
 8002ecc:	fa21 f304 	lsr.w	r3, r1, r4
 8002ed0:	ea45 0103 	orr.w	r1, r5, r3
 8002ed4:	bd30      	pop	{r4, r5, pc}
 8002ed6:	f1c4 040c 	rsb	r4, r4, #12
 8002eda:	f1c4 0220 	rsb	r2, r4, #32
 8002ede:	fa20 f002 	lsr.w	r0, r0, r2
 8002ee2:	fa01 f304 	lsl.w	r3, r1, r4
 8002ee6:	ea40 0003 	orr.w	r0, r0, r3
 8002eea:	4629      	mov	r1, r5
 8002eec:	bd30      	pop	{r4, r5, pc}
 8002eee:	fa21 f004 	lsr.w	r0, r1, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	bd30      	pop	{r4, r5, pc}
 8002ef6:	f094 0f00 	teq	r4, #0
 8002efa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002efe:	bf06      	itte	eq
 8002f00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002f04:	3401      	addeq	r4, #1
 8002f06:	3d01      	subne	r5, #1
 8002f08:	e74e      	b.n	8002da8 <__adddf3+0x8c>
 8002f0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002f0e:	bf18      	it	ne
 8002f10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002f14:	d029      	beq.n	8002f6a <__adddf3+0x24e>
 8002f16:	ea94 0f05 	teq	r4, r5
 8002f1a:	bf08      	it	eq
 8002f1c:	ea90 0f02 	teqeq	r0, r2
 8002f20:	d005      	beq.n	8002f2e <__adddf3+0x212>
 8002f22:	ea54 0c00 	orrs.w	ip, r4, r0
 8002f26:	bf04      	itt	eq
 8002f28:	4619      	moveq	r1, r3
 8002f2a:	4610      	moveq	r0, r2
 8002f2c:	bd30      	pop	{r4, r5, pc}
 8002f2e:	ea91 0f03 	teq	r1, r3
 8002f32:	bf1e      	ittt	ne
 8002f34:	2100      	movne	r1, #0
 8002f36:	2000      	movne	r0, #0
 8002f38:	bd30      	popne	{r4, r5, pc}
 8002f3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002f3e:	d105      	bne.n	8002f4c <__adddf3+0x230>
 8002f40:	0040      	lsls	r0, r0, #1
 8002f42:	4149      	adcs	r1, r1
 8002f44:	bf28      	it	cs
 8002f46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002f4a:	bd30      	pop	{r4, r5, pc}
 8002f4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002f50:	bf3c      	itt	cc
 8002f52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002f56:	bd30      	popcc	{r4, r5, pc}
 8002f58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002f5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002f60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	bd30      	pop	{r4, r5, pc}
 8002f6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002f6e:	bf1a      	itte	ne
 8002f70:	4619      	movne	r1, r3
 8002f72:	4610      	movne	r0, r2
 8002f74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002f78:	bf1c      	itt	ne
 8002f7a:	460b      	movne	r3, r1
 8002f7c:	4602      	movne	r2, r0
 8002f7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002f82:	bf06      	itte	eq
 8002f84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002f88:	ea91 0f03 	teqeq	r1, r3
 8002f8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002f90:	bd30      	pop	{r4, r5, pc}
 8002f92:	bf00      	nop

08002f94 <__aeabi_ui2d>:
 8002f94:	f090 0f00 	teq	r0, #0
 8002f98:	bf04      	itt	eq
 8002f9a:	2100      	moveq	r1, #0
 8002f9c:	4770      	bxeq	lr
 8002f9e:	b530      	push	{r4, r5, lr}
 8002fa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002fa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002fa8:	f04f 0500 	mov.w	r5, #0
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	e750      	b.n	8002e54 <__adddf3+0x138>
 8002fb2:	bf00      	nop

08002fb4 <__aeabi_i2d>:
 8002fb4:	f090 0f00 	teq	r0, #0
 8002fb8:	bf04      	itt	eq
 8002fba:	2100      	moveq	r1, #0
 8002fbc:	4770      	bxeq	lr
 8002fbe:	b530      	push	{r4, r5, lr}
 8002fc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002fc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002fc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002fcc:	bf48      	it	mi
 8002fce:	4240      	negmi	r0, r0
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	e73e      	b.n	8002e54 <__adddf3+0x138>
 8002fd6:	bf00      	nop

08002fd8 <__aeabi_f2d>:
 8002fd8:	0042      	lsls	r2, r0, #1
 8002fda:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002fde:	ea4f 0131 	mov.w	r1, r1, rrx
 8002fe2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002fe6:	bf1f      	itttt	ne
 8002fe8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002fec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002ff0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002ff4:	4770      	bxne	lr
 8002ff6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002ffa:	bf08      	it	eq
 8002ffc:	4770      	bxeq	lr
 8002ffe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003002:	bf04      	itt	eq
 8003004:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003008:	4770      	bxeq	lr
 800300a:	b530      	push	{r4, r5, lr}
 800300c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003018:	e71c      	b.n	8002e54 <__adddf3+0x138>
 800301a:	bf00      	nop

0800301c <__aeabi_ul2d>:
 800301c:	ea50 0201 	orrs.w	r2, r0, r1
 8003020:	bf08      	it	eq
 8003022:	4770      	bxeq	lr
 8003024:	b530      	push	{r4, r5, lr}
 8003026:	f04f 0500 	mov.w	r5, #0
 800302a:	e00a      	b.n	8003042 <__aeabi_l2d+0x16>

0800302c <__aeabi_l2d>:
 800302c:	ea50 0201 	orrs.w	r2, r0, r1
 8003030:	bf08      	it	eq
 8003032:	4770      	bxeq	lr
 8003034:	b530      	push	{r4, r5, lr}
 8003036:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800303a:	d502      	bpl.n	8003042 <__aeabi_l2d+0x16>
 800303c:	4240      	negs	r0, r0
 800303e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003042:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003046:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800304a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800304e:	f43f aed8 	beq.w	8002e02 <__adddf3+0xe6>
 8003052:	f04f 0203 	mov.w	r2, #3
 8003056:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800305a:	bf18      	it	ne
 800305c:	3203      	addne	r2, #3
 800305e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003062:	bf18      	it	ne
 8003064:	3203      	addne	r2, #3
 8003066:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800306a:	f1c2 0320 	rsb	r3, r2, #32
 800306e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003072:	fa20 f002 	lsr.w	r0, r0, r2
 8003076:	fa01 fe03 	lsl.w	lr, r1, r3
 800307a:	ea40 000e 	orr.w	r0, r0, lr
 800307e:	fa21 f102 	lsr.w	r1, r1, r2
 8003082:	4414      	add	r4, r2
 8003084:	e6bd      	b.n	8002e02 <__adddf3+0xe6>
 8003086:	bf00      	nop

08003088 <__aeabi_dmul>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800308e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003096:	bf1d      	ittte	ne
 8003098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800309c:	ea94 0f0c 	teqne	r4, ip
 80030a0:	ea95 0f0c 	teqne	r5, ip
 80030a4:	f000 f8de 	bleq	8003264 <__aeabi_dmul+0x1dc>
 80030a8:	442c      	add	r4, r5
 80030aa:	ea81 0603 	eor.w	r6, r1, r3
 80030ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80030b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80030b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80030ba:	bf18      	it	ne
 80030bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80030c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80030c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c8:	d038      	beq.n	800313c <__aeabi_dmul+0xb4>
 80030ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80030ce:	f04f 0500 	mov.w	r5, #0
 80030d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80030d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80030da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80030de:	f04f 0600 	mov.w	r6, #0
 80030e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80030e6:	f09c 0f00 	teq	ip, #0
 80030ea:	bf18      	it	ne
 80030ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80030f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80030f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80030f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80030fc:	d204      	bcs.n	8003108 <__aeabi_dmul+0x80>
 80030fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003102:	416d      	adcs	r5, r5
 8003104:	eb46 0606 	adc.w	r6, r6, r6
 8003108:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800310c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003110:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003114:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003118:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800311c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003120:	bf88      	it	hi
 8003122:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003126:	d81e      	bhi.n	8003166 <__aeabi_dmul+0xde>
 8003128:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800312c:	bf08      	it	eq
 800312e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003132:	f150 0000 	adcs.w	r0, r0, #0
 8003136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800313a:	bd70      	pop	{r4, r5, r6, pc}
 800313c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003140:	ea46 0101 	orr.w	r1, r6, r1
 8003144:	ea40 0002 	orr.w	r0, r0, r2
 8003148:	ea81 0103 	eor.w	r1, r1, r3
 800314c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003150:	bfc2      	ittt	gt
 8003152:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800315a:	bd70      	popgt	{r4, r5, r6, pc}
 800315c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003160:	f04f 0e00 	mov.w	lr, #0
 8003164:	3c01      	subs	r4, #1
 8003166:	f300 80ab 	bgt.w	80032c0 <__aeabi_dmul+0x238>
 800316a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800316e:	bfde      	ittt	le
 8003170:	2000      	movle	r0, #0
 8003172:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003176:	bd70      	pople	{r4, r5, r6, pc}
 8003178:	f1c4 0400 	rsb	r4, r4, #0
 800317c:	3c20      	subs	r4, #32
 800317e:	da35      	bge.n	80031ec <__aeabi_dmul+0x164>
 8003180:	340c      	adds	r4, #12
 8003182:	dc1b      	bgt.n	80031bc <__aeabi_dmul+0x134>
 8003184:	f104 0414 	add.w	r4, r4, #20
 8003188:	f1c4 0520 	rsb	r5, r4, #32
 800318c:	fa00 f305 	lsl.w	r3, r0, r5
 8003190:	fa20 f004 	lsr.w	r0, r0, r4
 8003194:	fa01 f205 	lsl.w	r2, r1, r5
 8003198:	ea40 0002 	orr.w	r0, r0, r2
 800319c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80031a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80031a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80031a8:	fa21 f604 	lsr.w	r6, r1, r4
 80031ac:	eb42 0106 	adc.w	r1, r2, r6
 80031b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80031b4:	bf08      	it	eq
 80031b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f1c4 040c 	rsb	r4, r4, #12
 80031c0:	f1c4 0520 	rsb	r5, r4, #32
 80031c4:	fa00 f304 	lsl.w	r3, r0, r4
 80031c8:	fa20 f005 	lsr.w	r0, r0, r5
 80031cc:	fa01 f204 	lsl.w	r2, r1, r4
 80031d0:	ea40 0002 	orr.w	r0, r0, r2
 80031d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80031d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80031dc:	f141 0100 	adc.w	r1, r1, #0
 80031e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80031e4:	bf08      	it	eq
 80031e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	f1c4 0520 	rsb	r5, r4, #32
 80031f0:	fa00 f205 	lsl.w	r2, r0, r5
 80031f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80031f8:	fa20 f304 	lsr.w	r3, r0, r4
 80031fc:	fa01 f205 	lsl.w	r2, r1, r5
 8003200:	ea43 0302 	orr.w	r3, r3, r2
 8003204:	fa21 f004 	lsr.w	r0, r1, r4
 8003208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800320c:	fa21 f204 	lsr.w	r2, r1, r4
 8003210:	ea20 0002 	bic.w	r0, r0, r2
 8003214:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800321c:	bf08      	it	eq
 800321e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f094 0f00 	teq	r4, #0
 8003228:	d10f      	bne.n	800324a <__aeabi_dmul+0x1c2>
 800322a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800322e:	0040      	lsls	r0, r0, #1
 8003230:	eb41 0101 	adc.w	r1, r1, r1
 8003234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003238:	bf08      	it	eq
 800323a:	3c01      	subeq	r4, #1
 800323c:	d0f7      	beq.n	800322e <__aeabi_dmul+0x1a6>
 800323e:	ea41 0106 	orr.w	r1, r1, r6
 8003242:	f095 0f00 	teq	r5, #0
 8003246:	bf18      	it	ne
 8003248:	4770      	bxne	lr
 800324a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800324e:	0052      	lsls	r2, r2, #1
 8003250:	eb43 0303 	adc.w	r3, r3, r3
 8003254:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003258:	bf08      	it	eq
 800325a:	3d01      	subeq	r5, #1
 800325c:	d0f7      	beq.n	800324e <__aeabi_dmul+0x1c6>
 800325e:	ea43 0306 	orr.w	r3, r3, r6
 8003262:	4770      	bx	lr
 8003264:	ea94 0f0c 	teq	r4, ip
 8003268:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800326c:	bf18      	it	ne
 800326e:	ea95 0f0c 	teqne	r5, ip
 8003272:	d00c      	beq.n	800328e <__aeabi_dmul+0x206>
 8003274:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003278:	bf18      	it	ne
 800327a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800327e:	d1d1      	bne.n	8003224 <__aeabi_dmul+0x19c>
 8003280:	ea81 0103 	eor.w	r1, r1, r3
 8003284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003292:	bf06      	itte	eq
 8003294:	4610      	moveq	r0, r2
 8003296:	4619      	moveq	r1, r3
 8003298:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800329c:	d019      	beq.n	80032d2 <__aeabi_dmul+0x24a>
 800329e:	ea94 0f0c 	teq	r4, ip
 80032a2:	d102      	bne.n	80032aa <__aeabi_dmul+0x222>
 80032a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80032a8:	d113      	bne.n	80032d2 <__aeabi_dmul+0x24a>
 80032aa:	ea95 0f0c 	teq	r5, ip
 80032ae:	d105      	bne.n	80032bc <__aeabi_dmul+0x234>
 80032b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80032b4:	bf1c      	itt	ne
 80032b6:	4610      	movne	r0, r2
 80032b8:	4619      	movne	r1, r3
 80032ba:	d10a      	bne.n	80032d2 <__aeabi_dmul+0x24a>
 80032bc:	ea81 0103 	eor.w	r1, r1, r3
 80032c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80032c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80032c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
 80032d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80032d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80032da:	bd70      	pop	{r4, r5, r6, pc}

080032dc <__aeabi_ddiv>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80032e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80032e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80032ea:	bf1d      	ittte	ne
 80032ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80032f0:	ea94 0f0c 	teqne	r4, ip
 80032f4:	ea95 0f0c 	teqne	r5, ip
 80032f8:	f000 f8a7 	bleq	800344a <__aeabi_ddiv+0x16e>
 80032fc:	eba4 0405 	sub.w	r4, r4, r5
 8003300:	ea81 0e03 	eor.w	lr, r1, r3
 8003304:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800330c:	f000 8088 	beq.w	8003420 <__aeabi_ddiv+0x144>
 8003310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003314:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003318:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800331c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003320:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003324:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003328:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800332c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003330:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003334:	429d      	cmp	r5, r3
 8003336:	bf08      	it	eq
 8003338:	4296      	cmpeq	r6, r2
 800333a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800333e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003342:	d202      	bcs.n	800334a <__aeabi_ddiv+0x6e>
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	ea4f 0232 	mov.w	r2, r2, rrx
 800334a:	1ab6      	subs	r6, r6, r2
 800334c:	eb65 0503 	sbc.w	r5, r5, r3
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	ea4f 0232 	mov.w	r2, r2, rrx
 8003356:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800335a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800335e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003362:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003366:	bf22      	ittt	cs
 8003368:	1ab6      	subcs	r6, r6, r2
 800336a:	4675      	movcs	r5, lr
 800336c:	ea40 000c 	orrcs.w	r0, r0, ip
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	ea4f 0232 	mov.w	r2, r2, rrx
 8003376:	ebb6 0e02 	subs.w	lr, r6, r2
 800337a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800337e:	bf22      	ittt	cs
 8003380:	1ab6      	subcs	r6, r6, r2
 8003382:	4675      	movcs	r5, lr
 8003384:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	ea4f 0232 	mov.w	r2, r2, rrx
 800338e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003392:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003396:	bf22      	ittt	cs
 8003398:	1ab6      	subcs	r6, r6, r2
 800339a:	4675      	movcs	r5, lr
 800339c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80033a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80033aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80033ae:	bf22      	ittt	cs
 80033b0:	1ab6      	subcs	r6, r6, r2
 80033b2:	4675      	movcs	r5, lr
 80033b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80033b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80033bc:	d018      	beq.n	80033f0 <__aeabi_ddiv+0x114>
 80033be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80033c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80033c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80033ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80033ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80033d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80033d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80033da:	d1c0      	bne.n	800335e <__aeabi_ddiv+0x82>
 80033dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80033e0:	d10b      	bne.n	80033fa <__aeabi_ddiv+0x11e>
 80033e2:	ea41 0100 	orr.w	r1, r1, r0
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80033ee:	e7b6      	b.n	800335e <__aeabi_ddiv+0x82>
 80033f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80033f4:	bf04      	itt	eq
 80033f6:	4301      	orreq	r1, r0
 80033f8:	2000      	moveq	r0, #0
 80033fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80033fe:	bf88      	it	hi
 8003400:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003404:	f63f aeaf 	bhi.w	8003166 <__aeabi_dmul+0xde>
 8003408:	ebb5 0c03 	subs.w	ip, r5, r3
 800340c:	bf04      	itt	eq
 800340e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003416:	f150 0000 	adcs.w	r0, r0, #0
 800341a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800341e:	bd70      	pop	{r4, r5, r6, pc}
 8003420:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003424:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003428:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800342c:	bfc2      	ittt	gt
 800342e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003436:	bd70      	popgt	{r4, r5, r6, pc}
 8003438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800343c:	f04f 0e00 	mov.w	lr, #0
 8003440:	3c01      	subs	r4, #1
 8003442:	e690      	b.n	8003166 <__aeabi_dmul+0xde>
 8003444:	ea45 0e06 	orr.w	lr, r5, r6
 8003448:	e68d      	b.n	8003166 <__aeabi_dmul+0xde>
 800344a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800344e:	ea94 0f0c 	teq	r4, ip
 8003452:	bf08      	it	eq
 8003454:	ea95 0f0c 	teqeq	r5, ip
 8003458:	f43f af3b 	beq.w	80032d2 <__aeabi_dmul+0x24a>
 800345c:	ea94 0f0c 	teq	r4, ip
 8003460:	d10a      	bne.n	8003478 <__aeabi_ddiv+0x19c>
 8003462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003466:	f47f af34 	bne.w	80032d2 <__aeabi_dmul+0x24a>
 800346a:	ea95 0f0c 	teq	r5, ip
 800346e:	f47f af25 	bne.w	80032bc <__aeabi_dmul+0x234>
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	e72c      	b.n	80032d2 <__aeabi_dmul+0x24a>
 8003478:	ea95 0f0c 	teq	r5, ip
 800347c:	d106      	bne.n	800348c <__aeabi_ddiv+0x1b0>
 800347e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003482:	f43f aefd 	beq.w	8003280 <__aeabi_dmul+0x1f8>
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	e722      	b.n	80032d2 <__aeabi_dmul+0x24a>
 800348c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003490:	bf18      	it	ne
 8003492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003496:	f47f aec5 	bne.w	8003224 <__aeabi_dmul+0x19c>
 800349a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800349e:	f47f af0d 	bne.w	80032bc <__aeabi_dmul+0x234>
 80034a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80034a6:	f47f aeeb 	bne.w	8003280 <__aeabi_dmul+0x1f8>
 80034aa:	e712      	b.n	80032d2 <__aeabi_dmul+0x24a>

080034ac <__gedf2>:
 80034ac:	f04f 3cff 	mov.w	ip, #4294967295
 80034b0:	e006      	b.n	80034c0 <__cmpdf2+0x4>
 80034b2:	bf00      	nop

080034b4 <__ledf2>:
 80034b4:	f04f 0c01 	mov.w	ip, #1
 80034b8:	e002      	b.n	80034c0 <__cmpdf2+0x4>
 80034ba:	bf00      	nop

080034bc <__cmpdf2>:
 80034bc:	f04f 0c01 	mov.w	ip, #1
 80034c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80034c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80034c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80034cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80034d0:	bf18      	it	ne
 80034d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80034d6:	d01b      	beq.n	8003510 <__cmpdf2+0x54>
 80034d8:	b001      	add	sp, #4
 80034da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80034de:	bf0c      	ite	eq
 80034e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80034e4:	ea91 0f03 	teqne	r1, r3
 80034e8:	bf02      	ittt	eq
 80034ea:	ea90 0f02 	teqeq	r0, r2
 80034ee:	2000      	moveq	r0, #0
 80034f0:	4770      	bxeq	lr
 80034f2:	f110 0f00 	cmn.w	r0, #0
 80034f6:	ea91 0f03 	teq	r1, r3
 80034fa:	bf58      	it	pl
 80034fc:	4299      	cmppl	r1, r3
 80034fe:	bf08      	it	eq
 8003500:	4290      	cmpeq	r0, r2
 8003502:	bf2c      	ite	cs
 8003504:	17d8      	asrcs	r0, r3, #31
 8003506:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800350a:	f040 0001 	orr.w	r0, r0, #1
 800350e:	4770      	bx	lr
 8003510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003518:	d102      	bne.n	8003520 <__cmpdf2+0x64>
 800351a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800351e:	d107      	bne.n	8003530 <__cmpdf2+0x74>
 8003520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003528:	d1d6      	bne.n	80034d8 <__cmpdf2+0x1c>
 800352a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800352e:	d0d3      	beq.n	80034d8 <__cmpdf2+0x1c>
 8003530:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <__aeabi_cdrcmple>:
 8003538:	4684      	mov	ip, r0
 800353a:	4610      	mov	r0, r2
 800353c:	4662      	mov	r2, ip
 800353e:	468c      	mov	ip, r1
 8003540:	4619      	mov	r1, r3
 8003542:	4663      	mov	r3, ip
 8003544:	e000      	b.n	8003548 <__aeabi_cdcmpeq>
 8003546:	bf00      	nop

08003548 <__aeabi_cdcmpeq>:
 8003548:	b501      	push	{r0, lr}
 800354a:	f7ff ffb7 	bl	80034bc <__cmpdf2>
 800354e:	2800      	cmp	r0, #0
 8003550:	bf48      	it	mi
 8003552:	f110 0f00 	cmnmi.w	r0, #0
 8003556:	bd01      	pop	{r0, pc}

08003558 <__aeabi_dcmpeq>:
 8003558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800355c:	f7ff fff4 	bl	8003548 <__aeabi_cdcmpeq>
 8003560:	bf0c      	ite	eq
 8003562:	2001      	moveq	r0, #1
 8003564:	2000      	movne	r0, #0
 8003566:	f85d fb08 	ldr.w	pc, [sp], #8
 800356a:	bf00      	nop

0800356c <__aeabi_dcmplt>:
 800356c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003570:	f7ff ffea 	bl	8003548 <__aeabi_cdcmpeq>
 8003574:	bf34      	ite	cc
 8003576:	2001      	movcc	r0, #1
 8003578:	2000      	movcs	r0, #0
 800357a:	f85d fb08 	ldr.w	pc, [sp], #8
 800357e:	bf00      	nop

08003580 <__aeabi_dcmple>:
 8003580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003584:	f7ff ffe0 	bl	8003548 <__aeabi_cdcmpeq>
 8003588:	bf94      	ite	ls
 800358a:	2001      	movls	r0, #1
 800358c:	2000      	movhi	r0, #0
 800358e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003592:	bf00      	nop

08003594 <__aeabi_dcmpge>:
 8003594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003598:	f7ff ffce 	bl	8003538 <__aeabi_cdrcmple>
 800359c:	bf94      	ite	ls
 800359e:	2001      	movls	r0, #1
 80035a0:	2000      	movhi	r0, #0
 80035a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80035a6:	bf00      	nop

080035a8 <__aeabi_dcmpgt>:
 80035a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80035ac:	f7ff ffc4 	bl	8003538 <__aeabi_cdrcmple>
 80035b0:	bf34      	ite	cc
 80035b2:	2001      	movcc	r0, #1
 80035b4:	2000      	movcs	r0, #0
 80035b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80035ba:	bf00      	nop

080035bc <__aeabi_dcmpun>:
 80035bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80035c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80035c4:	d102      	bne.n	80035cc <__aeabi_dcmpun+0x10>
 80035c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80035ca:	d10a      	bne.n	80035e2 <__aeabi_dcmpun+0x26>
 80035cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80035d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80035d4:	d102      	bne.n	80035dc <__aeabi_dcmpun+0x20>
 80035d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80035da:	d102      	bne.n	80035e2 <__aeabi_dcmpun+0x26>
 80035dc:	f04f 0000 	mov.w	r0, #0
 80035e0:	4770      	bx	lr
 80035e2:	f04f 0001 	mov.w	r0, #1
 80035e6:	4770      	bx	lr

080035e8 <__aeabi_d2iz>:
 80035e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80035ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80035f0:	d215      	bcs.n	800361e <__aeabi_d2iz+0x36>
 80035f2:	d511      	bpl.n	8003618 <__aeabi_d2iz+0x30>
 80035f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80035f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80035fc:	d912      	bls.n	8003624 <__aeabi_d2iz+0x3c>
 80035fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800360a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800360e:	fa23 f002 	lsr.w	r0, r3, r2
 8003612:	bf18      	it	ne
 8003614:	4240      	negne	r0, r0
 8003616:	4770      	bx	lr
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	4770      	bx	lr
 800361e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003622:	d105      	bne.n	8003630 <__aeabi_d2iz+0x48>
 8003624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003628:	bf08      	it	eq
 800362a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800362e:	4770      	bx	lr
 8003630:	f04f 0000 	mov.w	r0, #0
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop

08003638 <__aeabi_d2f>:
 8003638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800363c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003640:	bf24      	itt	cs
 8003642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800364a:	d90d      	bls.n	8003668 <__aeabi_d2f+0x30>
 800364c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003658:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800365c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003660:	bf08      	it	eq
 8003662:	f020 0001 	biceq.w	r0, r0, #1
 8003666:	4770      	bx	lr
 8003668:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800366c:	d121      	bne.n	80036b2 <__aeabi_d2f+0x7a>
 800366e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8003672:	bfbc      	itt	lt
 8003674:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003678:	4770      	bxlt	lr
 800367a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800367e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003682:	f1c2 0218 	rsb	r2, r2, #24
 8003686:	f1c2 0c20 	rsb	ip, r2, #32
 800368a:	fa10 f30c 	lsls.w	r3, r0, ip
 800368e:	fa20 f002 	lsr.w	r0, r0, r2
 8003692:	bf18      	it	ne
 8003694:	f040 0001 	orrne.w	r0, r0, #1
 8003698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800369c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80036a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80036a4:	ea40 000c 	orr.w	r0, r0, ip
 80036a8:	fa23 f302 	lsr.w	r3, r3, r2
 80036ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036b0:	e7cc      	b.n	800364c <__aeabi_d2f+0x14>
 80036b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80036b6:	d107      	bne.n	80036c8 <__aeabi_d2f+0x90>
 80036b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80036bc:	bf1e      	ittt	ne
 80036be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80036c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80036c6:	4770      	bxne	lr
 80036c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80036cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80036d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop

080036d8 <__aeabi_frsub>:
 80036d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80036dc:	e002      	b.n	80036e4 <__addsf3>
 80036de:	bf00      	nop

080036e0 <__aeabi_fsub>:
 80036e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080036e4 <__addsf3>:
 80036e4:	0042      	lsls	r2, r0, #1
 80036e6:	bf1f      	itttt	ne
 80036e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80036ec:	ea92 0f03 	teqne	r2, r3
 80036f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80036f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80036f8:	d06a      	beq.n	80037d0 <__addsf3+0xec>
 80036fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80036fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8003702:	bfc1      	itttt	gt
 8003704:	18d2      	addgt	r2, r2, r3
 8003706:	4041      	eorgt	r1, r0
 8003708:	4048      	eorgt	r0, r1
 800370a:	4041      	eorgt	r1, r0
 800370c:	bfb8      	it	lt
 800370e:	425b      	neglt	r3, r3
 8003710:	2b19      	cmp	r3, #25
 8003712:	bf88      	it	hi
 8003714:	4770      	bxhi	lr
 8003716:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800371a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800371e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003722:	bf18      	it	ne
 8003724:	4240      	negne	r0, r0
 8003726:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800372a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800372e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003732:	bf18      	it	ne
 8003734:	4249      	negne	r1, r1
 8003736:	ea92 0f03 	teq	r2, r3
 800373a:	d03f      	beq.n	80037bc <__addsf3+0xd8>
 800373c:	f1a2 0201 	sub.w	r2, r2, #1
 8003740:	fa41 fc03 	asr.w	ip, r1, r3
 8003744:	eb10 000c 	adds.w	r0, r0, ip
 8003748:	f1c3 0320 	rsb	r3, r3, #32
 800374c:	fa01 f103 	lsl.w	r1, r1, r3
 8003750:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003754:	d502      	bpl.n	800375c <__addsf3+0x78>
 8003756:	4249      	negs	r1, r1
 8003758:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800375c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003760:	d313      	bcc.n	800378a <__addsf3+0xa6>
 8003762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003766:	d306      	bcc.n	8003776 <__addsf3+0x92>
 8003768:	0840      	lsrs	r0, r0, #1
 800376a:	ea4f 0131 	mov.w	r1, r1, rrx
 800376e:	f102 0201 	add.w	r2, r2, #1
 8003772:	2afe      	cmp	r2, #254	; 0xfe
 8003774:	d251      	bcs.n	800381a <__addsf3+0x136>
 8003776:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800377a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800377e:	bf08      	it	eq
 8003780:	f020 0001 	biceq.w	r0, r0, #1
 8003784:	ea40 0003 	orr.w	r0, r0, r3
 8003788:	4770      	bx	lr
 800378a:	0049      	lsls	r1, r1, #1
 800378c:	eb40 0000 	adc.w	r0, r0, r0
 8003790:	3a01      	subs	r2, #1
 8003792:	bf28      	it	cs
 8003794:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8003798:	d2ed      	bcs.n	8003776 <__addsf3+0x92>
 800379a:	fab0 fc80 	clz	ip, r0
 800379e:	f1ac 0c08 	sub.w	ip, ip, #8
 80037a2:	ebb2 020c 	subs.w	r2, r2, ip
 80037a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80037aa:	bfaa      	itet	ge
 80037ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80037b0:	4252      	neglt	r2, r2
 80037b2:	4318      	orrge	r0, r3
 80037b4:	bfbc      	itt	lt
 80037b6:	40d0      	lsrlt	r0, r2
 80037b8:	4318      	orrlt	r0, r3
 80037ba:	4770      	bx	lr
 80037bc:	f092 0f00 	teq	r2, #0
 80037c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80037c4:	bf06      	itte	eq
 80037c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80037ca:	3201      	addeq	r2, #1
 80037cc:	3b01      	subne	r3, #1
 80037ce:	e7b5      	b.n	800373c <__addsf3+0x58>
 80037d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80037d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80037d8:	bf18      	it	ne
 80037da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80037de:	d021      	beq.n	8003824 <__addsf3+0x140>
 80037e0:	ea92 0f03 	teq	r2, r3
 80037e4:	d004      	beq.n	80037f0 <__addsf3+0x10c>
 80037e6:	f092 0f00 	teq	r2, #0
 80037ea:	bf08      	it	eq
 80037ec:	4608      	moveq	r0, r1
 80037ee:	4770      	bx	lr
 80037f0:	ea90 0f01 	teq	r0, r1
 80037f4:	bf1c      	itt	ne
 80037f6:	2000      	movne	r0, #0
 80037f8:	4770      	bxne	lr
 80037fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80037fe:	d104      	bne.n	800380a <__addsf3+0x126>
 8003800:	0040      	lsls	r0, r0, #1
 8003802:	bf28      	it	cs
 8003804:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003808:	4770      	bx	lr
 800380a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800380e:	bf3c      	itt	cc
 8003810:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8003814:	4770      	bxcc	lr
 8003816:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800381a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800381e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003822:	4770      	bx	lr
 8003824:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003828:	bf16      	itet	ne
 800382a:	4608      	movne	r0, r1
 800382c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8003830:	4601      	movne	r1, r0
 8003832:	0242      	lsls	r2, r0, #9
 8003834:	bf06      	itte	eq
 8003836:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800383a:	ea90 0f01 	teqeq	r0, r1
 800383e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8003842:	4770      	bx	lr

08003844 <__aeabi_ui2f>:
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e004      	b.n	8003854 <__aeabi_i2f+0x8>
 800384a:	bf00      	nop

0800384c <__aeabi_i2f>:
 800384c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8003850:	bf48      	it	mi
 8003852:	4240      	negmi	r0, r0
 8003854:	ea5f 0c00 	movs.w	ip, r0
 8003858:	bf08      	it	eq
 800385a:	4770      	bxeq	lr
 800385c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8003860:	4601      	mov	r1, r0
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	e01c      	b.n	80038a2 <__aeabi_l2f+0x2a>

08003868 <__aeabi_ul2f>:
 8003868:	ea50 0201 	orrs.w	r2, r0, r1
 800386c:	bf08      	it	eq
 800386e:	4770      	bxeq	lr
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e00a      	b.n	800388c <__aeabi_l2f+0x14>
 8003876:	bf00      	nop

08003878 <__aeabi_l2f>:
 8003878:	ea50 0201 	orrs.w	r2, r0, r1
 800387c:	bf08      	it	eq
 800387e:	4770      	bxeq	lr
 8003880:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8003884:	d502      	bpl.n	800388c <__aeabi_l2f+0x14>
 8003886:	4240      	negs	r0, r0
 8003888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800388c:	ea5f 0c01 	movs.w	ip, r1
 8003890:	bf02      	ittt	eq
 8003892:	4684      	moveq	ip, r0
 8003894:	4601      	moveq	r1, r0
 8003896:	2000      	moveq	r0, #0
 8003898:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800389c:	bf08      	it	eq
 800389e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80038a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80038a6:	fabc f28c 	clz	r2, ip
 80038aa:	3a08      	subs	r2, #8
 80038ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80038b0:	db10      	blt.n	80038d4 <__aeabi_l2f+0x5c>
 80038b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80038b6:	4463      	add	r3, ip
 80038b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80038bc:	f1c2 0220 	rsb	r2, r2, #32
 80038c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80038c4:	fa20 f202 	lsr.w	r2, r0, r2
 80038c8:	eb43 0002 	adc.w	r0, r3, r2
 80038cc:	bf08      	it	eq
 80038ce:	f020 0001 	biceq.w	r0, r0, #1
 80038d2:	4770      	bx	lr
 80038d4:	f102 0220 	add.w	r2, r2, #32
 80038d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80038dc:	f1c2 0220 	rsb	r2, r2, #32
 80038e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80038e4:	fa21 f202 	lsr.w	r2, r1, r2
 80038e8:	eb43 0002 	adc.w	r0, r3, r2
 80038ec:	bf08      	it	eq
 80038ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80038f2:	4770      	bx	lr

080038f4 <__aeabi_fmul>:
 80038f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80038f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80038fc:	bf1e      	ittt	ne
 80038fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003902:	ea92 0f0c 	teqne	r2, ip
 8003906:	ea93 0f0c 	teqne	r3, ip
 800390a:	d06f      	beq.n	80039ec <__aeabi_fmul+0xf8>
 800390c:	441a      	add	r2, r3
 800390e:	ea80 0c01 	eor.w	ip, r0, r1
 8003912:	0240      	lsls	r0, r0, #9
 8003914:	bf18      	it	ne
 8003916:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800391a:	d01e      	beq.n	800395a <__aeabi_fmul+0x66>
 800391c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003920:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8003924:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8003928:	fba0 3101 	umull	r3, r1, r0, r1
 800392c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003930:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003934:	bf3e      	ittt	cc
 8003936:	0049      	lslcc	r1, r1, #1
 8003938:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800393c:	005b      	lslcc	r3, r3, #1
 800393e:	ea40 0001 	orr.w	r0, r0, r1
 8003942:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8003946:	2afd      	cmp	r2, #253	; 0xfd
 8003948:	d81d      	bhi.n	8003986 <__aeabi_fmul+0x92>
 800394a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800394e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003952:	bf08      	it	eq
 8003954:	f020 0001 	biceq.w	r0, r0, #1
 8003958:	4770      	bx	lr
 800395a:	f090 0f00 	teq	r0, #0
 800395e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003962:	bf08      	it	eq
 8003964:	0249      	lsleq	r1, r1, #9
 8003966:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800396a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800396e:	3a7f      	subs	r2, #127	; 0x7f
 8003970:	bfc2      	ittt	gt
 8003972:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003976:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800397a:	4770      	bxgt	lr
 800397c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	3a01      	subs	r2, #1
 8003986:	dc5d      	bgt.n	8003a44 <__aeabi_fmul+0x150>
 8003988:	f112 0f19 	cmn.w	r2, #25
 800398c:	bfdc      	itt	le
 800398e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8003992:	4770      	bxle	lr
 8003994:	f1c2 0200 	rsb	r2, r2, #0
 8003998:	0041      	lsls	r1, r0, #1
 800399a:	fa21 f102 	lsr.w	r1, r1, r2
 800399e:	f1c2 0220 	rsb	r2, r2, #32
 80039a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80039a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80039aa:	f140 0000 	adc.w	r0, r0, #0
 80039ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80039b2:	bf08      	it	eq
 80039b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80039b8:	4770      	bx	lr
 80039ba:	f092 0f00 	teq	r2, #0
 80039be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80039c2:	bf02      	ittt	eq
 80039c4:	0040      	lsleq	r0, r0, #1
 80039c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80039ca:	3a01      	subeq	r2, #1
 80039cc:	d0f9      	beq.n	80039c2 <__aeabi_fmul+0xce>
 80039ce:	ea40 000c 	orr.w	r0, r0, ip
 80039d2:	f093 0f00 	teq	r3, #0
 80039d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80039da:	bf02      	ittt	eq
 80039dc:	0049      	lsleq	r1, r1, #1
 80039de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80039e2:	3b01      	subeq	r3, #1
 80039e4:	d0f9      	beq.n	80039da <__aeabi_fmul+0xe6>
 80039e6:	ea41 010c 	orr.w	r1, r1, ip
 80039ea:	e78f      	b.n	800390c <__aeabi_fmul+0x18>
 80039ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80039f0:	ea92 0f0c 	teq	r2, ip
 80039f4:	bf18      	it	ne
 80039f6:	ea93 0f0c 	teqne	r3, ip
 80039fa:	d00a      	beq.n	8003a12 <__aeabi_fmul+0x11e>
 80039fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003a00:	bf18      	it	ne
 8003a02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003a06:	d1d8      	bne.n	80039ba <__aeabi_fmul+0xc6>
 8003a08:	ea80 0001 	eor.w	r0, r0, r1
 8003a0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003a10:	4770      	bx	lr
 8003a12:	f090 0f00 	teq	r0, #0
 8003a16:	bf17      	itett	ne
 8003a18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8003a1c:	4608      	moveq	r0, r1
 8003a1e:	f091 0f00 	teqne	r1, #0
 8003a22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8003a26:	d014      	beq.n	8003a52 <__aeabi_fmul+0x15e>
 8003a28:	ea92 0f0c 	teq	r2, ip
 8003a2c:	d101      	bne.n	8003a32 <__aeabi_fmul+0x13e>
 8003a2e:	0242      	lsls	r2, r0, #9
 8003a30:	d10f      	bne.n	8003a52 <__aeabi_fmul+0x15e>
 8003a32:	ea93 0f0c 	teq	r3, ip
 8003a36:	d103      	bne.n	8003a40 <__aeabi_fmul+0x14c>
 8003a38:	024b      	lsls	r3, r1, #9
 8003a3a:	bf18      	it	ne
 8003a3c:	4608      	movne	r0, r1
 8003a3e:	d108      	bne.n	8003a52 <__aeabi_fmul+0x15e>
 8003a40:	ea80 0001 	eor.w	r0, r0, r1
 8003a44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003a50:	4770      	bx	lr
 8003a52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003a56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8003a5a:	4770      	bx	lr

08003a5c <__aeabi_fdiv>:
 8003a5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003a60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8003a64:	bf1e      	ittt	ne
 8003a66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003a6a:	ea92 0f0c 	teqne	r2, ip
 8003a6e:	ea93 0f0c 	teqne	r3, ip
 8003a72:	d069      	beq.n	8003b48 <__aeabi_fdiv+0xec>
 8003a74:	eba2 0203 	sub.w	r2, r2, r3
 8003a78:	ea80 0c01 	eor.w	ip, r0, r1
 8003a7c:	0249      	lsls	r1, r1, #9
 8003a7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8003a82:	d037      	beq.n	8003af4 <__aeabi_fdiv+0x98>
 8003a84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8003a8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8003a90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf38      	it	cc
 8003a98:	005b      	lslcc	r3, r3, #1
 8003a9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8003a9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8003aa2:	428b      	cmp	r3, r1
 8003aa4:	bf24      	itt	cs
 8003aa6:	1a5b      	subcs	r3, r3, r1
 8003aa8:	ea40 000c 	orrcs.w	r0, r0, ip
 8003aac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8003ab0:	bf24      	itt	cs
 8003ab2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8003ab6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003aba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8003abe:	bf24      	itt	cs
 8003ac0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8003ac4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003ac8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8003acc:	bf24      	itt	cs
 8003ace:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8003ad2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	bf18      	it	ne
 8003ada:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8003ade:	d1e0      	bne.n	8003aa2 <__aeabi_fdiv+0x46>
 8003ae0:	2afd      	cmp	r2, #253	; 0xfd
 8003ae2:	f63f af50 	bhi.w	8003986 <__aeabi_fmul+0x92>
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003aec:	bf08      	it	eq
 8003aee:	f020 0001 	biceq.w	r0, r0, #1
 8003af2:	4770      	bx	lr
 8003af4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003af8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003afc:	327f      	adds	r2, #127	; 0x7f
 8003afe:	bfc2      	ittt	gt
 8003b00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003b04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003b08:	4770      	bxgt	lr
 8003b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	3a01      	subs	r2, #1
 8003b14:	e737      	b.n	8003986 <__aeabi_fmul+0x92>
 8003b16:	f092 0f00 	teq	r2, #0
 8003b1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8003b1e:	bf02      	ittt	eq
 8003b20:	0040      	lsleq	r0, r0, #1
 8003b22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003b26:	3a01      	subeq	r2, #1
 8003b28:	d0f9      	beq.n	8003b1e <__aeabi_fdiv+0xc2>
 8003b2a:	ea40 000c 	orr.w	r0, r0, ip
 8003b2e:	f093 0f00 	teq	r3, #0
 8003b32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003b36:	bf02      	ittt	eq
 8003b38:	0049      	lsleq	r1, r1, #1
 8003b3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8003b3e:	3b01      	subeq	r3, #1
 8003b40:	d0f9      	beq.n	8003b36 <__aeabi_fdiv+0xda>
 8003b42:	ea41 010c 	orr.w	r1, r1, ip
 8003b46:	e795      	b.n	8003a74 <__aeabi_fdiv+0x18>
 8003b48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003b4c:	ea92 0f0c 	teq	r2, ip
 8003b50:	d108      	bne.n	8003b64 <__aeabi_fdiv+0x108>
 8003b52:	0242      	lsls	r2, r0, #9
 8003b54:	f47f af7d 	bne.w	8003a52 <__aeabi_fmul+0x15e>
 8003b58:	ea93 0f0c 	teq	r3, ip
 8003b5c:	f47f af70 	bne.w	8003a40 <__aeabi_fmul+0x14c>
 8003b60:	4608      	mov	r0, r1
 8003b62:	e776      	b.n	8003a52 <__aeabi_fmul+0x15e>
 8003b64:	ea93 0f0c 	teq	r3, ip
 8003b68:	d104      	bne.n	8003b74 <__aeabi_fdiv+0x118>
 8003b6a:	024b      	lsls	r3, r1, #9
 8003b6c:	f43f af4c 	beq.w	8003a08 <__aeabi_fmul+0x114>
 8003b70:	4608      	mov	r0, r1
 8003b72:	e76e      	b.n	8003a52 <__aeabi_fmul+0x15e>
 8003b74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003b78:	bf18      	it	ne
 8003b7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003b7e:	d1ca      	bne.n	8003b16 <__aeabi_fdiv+0xba>
 8003b80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003b84:	f47f af5c 	bne.w	8003a40 <__aeabi_fmul+0x14c>
 8003b88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8003b8c:	f47f af3c 	bne.w	8003a08 <__aeabi_fmul+0x114>
 8003b90:	e75f      	b.n	8003a52 <__aeabi_fmul+0x15e>
 8003b92:	bf00      	nop

08003b94 <__gesf2>:
 8003b94:	f04f 3cff 	mov.w	ip, #4294967295
 8003b98:	e006      	b.n	8003ba8 <__cmpsf2+0x4>
 8003b9a:	bf00      	nop

08003b9c <__lesf2>:
 8003b9c:	f04f 0c01 	mov.w	ip, #1
 8003ba0:	e002      	b.n	8003ba8 <__cmpsf2+0x4>
 8003ba2:	bf00      	nop

08003ba4 <__cmpsf2>:
 8003ba4:	f04f 0c01 	mov.w	ip, #1
 8003ba8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003bac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003bb8:	bf18      	it	ne
 8003bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003bbe:	d011      	beq.n	8003be4 <__cmpsf2+0x40>
 8003bc0:	b001      	add	sp, #4
 8003bc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8003bc6:	bf18      	it	ne
 8003bc8:	ea90 0f01 	teqne	r0, r1
 8003bcc:	bf58      	it	pl
 8003bce:	ebb2 0003 	subspl.w	r0, r2, r3
 8003bd2:	bf88      	it	hi
 8003bd4:	17c8      	asrhi	r0, r1, #31
 8003bd6:	bf38      	it	cc
 8003bd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8003bdc:	bf18      	it	ne
 8003bde:	f040 0001 	orrne.w	r0, r0, #1
 8003be2:	4770      	bx	lr
 8003be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003be8:	d102      	bne.n	8003bf0 <__cmpsf2+0x4c>
 8003bea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8003bee:	d105      	bne.n	8003bfc <__cmpsf2+0x58>
 8003bf0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003bf4:	d1e4      	bne.n	8003bc0 <__cmpsf2+0x1c>
 8003bf6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8003bfa:	d0e1      	beq.n	8003bc0 <__cmpsf2+0x1c>
 8003bfc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <__aeabi_cfrcmple>:
 8003c04:	4684      	mov	ip, r0
 8003c06:	4608      	mov	r0, r1
 8003c08:	4661      	mov	r1, ip
 8003c0a:	e7ff      	b.n	8003c0c <__aeabi_cfcmpeq>

08003c0c <__aeabi_cfcmpeq>:
 8003c0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8003c0e:	f7ff ffc9 	bl	8003ba4 <__cmpsf2>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	bf48      	it	mi
 8003c16:	f110 0f00 	cmnmi.w	r0, #0
 8003c1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08003c1c <__aeabi_fcmpeq>:
 8003c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c20:	f7ff fff4 	bl	8003c0c <__aeabi_cfcmpeq>
 8003c24:	bf0c      	ite	eq
 8003c26:	2001      	moveq	r0, #1
 8003c28:	2000      	movne	r0, #0
 8003c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c2e:	bf00      	nop

08003c30 <__aeabi_fcmplt>:
 8003c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c34:	f7ff ffea 	bl	8003c0c <__aeabi_cfcmpeq>
 8003c38:	bf34      	ite	cc
 8003c3a:	2001      	movcc	r0, #1
 8003c3c:	2000      	movcs	r0, #0
 8003c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c42:	bf00      	nop

08003c44 <__aeabi_fcmple>:
 8003c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c48:	f7ff ffe0 	bl	8003c0c <__aeabi_cfcmpeq>
 8003c4c:	bf94      	ite	ls
 8003c4e:	2001      	movls	r0, #1
 8003c50:	2000      	movhi	r0, #0
 8003c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c56:	bf00      	nop

08003c58 <__aeabi_fcmpge>:
 8003c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c5c:	f7ff ffd2 	bl	8003c04 <__aeabi_cfrcmple>
 8003c60:	bf94      	ite	ls
 8003c62:	2001      	movls	r0, #1
 8003c64:	2000      	movhi	r0, #0
 8003c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c6a:	bf00      	nop

08003c6c <__aeabi_fcmpgt>:
 8003c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c70:	f7ff ffc8 	bl	8003c04 <__aeabi_cfrcmple>
 8003c74:	bf34      	ite	cc
 8003c76:	2001      	movcc	r0, #1
 8003c78:	2000      	movcs	r0, #0
 8003c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c7e:	bf00      	nop

08003c80 <__aeabi_fcmpun>:
 8003c80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003c84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003c8c:	d102      	bne.n	8003c94 <__aeabi_fcmpun+0x14>
 8003c8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8003c92:	d108      	bne.n	8003ca6 <__aeabi_fcmpun+0x26>
 8003c94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003c98:	d102      	bne.n	8003ca0 <__aeabi_fcmpun+0x20>
 8003c9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8003c9e:	d102      	bne.n	8003ca6 <__aeabi_fcmpun+0x26>
 8003ca0:	f04f 0000 	mov.w	r0, #0
 8003ca4:	4770      	bx	lr
 8003ca6:	f04f 0001 	mov.w	r0, #1
 8003caa:	4770      	bx	lr

08003cac <__aeabi_f2iz>:
 8003cac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003cb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003cb4:	d30f      	bcc.n	8003cd6 <__aeabi_f2iz+0x2a>
 8003cb6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8003cba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8003cbe:	d90d      	bls.n	8003cdc <__aeabi_f2iz+0x30>
 8003cc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cc8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8003ccc:	fa23 f002 	lsr.w	r0, r3, r2
 8003cd0:	bf18      	it	ne
 8003cd2:	4240      	negne	r0, r0
 8003cd4:	4770      	bx	lr
 8003cd6:	f04f 0000 	mov.w	r0, #0
 8003cda:	4770      	bx	lr
 8003cdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8003ce0:	d101      	bne.n	8003ce6 <__aeabi_f2iz+0x3a>
 8003ce2:	0242      	lsls	r2, r0, #9
 8003ce4:	d105      	bne.n	8003cf2 <__aeabi_f2iz+0x46>
 8003ce6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8003cea:	bf08      	it	eq
 8003cec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003cf0:	4770      	bx	lr
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	4770      	bx	lr

08003cf8 <__aeabi_f2uiz>:
 8003cf8:	0042      	lsls	r2, r0, #1
 8003cfa:	d20e      	bcs.n	8003d1a <__aeabi_f2uiz+0x22>
 8003cfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003d00:	d30b      	bcc.n	8003d1a <__aeabi_f2uiz+0x22>
 8003d02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8003d06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8003d0a:	d409      	bmi.n	8003d20 <__aeabi_f2uiz+0x28>
 8003d0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d14:	fa23 f002 	lsr.w	r0, r3, r2
 8003d18:	4770      	bx	lr
 8003d1a:	f04f 0000 	mov.w	r0, #0
 8003d1e:	4770      	bx	lr
 8003d20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8003d24:	d101      	bne.n	8003d2a <__aeabi_f2uiz+0x32>
 8003d26:	0242      	lsls	r2, r0, #9
 8003d28:	d102      	bne.n	8003d30 <__aeabi_f2uiz+0x38>
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	4770      	bx	lr
 8003d30:	f04f 0000 	mov.w	r0, #0
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop

08003d38 <__aeabi_ldivmod>:
 8003d38:	b97b      	cbnz	r3, 8003d5a <__aeabi_ldivmod+0x22>
 8003d3a:	b972      	cbnz	r2, 8003d5a <__aeabi_ldivmod+0x22>
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	bfbe      	ittt	lt
 8003d40:	2000      	movlt	r0, #0
 8003d42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8003d46:	e006      	blt.n	8003d56 <__aeabi_ldivmod+0x1e>
 8003d48:	bf08      	it	eq
 8003d4a:	2800      	cmpeq	r0, #0
 8003d4c:	bf1c      	itt	ne
 8003d4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8003d52:	f04f 30ff 	movne.w	r0, #4294967295
 8003d56:	f000 b9dd 	b.w	8004114 <__aeabi_idiv0>
 8003d5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8003d5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003d62:	2900      	cmp	r1, #0
 8003d64:	db09      	blt.n	8003d7a <__aeabi_ldivmod+0x42>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db1a      	blt.n	8003da0 <__aeabi_ldivmod+0x68>
 8003d6a:	f000 f869 	bl	8003e40 <__udivmoddi4>
 8003d6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d76:	b004      	add	sp, #16
 8003d78:	4770      	bx	lr
 8003d7a:	4240      	negs	r0, r0
 8003d7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db1b      	blt.n	8003dbc <__aeabi_ldivmod+0x84>
 8003d84:	f000 f85c 	bl	8003e40 <__udivmoddi4>
 8003d88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d90:	b004      	add	sp, #16
 8003d92:	4240      	negs	r0, r0
 8003d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003d98:	4252      	negs	r2, r2
 8003d9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003d9e:	4770      	bx	lr
 8003da0:	4252      	negs	r2, r2
 8003da2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003da6:	f000 f84b 	bl	8003e40 <__udivmoddi4>
 8003daa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003db2:	b004      	add	sp, #16
 8003db4:	4240      	negs	r0, r0
 8003db6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003dba:	4770      	bx	lr
 8003dbc:	4252      	negs	r2, r2
 8003dbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003dc2:	f000 f83d 	bl	8003e40 <__udivmoddi4>
 8003dc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dce:	b004      	add	sp, #16
 8003dd0:	4252      	negs	r2, r2
 8003dd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003dd6:	4770      	bx	lr

08003dd8 <__aeabi_f2lz>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4604      	mov	r4, r0
 8003dde:	f7ff ff27 	bl	8003c30 <__aeabi_fcmplt>
 8003de2:	b920      	cbnz	r0, 8003dee <__aeabi_f2lz+0x16>
 8003de4:	4620      	mov	r0, r4
 8003de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dea:	f000 b809 	b.w	8003e00 <__aeabi_f2ulz>
 8003dee:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8003df2:	f000 f805 	bl	8003e00 <__aeabi_f2ulz>
 8003df6:	4240      	negs	r0, r0
 8003df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	bf00      	nop

08003e00 <__aeabi_f2ulz>:
 8003e00:	b5d0      	push	{r4, r6, r7, lr}
 8003e02:	f7ff f8e9 	bl	8002fd8 <__aeabi_f2d>
 8003e06:	2200      	movs	r2, #0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <__aeabi_f2ulz+0x38>)
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	460f      	mov	r7, r1
 8003e0e:	f7ff f93b 	bl	8003088 <__aeabi_dmul>
 8003e12:	f000 f981 	bl	8004118 <__aeabi_d2uiz>
 8003e16:	4604      	mov	r4, r0
 8003e18:	f7ff f8bc 	bl	8002f94 <__aeabi_ui2d>
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <__aeabi_f2ulz+0x3c>)
 8003e20:	f7ff f932 	bl	8003088 <__aeabi_dmul>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4630      	mov	r0, r6
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	f7fe ff74 	bl	8002d18 <__aeabi_dsub>
 8003e30:	f000 f972 	bl	8004118 <__aeabi_d2uiz>
 8003e34:	4621      	mov	r1, r4
 8003e36:	bdd0      	pop	{r4, r6, r7, pc}
 8003e38:	3df00000 	.word	0x3df00000
 8003e3c:	41f00000 	.word	0x41f00000

08003e40 <__udivmoddi4>:
 8003e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e44:	9e08      	ldr	r6, [sp, #32]
 8003e46:	460d      	mov	r5, r1
 8003e48:	4604      	mov	r4, r0
 8003e4a:	4688      	mov	r8, r1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d14d      	bne.n	8003eec <__udivmoddi4+0xac>
 8003e50:	428a      	cmp	r2, r1
 8003e52:	4694      	mov	ip, r2
 8003e54:	d968      	bls.n	8003f28 <__udivmoddi4+0xe8>
 8003e56:	fab2 f282 	clz	r2, r2
 8003e5a:	b152      	cbz	r2, 8003e72 <__udivmoddi4+0x32>
 8003e5c:	fa01 f302 	lsl.w	r3, r1, r2
 8003e60:	f1c2 0120 	rsb	r1, r2, #32
 8003e64:	fa20 f101 	lsr.w	r1, r0, r1
 8003e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8003e6c:	ea41 0803 	orr.w	r8, r1, r3
 8003e70:	4094      	lsls	r4, r2
 8003e72:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8003e76:	fbb8 f7f1 	udiv	r7, r8, r1
 8003e7a:	fa1f fe8c 	uxth.w	lr, ip
 8003e7e:	fb01 8817 	mls	r8, r1, r7, r8
 8003e82:	fb07 f00e 	mul.w	r0, r7, lr
 8003e86:	0c23      	lsrs	r3, r4, #16
 8003e88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003e8c:	4298      	cmp	r0, r3
 8003e8e:	d90a      	bls.n	8003ea6 <__udivmoddi4+0x66>
 8003e90:	eb1c 0303 	adds.w	r3, ip, r3
 8003e94:	f107 35ff 	add.w	r5, r7, #4294967295
 8003e98:	f080 811e 	bcs.w	80040d8 <__udivmoddi4+0x298>
 8003e9c:	4298      	cmp	r0, r3
 8003e9e:	f240 811b 	bls.w	80040d8 <__udivmoddi4+0x298>
 8003ea2:	3f02      	subs	r7, #2
 8003ea4:	4463      	add	r3, ip
 8003ea6:	1a1b      	subs	r3, r3, r0
 8003ea8:	fbb3 f0f1 	udiv	r0, r3, r1
 8003eac:	fb01 3310 	mls	r3, r1, r0, r3
 8003eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8003eb4:	b2a4      	uxth	r4, r4
 8003eb6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003eba:	45a6      	cmp	lr, r4
 8003ebc:	d90a      	bls.n	8003ed4 <__udivmoddi4+0x94>
 8003ebe:	eb1c 0404 	adds.w	r4, ip, r4
 8003ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ec6:	f080 8109 	bcs.w	80040dc <__udivmoddi4+0x29c>
 8003eca:	45a6      	cmp	lr, r4
 8003ecc:	f240 8106 	bls.w	80040dc <__udivmoddi4+0x29c>
 8003ed0:	4464      	add	r4, ip
 8003ed2:	3802      	subs	r0, #2
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	eba4 040e 	sub.w	r4, r4, lr
 8003eda:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003ede:	b11e      	cbz	r6, 8003ee8 <__udivmoddi4+0xa8>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	40d4      	lsrs	r4, r2
 8003ee4:	e9c6 4300 	strd	r4, r3, [r6]
 8003ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eec:	428b      	cmp	r3, r1
 8003eee:	d908      	bls.n	8003f02 <__udivmoddi4+0xc2>
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	f000 80ee 	beq.w	80040d2 <__udivmoddi4+0x292>
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	e9c6 0500 	strd	r0, r5, [r6]
 8003efc:	4608      	mov	r0, r1
 8003efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f02:	fab3 f183 	clz	r1, r3
 8003f06:	2900      	cmp	r1, #0
 8003f08:	d14a      	bne.n	8003fa0 <__udivmoddi4+0x160>
 8003f0a:	42ab      	cmp	r3, r5
 8003f0c:	d302      	bcc.n	8003f14 <__udivmoddi4+0xd4>
 8003f0e:	4282      	cmp	r2, r0
 8003f10:	f200 80fc 	bhi.w	800410c <__udivmoddi4+0x2cc>
 8003f14:	1a84      	subs	r4, r0, r2
 8003f16:	eb65 0303 	sbc.w	r3, r5, r3
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	4698      	mov	r8, r3
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d0e2      	beq.n	8003ee8 <__udivmoddi4+0xa8>
 8003f22:	e9c6 4800 	strd	r4, r8, [r6]
 8003f26:	e7df      	b.n	8003ee8 <__udivmoddi4+0xa8>
 8003f28:	b902      	cbnz	r2, 8003f2c <__udivmoddi4+0xec>
 8003f2a:	deff      	udf	#255	; 0xff
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	2a00      	cmp	r2, #0
 8003f32:	f040 8091 	bne.w	8004058 <__udivmoddi4+0x218>
 8003f36:	eba1 000c 	sub.w	r0, r1, ip
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003f40:	fa1f fe8c 	uxth.w	lr, ip
 8003f44:	fbb0 f3f7 	udiv	r3, r0, r7
 8003f48:	fb07 0013 	mls	r0, r7, r3, r0
 8003f4c:	0c25      	lsrs	r5, r4, #16
 8003f4e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003f52:	fb0e f003 	mul.w	r0, lr, r3
 8003f56:	42a8      	cmp	r0, r5
 8003f58:	d908      	bls.n	8003f6c <__udivmoddi4+0x12c>
 8003f5a:	eb1c 0505 	adds.w	r5, ip, r5
 8003f5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8003f62:	d202      	bcs.n	8003f6a <__udivmoddi4+0x12a>
 8003f64:	42a8      	cmp	r0, r5
 8003f66:	f200 80ce 	bhi.w	8004106 <__udivmoddi4+0x2c6>
 8003f6a:	4643      	mov	r3, r8
 8003f6c:	1a2d      	subs	r5, r5, r0
 8003f6e:	fbb5 f0f7 	udiv	r0, r5, r7
 8003f72:	fb07 5510 	mls	r5, r7, r0, r5
 8003f76:	fb0e fe00 	mul.w	lr, lr, r0
 8003f7a:	b2a4      	uxth	r4, r4
 8003f7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003f80:	45a6      	cmp	lr, r4
 8003f82:	d908      	bls.n	8003f96 <__udivmoddi4+0x156>
 8003f84:	eb1c 0404 	adds.w	r4, ip, r4
 8003f88:	f100 35ff 	add.w	r5, r0, #4294967295
 8003f8c:	d202      	bcs.n	8003f94 <__udivmoddi4+0x154>
 8003f8e:	45a6      	cmp	lr, r4
 8003f90:	f200 80b6 	bhi.w	8004100 <__udivmoddi4+0x2c0>
 8003f94:	4628      	mov	r0, r5
 8003f96:	eba4 040e 	sub.w	r4, r4, lr
 8003f9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003f9e:	e79e      	b.n	8003ede <__udivmoddi4+0x9e>
 8003fa0:	f1c1 0720 	rsb	r7, r1, #32
 8003fa4:	408b      	lsls	r3, r1
 8003fa6:	fa22 fc07 	lsr.w	ip, r2, r7
 8003faa:	ea4c 0c03 	orr.w	ip, ip, r3
 8003fae:	fa25 fa07 	lsr.w	sl, r5, r7
 8003fb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003fb6:	fbba f8f9 	udiv	r8, sl, r9
 8003fba:	fa20 f307 	lsr.w	r3, r0, r7
 8003fbe:	fb09 aa18 	mls	sl, r9, r8, sl
 8003fc2:	408d      	lsls	r5, r1
 8003fc4:	fa1f fe8c 	uxth.w	lr, ip
 8003fc8:	431d      	orrs	r5, r3
 8003fca:	fa00 f301 	lsl.w	r3, r0, r1
 8003fce:	fb08 f00e 	mul.w	r0, r8, lr
 8003fd2:	0c2c      	lsrs	r4, r5, #16
 8003fd4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003fd8:	42a0      	cmp	r0, r4
 8003fda:	fa02 f201 	lsl.w	r2, r2, r1
 8003fde:	d90b      	bls.n	8003ff8 <__udivmoddi4+0x1b8>
 8003fe0:	eb1c 0404 	adds.w	r4, ip, r4
 8003fe4:	f108 3aff 	add.w	sl, r8, #4294967295
 8003fe8:	f080 8088 	bcs.w	80040fc <__udivmoddi4+0x2bc>
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	f240 8085 	bls.w	80040fc <__udivmoddi4+0x2bc>
 8003ff2:	f1a8 0802 	sub.w	r8, r8, #2
 8003ff6:	4464      	add	r4, ip
 8003ff8:	1a24      	subs	r4, r4, r0
 8003ffa:	fbb4 f0f9 	udiv	r0, r4, r9
 8003ffe:	fb09 4410 	mls	r4, r9, r0, r4
 8004002:	fb00 fe0e 	mul.w	lr, r0, lr
 8004006:	b2ad      	uxth	r5, r5
 8004008:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800400c:	45a6      	cmp	lr, r4
 800400e:	d908      	bls.n	8004022 <__udivmoddi4+0x1e2>
 8004010:	eb1c 0404 	adds.w	r4, ip, r4
 8004014:	f100 35ff 	add.w	r5, r0, #4294967295
 8004018:	d26c      	bcs.n	80040f4 <__udivmoddi4+0x2b4>
 800401a:	45a6      	cmp	lr, r4
 800401c:	d96a      	bls.n	80040f4 <__udivmoddi4+0x2b4>
 800401e:	3802      	subs	r0, #2
 8004020:	4464      	add	r4, ip
 8004022:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004026:	fba0 9502 	umull	r9, r5, r0, r2
 800402a:	eba4 040e 	sub.w	r4, r4, lr
 800402e:	42ac      	cmp	r4, r5
 8004030:	46c8      	mov	r8, r9
 8004032:	46ae      	mov	lr, r5
 8004034:	d356      	bcc.n	80040e4 <__udivmoddi4+0x2a4>
 8004036:	d053      	beq.n	80040e0 <__udivmoddi4+0x2a0>
 8004038:	2e00      	cmp	r6, #0
 800403a:	d069      	beq.n	8004110 <__udivmoddi4+0x2d0>
 800403c:	ebb3 0208 	subs.w	r2, r3, r8
 8004040:	eb64 040e 	sbc.w	r4, r4, lr
 8004044:	fa22 f301 	lsr.w	r3, r2, r1
 8004048:	fa04 f707 	lsl.w	r7, r4, r7
 800404c:	431f      	orrs	r7, r3
 800404e:	40cc      	lsrs	r4, r1
 8004050:	e9c6 7400 	strd	r7, r4, [r6]
 8004054:	2100      	movs	r1, #0
 8004056:	e747      	b.n	8003ee8 <__udivmoddi4+0xa8>
 8004058:	fa0c fc02 	lsl.w	ip, ip, r2
 800405c:	f1c2 0120 	rsb	r1, r2, #32
 8004060:	fa25 f301 	lsr.w	r3, r5, r1
 8004064:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004068:	fa20 f101 	lsr.w	r1, r0, r1
 800406c:	4095      	lsls	r5, r2
 800406e:	430d      	orrs	r5, r1
 8004070:	fbb3 f1f7 	udiv	r1, r3, r7
 8004074:	fb07 3311 	mls	r3, r7, r1, r3
 8004078:	fa1f fe8c 	uxth.w	lr, ip
 800407c:	0c28      	lsrs	r0, r5, #16
 800407e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004082:	fb01 f30e 	mul.w	r3, r1, lr
 8004086:	4283      	cmp	r3, r0
 8004088:	fa04 f402 	lsl.w	r4, r4, r2
 800408c:	d908      	bls.n	80040a0 <__udivmoddi4+0x260>
 800408e:	eb1c 0000 	adds.w	r0, ip, r0
 8004092:	f101 38ff 	add.w	r8, r1, #4294967295
 8004096:	d22f      	bcs.n	80040f8 <__udivmoddi4+0x2b8>
 8004098:	4283      	cmp	r3, r0
 800409a:	d92d      	bls.n	80040f8 <__udivmoddi4+0x2b8>
 800409c:	3902      	subs	r1, #2
 800409e:	4460      	add	r0, ip
 80040a0:	1ac0      	subs	r0, r0, r3
 80040a2:	fbb0 f3f7 	udiv	r3, r0, r7
 80040a6:	fb07 0013 	mls	r0, r7, r3, r0
 80040aa:	b2ad      	uxth	r5, r5
 80040ac:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80040b0:	fb03 f00e 	mul.w	r0, r3, lr
 80040b4:	42a8      	cmp	r0, r5
 80040b6:	d908      	bls.n	80040ca <__udivmoddi4+0x28a>
 80040b8:	eb1c 0505 	adds.w	r5, ip, r5
 80040bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80040c0:	d216      	bcs.n	80040f0 <__udivmoddi4+0x2b0>
 80040c2:	42a8      	cmp	r0, r5
 80040c4:	d914      	bls.n	80040f0 <__udivmoddi4+0x2b0>
 80040c6:	3b02      	subs	r3, #2
 80040c8:	4465      	add	r5, ip
 80040ca:	1a28      	subs	r0, r5, r0
 80040cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80040d0:	e738      	b.n	8003f44 <__udivmoddi4+0x104>
 80040d2:	4631      	mov	r1, r6
 80040d4:	4630      	mov	r0, r6
 80040d6:	e707      	b.n	8003ee8 <__udivmoddi4+0xa8>
 80040d8:	462f      	mov	r7, r5
 80040da:	e6e4      	b.n	8003ea6 <__udivmoddi4+0x66>
 80040dc:	4618      	mov	r0, r3
 80040de:	e6f9      	b.n	8003ed4 <__udivmoddi4+0x94>
 80040e0:	454b      	cmp	r3, r9
 80040e2:	d2a9      	bcs.n	8004038 <__udivmoddi4+0x1f8>
 80040e4:	ebb9 0802 	subs.w	r8, r9, r2
 80040e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80040ec:	3801      	subs	r0, #1
 80040ee:	e7a3      	b.n	8004038 <__udivmoddi4+0x1f8>
 80040f0:	4643      	mov	r3, r8
 80040f2:	e7ea      	b.n	80040ca <__udivmoddi4+0x28a>
 80040f4:	4628      	mov	r0, r5
 80040f6:	e794      	b.n	8004022 <__udivmoddi4+0x1e2>
 80040f8:	4641      	mov	r1, r8
 80040fa:	e7d1      	b.n	80040a0 <__udivmoddi4+0x260>
 80040fc:	46d0      	mov	r8, sl
 80040fe:	e77b      	b.n	8003ff8 <__udivmoddi4+0x1b8>
 8004100:	4464      	add	r4, ip
 8004102:	3802      	subs	r0, #2
 8004104:	e747      	b.n	8003f96 <__udivmoddi4+0x156>
 8004106:	3b02      	subs	r3, #2
 8004108:	4465      	add	r5, ip
 800410a:	e72f      	b.n	8003f6c <__udivmoddi4+0x12c>
 800410c:	4608      	mov	r0, r1
 800410e:	e706      	b.n	8003f1e <__udivmoddi4+0xde>
 8004110:	4631      	mov	r1, r6
 8004112:	e6e9      	b.n	8003ee8 <__udivmoddi4+0xa8>

08004114 <__aeabi_idiv0>:
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop

08004118 <__aeabi_d2uiz>:
 8004118:	004a      	lsls	r2, r1, #1
 800411a:	d211      	bcs.n	8004140 <__aeabi_d2uiz+0x28>
 800411c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004120:	d211      	bcs.n	8004146 <__aeabi_d2uiz+0x2e>
 8004122:	d50d      	bpl.n	8004140 <__aeabi_d2uiz+0x28>
 8004124:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004128:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800412c:	d40e      	bmi.n	800414c <__aeabi_d2uiz+0x34>
 800412e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004132:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004136:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800413a:	fa23 f002 	lsr.w	r0, r3, r2
 800413e:	4770      	bx	lr
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	4770      	bx	lr
 8004146:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800414a:	d102      	bne.n	8004152 <__aeabi_d2uiz+0x3a>
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	4770      	bx	lr
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	4770      	bx	lr

08004158 <read_from_mpl>:

/* Get data from MPL.
 * TODO: Add return values to the inv_get_sensor_type_xxx APIs to differentiate
 * between new and stale data.
 */
static void read_from_mpl(void) {
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b0b1      	sub	sp, #196	; 0xc4
 800415c:	af18      	add	r7, sp, #96	; 0x60
	long msg, data[9];
	int8_t accuracy;
	unsigned long timestamp;
	float float_data[3] = { 0 };
 800415e:	f107 0318 	add.w	r3, r7, #24
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]

	//MPU_DEBUG_FUNC();
	if (inv_get_sensor_type_quat(data, &accuracy, (inv_time_t*) &timestamp)) {
 800416a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800416e:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004176:	4618      	mov	r0, r3
 8004178:	f007 fc0a 	bl	800b990 <inv_get_sensor_type_quat>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d010      	beq.n	80041a4 <read_from_mpl+0x4c>
		/* Sends a quaternion packet to the PC. Since this is used by the Python
		 * test app to visually represent a 3D quaternion, it's sent each time
		 * the MPL has new data.
		 */
		eMPL_send_quat(data);
 8004182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004186:	4618      	mov	r0, r3
 8004188:	f007 fa1e 	bl	800b5c8 <eMPL_send_quat>

		/* Specific data packets can be sent or suppressed using USB commands. */
		if (hal.report & PRINT_QUAT)
 800418c:	4bbe      	ldr	r3, [pc, #760]	; (8004488 <read_from_mpl+0x330>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <read_from_mpl+0x4c>
			eMPL_send_data(PACKET_DATA_QUAT, data);
 8004198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800419c:	4619      	mov	r1, r3
 800419e:	2003      	movs	r0, #3
 80041a0:	f007 fa9c 	bl	800b6dc <eMPL_send_data>
	}
		//加速度计数据
	if (hal.report & PRINT_ACCEL) {
 80041a4:	4bb8      	ldr	r3, [pc, #736]	; (8004488 <read_from_mpl+0x330>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d03b      	beq.n	8004228 <read_from_mpl+0xd0>
		if (inv_get_sensor_type_accel(data, &accuracy,
 80041b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80041b4:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 80041b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041bc:	4618      	mov	r0, r3
 80041be:	f007 fbb3 	bl	800b928 <inv_get_sensor_type_accel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <read_from_mpl+0x8c>
				(inv_time_t*) &timestamp))
		MPU6050_Data.Ax = data[0] * 1.0 / (1 << 16);
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fef2 	bl	8002fb4 <__aeabi_i2d>
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	4bad      	ldr	r3, [pc, #692]	; (800448c <read_from_mpl+0x334>)
 80041d6:	f7ff f881 	bl	80032dc <__aeabi_ddiv>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	49ac      	ldr	r1, [pc, #688]	; (8004490 <read_from_mpl+0x338>)
 80041e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		MPU6050_Data.Ay = data[1] * 1.0 / (1 << 16);
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fee4 	bl	8002fb4 <__aeabi_i2d>
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	4ba6      	ldr	r3, [pc, #664]	; (800448c <read_from_mpl+0x334>)
 80041f2:	f7ff f873 	bl	80032dc <__aeabi_ddiv>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	49a5      	ldr	r1, [pc, #660]	; (8004490 <read_from_mpl+0x338>)
 80041fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		MPU6050_Data.Az = data[2] * 1.0 / (1 << 16);
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fed6 	bl	8002fb4 <__aeabi_i2d>
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	4b9f      	ldr	r3, [pc, #636]	; (800448c <read_from_mpl+0x334>)
 800420e:	f7ff f865 	bl	80032dc <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	499e      	ldr	r1, [pc, #632]	; (8004490 <read_from_mpl+0x338>)
 8004218:	e9c1 2306 	strd	r2, r3, [r1, #24]
			eMPL_send_data(PACKET_DATA_ACCEL, data);
 800421c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004220:	4619      	mov	r1, r3
 8004222:	2000      	movs	r0, #0
 8004224:	f007 fa5a 	bl	800b6dc <eMPL_send_data>
	}
		//陀螺仪数据
	if (hal.report & PRINT_GYRO) {
 8004228:	4b97      	ldr	r3, [pc, #604]	; (8004488 <read_from_mpl+0x330>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d011      	beq.n	8004258 <read_from_mpl+0x100>
		if (inv_get_sensor_type_gyro(data, &accuracy, (inv_time_t*) &timestamp))
 8004234:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004238:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800423c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004240:	4618      	mov	r0, r3
 8004242:	f007 fb8b 	bl	800b95c <inv_get_sensor_type_gyro>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <read_from_mpl+0x100>
			eMPL_send_data(PACKET_DATA_GYRO, data);
 800424c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004250:	4619      	mov	r1, r3
 8004252:	2001      	movs	r0, #1
 8004254:	f007 fa42 	bl	800b6dc <eMPL_send_data>
        if (inv_get_sensor_type_compass(data, &accuracy, (inv_time_t *)&timestamp))
            eMPL_send_data(PACKET_DATA_COMPASS, data);
    }
#endif
    //欧拉角数据
	if (hal.report & PRINT_EULER) {
 8004258:	4b8b      	ldr	r3, [pc, #556]	; (8004488 <read_from_mpl+0x330>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d011      	beq.n	8004288 <read_from_mpl+0x130>
		if (inv_get_sensor_type_euler(data, &accuracy,
 8004264:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004268:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800426c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004270:	4618      	mov	r0, r3
 8004272:	f007 fc27 	bl	800bac4 <inv_get_sensor_type_euler>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <read_from_mpl+0x130>
				(inv_time_t*) &timestamp))
			eMPL_send_data(PACKET_DATA_EULER, data);
 800427c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004280:	4619      	mov	r1, r3
 8004282:	2004      	movs	r0, #4
 8004284:	f007 fa2a 	bl	800b6dc <eMPL_send_data>
#endif

		unsigned long timestamp, step_count, walk_time;

		/*获取欧拉角*/
		if (inv_get_sensor_type_euler(data, &accuracy,
 8004288:	f107 0214 	add.w	r2, r7, #20
 800428c:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004294:	4618      	mov	r0, r3
 8004296:	f007 fc15 	bl	800bac4 <inv_get_sensor_type_euler>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d032      	beq.n	8004306 <read_from_mpl+0x1ae>
				(inv_time_t*) &timestamp)) {
			float Pitch, Roll, Yaw;
			Pitch = data[0] * 1.0 / (1 << 16);
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fe86 	bl	8002fb4 <__aeabi_i2d>
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	4b77      	ldr	r3, [pc, #476]	; (800448c <read_from_mpl+0x334>)
 80042ae:	f7ff f815 	bl	80032dc <__aeabi_ddiv>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7ff f9bd 	bl	8003638 <__aeabi_d2f>
 80042be:	4603      	mov	r3, r0
 80042c0:	65fb      	str	r3, [r7, #92]	; 0x5c
			Roll = data[1] * 1.0 / (1 << 16);
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fe75 	bl	8002fb4 <__aeabi_i2d>
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	4b6f      	ldr	r3, [pc, #444]	; (800448c <read_from_mpl+0x334>)
 80042d0:	f7ff f804 	bl	80032dc <__aeabi_ddiv>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	f7ff f9ac 	bl	8003638 <__aeabi_d2f>
 80042e0:	4603      	mov	r3, r0
 80042e2:	65bb      	str	r3, [r7, #88]	; 0x58
			Yaw = data[2] * 1.0 / (1 << 16);
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe fe64 	bl	8002fb4 <__aeabi_i2d>
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	4b66      	ldr	r3, [pc, #408]	; (800448c <read_from_mpl+0x334>)
 80042f2:	f7fe fff3 	bl	80032dc <__aeabi_ddiv>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7ff f99b 	bl	8003638 <__aeabi_d2f>
 8004302:	4603      	mov	r3, r0
 8004304:	657b      	str	r3, [r7, #84]	; 0x54
            ILI9341_DispString_EN(30, 150, cStr);
#endif
		}

		/*获取步数*/
		get_tick_count(&timestamp);
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4618      	mov	r0, r3
 800430c:	f00a fae0 	bl	800e8d0 <get_ms_user>
		if (timestamp > hal.next_pedo_ms) {
 8004310:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <read_from_mpl+0x330>)
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	429a      	cmp	r2, r3
 8004318:	d20e      	bcs.n	8004338 <read_from_mpl+0x1e0>

			hal.next_pedo_ms = timestamp + PEDO_READ_MS;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004320:	4a59      	ldr	r2, [pc, #356]	; (8004488 <read_from_mpl+0x330>)
 8004322:	60d3      	str	r3, [r2, #12]
			dmp_get_pedometer_step_count(&step_count);
 8004324:	f107 0310 	add.w	r3, r7, #16
 8004328:	4618      	mov	r0, r3
 800432a:	f006 fd9f 	bl	800ae6c <dmp_get_pedometer_step_count>
			dmp_get_pedometer_walk_time(&walk_time);
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	4618      	mov	r0, r3
 8004334:	f006 fdc3 	bl	800aebe <dmp_get_pedometer_walk_time>
            ILI9341_DispString_EN(0, 180, cStr);
#endif
		}
	}

	if (hal.report & PRINT_ROT_MAT) {
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <read_from_mpl+0x330>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d011      	beq.n	8004368 <read_from_mpl+0x210>
		if (inv_get_sensor_type_rot_mat(data, &accuracy,
 8004344:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004348:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800434c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004350:	4618      	mov	r0, r3
 8004352:	f007 fd37 	bl	800bdc4 <inv_get_sensor_type_rot_mat>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <read_from_mpl+0x210>
				(inv_time_t*) &timestamp))
			eMPL_send_data(PACKET_DATA_ROT, data);
 800435c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004360:	4619      	mov	r1, r3
 8004362:	2005      	movs	r0, #5
 8004364:	f007 f9ba 	bl	800b6dc <eMPL_send_data>
	}
	if (hal.report & PRINT_HEADING) {
 8004368:	4b47      	ldr	r3, [pc, #284]	; (8004488 <read_from_mpl+0x330>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d011      	beq.n	8004398 <read_from_mpl+0x240>
		if (inv_get_sensor_type_heading(data, &accuracy,
 8004374:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004378:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800437c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004380:	4618      	mov	r0, r3
 8004382:	f007 fb21 	bl	800b9c8 <inv_get_sensor_type_heading>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <read_from_mpl+0x240>
				(inv_time_t*) &timestamp))
			eMPL_send_data(PACKET_DATA_HEADING, data);
 800438c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004390:	4619      	mov	r1, r3
 8004392:	2006      	movs	r0, #6
 8004394:	f007 f9a2 	bl	800b6dc <eMPL_send_data>
	}
	if (hal.report & PRINT_LINEAR_ACCEL) {
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <read_from_mpl+0x330>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d026      	beq.n	80043f2 <read_from_mpl+0x29a>
		if (inv_get_sensor_type_linear_acceleration(float_data, &accuracy,
 80043a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80043a8:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 80043ac:	f107 0318 	add.w	r3, r7, #24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f008 fc1b 	bl	800cbec <inv_get_sensor_type_linear_acceleration>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01a      	beq.n	80043f2 <read_from_mpl+0x29a>
				(inv_time_t*) &timestamp)) {
			MPU6050_Data.Gx = data[0];
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fdf8 	bl	8002fb4 <__aeabi_i2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4931      	ldr	r1, [pc, #196]	; (8004490 <read_from_mpl+0x338>)
 80043ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			MPU6050_Data.Gy = data[1];
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fdef 	bl	8002fb4 <__aeabi_i2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	492d      	ldr	r1, [pc, #180]	; (8004490 <read_from_mpl+0x338>)
 80043dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			MPU6050_Data.Gz = data[2];
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fde6 	bl	8002fb4 <__aeabi_i2d>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4928      	ldr	r1, [pc, #160]	; (8004490 <read_from_mpl+0x338>)
 80043ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			MPL_LOGI("Linear Accel: %7.5f\t %7.5f\t %7.5f\t\r\n", float_data[0],
					float_data[1], float_data[2]);
		}
	}
	if (hal.report & PRINT_GRAVITY_VECTOR) {
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <read_from_mpl+0x330>)
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d026      	beq.n	800444c <read_from_mpl+0x2f4>
		if (inv_get_sensor_type_gravity(float_data, &accuracy,
 80043fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004402:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004406:	f107 0318 	add.w	r3, r7, #24
 800440a:	4618      	mov	r0, r3
 800440c:	f008 fc3e 	bl	800cc8c <inv_get_sensor_type_gravity>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <read_from_mpl+0x2d0>
				(inv_time_t*) &timestamp))
			MPU6050_Data.Accel_X = data[0];
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fdcb 	bl	8002fb4 <__aeabi_i2d>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	491b      	ldr	r1, [pc, #108]	; (8004490 <read_from_mpl+0x338>)
 8004424:	e9c1 2308 	strd	r2, r3, [r1, #32]
			MPU6050_Data.Accel_Y = data[1];
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fdc2 	bl	8002fb4 <__aeabi_i2d>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4916      	ldr	r1, [pc, #88]	; (8004490 <read_from_mpl+0x338>)
 8004436:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			MPU6050_Data.Accel_Z = data[2];
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fdb9 	bl	8002fb4 <__aeabi_i2d>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4912      	ldr	r1, [pc, #72]	; (8004490 <read_from_mpl+0x338>)
 8004448:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			MPL_LOGI("Gravity Vector: %7.5f\t %7.5f\t %7.5f\t\r\n",
					float_data[0], float_data[1], float_data[2]);
	}
	if (hal.report & PRINT_PEDO) {
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <read_from_mpl+0x330>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01d      	beq.n	8004494 <read_from_mpl+0x33c>
		unsigned long timestamp;
		get_tick_count(&timestamp);
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	4618      	mov	r0, r3
 800445e:	f00a fa37 	bl	800e8d0 <get_ms_user>
		if (timestamp > hal.next_pedo_ms) {
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <read_from_mpl+0x330>)
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d213      	bcs.n	8004494 <read_from_mpl+0x33c>
			hal.next_pedo_ms = timestamp + PEDO_READ_MS;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004472:	4a05      	ldr	r2, [pc, #20]	; (8004488 <read_from_mpl+0x330>)
 8004474:	60d3      	str	r3, [r2, #12]
			unsigned long step_count, walk_time;
			dmp_get_pedometer_step_count(&step_count);
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	4618      	mov	r0, r3
 800447a:	f006 fcf7 	bl	800ae6c <dmp_get_pedometer_step_count>
			dmp_get_pedometer_walk_time(&walk_time);
 800447e:	463b      	mov	r3, r7
 8004480:	4618      	mov	r0, r3
 8004482:	f006 fd1c 	bl	800aebe <dmp_get_pedometer_walk_time>
 8004486:	e005      	b.n	8004494 <read_from_mpl+0x33c>
 8004488:	20000e80 	.word	0x20000e80
 800448c:	40f00000 	.word	0x40f00000
 8004490:	200005f8 	.word	0x200005f8

	/* Whenever the MPL detects a change in motion state, the application can
	 * be notified. For this example, we use an LED to represent the current
	 * motion state.
	 */
	msg = inv_get_message_level_0(
 8004494:	2003      	movs	r0, #3
 8004496:	f008 fdf9 	bl	800d08c <inv_get_message_level_0>
 800449a:	6538      	str	r0, [r7, #80]	; 0x50
			INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT);
	if (msg) {
 800449c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <read_from_mpl+0x352>
		if (msg & INV_MSG_MOTION_EVENT) {
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
			MPL_LOGI("Motion!\n");
		} else if (msg & INV_MSG_NO_MOTION_EVENT) {
			MPL_LOGI("No motion!\n");
		}
	}
	sent_mpu6050(MPU6050_Data);
 80044aa:	4c08      	ldr	r4, [pc, #32]	; (80044cc <read_from_mpl+0x374>)
 80044ac:	4668      	mov	r0, sp
 80044ae:	f104 0310 	add.w	r3, r4, #16
 80044b2:	2260      	movs	r2, #96	; 0x60
 80044b4:	4619      	mov	r1, r3
 80044b6:	f00d fad5 	bl	8011a64 <memcpy>
 80044ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044be:	f000 f905 	bl	80046cc <sent_mpu6050>
}
 80044c2:	bf00      	nop
 80044c4:	3764      	adds	r7, #100	; 0x64
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200005f8 	.word	0x200005f8

080044d0 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b092      	sub	sp, #72	; 0x48
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	6078      	str	r0, [r7, #4]
	static uint16_t Run_Times ;
	static unsigned char new_temp = 0;
	static unsigned long timestamp;
	static unsigned long sensor_timestamp;
	static int new_data = 0;
	MPU6050_mpu_init();
 80044d8:	f00a fa08 	bl	800e8ec <MPU6050_mpu_init>
	MPU6050_mpl_init();
 80044dc:	f00a fa24 	bl	800e928 <MPU6050_mpl_init>
	MPU6050_config();
 80044e0:	f00a fa3c 	bl	800e95c <MPU6050_config>
	hal.sensors ^= ACCEL_ON;
 80044e4:	4b71      	ldr	r3, [pc, #452]	; (80046ac <StartTask03+0x1dc>)
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	f083 0301 	eor.w	r3, r3, #1
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b6f      	ldr	r3, [pc, #444]	; (80046ac <StartTask03+0x1dc>)
 80044f0:	705a      	strb	r2, [r3, #1]
	hal.report ^= PRINT_ACCEL;
 80044f2:	4b6e      	ldr	r3, [pc, #440]	; (80046ac <StartTask03+0x1dc>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	4a6c      	ldr	r2, [pc, #432]	; (80046ac <StartTask03+0x1dc>)
 80044fc:	6193      	str	r3, [r2, #24]
//	hal.report ^= PRINT_LINEAR_ACCEL;
//	hal.report ^= PRINT_GRAVITY_VECTOR;
	while (1) {
		Run_Times++;
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <StartTask03+0x1e0>)
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <StartTask03+0x1e0>)
 8004508:	801a      	strh	r2, [r3, #0]

		if(Run_Times % 500 == 0)
 800450a:	4b69      	ldr	r3, [pc, #420]	; (80046b0 <StartTask03+0x1e0>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	4a69      	ldr	r2, [pc, #420]	; (80046b4 <StartTask03+0x1e4>)
 8004510:	fba2 1203 	umull	r1, r2, r2, r3
 8004514:	0952      	lsrs	r2, r2, #5
 8004516:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800451a:	fb01 f202 	mul.w	r2, r1, r2
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <StartTask03+0x5e>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004526:	2120      	movs	r1, #32
 8004528:	4863      	ldr	r0, [pc, #396]	; (80046b8 <StartTask03+0x1e8>)
 800452a:	f002 f827 	bl	800657c <HAL_GPIO_TogglePin>

		}
		osDelay(1);
 800452e:	2001      	movs	r0, #1
 8004530:	f00a fbd6 	bl	800ece0 <osDelay>
//		if(Run_Times % 20 == 0)
//		{
//			MPU6050_data_ready_cb();
//		}
		if (!hal.sensors || !hal.new_gyro) {
 8004534:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <StartTask03+0x1dc>)
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80b4 	beq.w	80046a6 <StartTask03+0x1d6>
 800453e:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <StartTask03+0x1dc>)
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80ae 	beq.w	80046a6 <StartTask03+0x1d6>

#ifdef PRINT_INSTAND_SWJ
		osDelay(500);
#endif

		get_tick_count(&timestamp);
 800454a:	485c      	ldr	r0, [pc, #368]	; (80046bc <StartTask03+0x1ec>)
 800454c:	f00a f9c0 	bl	800e8d0 <get_ms_user>
		if (timestamp > hal.next_temp_ms) {
 8004550:	4b56      	ldr	r3, [pc, #344]	; (80046ac <StartTask03+0x1dc>)
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <StartTask03+0x1ec>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d208      	bcs.n	800456e <StartTask03+0x9e>
			hal.next_temp_ms = timestamp + TEMP_READ_MS;
 800455c:	4b57      	ldr	r3, [pc, #348]	; (80046bc <StartTask03+0x1ec>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004564:	4a51      	ldr	r2, [pc, #324]	; (80046ac <StartTask03+0x1dc>)
 8004566:	6113      	str	r3, [r2, #16]
			new_temp = 1;
 8004568:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <StartTask03+0x1f0>)
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
		}

		if (hal.motion_int_mode) {
 800456e:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <StartTask03+0x1dc>)
 8004570:	795b      	ldrb	r3, [r3, #5]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01b      	beq.n	80045ae <StartTask03+0xde>
			/* Enable motion interrupt. */
			mpu_lp_motion_interrupt(500, 1, 5);
 8004576:	2205      	movs	r2, #5
 8004578:	2101      	movs	r1, #1
 800457a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800457e:	f006 f85b 	bl	800a638 <mpu_lp_motion_interrupt>
			/* Notify the MPL that contiguity was broken. */
			inv_accel_was_turned_off();
 8004582:	f008 f815 	bl	800c5b0 <inv_accel_was_turned_off>
			inv_gyro_was_turned_off();
 8004586:	f008 f837 	bl	800c5f8 <inv_gyro_was_turned_off>
			inv_compass_was_turned_off();
 800458a:	f008 f81d 	bl	800c5c8 <inv_compass_was_turned_off>
			inv_quaternion_sensor_was_turned_off();
 800458e:	f008 f827 	bl	800c5e0 <inv_quaternion_sensor_was_turned_off>
			/* Wait for the MPU interrupt. */
			while (!hal.new_gyro) {
 8004592:	bf00      	nop
 8004594:	4b45      	ldr	r3, [pc, #276]	; (80046ac <StartTask03+0x1dc>)
 8004596:	791b      	ldrb	r3, [r3, #4]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0fa      	beq.n	8004594 <StartTask03+0xc4>
			}
			/* Restore the previous sensor configuration. */
			mpu_lp_motion_interrupt(0, 0, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	2000      	movs	r0, #0
 80045a4:	f006 f848 	bl	800a638 <mpu_lp_motion_interrupt>
			hal.motion_int_mode = 0;
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <StartTask03+0x1dc>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	715a      	strb	r2, [r3, #5]
		}

		if (hal.new_gyro && hal.dmp_on) {
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <StartTask03+0x1dc>)
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d06c      	beq.n	8004692 <StartTask03+0x1c2>
 80045b8:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <StartTask03+0x1dc>)
 80045ba:	789b      	ldrb	r3, [r3, #2]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d068      	beq.n	8004692 <StartTask03+0x1c2>
			 * event has occurred; on an event, the application will be notified
			 * via a callback (assuming that a callback function was properly
			 * registered). The more parameter is non-zero if there are
			 * leftover packets in the FIFO.
			 */
			dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors,
 80045c0:	f107 0210 	add.w	r2, r7, #16
 80045c4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80045c8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80045cc:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <StartTask03+0x1f4>)
 80045da:	f006 fe89 	bl	800b2f0 <dmp_read_fifo>
					&more);
			if (!more)
 80045de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <StartTask03+0x11c>
				hal.new_gyro = 0;
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <StartTask03+0x1dc>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	711a      	strb	r2, [r3, #4]

			if (sensors & INV_WXYZ_QUAT) {
 80045ec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <StartTask03+0x140>

				inv_build_quat(quat, 0, sensor_timestamp);
 80045fa:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <StartTask03+0x1f4>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f107 0310 	add.w	r3, r7, #16
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f007 ffa9 	bl	800c55c <inv_build_quat>
				new_data = 1;
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <StartTask03+0x1f8>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
			}

			if (sensors & INV_XYZ_GYRO) {
 8004610:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004614:	b29b      	uxth	r3, r3
 8004616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01e      	beq.n	800465c <StartTask03+0x18c>
				/* Push the new data to the MPL. */
				inv_build_gyro(gyro, sensor_timestamp);
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <StartTask03+0x1f4>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f007 ff4d 	bl	800c4c8 <inv_build_gyro>
				new_data = 1;
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <StartTask03+0x1f8>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]
				if (new_temp) {
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <StartTask03+0x1f0>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00f      	beq.n	800465c <StartTask03+0x18c>
					new_temp = 0;
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <StartTask03+0x1f0>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
					/* Temperature only used for gyro temp comp. */
					mpu_get_temperature(&temperature, &sensor_timestamp);
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	491f      	ldr	r1, [pc, #124]	; (80046c4 <StartTask03+0x1f4>)
 8004648:	4618      	mov	r0, r3
 800464a:	f005 f875 	bl	8009738 <mpu_get_temperature>
					inv_build_temp(temperature, sensor_timestamp);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <StartTask03+0x1f4>)
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f007 ff5c 	bl	800c514 <inv_build_temp>
				}
			}
			if (sensors & INV_XYZ_ACCEL) {
 800465c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004660:	b29b      	uxth	r3, r3
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d013      	beq.n	8004692 <StartTask03+0x1c2>
				accel[0] = (long) accel_short[0];
 800466a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800466e:	623b      	str	r3, [r7, #32]
				accel[1] = (long) accel_short[1];
 8004670:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
				accel[2] = (long) accel_short[2];
 8004676:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
				inv_build_accel(accel, 0, sensor_timestamp);
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <StartTask03+0x1f4>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	f107 0320 	add.w	r3, r7, #32
 8004684:	2100      	movs	r1, #0
 8004686:	4618      	mov	r0, r3
 8004688:	f007 febc 	bl	800c404 <inv_build_accel>
				new_data = 1;
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <StartTask03+0x1f8>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]
                }
                osDelay(100);
            }

    #else
		if (new_data) {
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <StartTask03+0x1f8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f43f af31 	beq.w	80044fe <StartTask03+0x2e>
			inv_execute_on_data();
 800469c:	f008 f8a0 	bl	800c7e0 <inv_execute_on_data>
			/* This function reads bias-compensated sensor data and sensor
			 * fusion outputs from the MPL. The outputs are formatted as seen
			 * in eMPL_outputs.c. This function only needs to be called at the
			 * rate requested by the host.
			 */
			read_from_mpl();
 80046a0:	f7ff fd5a 	bl	8004158 <read_from_mpl>
 80046a4:	e72b      	b.n	80044fe <StartTask03+0x2e>
			continue;
 80046a6:	bf00      	nop
		Run_Times++;
 80046a8:	e729      	b.n	80044fe <StartTask03+0x2e>
 80046aa:	bf00      	nop
 80046ac:	20000e80 	.word	0x20000e80
 80046b0:	20000578 	.word	0x20000578
 80046b4:	10624dd3 	.word	0x10624dd3
 80046b8:	40010c00 	.word	0x40010c00
 80046bc:	2000057c 	.word	0x2000057c
 80046c0:	20000580 	.word	0x20000580
 80046c4:	20000584 	.word	0x20000584
 80046c8:	20000588 	.word	0x20000588

080046cc <sent_mpu6050>:
*	使用匿名上位机发送
 *
 */
uint8_t BUFF[100];
void sent_mpu6050(const MPU6050_t Send_Data)
{
 80046cc:	b084      	sub	sp, #16
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	f107 0c18 	add.w	ip, r7, #24
 80046d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
	uint8_t sumcheck = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	72fb      	strb	r3, [r7, #11]
	uint8_t addcheck = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	72bb      	strb	r3, [r7, #10]
	uint8_t _cnt=0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	727b      	strb	r3, [r7, #9]
	int32_t temp_data;
	BUFF[_cnt++]=0xAA;//帧头
 80046e8:	7a7b      	ldrb	r3, [r7, #9]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	727a      	strb	r2, [r7, #9]
 80046ee:	461a      	mov	r2, r3
 80046f0:	4bb3      	ldr	r3, [pc, #716]	; (80049c0 <sent_mpu6050+0x2f4>)
 80046f2:	21aa      	movs	r1, #170	; 0xaa
 80046f4:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=0xFF;//目标地址
 80046f6:	7a7b      	ldrb	r3, [r7, #9]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	727a      	strb	r2, [r7, #9]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4bb0      	ldr	r3, [pc, #704]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004700:	21ff      	movs	r1, #255	; 0xff
 8004702:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=0XF1;//功能码
 8004704:	7a7b      	ldrb	r3, [r7, #9]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	727a      	strb	r2, [r7, #9]
 800470a:	461a      	mov	r2, r3
 800470c:	4bac      	ldr	r3, [pc, #688]	; (80049c0 <sent_mpu6050+0x2f4>)
 800470e:	21f1      	movs	r1, #241	; 0xf1
 8004710:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=0x00;//数据长度,先保留，等长度确定
 8004712:	7a7b      	ldrb	r3, [r7, #9]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	727a      	strb	r2, [r7, #9]
 8004718:	461a      	mov	r2, r3
 800471a:	4ba9      	ldr	r3, [pc, #676]	; (80049c0 <sent_mpu6050+0x2f4>)
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Ax*1000;
 8004720:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	4ba6      	ldr	r3, [pc, #664]	; (80049c4 <sent_mpu6050+0x2f8>)
 800472a:	f7fe fcad 	bl	8003088 <__aeabi_dmul>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	f7fe ff57 	bl	80035e8 <__aeabi_d2iz>
 800473a:	4603      	mov	r3, r0
 800473c:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);							//数据内容,小段模式，低位在前
 800473e:	1d3a      	adds	r2, r7, #4
 8004740:	7a7b      	ldrb	r3, [r7, #9]
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	7279      	strb	r1, [r7, #9]
 8004746:	4619      	mov	r1, r3
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	4b9d      	ldr	r3, [pc, #628]	; (80049c0 <sent_mpu6050+0x2f4>)
 800474c:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);							//需要将字节进行拆分，调用上面的宏定义即可。
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	3301      	adds	r3, #1
 8004752:	7a7a      	ldrb	r2, [r7, #9]
 8004754:	1c51      	adds	r1, r2, #1
 8004756:	7279      	strb	r1, [r7, #9]
 8004758:	7819      	ldrb	r1, [r3, #0]
 800475a:	4b99      	ldr	r3, [pc, #612]	; (80049c0 <sent_mpu6050+0x2f4>)
 800475c:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Ay*1000;
 800475e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	4b97      	ldr	r3, [pc, #604]	; (80049c4 <sent_mpu6050+0x2f8>)
 8004768:	f7fe fc8e 	bl	8003088 <__aeabi_dmul>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	f7fe ff38 	bl	80035e8 <__aeabi_d2iz>
 8004778:	4603      	mov	r3, r0
 800477a:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 800477c:	1d3a      	adds	r2, r7, #4
 800477e:	7a7b      	ldrb	r3, [r7, #9]
 8004780:	1c59      	adds	r1, r3, #1
 8004782:	7279      	strb	r1, [r7, #9]
 8004784:	4619      	mov	r1, r3
 8004786:	7812      	ldrb	r2, [r2, #0]
 8004788:	4b8d      	ldr	r3, [pc, #564]	; (80049c0 <sent_mpu6050+0x2f4>)
 800478a:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	3301      	adds	r3, #1
 8004790:	7a7a      	ldrb	r2, [r7, #9]
 8004792:	1c51      	adds	r1, r2, #1
 8004794:	7279      	strb	r1, [r7, #9]
 8004796:	7819      	ldrb	r1, [r3, #0]
 8004798:	4b89      	ldr	r3, [pc, #548]	; (80049c0 <sent_mpu6050+0x2f4>)
 800479a:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Az*1000;
 800479c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	4b87      	ldr	r3, [pc, #540]	; (80049c4 <sent_mpu6050+0x2f8>)
 80047a6:	f7fe fc6f 	bl	8003088 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	f7fe ff19 	bl	80035e8 <__aeabi_d2iz>
 80047b6:	4603      	mov	r3, r0
 80047b8:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 80047ba:	1d3a      	adds	r2, r7, #4
 80047bc:	7a7b      	ldrb	r3, [r7, #9]
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	7279      	strb	r1, [r7, #9]
 80047c2:	4619      	mov	r1, r3
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	4b7e      	ldr	r3, [pc, #504]	; (80049c0 <sent_mpu6050+0x2f4>)
 80047c8:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	3301      	adds	r3, #1
 80047ce:	7a7a      	ldrb	r2, [r7, #9]
 80047d0:	1c51      	adds	r1, r2, #1
 80047d2:	7279      	strb	r1, [r7, #9]
 80047d4:	7819      	ldrb	r1, [r3, #0]
 80047d6:	4b7a      	ldr	r3, [pc, #488]	; (80049c0 <sent_mpu6050+0x2f4>)
 80047d8:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Gx*1000;
 80047da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <sent_mpu6050+0x2f8>)
 80047e4:	f7fe fc50 	bl	8003088 <__aeabi_dmul>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	f7fe fefa 	bl	80035e8 <__aeabi_d2iz>
 80047f4:	4603      	mov	r3, r0
 80047f6:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 80047f8:	1d3a      	adds	r2, r7, #4
 80047fa:	7a7b      	ldrb	r3, [r7, #9]
 80047fc:	1c59      	adds	r1, r3, #1
 80047fe:	7279      	strb	r1, [r7, #9]
 8004800:	4619      	mov	r1, r3
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004806:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	3301      	adds	r3, #1
 800480c:	7a7a      	ldrb	r2, [r7, #9]
 800480e:	1c51      	adds	r1, r2, #1
 8004810:	7279      	strb	r1, [r7, #9]
 8004812:	7819      	ldrb	r1, [r3, #0]
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004816:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE2(temp_data);
 8004818:	1d3b      	adds	r3, r7, #4
 800481a:	3302      	adds	r3, #2
 800481c:	7a7a      	ldrb	r2, [r7, #9]
 800481e:	1c51      	adds	r1, r2, #1
 8004820:	7279      	strb	r1, [r7, #9]
 8004822:	7819      	ldrb	r1, [r3, #0]
 8004824:	4b66      	ldr	r3, [pc, #408]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004826:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE3(temp_data);
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	3303      	adds	r3, #3
 800482c:	7a7a      	ldrb	r2, [r7, #9]
 800482e:	1c51      	adds	r1, r2, #1
 8004830:	7279      	strb	r1, [r7, #9]
 8004832:	7819      	ldrb	r1, [r3, #0]
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004836:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Gy*1000;
 8004838:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	4b60      	ldr	r3, [pc, #384]	; (80049c4 <sent_mpu6050+0x2f8>)
 8004842:	f7fe fc21 	bl	8003088 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f7fe fecb 	bl	80035e8 <__aeabi_d2iz>
 8004852:	4603      	mov	r3, r0
 8004854:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 8004856:	1d3a      	adds	r2, r7, #4
 8004858:	7a7b      	ldrb	r3, [r7, #9]
 800485a:	1c59      	adds	r1, r3, #1
 800485c:	7279      	strb	r1, [r7, #9]
 800485e:	4619      	mov	r1, r3
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004864:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	3301      	adds	r3, #1
 800486a:	7a7a      	ldrb	r2, [r7, #9]
 800486c:	1c51      	adds	r1, r2, #1
 800486e:	7279      	strb	r1, [r7, #9]
 8004870:	7819      	ldrb	r1, [r3, #0]
 8004872:	4b53      	ldr	r3, [pc, #332]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004874:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE2(temp_data);
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	3302      	adds	r3, #2
 800487a:	7a7a      	ldrb	r2, [r7, #9]
 800487c:	1c51      	adds	r1, r2, #1
 800487e:	7279      	strb	r1, [r7, #9]
 8004880:	7819      	ldrb	r1, [r3, #0]
 8004882:	4b4f      	ldr	r3, [pc, #316]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004884:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE3(temp_data);
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	3303      	adds	r3, #3
 800488a:	7a7a      	ldrb	r2, [r7, #9]
 800488c:	1c51      	adds	r1, r2, #1
 800488e:	7279      	strb	r1, [r7, #9]
 8004890:	7819      	ldrb	r1, [r3, #0]
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004894:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Gz*1000;
 8004896:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <sent_mpu6050+0x2f8>)
 80048a0:	f7fe fbf2 	bl	8003088 <__aeabi_dmul>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	f7fe fe9c 	bl	80035e8 <__aeabi_d2iz>
 80048b0:	4603      	mov	r3, r0
 80048b2:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 80048b4:	1d3a      	adds	r2, r7, #4
 80048b6:	7a7b      	ldrb	r3, [r7, #9]
 80048b8:	1c59      	adds	r1, r3, #1
 80048ba:	7279      	strb	r1, [r7, #9]
 80048bc:	4619      	mov	r1, r3
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <sent_mpu6050+0x2f4>)
 80048c2:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	3301      	adds	r3, #1
 80048c8:	7a7a      	ldrb	r2, [r7, #9]
 80048ca:	1c51      	adds	r1, r2, #1
 80048cc:	7279      	strb	r1, [r7, #9]
 80048ce:	7819      	ldrb	r1, [r3, #0]
 80048d0:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <sent_mpu6050+0x2f4>)
 80048d2:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE2(temp_data);
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	3302      	adds	r3, #2
 80048d8:	7a7a      	ldrb	r2, [r7, #9]
 80048da:	1c51      	adds	r1, r2, #1
 80048dc:	7279      	strb	r1, [r7, #9]
 80048de:	7819      	ldrb	r1, [r3, #0]
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <sent_mpu6050+0x2f4>)
 80048e2:	5499      	strb	r1, [r3, r2]
	BUFF[_cnt++]=BYTE3(temp_data);
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	3303      	adds	r3, #3
 80048e8:	7a7a      	ldrb	r2, [r7, #9]
 80048ea:	1c51      	adds	r1, r2, #1
 80048ec:	7279      	strb	r1, [r7, #9]
 80048ee:	7819      	ldrb	r1, [r3, #0]
 80048f0:	4b33      	ldr	r3, [pc, #204]	; (80049c0 <sent_mpu6050+0x2f4>)
 80048f2:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Accel_X*1000;
 80048f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <sent_mpu6050+0x2f8>)
 80048fe:	f7fe fbc3 	bl	8003088 <__aeabi_dmul>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f7fe fe6d 	bl	80035e8 <__aeabi_d2iz>
 800490e:	4603      	mov	r3, r0
 8004910:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 8004912:	1d3a      	adds	r2, r7, #4
 8004914:	7a7b      	ldrb	r3, [r7, #9]
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	7279      	strb	r1, [r7, #9]
 800491a:	4619      	mov	r1, r3
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004920:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	3301      	adds	r3, #1
 8004926:	7a7a      	ldrb	r2, [r7, #9]
 8004928:	1c51      	adds	r1, r2, #1
 800492a:	7279      	strb	r1, [r7, #9]
 800492c:	7819      	ldrb	r1, [r3, #0]
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <sent_mpu6050+0x2f4>)
 8004930:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Accel_Y*1000;
 8004932:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <sent_mpu6050+0x2f8>)
 800493c:	f7fe fba4 	bl	8003088 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	f7fe fe4e 	bl	80035e8 <__aeabi_d2iz>
 800494c:	4603      	mov	r3, r0
 800494e:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 8004950:	1d3a      	adds	r2, r7, #4
 8004952:	7a7b      	ldrb	r3, [r7, #9]
 8004954:	1c59      	adds	r1, r3, #1
 8004956:	7279      	strb	r1, [r7, #9]
 8004958:	4619      	mov	r1, r3
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <sent_mpu6050+0x2f4>)
 800495e:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	3301      	adds	r3, #1
 8004964:	7a7a      	ldrb	r2, [r7, #9]
 8004966:	1c51      	adds	r1, r2, #1
 8004968:	7279      	strb	r1, [r7, #9]
 800496a:	7819      	ldrb	r1, [r3, #0]
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <sent_mpu6050+0x2f4>)
 800496e:	5499      	strb	r1, [r3, r2]
	temp_data = Send_Data.Accel_Z*1000;
 8004970:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <sent_mpu6050+0x2f8>)
 800497a:	f7fe fb85 	bl	8003088 <__aeabi_dmul>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	f7fe fe2f 	bl	80035e8 <__aeabi_d2iz>
 800498a:	4603      	mov	r3, r0
 800498c:	607b      	str	r3, [r7, #4]
	BUFF[_cnt++]=BYTE0(temp_data);
 800498e:	1d3a      	adds	r2, r7, #4
 8004990:	7a7b      	ldrb	r3, [r7, #9]
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	7279      	strb	r1, [r7, #9]
 8004996:	4619      	mov	r1, r3
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <sent_mpu6050+0x2f4>)
 800499c:	545a      	strb	r2, [r3, r1]
	BUFF[_cnt++]=BYTE1(temp_data);
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	3301      	adds	r3, #1
 80049a2:	7a7a      	ldrb	r2, [r7, #9]
 80049a4:	1c51      	adds	r1, r2, #1
 80049a6:	7279      	strb	r1, [r7, #9]
 80049a8:	7819      	ldrb	r1, [r3, #0]
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <sent_mpu6050+0x2f4>)
 80049ac:	5499      	strb	r1, [r3, r2]
//	BUFF[_cnt++]=BYTE0(Send_Data.Gyro_Z_RAW);
//	BUFF[_cnt++]=BYTE1(Send_Data.Gyro_Z_RAW);

	BUFF[3]=_cnt-4;			//数据长度
 80049ae:	7a7b      	ldrb	r3, [r7, #9]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <sent_mpu6050+0x2f4>)
 80049b6:	70da      	strb	r2, [r3, #3]
	//SC和AC的校验直接抄最上面上面简介的即可
	for(i=0;i<BUFF[3]+4;i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e012      	b.n	80049e4 <sent_mpu6050+0x318>
 80049be:	bf00      	nop
 80049c0:	2000058c 	.word	0x2000058c
 80049c4:	408f4000 	.word	0x408f4000
	{
		sumcheck+=BUFF[i];
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <sent_mpu6050+0x360>)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	4413      	add	r3, r2
 80049d4:	72fb      	strb	r3, [r7, #11]
		addcheck+=sumcheck;
 80049d6:	7aba      	ldrb	r2, [r7, #10]
 80049d8:	7afb      	ldrb	r3, [r7, #11]
 80049da:	4413      	add	r3, r2
 80049dc:	72bb      	strb	r3, [r7, #10]
	for(i=0;i<BUFF[3]+4;i++)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <sent_mpu6050+0x360>)
 80049e6:	78db      	ldrb	r3, [r3, #3]
 80049e8:	3303      	adds	r3, #3
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	ddeb      	ble.n	80049c8 <sent_mpu6050+0x2fc>
	}
	BUFF[_cnt++]=sumcheck;
 80049f0:	7a7b      	ldrb	r3, [r7, #9]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	727a      	strb	r2, [r7, #9]
 80049f6:	4619      	mov	r1, r3
 80049f8:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <sent_mpu6050+0x360>)
 80049fa:	7afb      	ldrb	r3, [r7, #11]
 80049fc:	5453      	strb	r3, [r2, r1]
	BUFF[_cnt++]=addcheck;
 80049fe:	7a7b      	ldrb	r3, [r7, #9]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	727a      	strb	r2, [r7, #9]
 8004a04:	4619      	mov	r1, r3
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <sent_mpu6050+0x360>)
 8004a08:	7abb      	ldrb	r3, [r7, #10]
 8004a0a:	5453      	strb	r3, [r2, r1]
	UART_DMA_Send(BUFF,++_cnt);
 8004a0c:	7a7b      	ldrb	r3, [r7, #9]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	727b      	strb	r3, [r7, #9]
 8004a12:	7a7b      	ldrb	r3, [r7, #9]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	4619      	mov	r1, r3
 8004a18:	4804      	ldr	r0, [pc, #16]	; (8004a2c <sent_mpu6050+0x360>)
 8004a1a:	f000 f88b 	bl	8004b34 <UART_DMA_Send>
//	for(i=0;i<_cnt;i++) UsartSendByte(USART1,BUFF[i]);//串口逐个发送数据
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a28:	b004      	add	sp, #16
 8004a2a:	4770      	bx	lr
 8004a2c:	2000058c 	.word	0x2000058c

08004a30 <Sys_Init>:

uint8_t i = 0;
MPU6050_t MPU6050_Data;

void Sys_Init()
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	UART_DMA_Recive_Init();
 8004a34:	f000 f84c 	bl	8004ad0 <UART_DMA_Recive_Init>
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask *
	 * /
	/* Infinite loop */
	Sys_Init();
 8004a44:	f7ff fff4 	bl	8004a30 <Sys_Init>
//	while (MPU6050_Init(&hi2c2) == 1);
	for (;;) {
		i++;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <StartDefaultTask+0x20>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <StartDefaultTask+0x20>)
 8004a52:	701a      	strb	r2, [r3, #0]
		//printf("Ax:%d,Ay:%d,Az:%d\n",MPU6050.Accel_X_RAW,MPU6050.Accel_Y_RAW,MPU6050.Accel_Z_RAW);
//		printf("Gx:%f,Gy:%f,Gz:%f\n",MPU6050.Gx,MPU6050.Gy,MPU6050.Gz);
//		sent_mpu6050(MPU6050);
		//printf("AngleX:%lf,AngleY:%lf\n",MPU6050.KalmanAngleX,MPU6050.KalmanAngleY);
		osDelay(100);
 8004a54:	2064      	movs	r0, #100	; 0x64
 8004a56:	f00a f943 	bl	800ece0 <osDelay>
		i++;
 8004a5a:	e7f5      	b.n	8004a48 <StartDefaultTask+0xc>
 8004a5c:	200005f0 	.word	0x200005f0

08004a60 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
//		MPU6050_Read_All(&hi2c2, &MPU6050);
		osDelay(100);
 8004a68:	2064      	movs	r0, #100	; 0x64
 8004a6a:	f00a f939 	bl	800ece0 <osDelay>
 8004a6e:	e7fb      	b.n	8004a68 <StartTask02+0x8>

08004a70 <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f00a f931 	bl	800ece0 <osDelay>
 8004a7e:	e7fb      	b.n	8004a78 <StartTask04+0x8>

08004a80 <test_fun>:
 */
#include "bsp_usart.h"
#include "app_usart.h"
uint8_t send_cnt = 0;
void test_fun(uint8_t *rx_data_buf, uint8_t data_len)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
	send_cnt++;
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <test_fun+0x2c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <test_fun+0x2c>)
 8004a96:	701a      	strb	r2, [r3, #0]
	UART_DMA_Send(rx_data_buf,data_len);
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f848 	bl	8004b34 <UART_DMA_Send>
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000668 	.word	0x20000668

08004ab0 <UART_DMA_RX_Data_Analyze>:


void UART_DMA_RX_Data_Analyze(uint8_t *rx_data_buf, uint8_t data_len)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
	test_fun(rx_data_buf,data_len);
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ffdd 	bl	8004a80 <test_fun>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <UART_DMA_Recive_Init>:
{

}

void UART_DMA_Recive_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
    //使能接收，进入中断回调函数
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_Rx_Data, UART_DMA_BUFF_SIZE);
 8004ad4:	2240      	movs	r2, #64	; 0x40
 8004ad6:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <UART_DMA_Recive_Init+0x14>)
 8004ad8:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <UART_DMA_Recive_Init+0x18>)
 8004ada:	f003 fefd 	bl	80088d8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000066c 	.word	0x2000066c
 8004ae8:	20000764 	.word	0x20000764

08004aec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    UNUSED(Size);
    if (huart->Instance == USART1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10e      	bne.n	8004b20 <HAL_UARTEx_RxEventCallback+0x34>
    {
		UART_Rx_Len = Size;
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_UARTEx_RxEventCallback+0x40>)
 8004b08:	701a      	strb	r2, [r3, #0]
        UART_DMA_RX_Data_Analyze(UART_Rx_Data, Size);
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4807      	ldr	r0, [pc, #28]	; (8004b30 <HAL_UARTEx_RxEventCallback+0x44>)
 8004b12:	f7ff ffcd 	bl	8004ab0 <UART_DMA_RX_Data_Analyze>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, UART_Rx_Data, UART_DMA_BUFF_SIZE);
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	4905      	ldr	r1, [pc, #20]	; (8004b30 <HAL_UARTEx_RxEventCallback+0x44>)
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f003 fedc 	bl	80088d8 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40013800 	.word	0x40013800
 8004b2c:	20000669 	.word	0x20000669
 8004b30:	2000066c 	.word	0x2000066c

08004b34 <UART_DMA_Send>:

void UART_DMA_Send(uint8_t *pData, uint16_t Size)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart1, pData, Size,1000);
 8004b40:	887a      	ldrh	r2, [r7, #2]
 8004b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <UART_DMA_Send+0x24>)
 8004b4a:	f003 fdc6 	bl	80086da <HAL_UART_Transmit>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000764 	.word	0x20000764

08004b5c <_write>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明：无
  */
int _write(int file, char *data, int len)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d00a      	beq.n	8004b84 <_write+0x28>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d007      	beq.n	8004b84 <_write+0x28>
   {
      errno = EBADF;
 8004b74:	f00c fd6a 	bl	801164c <__errno>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2209      	movs	r2, #9
 8004b7c:	601a      	str	r2, [r3, #0]
      return -1;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	e00f      	b.n	8004ba4 <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
   HAL_UART_Transmit(&huart1, (uint8_t*)data, len,1000);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4807      	ldr	r0, [pc, #28]	; (8004bac <_write+0x50>)
 8004b90:	f003 fda3 	bl	80086da <HAL_UART_Transmit>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <_write+0x46>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	e000      	b.n	8004ba4 <_write+0x48>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000764 	.word	0x20000764

08004bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <MX_DMA_Init+0x48>)
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4a0f      	ldr	r2, [pc, #60]	; (8004bf8 <MX_DMA_Init+0x48>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6153      	str	r3, [r2, #20]
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <MX_DMA_Init+0x48>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2105      	movs	r1, #5
 8004bd2:	200e      	movs	r0, #14
 8004bd4:	f000 fdad 	bl	8005732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004bd8:	200e      	movs	r0, #14
 8004bda:	f000 fdc6 	bl	800576a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2105      	movs	r1, #5
 8004be2:	200f      	movs	r0, #15
 8004be4:	f000 fda5 	bl	8005732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004be8:	200f      	movs	r0, #15
 8004bea:	f000 fdbe 	bl	800576a <HAL_NVIC_EnableIRQ>

}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000

08004bfc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8004c00:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <MX_FREERTOS_Init+0x68>)
 8004c02:	2102      	movs	r1, #2
 8004c04:	2010      	movs	r0, #16
 8004c06:	f00a f899 	bl	800ed3c <osMessageQueueNew>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <MX_FREERTOS_Init+0x6c>)
 8004c0e:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue02_attributes);
 8004c10:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <MX_FREERTOS_Init+0x70>)
 8004c12:	2102      	movs	r1, #2
 8004c14:	2010      	movs	r0, #16
 8004c16:	f00a f891 	bl	800ed3c <osMessageQueueNew>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <MX_FREERTOS_Init+0x74>)
 8004c1e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004c20:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <MX_FREERTOS_Init+0x78>)
 8004c22:	2100      	movs	r1, #0
 8004c24:	4814      	ldr	r0, [pc, #80]	; (8004c78 <MX_FREERTOS_Init+0x7c>)
 8004c26:	f009 ffb1 	bl	800eb8c <osThreadNew>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <MX_FREERTOS_Init+0x80>)
 8004c2e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <MX_FREERTOS_Init+0x84>)
 8004c32:	2100      	movs	r1, #0
 8004c34:	4813      	ldr	r0, [pc, #76]	; (8004c84 <MX_FREERTOS_Init+0x88>)
 8004c36:	f009 ffa9 	bl	800eb8c <osThreadNew>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <MX_FREERTOS_Init+0x8c>)
 8004c3e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8004c40:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <MX_FREERTOS_Init+0x90>)
 8004c42:	2100      	movs	r1, #0
 8004c44:	4812      	ldr	r0, [pc, #72]	; (8004c90 <MX_FREERTOS_Init+0x94>)
 8004c46:	f009 ffa1 	bl	800eb8c <osThreadNew>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <MX_FREERTOS_Init+0x98>)
 8004c4e:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8004c50:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <MX_FREERTOS_Init+0x9c>)
 8004c52:	2100      	movs	r1, #0
 8004c54:	4811      	ldr	r0, [pc, #68]	; (8004c9c <MX_FREERTOS_Init+0xa0>)
 8004c56:	f009 ff99 	bl	800eb8c <osThreadNew>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <MX_FREERTOS_Init+0xa4>)
 8004c5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	080158b0 	.word	0x080158b0
 8004c68:	200006bc 	.word	0x200006bc
 8004c6c:	080158c8 	.word	0x080158c8
 8004c70:	200006c0 	.word	0x200006c0
 8004c74:	08015820 	.word	0x08015820
 8004c78:	08004a3d 	.word	0x08004a3d
 8004c7c:	200006ac 	.word	0x200006ac
 8004c80:	08015844 	.word	0x08015844
 8004c84:	08004a61 	.word	0x08004a61
 8004c88:	200006b0 	.word	0x200006b0
 8004c8c:	08015868 	.word	0x08015868
 8004c90:	080044d1 	.word	0x080044d1
 8004c94:	200006b4 	.word	0x200006b4
 8004c98:	0801588c 	.word	0x0801588c
 8004c9c:	08004a71 	.word	0x08004a71
 8004ca0:	200006b8 	.word	0x200006b8

08004ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004caa:	f107 0310 	add.w	r3, r7, #16
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cb8:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc2:	6193      	str	r3, [r2, #24]
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	6193      	str	r3, [r2, #24]
 8004cdc:	4b38      	ldr	r3, [pc, #224]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce8:	4b35      	ldr	r3, [pc, #212]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cee:	f043 0308 	orr.w	r3, r3, #8
 8004cf2:	6193      	str	r3, [r2, #24]
 8004cf4:	4b32      	ldr	r3, [pc, #200]	; (8004dc0 <MX_GPIO_Init+0x11c>)
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2120      	movs	r1, #32
 8004d04:	482f      	ldr	r0, [pc, #188]	; (8004dc4 <MX_GPIO_Init+0x120>)
 8004d06:	f001 fc21 	bl	800654c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD0_GPIO_Port, AD0_Pin, GPIO_PIN_RESET);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d10:	482d      	ldr	r0, [pc, #180]	; (8004dc8 <MX_GPIO_Init+0x124>)
 8004d12:	f001 fc1b 	bl	800654c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2120      	movs	r1, #32
 8004d1a:	482c      	ldr	r0, [pc, #176]	; (8004dcc <MX_GPIO_Init+0x128>)
 8004d1c:	f001 fc16 	bl	800654c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8004d20:	2320      	movs	r3, #32
 8004d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	4619      	mov	r1, r3
 8004d36:	4823      	ldr	r0, [pc, #140]	; (8004dc4 <MX_GPIO_Init+0x120>)
 8004d38:	f001 f9a8 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	481e      	ldr	r0, [pc, #120]	; (8004dc8 <MX_GPIO_Init+0x124>)
 8004d50:	f001 f99c 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_EXTI_Pin;
 8004d54:	2304      	movs	r3, #4
 8004d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <MX_GPIO_Init+0x12c>)
 8004d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU_EXTI_GPIO_Port, &GPIO_InitStruct);
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	4619      	mov	r1, r3
 8004d66:	4818      	ldr	r0, [pc, #96]	; (8004dc8 <MX_GPIO_Init+0x124>)
 8004d68:	f001 f990 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD0_Pin;
 8004d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d72:	2301      	movs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD0_GPIO_Port, &GPIO_InitStruct);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	4619      	mov	r1, r3
 8004d84:	4810      	ldr	r0, [pc, #64]	; (8004dc8 <MX_GPIO_Init+0x124>)
 8004d86:	f001 f981 	bl	800608c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2302      	movs	r3, #2
 8004d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004d9a:	f107 0310 	add.w	r3, r7, #16
 8004d9e:	4619      	mov	r1, r3
 8004da0:	480a      	ldr	r0, [pc, #40]	; (8004dcc <MX_GPIO_Init+0x128>)
 8004da2:	f001 f973 	bl	800608c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2105      	movs	r1, #5
 8004daa:	2008      	movs	r0, #8
 8004dac:	f000 fcc1 	bl	8005732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004db0:	2008      	movs	r0, #8
 8004db2:	f000 fcda 	bl	800576a <HAL_NVIC_EnableIRQ>

}
 8004db6:	bf00      	nop
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40011800 	.word	0x40011800
 8004dc8:	40010800 	.word	0x40010800
 8004dcc:	40010c00 	.word	0x40010c00
 8004dd0:	10110000 	.word	0x10110000

08004dd4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <MX_I2C2_Init+0x54>)
 8004ddc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004de0:	4a12      	ldr	r2, [pc, #72]	; (8004e2c <MX_I2C2_Init+0x58>)
 8004de2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004df6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004e10:	4804      	ldr	r0, [pc, #16]	; (8004e24 <MX_I2C2_Init+0x50>)
 8004e12:	f001 fbef 	bl	80065f4 <HAL_I2C_Init>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004e1c:	f000 f8d8 	bl	8004fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	200006c4 	.word	0x200006c4
 8004e28:	40005800 	.word	0x40005800
 8004e2c:	00061a80 	.word	0x00061a80

08004e30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <HAL_I2C_MspInit+0x74>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d124      	bne.n	8004e9a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e50:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <HAL_I2C_MspInit+0x78>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <HAL_I2C_MspInit+0x78>)
 8004e56:	f043 0308 	orr.w	r3, r3, #8
 8004e5a:	6193      	str	r3, [r2, #24]
 8004e5c:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <HAL_I2C_MspInit+0x78>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e6e:	2312      	movs	r3, #18
 8004e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e72:	2303      	movs	r3, #3
 8004e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e76:	f107 0310 	add.w	r3, r7, #16
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	480b      	ldr	r0, [pc, #44]	; (8004eac <HAL_I2C_MspInit+0x7c>)
 8004e7e:	f001 f905 	bl	800608c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_I2C_MspInit+0x78>)
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <HAL_I2C_MspInit+0x78>)
 8004e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e8c:	61d3      	str	r3, [r2, #28]
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_I2C_MspInit+0x78>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40005800 	.word	0x40005800
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40010c00 	.word	0x40010c00

08004eb0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <HAL_I2C_MspDeInit+0x3c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10f      	bne.n	8004ee2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_I2C_MspDeInit+0x40>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <HAL_I2C_MspDeInit+0x40>)
 8004ec8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ecc:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	4808      	ldr	r0, [pc, #32]	; (8004ef4 <HAL_I2C_MspDeInit+0x44>)
 8004ed4:	f001 fa6e 	bl	80063b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8004ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004edc:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <HAL_I2C_MspDeInit+0x44>)
 8004ede:	f001 fa69 	bl	80063b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40005800 	.word	0x40005800
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40010c00 	.word	0x40010c00

08004ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004efc:	f000 fb0e 	bl	800551c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f00:	f000 f80f 	bl	8004f22 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f04:	f7ff fece 	bl	8004ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f08:	f7ff fe52 	bl	8004bb0 <MX_DMA_Init>
  MX_I2C2_Init();
 8004f0c:	f7ff ff62 	bl	8004dd4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004f10:	f000 fa0a 	bl	8005328 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004f14:	f009 fdd4 	bl	800eac0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004f18:	f7ff fe70 	bl	8004bfc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004f1c:	f009 fe02 	bl	800eb24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004f20:	e7fe      	b.n	8004f20 <main+0x28>

08004f22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b090      	sub	sp, #64	; 0x40
 8004f26:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f28:	f107 0318 	add.w	r3, r7, #24
 8004f2c:	2228      	movs	r2, #40	; 0x28
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f00c fdbf 	bl	8011ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f4c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f52:	2301      	movs	r3, #1
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f56:	2302      	movs	r3, #2
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f66:	f107 0318 	add.w	r3, r7, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fcae 	bl	80078cc <HAL_RCC_OscConfig>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004f76:	f000 f82b 	bl	8004fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f7a:	230f      	movs	r3, #15
 8004f7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	2102      	movs	r1, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f002 ff1b 	bl	8007dd0 <HAL_RCC_ClockConfig>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004fa0:	f000 f816 	bl	8004fd0 <Error_Handler>
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	3740      	adds	r7, #64	; 0x40
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004fbe:	f000 fac3 	bl	8005548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40000c00 	.word	0x40000c00

08004fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fd4:	b672      	cpsid	i
}
 8004fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fd8:	e7fe      	b.n	8004fd8 <Error_Handler+0x8>
	...

08004fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fe2:	4b18      	ldr	r3, [pc, #96]	; (8005044 <HAL_MspInit+0x68>)
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_MspInit+0x68>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6193      	str	r3, [r2, #24]
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_MspInit+0x68>)
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <HAL_MspInit+0x68>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	4a11      	ldr	r2, [pc, #68]	; (8005044 <HAL_MspInit+0x68>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	61d3      	str	r3, [r2, #28]
 8005006:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <HAL_MspInit+0x68>)
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	210f      	movs	r1, #15
 8005016:	f06f 0001 	mvn.w	r0, #1
 800501a:	f000 fb8a 	bl	8005732 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <HAL_MspInit+0x6c>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4a04      	ldr	r2, [pc, #16]	; (8005048 <HAL_MspInit+0x6c>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	40010000 	.word	0x40010000

0800504c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <HAL_InitTick+0xe8>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4a33      	ldr	r2, [pc, #204]	; (8005134 <HAL_InitTick+0xe8>)
 8005068:	f043 0308 	orr.w	r3, r3, #8
 800506c:	61d3      	str	r3, [r2, #28]
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_InitTick+0xe8>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800507a:	f107 0210 	add.w	r2, r7, #16
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f003 f81d 	bl	80080c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005094:	f002 ffee 	bl	8008074 <HAL_RCC_GetPCLK1Freq>
 8005098:	6378      	str	r0, [r7, #52]	; 0x34
 800509a:	e004      	b.n	80050a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800509c:	f002 ffea 	bl	8008074 <HAL_RCC_GetPCLK1Freq>
 80050a0:	4603      	mov	r3, r0
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	4a23      	ldr	r2, [pc, #140]	; (8005138 <HAL_InitTick+0xec>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	0c9b      	lsrs	r3, r3, #18
 80050b0:	3b01      	subs	r3, #1
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80050b4:	4b21      	ldr	r3, [pc, #132]	; (800513c <HAL_InitTick+0xf0>)
 80050b6:	4a22      	ldr	r2, [pc, #136]	; (8005140 <HAL_InitTick+0xf4>)
 80050b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_InitTick+0xf0>)
 80050bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050c0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_InitTick+0xf0>)
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80050c8:	4b1c      	ldr	r3, [pc, #112]	; (800513c <HAL_InitTick+0xf0>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ce:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_InitTick+0xf0>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <HAL_InitTick+0xf0>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80050da:	4818      	ldr	r0, [pc, #96]	; (800513c <HAL_InitTick+0xf0>)
 80050dc:	f003 f840 	bl	8008160 <HAL_TIM_Base_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80050e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d11b      	bne.n	8005126 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80050ee:	4813      	ldr	r0, [pc, #76]	; (800513c <HAL_InitTick+0xf0>)
 80050f0:	f003 f88e 	bl	8008210 <HAL_TIM_Base_Start_IT>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80050fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d111      	bne.n	8005126 <HAL_InitTick+0xda>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005102:	2032      	movs	r0, #50	; 0x32
 8005104:	f000 fb31 	bl	800576a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d808      	bhi.n	8005120 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800510e:	2200      	movs	r2, #0
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	2032      	movs	r0, #50	; 0x32
 8005114:	f000 fb0d 	bl	8005732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_InitTick+0xf8>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e002      	b.n	8005126 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800512a:	4618      	mov	r0, r3
 800512c:	3738      	adds	r7, #56	; 0x38
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	431bde83 	.word	0x431bde83
 800513c:	20000718 	.word	0x20000718
 8005140:	40000c00 	.word	0x40000c00
 8005144:	20000004 	.word	0x20000004

08005148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800514c:	e7fe      	b.n	800514c <NMI_Handler+0x4>

0800514e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800514e:	b480      	push	{r7}
 8005150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005152:	e7fe      	b.n	8005152 <HardFault_Handler+0x4>

08005154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005158:	e7fe      	b.n	8005158 <MemManage_Handler+0x4>

0800515a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800515e:	e7fe      	b.n	800515e <BusFault_Handler+0x4>

08005160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005164:	e7fe      	b.n	8005164 <UsageFault_Handler+0x4>

08005166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	MPU6050_data_ready_cb();
 8005176:	f009 fc97 	bl	800eaa8 <MPU6050_data_ready_cb>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_EXTI_Pin);
 800517a:	2004      	movs	r0, #4
 800517c:	f001 fa18 	bl	80065b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005180:	bf00      	nop
 8005182:	bd80      	pop	{r7, pc}

08005184 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005188:	4802      	ldr	r0, [pc, #8]	; (8005194 <DMA1_Channel4_IRQHandler+0x10>)
 800518a:	f000 fd15 	bl	8005bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	200007a8 	.word	0x200007a8

08005198 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800519c:	4802      	ldr	r0, [pc, #8]	; (80051a8 <DMA1_Channel5_IRQHandler+0x10>)
 800519e:	f000 fd0b 	bl	8005bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200007ec 	.word	0x200007ec

080051ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051b0:	4802      	ldr	r0, [pc, #8]	; (80051bc <USART1_IRQHandler+0x10>)
 80051b2:	f003 fbe1 	bl	8008978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000764 	.word	0x20000764

080051c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80051c4:	4802      	ldr	r0, [pc, #8]	; (80051d0 <TIM5_IRQHandler+0x10>)
 80051c6:	f003 f883 	bl	80082d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000718 	.word	0x20000718

080051d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return 1;
 80051d8:	2301      	movs	r3, #1
}
 80051da:	4618      	mov	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <_kill>:

int _kill(int pid, int sig)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80051ec:	f00c fa2e 	bl	801164c <__errno>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2216      	movs	r2, #22
 80051f4:	601a      	str	r2, [r3, #0]
  return -1;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <_exit>:

void _exit (int status)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800520a:	f04f 31ff 	mov.w	r1, #4294967295
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ffe7 	bl	80051e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005214:	e7fe      	b.n	8005214 <_exit+0x12>

08005216 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e00a      	b.n	800523e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005228:	f3af 8000 	nop.w
 800522c:	4601      	mov	r1, r0
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	60ba      	str	r2, [r7, #8]
 8005234:	b2ca      	uxtb	r2, r1
 8005236:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	dbf0      	blt.n	8005228 <_read+0x12>
  }

  return len;
 8005246:	687b      	ldr	r3, [r7, #4]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005276:	605a      	str	r2, [r3, #4]
  return 0;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <_isatty>:

int _isatty(int file)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800528c:	2301      	movs	r3, #1
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <_sbrk+0x5c>)
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <_sbrk+0x60>)
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <_sbrk+0x64>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <_sbrk+0x64>)
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <_sbrk+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <_sbrk+0x64>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d207      	bcs.n	80052f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052e0:	f00c f9b4 	bl	801164c <__errno>
 80052e4:	4603      	mov	r3, r0
 80052e6:	220c      	movs	r2, #12
 80052e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	e009      	b.n	8005304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <_sbrk+0x64>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <_sbrk+0x64>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <_sbrk+0x64>)
 8005300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20010000 	.word	0x20010000
 8005310:	00000400 	.word	0x00000400
 8005314:	20000760 	.word	0x20000760
 8005318:	20002c58 	.word	0x20002c58

0800531c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005320:	bf00      	nop
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <MX_USART1_UART_Init+0x50>)
 8005330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 8005334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800533a:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 800534e:	220c      	movs	r2, #12
 8005350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800535e:	4805      	ldr	r0, [pc, #20]	; (8005374 <MX_USART1_UART_Init+0x4c>)
 8005360:	f003 f96e 	bl	8008640 <HAL_UART_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800536a:	f7ff fe31 	bl	8004fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000764 	.word	0x20000764
 8005378:	40013800 	.word	0x40013800

0800537c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005384:	f107 0310 	add.w	r3, r7, #16
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a47      	ldr	r2, [pc, #284]	; (80054b4 <HAL_UART_MspInit+0x138>)
 8005398:	4293      	cmp	r3, r2
 800539a:	f040 8086 	bne.w	80054aa <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800539e:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <HAL_UART_MspInit+0x13c>)
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <HAL_UART_MspInit+0x13c>)
 80053a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053a8:	6193      	str	r3, [r2, #24]
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_UART_MspInit+0x13c>)
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b6:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <HAL_UART_MspInit+0x13c>)
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <HAL_UART_MspInit+0x13c>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	6193      	str	r3, [r2, #24]
 80053c2:	4b3d      	ldr	r3, [pc, #244]	; (80054b8 <HAL_UART_MspInit+0x13c>)
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d4:	2302      	movs	r3, #2
 80053d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053d8:	2303      	movs	r3, #3
 80053da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	4619      	mov	r1, r3
 80053e2:	4836      	ldr	r0, [pc, #216]	; (80054bc <HAL_UART_MspInit+0x140>)
 80053e4:	f000 fe52 	bl	800608c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f6:	f107 0310 	add.w	r3, r7, #16
 80053fa:	4619      	mov	r1, r3
 80053fc:	482f      	ldr	r0, [pc, #188]	; (80054bc <HAL_UART_MspInit+0x140>)
 80053fe:	f000 fe45 	bl	800608c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005404:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <HAL_UART_MspInit+0x148>)
 8005406:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005408:	4b2d      	ldr	r3, [pc, #180]	; (80054c0 <HAL_UART_MspInit+0x144>)
 800540a:	2210      	movs	r2, #16
 800540c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005414:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800541a:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <HAL_UART_MspInit+0x144>)
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005422:	2200      	movs	r2, #0
 8005424:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005426:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800542c:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <HAL_UART_MspInit+0x144>)
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005432:	4823      	ldr	r0, [pc, #140]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005434:	f000 f9a8 	bl	8005788 <HAL_DMA_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800543e:	f7ff fdc7 	bl	8004fd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <HAL_UART_MspInit+0x144>)
 8005446:	635a      	str	r2, [r3, #52]	; 0x34
 8005448:	4a1d      	ldr	r2, [pc, #116]	; (80054c0 <HAL_UART_MspInit+0x144>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800544e:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005450:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <HAL_UART_MspInit+0x150>)
 8005452:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005456:	2200      	movs	r2, #0
 8005458:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005468:	2200      	movs	r2, #0
 800546a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800546c:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 800546e:	2200      	movs	r2, #0
 8005470:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 800547a:	2200      	movs	r2, #0
 800547c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800547e:	4812      	ldr	r0, [pc, #72]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005480:	f000 f982 	bl	8005788 <HAL_DMA_Init>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800548a:	f7ff fda1 	bl	8004fd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a0d      	ldr	r2, [pc, #52]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
 8005494:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <HAL_UART_MspInit+0x14c>)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800549a:	2200      	movs	r2, #0
 800549c:	2105      	movs	r1, #5
 800549e:	2025      	movs	r0, #37	; 0x25
 80054a0:	f000 f947 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054a4:	2025      	movs	r0, #37	; 0x25
 80054a6:	f000 f960 	bl	800576a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80054aa:	bf00      	nop
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40013800 	.word	0x40013800
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40010800 	.word	0x40010800
 80054c0:	200007a8 	.word	0x200007a8
 80054c4:	40020044 	.word	0x40020044
 80054c8:	200007ec 	.word	0x200007ec
 80054cc:	40020058 	.word	0x40020058

080054d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054d0:	480c      	ldr	r0, [pc, #48]	; (8005504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80054d2:	490d      	ldr	r1, [pc, #52]	; (8005508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80054d4:	4a0d      	ldr	r2, [pc, #52]	; (800550c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80054d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054d8:	e002      	b.n	80054e0 <LoopCopyDataInit>

080054da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054de:	3304      	adds	r3, #4

080054e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054e4:	d3f9      	bcc.n	80054da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80054e8:	4c0a      	ldr	r4, [pc, #40]	; (8005514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80054ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054ec:	e001      	b.n	80054f2 <LoopFillZerobss>

080054ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054f0:	3204      	adds	r2, #4

080054f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054f4:	d3fb      	bcc.n	80054ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054f6:	f7ff ff11 	bl	800531c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054fa:	f00c fa73 	bl	80119e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054fe:	f7ff fcfb 	bl	8004ef8 <main>
  bx lr
 8005502:	4770      	bx	lr
  ldr r0, =_sdata
 8005504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005508:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800550c:	08016d68 	.word	0x08016d68
  ldr r2, =_sbss
 8005510:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8005514:	20002c58 	.word	0x20002c58

08005518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005518:	e7fe      	b.n	8005518 <ADC1_2_IRQHandler>
	...

0800551c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <HAL_Init+0x28>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_Init+0x28>)
 8005526:	f043 0310 	orr.w	r3, r3, #16
 800552a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800552c:	2003      	movs	r0, #3
 800552e:	f000 f8f5 	bl	800571c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005532:	200f      	movs	r0, #15
 8005534:	f7ff fd8a 	bl	800504c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005538:	f7ff fd50 	bl	8004fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40022000 	.word	0x40022000

08005548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_IncTick+0x1c>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_IncTick+0x20>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4413      	add	r3, r2
 8005558:	4a03      	ldr	r2, [pc, #12]	; (8005568 <HAL_IncTick+0x20>)
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	20000008 	.word	0x20000008
 8005568:	20000830 	.word	0x20000830

0800556c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return uwTick;
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <HAL_GetTick+0x10>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	20000830 	.word	0x20000830

08005580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005588:	f7ff fff0 	bl	800556c <HAL_GetTick>
 800558c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d005      	beq.n	80055a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_Delay+0x44>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055a6:	bf00      	nop
 80055a8:	f7ff ffe0 	bl	800556c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d8f7      	bhi.n	80055a8 <HAL_Delay+0x28>
  {
  }
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000008 	.word	0x20000008

080055c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <__NVIC_SetPriorityGrouping+0x44>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055e4:	4013      	ands	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <__NVIC_SetPriorityGrouping+0x44>)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	60d3      	str	r3, [r2, #12]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <__NVIC_GetPriorityGrouping+0x18>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	f003 0307 	and.w	r3, r3, #7
}
 800561e:	4618      	mov	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	2b00      	cmp	r3, #0
 800563c:	db0b      	blt.n	8005656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	f003 021f 	and.w	r2, r3, #31
 8005644:	4906      	ldr	r1, [pc, #24]	; (8005660 <__NVIC_EnableIRQ+0x34>)
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2001      	movs	r0, #1
 800564e:	fa00 f202 	lsl.w	r2, r0, r2
 8005652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	e000e100 	.word	0xe000e100

08005664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005674:	2b00      	cmp	r3, #0
 8005676:	db0a      	blt.n	800568e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	490c      	ldr	r1, [pc, #48]	; (80056b0 <__NVIC_SetPriority+0x4c>)
 800567e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005682:	0112      	lsls	r2, r2, #4
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	440b      	add	r3, r1
 8005688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800568c:	e00a      	b.n	80056a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	4908      	ldr	r1, [pc, #32]	; (80056b4 <__NVIC_SetPriority+0x50>)
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	3b04      	subs	r3, #4
 800569c:	0112      	lsls	r2, r2, #4
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	440b      	add	r3, r1
 80056a2:	761a      	strb	r2, [r3, #24]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	e000e100 	.word	0xe000e100
 80056b4:	e000ed00 	.word	0xe000ed00

080056b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f1c3 0307 	rsb	r3, r3, #7
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	bf28      	it	cs
 80056d6:	2304      	movcs	r3, #4
 80056d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3304      	adds	r3, #4
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d902      	bls.n	80056e8 <NVIC_EncodePriority+0x30>
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3b03      	subs	r3, #3
 80056e6:	e000      	b.n	80056ea <NVIC_EncodePriority+0x32>
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43da      	mvns	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	401a      	ands	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005700:	f04f 31ff 	mov.w	r1, #4294967295
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	43d9      	mvns	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005710:	4313      	orrs	r3, r2
         );
}
 8005712:	4618      	mov	r0, r3
 8005714:	3724      	adds	r7, #36	; 0x24
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff4f 	bl	80055c8 <__NVIC_SetPriorityGrouping>
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	4603      	mov	r3, r0
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005744:	f7ff ff64 	bl	8005610 <__NVIC_GetPriorityGrouping>
 8005748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7ff ffb2 	bl	80056b8 <NVIC_EncodePriority>
 8005754:	4602      	mov	r2, r0
 8005756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ff81 	bl	8005664 <__NVIC_SetPriority>
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	4603      	mov	r3, r0
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff57 	bl	800562c <__NVIC_EnableIRQ>
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e059      	b.n	8005852 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	4b2d      	ldr	r3, [pc, #180]	; (800585c <HAL_DMA_Init+0xd4>)
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d80f      	bhi.n	80057ca <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_DMA_Init+0xd8>)
 80057b2:	4413      	add	r3, r2
 80057b4:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <HAL_DMA_Init+0xdc>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	009a      	lsls	r2, r3, #2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a28      	ldr	r2, [pc, #160]	; (8005868 <HAL_DMA_Init+0xe0>)
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80057c8:	e00e      	b.n	80057e8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	4b26      	ldr	r3, [pc, #152]	; (800586c <HAL_DMA_Init+0xe4>)
 80057d2:	4413      	add	r3, r2
 80057d4:	4a23      	ldr	r2, [pc, #140]	; (8005864 <HAL_DMA_Init+0xdc>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	091b      	lsrs	r3, r3, #4
 80057dc:	009a      	lsls	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <HAL_DMA_Init+0xe8>)
 80057e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800580c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	40020407 	.word	0x40020407
 8005860:	bffdfff8 	.word	0xbffdfff8
 8005864:	cccccccd 	.word	0xcccccccd
 8005868:	40020000 	.word	0x40020000
 800586c:	bffdfbf8 	.word	0xbffdfbf8
 8005870:	40020400 	.word	0x40020400

08005874 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Start_IT+0x20>
 8005890:	2302      	movs	r3, #2
 8005892:	e04a      	b.n	800592a <HAL_DMA_Start_IT+0xb6>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d13a      	bne.n	800591c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fbb0 	bl	8006030 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 020e 	orr.w	r2, r2, #14
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e00f      	b.n	800590a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0204 	bic.w	r2, r2, #4
 80058f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 020a 	orr.w	r2, r2, #10
 8005908:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e005      	b.n	8005928 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005924:	2302      	movs	r3, #2
 8005926:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005928:	7dfb      	ldrb	r3, [r7, #23]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005944:	2b02      	cmp	r3, #2
 8005946:	d008      	beq.n	800595a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2204      	movs	r2, #4
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e020      	b.n	800599c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 020e 	bic.w	r2, r2, #14
 8005968:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	2101      	movs	r1, #1
 8005984:	fa01 f202 	lsl.w	r2, r1, r2
 8005988:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr
	...

080059a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d005      	beq.n	80059ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	e0d6      	b.n	8005b78 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 020e 	bic.w	r2, r2, #14
 80059d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b64      	ldr	r3, [pc, #400]	; (8005b84 <HAL_DMA_Abort_IT+0x1dc>)
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d958      	bls.n	8005aa8 <HAL_DMA_Abort_IT+0x100>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a63      	ldr	r2, [pc, #396]	; (8005b88 <HAL_DMA_Abort_IT+0x1e0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d04f      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xf8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a61      	ldr	r2, [pc, #388]	; (8005b8c <HAL_DMA_Abort_IT+0x1e4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d048      	beq.n	8005a9c <HAL_DMA_Abort_IT+0xf4>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a60      	ldr	r2, [pc, #384]	; (8005b90 <HAL_DMA_Abort_IT+0x1e8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d040      	beq.n	8005a96 <HAL_DMA_Abort_IT+0xee>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a5e      	ldr	r2, [pc, #376]	; (8005b94 <HAL_DMA_Abort_IT+0x1ec>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d038      	beq.n	8005a90 <HAL_DMA_Abort_IT+0xe8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a5d      	ldr	r2, [pc, #372]	; (8005b98 <HAL_DMA_Abort_IT+0x1f0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d030      	beq.n	8005a8a <HAL_DMA_Abort_IT+0xe2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5b      	ldr	r2, [pc, #364]	; (8005b9c <HAL_DMA_Abort_IT+0x1f4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d028      	beq.n	8005a84 <HAL_DMA_Abort_IT+0xdc>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a53      	ldr	r2, [pc, #332]	; (8005b84 <HAL_DMA_Abort_IT+0x1dc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d020      	beq.n	8005a7e <HAL_DMA_Abort_IT+0xd6>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a57      	ldr	r2, [pc, #348]	; (8005ba0 <HAL_DMA_Abort_IT+0x1f8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d019      	beq.n	8005a7a <HAL_DMA_Abort_IT+0xd2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a56      	ldr	r2, [pc, #344]	; (8005ba4 <HAL_DMA_Abort_IT+0x1fc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d012      	beq.n	8005a76 <HAL_DMA_Abort_IT+0xce>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a54      	ldr	r2, [pc, #336]	; (8005ba8 <HAL_DMA_Abort_IT+0x200>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00a      	beq.n	8005a70 <HAL_DMA_Abort_IT+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a53      	ldr	r2, [pc, #332]	; (8005bac <HAL_DMA_Abort_IT+0x204>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d102      	bne.n	8005a6a <HAL_DMA_Abort_IT+0xc2>
 8005a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a68:	e01b      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a6e:	e018      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a74:	e015      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a76:	2310      	movs	r3, #16
 8005a78:	e013      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e011      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a82:	e00e      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a88:	e00b      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a8e:	e008      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a94:	e005      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9a:	e002      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	e000      	b.n	8005aa2 <HAL_DMA_Abort_IT+0xfa>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4a43      	ldr	r2, [pc, #268]	; (8005bb0 <HAL_DMA_Abort_IT+0x208>)
 8005aa4:	6053      	str	r3, [r2, #4]
 8005aa6:	e057      	b.n	8005b58 <HAL_DMA_Abort_IT+0x1b0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a36      	ldr	r2, [pc, #216]	; (8005b88 <HAL_DMA_Abort_IT+0x1e0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d04f      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x1aa>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a35      	ldr	r2, [pc, #212]	; (8005b8c <HAL_DMA_Abort_IT+0x1e4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d048      	beq.n	8005b4e <HAL_DMA_Abort_IT+0x1a6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a33      	ldr	r2, [pc, #204]	; (8005b90 <HAL_DMA_Abort_IT+0x1e8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d040      	beq.n	8005b48 <HAL_DMA_Abort_IT+0x1a0>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <HAL_DMA_Abort_IT+0x1ec>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d038      	beq.n	8005b42 <HAL_DMA_Abort_IT+0x19a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a30      	ldr	r2, [pc, #192]	; (8005b98 <HAL_DMA_Abort_IT+0x1f0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d030      	beq.n	8005b3c <HAL_DMA_Abort_IT+0x194>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2f      	ldr	r2, [pc, #188]	; (8005b9c <HAL_DMA_Abort_IT+0x1f4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d028      	beq.n	8005b36 <HAL_DMA_Abort_IT+0x18e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a26      	ldr	r2, [pc, #152]	; (8005b84 <HAL_DMA_Abort_IT+0x1dc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d020      	beq.n	8005b30 <HAL_DMA_Abort_IT+0x188>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2b      	ldr	r2, [pc, #172]	; (8005ba0 <HAL_DMA_Abort_IT+0x1f8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d019      	beq.n	8005b2c <HAL_DMA_Abort_IT+0x184>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <HAL_DMA_Abort_IT+0x1fc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d012      	beq.n	8005b28 <HAL_DMA_Abort_IT+0x180>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <HAL_DMA_Abort_IT+0x200>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00a      	beq.n	8005b22 <HAL_DMA_Abort_IT+0x17a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a26      	ldr	r2, [pc, #152]	; (8005bac <HAL_DMA_Abort_IT+0x204>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d102      	bne.n	8005b1c <HAL_DMA_Abort_IT+0x174>
 8005b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b1a:	e01b      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b20:	e018      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b26:	e015      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	e013      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e011      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b34:	e00e      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b3a:	e00b      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b40:	e008      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b46:	e005      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b4c:	e002      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b4e:	2310      	movs	r3, #16
 8005b50:	e000      	b.n	8005b54 <HAL_DMA_Abort_IT+0x1ac>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <HAL_DMA_Abort_IT+0x20c>)
 8005b56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
    } 
  }
  return status;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40020080 	.word	0x40020080
 8005b88:	40020008 	.word	0x40020008
 8005b8c:	4002001c 	.word	0x4002001c
 8005b90:	40020030 	.word	0x40020030
 8005b94:	40020044 	.word	0x40020044
 8005b98:	40020058 	.word	0x40020058
 8005b9c:	4002006c 	.word	0x4002006c
 8005ba0:	40020408 	.word	0x40020408
 8005ba4:	4002041c 	.word	0x4002041c
 8005ba8:	40020430 	.word	0x40020430
 8005bac:	40020444 	.word	0x40020444
 8005bb0:	40020400 	.word	0x40020400
 8005bb4:	40020000 	.word	0x40020000

08005bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80f1 	beq.w	8005dc4 <HAL_DMA_IRQHandler+0x20c>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80eb 	beq.w	8005dc4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d107      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	4b5f      	ldr	r3, [pc, #380]	; (8005d90 <HAL_DMA_IRQHandler+0x1d8>)
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d958      	bls.n	8005cca <HAL_DMA_IRQHandler+0x112>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a5d      	ldr	r2, [pc, #372]	; (8005d94 <HAL_DMA_IRQHandler+0x1dc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d04f      	beq.n	8005cc2 <HAL_DMA_IRQHandler+0x10a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a5c      	ldr	r2, [pc, #368]	; (8005d98 <HAL_DMA_IRQHandler+0x1e0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d048      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x106>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a5a      	ldr	r2, [pc, #360]	; (8005d9c <HAL_DMA_IRQHandler+0x1e4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d040      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x100>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a59      	ldr	r2, [pc, #356]	; (8005da0 <HAL_DMA_IRQHandler+0x1e8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d038      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xfa>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a57      	ldr	r2, [pc, #348]	; (8005da4 <HAL_DMA_IRQHandler+0x1ec>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d030      	beq.n	8005cac <HAL_DMA_IRQHandler+0xf4>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a56      	ldr	r2, [pc, #344]	; (8005da8 <HAL_DMA_IRQHandler+0x1f0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d028      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xee>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a4d      	ldr	r2, [pc, #308]	; (8005d90 <HAL_DMA_IRQHandler+0x1d8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d020      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0xe8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a52      	ldr	r2, [pc, #328]	; (8005dac <HAL_DMA_IRQHandler+0x1f4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d019      	beq.n	8005c9c <HAL_DMA_IRQHandler+0xe4>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a50      	ldr	r2, [pc, #320]	; (8005db0 <HAL_DMA_IRQHandler+0x1f8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d012      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xe0>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4f      	ldr	r2, [pc, #316]	; (8005db4 <HAL_DMA_IRQHandler+0x1fc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00a      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xda>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a4d      	ldr	r2, [pc, #308]	; (8005db8 <HAL_DMA_IRQHandler+0x200>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d102      	bne.n	8005c8c <HAL_DMA_IRQHandler+0xd4>
 8005c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8a:	e01b      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005c8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c90:	e018      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c96:	e015      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005c98:	2340      	movs	r3, #64	; 0x40
 8005c9a:	e013      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	e011      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005ca0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ca4:	e00e      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005caa:	e00b      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cb0:	e008      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cb6:	e005      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cbc:	e002      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	e000      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x10c>
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	4a3d      	ldr	r2, [pc, #244]	; (8005dbc <HAL_DMA_IRQHandler+0x204>)
 8005cc6:	6053      	str	r3, [r2, #4]
 8005cc8:	e057      	b.n	8005d7a <HAL_DMA_IRQHandler+0x1c2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a31      	ldr	r2, [pc, #196]	; (8005d94 <HAL_DMA_IRQHandler+0x1dc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04f      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x1bc>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2f      	ldr	r2, [pc, #188]	; (8005d98 <HAL_DMA_IRQHandler+0x1e0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d048      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x1b8>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2e      	ldr	r2, [pc, #184]	; (8005d9c <HAL_DMA_IRQHandler+0x1e4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d040      	beq.n	8005d6a <HAL_DMA_IRQHandler+0x1b2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <HAL_DMA_IRQHandler+0x1e8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d038      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x1ac>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <HAL_DMA_IRQHandler+0x1ec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d030      	beq.n	8005d5e <HAL_DMA_IRQHandler+0x1a6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <HAL_DMA_IRQHandler+0x1f0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d028      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x1a0>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a21      	ldr	r2, [pc, #132]	; (8005d90 <HAL_DMA_IRQHandler+0x1d8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d020      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x19a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a25      	ldr	r2, [pc, #148]	; (8005dac <HAL_DMA_IRQHandler+0x1f4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d019      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x196>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <HAL_DMA_IRQHandler+0x1f8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d012      	beq.n	8005d4a <HAL_DMA_IRQHandler+0x192>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a22      	ldr	r2, [pc, #136]	; (8005db4 <HAL_DMA_IRQHandler+0x1fc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00a      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x18c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <HAL_DMA_IRQHandler+0x200>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d102      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x186>
 8005d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d3c:	e01b      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d42:	e018      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d48:	e015      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d4a:	2340      	movs	r3, #64	; 0x40
 8005d4c:	e013      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d4e:	2304      	movs	r3, #4
 8005d50:	e011      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d56:	e00e      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d5c:	e00b      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d62:	e008      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d68:	e005      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6e:	e002      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	e000      	b.n	8005d76 <HAL_DMA_IRQHandler+0x1be>
 8005d74:	2304      	movs	r3, #4
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <HAL_DMA_IRQHandler+0x208>)
 8005d78:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8136 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005d8c:	e130      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x438>
 8005d8e:	bf00      	nop
 8005d90:	40020080 	.word	0x40020080
 8005d94:	40020008 	.word	0x40020008
 8005d98:	4002001c 	.word	0x4002001c
 8005d9c:	40020030 	.word	0x40020030
 8005da0:	40020044 	.word	0x40020044
 8005da4:	40020058 	.word	0x40020058
 8005da8:	4002006c 	.word	0x4002006c
 8005dac:	40020408 	.word	0x40020408
 8005db0:	4002041c 	.word	0x4002041c
 8005db4:	40020430 	.word	0x40020430
 8005db8:	40020444 	.word	0x40020444
 8005dbc:	40020400 	.word	0x40020400
 8005dc0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	2202      	movs	r2, #2
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80dd 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x3d8>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80d7 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 020a 	bic.w	r2, r2, #10
 8005dfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <HAL_DMA_IRQHandler+0x444>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d958      	bls.n	8005ec6 <HAL_DMA_IRQHandler+0x30e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a79      	ldr	r2, [pc, #484]	; (8006000 <HAL_DMA_IRQHandler+0x448>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d04f      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x306>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a78      	ldr	r2, [pc, #480]	; (8006004 <HAL_DMA_IRQHandler+0x44c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d048      	beq.n	8005eba <HAL_DMA_IRQHandler+0x302>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a76      	ldr	r2, [pc, #472]	; (8006008 <HAL_DMA_IRQHandler+0x450>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d040      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x2fc>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a75      	ldr	r2, [pc, #468]	; (800600c <HAL_DMA_IRQHandler+0x454>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d038      	beq.n	8005eae <HAL_DMA_IRQHandler+0x2f6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a73      	ldr	r2, [pc, #460]	; (8006010 <HAL_DMA_IRQHandler+0x458>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d030      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x2f0>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a72      	ldr	r2, [pc, #456]	; (8006014 <HAL_DMA_IRQHandler+0x45c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d028      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x2ea>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a69      	ldr	r2, [pc, #420]	; (8005ffc <HAL_DMA_IRQHandler+0x444>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d020      	beq.n	8005e9c <HAL_DMA_IRQHandler+0x2e4>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6e      	ldr	r2, [pc, #440]	; (8006018 <HAL_DMA_IRQHandler+0x460>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d019      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x2e0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6c      	ldr	r2, [pc, #432]	; (800601c <HAL_DMA_IRQHandler+0x464>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d012      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x2dc>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6b      	ldr	r2, [pc, #428]	; (8006020 <HAL_DMA_IRQHandler+0x468>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00a      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x2d6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a69      	ldr	r2, [pc, #420]	; (8006024 <HAL_DMA_IRQHandler+0x46c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d102      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x2d0>
 8005e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e86:	e01b      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e8c:	e018      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e92:	e015      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005e94:	2320      	movs	r3, #32
 8005e96:	e013      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e011      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ea0:	e00e      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005ea2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ea6:	e00b      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eac:	e008      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eb2:	e005      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb8:	e002      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005eba:	2320      	movs	r3, #32
 8005ebc:	e000      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x308>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	4a59      	ldr	r2, [pc, #356]	; (8006028 <HAL_DMA_IRQHandler+0x470>)
 8005ec2:	6053      	str	r3, [r2, #4]
 8005ec4:	e057      	b.n	8005f76 <HAL_DMA_IRQHandler+0x3be>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a4d      	ldr	r2, [pc, #308]	; (8006000 <HAL_DMA_IRQHandler+0x448>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d04f      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x3b8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a4b      	ldr	r2, [pc, #300]	; (8006004 <HAL_DMA_IRQHandler+0x44c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d048      	beq.n	8005f6c <HAL_DMA_IRQHandler+0x3b4>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a4a      	ldr	r2, [pc, #296]	; (8006008 <HAL_DMA_IRQHandler+0x450>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d040      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x3ae>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a48      	ldr	r2, [pc, #288]	; (800600c <HAL_DMA_IRQHandler+0x454>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d038      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x3a8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a47      	ldr	r2, [pc, #284]	; (8006010 <HAL_DMA_IRQHandler+0x458>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d030      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x3a2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a45      	ldr	r2, [pc, #276]	; (8006014 <HAL_DMA_IRQHandler+0x45c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d028      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x39c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a3d      	ldr	r2, [pc, #244]	; (8005ffc <HAL_DMA_IRQHandler+0x444>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d020      	beq.n	8005f4e <HAL_DMA_IRQHandler+0x396>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a41      	ldr	r2, [pc, #260]	; (8006018 <HAL_DMA_IRQHandler+0x460>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d019      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x392>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a40      	ldr	r2, [pc, #256]	; (800601c <HAL_DMA_IRQHandler+0x464>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d012      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x38e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a3e      	ldr	r2, [pc, #248]	; (8006020 <HAL_DMA_IRQHandler+0x468>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00a      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x388>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a3d      	ldr	r2, [pc, #244]	; (8006024 <HAL_DMA_IRQHandler+0x46c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d102      	bne.n	8005f3a <HAL_DMA_IRQHandler+0x382>
 8005f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f38:	e01b      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f3e:	e018      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f44:	e015      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f46:	2320      	movs	r3, #32
 8005f48:	e013      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e011      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f52:	e00e      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f58:	e00b      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f5e:	e008      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f64:	e005      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6a:	e002      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	e000      	b.n	8005f72 <HAL_DMA_IRQHandler+0x3ba>
 8005f70:	2302      	movs	r3, #2
 8005f72:	4a2e      	ldr	r2, [pc, #184]	; (800602c <HAL_DMA_IRQHandler+0x474>)
 8005f74:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d034      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f8e:	e02f      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	2208      	movs	r2, #8
 8005f96:	409a      	lsls	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d028      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0x43a>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d023      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 020e 	bic.w	r2, r2, #14
 8005fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
    }
  }
  return;
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
}
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40020080 	.word	0x40020080
 8006000:	40020008 	.word	0x40020008
 8006004:	4002001c 	.word	0x4002001c
 8006008:	40020030 	.word	0x40020030
 800600c:	40020044 	.word	0x40020044
 8006010:	40020058 	.word	0x40020058
 8006014:	4002006c 	.word	0x4002006c
 8006018:	40020408 	.word	0x40020408
 800601c:	4002041c 	.word	0x4002041c
 8006020:	40020430 	.word	0x40020430
 8006024:	40020444 	.word	0x40020444
 8006028:	40020400 	.word	0x40020400
 800602c:	40020000 	.word	0x40020000

08006030 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	2101      	movs	r1, #1
 8006048:	fa01 f202 	lsl.w	r2, r1, r2
 800604c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b10      	cmp	r3, #16
 800605c:	d108      	bne.n	8006070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800606e:	e007      	b.n	8006080 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
	...

0800608c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800608c:	b480      	push	{r7}
 800608e:	b08b      	sub	sp, #44	; 0x2c
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800609a:	2300      	movs	r3, #0
 800609c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800609e:	e179      	b.n	8006394 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80060a0:	2201      	movs	r2, #1
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	f040 8168 	bne.w	800638e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4a96      	ldr	r2, [pc, #600]	; (800631c <HAL_GPIO_Init+0x290>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d05e      	beq.n	8006186 <HAL_GPIO_Init+0xfa>
 80060c8:	4a94      	ldr	r2, [pc, #592]	; (800631c <HAL_GPIO_Init+0x290>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d875      	bhi.n	80061ba <HAL_GPIO_Init+0x12e>
 80060ce:	4a94      	ldr	r2, [pc, #592]	; (8006320 <HAL_GPIO_Init+0x294>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d058      	beq.n	8006186 <HAL_GPIO_Init+0xfa>
 80060d4:	4a92      	ldr	r2, [pc, #584]	; (8006320 <HAL_GPIO_Init+0x294>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d86f      	bhi.n	80061ba <HAL_GPIO_Init+0x12e>
 80060da:	4a92      	ldr	r2, [pc, #584]	; (8006324 <HAL_GPIO_Init+0x298>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d052      	beq.n	8006186 <HAL_GPIO_Init+0xfa>
 80060e0:	4a90      	ldr	r2, [pc, #576]	; (8006324 <HAL_GPIO_Init+0x298>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d869      	bhi.n	80061ba <HAL_GPIO_Init+0x12e>
 80060e6:	4a90      	ldr	r2, [pc, #576]	; (8006328 <HAL_GPIO_Init+0x29c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d04c      	beq.n	8006186 <HAL_GPIO_Init+0xfa>
 80060ec:	4a8e      	ldr	r2, [pc, #568]	; (8006328 <HAL_GPIO_Init+0x29c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d863      	bhi.n	80061ba <HAL_GPIO_Init+0x12e>
 80060f2:	4a8e      	ldr	r2, [pc, #568]	; (800632c <HAL_GPIO_Init+0x2a0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d046      	beq.n	8006186 <HAL_GPIO_Init+0xfa>
 80060f8:	4a8c      	ldr	r2, [pc, #560]	; (800632c <HAL_GPIO_Init+0x2a0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d85d      	bhi.n	80061ba <HAL_GPIO_Init+0x12e>
 80060fe:	2b12      	cmp	r3, #18
 8006100:	d82a      	bhi.n	8006158 <HAL_GPIO_Init+0xcc>
 8006102:	2b12      	cmp	r3, #18
 8006104:	d859      	bhi.n	80061ba <HAL_GPIO_Init+0x12e>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_GPIO_Init+0x80>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	08006187 	.word	0x08006187
 8006110:	08006161 	.word	0x08006161
 8006114:	08006173 	.word	0x08006173
 8006118:	080061b5 	.word	0x080061b5
 800611c:	080061bb 	.word	0x080061bb
 8006120:	080061bb 	.word	0x080061bb
 8006124:	080061bb 	.word	0x080061bb
 8006128:	080061bb 	.word	0x080061bb
 800612c:	080061bb 	.word	0x080061bb
 8006130:	080061bb 	.word	0x080061bb
 8006134:	080061bb 	.word	0x080061bb
 8006138:	080061bb 	.word	0x080061bb
 800613c:	080061bb 	.word	0x080061bb
 8006140:	080061bb 	.word	0x080061bb
 8006144:	080061bb 	.word	0x080061bb
 8006148:	080061bb 	.word	0x080061bb
 800614c:	080061bb 	.word	0x080061bb
 8006150:	08006169 	.word	0x08006169
 8006154:	0800617d 	.word	0x0800617d
 8006158:	4a75      	ldr	r2, [pc, #468]	; (8006330 <HAL_GPIO_Init+0x2a4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800615e:	e02c      	b.n	80061ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	623b      	str	r3, [r7, #32]
          break;
 8006166:	e029      	b.n	80061bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	3304      	adds	r3, #4
 800616e:	623b      	str	r3, [r7, #32]
          break;
 8006170:	e024      	b.n	80061bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	3308      	adds	r3, #8
 8006178:	623b      	str	r3, [r7, #32]
          break;
 800617a:	e01f      	b.n	80061bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	330c      	adds	r3, #12
 8006182:	623b      	str	r3, [r7, #32]
          break;
 8006184:	e01a      	b.n	80061bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800618e:	2304      	movs	r3, #4
 8006190:	623b      	str	r3, [r7, #32]
          break;
 8006192:	e013      	b.n	80061bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d105      	bne.n	80061a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800619c:	2308      	movs	r3, #8
 800619e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	611a      	str	r2, [r3, #16]
          break;
 80061a6:	e009      	b.n	80061bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80061a8:	2308      	movs	r3, #8
 80061aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	615a      	str	r2, [r3, #20]
          break;
 80061b2:	e003      	b.n	80061bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80061b4:	2300      	movs	r3, #0
 80061b6:	623b      	str	r3, [r7, #32]
          break;
 80061b8:	e000      	b.n	80061bc <HAL_GPIO_Init+0x130>
          break;
 80061ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2bff      	cmp	r3, #255	; 0xff
 80061c0:	d801      	bhi.n	80061c6 <HAL_GPIO_Init+0x13a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	e001      	b.n	80061ca <HAL_GPIO_Init+0x13e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2bff      	cmp	r3, #255	; 0xff
 80061d0:	d802      	bhi.n	80061d8 <HAL_GPIO_Init+0x14c>
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	e002      	b.n	80061de <HAL_GPIO_Init+0x152>
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	3b08      	subs	r3, #8
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	210f      	movs	r1, #15
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	401a      	ands	r2, r3
 80061f0:	6a39      	ldr	r1, [r7, #32]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	fa01 f303 	lsl.w	r3, r1, r3
 80061f8:	431a      	orrs	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80c1 	beq.w	800638e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800620c:	4b49      	ldr	r3, [pc, #292]	; (8006334 <HAL_GPIO_Init+0x2a8>)
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	4a48      	ldr	r2, [pc, #288]	; (8006334 <HAL_GPIO_Init+0x2a8>)
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	6193      	str	r3, [r2, #24]
 8006218:	4b46      	ldr	r3, [pc, #280]	; (8006334 <HAL_GPIO_Init+0x2a8>)
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006224:	4a44      	ldr	r2, [pc, #272]	; (8006338 <HAL_GPIO_Init+0x2ac>)
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	089b      	lsrs	r3, r3, #2
 800622a:	3302      	adds	r3, #2
 800622c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006230:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	220f      	movs	r2, #15
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3c      	ldr	r2, [pc, #240]	; (800633c <HAL_GPIO_Init+0x2b0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d01f      	beq.n	8006290 <HAL_GPIO_Init+0x204>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3b      	ldr	r2, [pc, #236]	; (8006340 <HAL_GPIO_Init+0x2b4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d019      	beq.n	800628c <HAL_GPIO_Init+0x200>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3a      	ldr	r2, [pc, #232]	; (8006344 <HAL_GPIO_Init+0x2b8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <HAL_GPIO_Init+0x1fc>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a39      	ldr	r2, [pc, #228]	; (8006348 <HAL_GPIO_Init+0x2bc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00d      	beq.n	8006284 <HAL_GPIO_Init+0x1f8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a38      	ldr	r2, [pc, #224]	; (800634c <HAL_GPIO_Init+0x2c0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d007      	beq.n	8006280 <HAL_GPIO_Init+0x1f4>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a37      	ldr	r2, [pc, #220]	; (8006350 <HAL_GPIO_Init+0x2c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d101      	bne.n	800627c <HAL_GPIO_Init+0x1f0>
 8006278:	2305      	movs	r3, #5
 800627a:	e00a      	b.n	8006292 <HAL_GPIO_Init+0x206>
 800627c:	2306      	movs	r3, #6
 800627e:	e008      	b.n	8006292 <HAL_GPIO_Init+0x206>
 8006280:	2304      	movs	r3, #4
 8006282:	e006      	b.n	8006292 <HAL_GPIO_Init+0x206>
 8006284:	2303      	movs	r3, #3
 8006286:	e004      	b.n	8006292 <HAL_GPIO_Init+0x206>
 8006288:	2302      	movs	r3, #2
 800628a:	e002      	b.n	8006292 <HAL_GPIO_Init+0x206>
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <HAL_GPIO_Init+0x206>
 8006290:	2300      	movs	r3, #0
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	f002 0203 	and.w	r2, r2, #3
 8006298:	0092      	lsls	r2, r2, #2
 800629a:	4093      	lsls	r3, r2
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80062a2:	4925      	ldr	r1, [pc, #148]	; (8006338 <HAL_GPIO_Init+0x2ac>)
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	089b      	lsrs	r3, r3, #2
 80062a8:	3302      	adds	r3, #2
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4924      	ldr	r1, [pc, #144]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	600b      	str	r3, [r1, #0]
 80062c8:	e006      	b.n	80062d8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80062ca:	4b22      	ldr	r3, [pc, #136]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	4920      	ldr	r1, [pc, #128]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	491a      	ldr	r1, [pc, #104]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
 80062f0:	e006      	b.n	8006300 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80062f2:	4b18      	ldr	r3, [pc, #96]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	43db      	mvns	r3, r3
 80062fa:	4916      	ldr	r1, [pc, #88]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d025      	beq.n	8006358 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800630c:	4b11      	ldr	r3, [pc, #68]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	4910      	ldr	r1, [pc, #64]	; (8006354 <HAL_GPIO_Init+0x2c8>)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	4313      	orrs	r3, r2
 8006316:	608b      	str	r3, [r1, #8]
 8006318:	e025      	b.n	8006366 <HAL_GPIO_Init+0x2da>
 800631a:	bf00      	nop
 800631c:	10320000 	.word	0x10320000
 8006320:	10310000 	.word	0x10310000
 8006324:	10220000 	.word	0x10220000
 8006328:	10210000 	.word	0x10210000
 800632c:	10120000 	.word	0x10120000
 8006330:	10110000 	.word	0x10110000
 8006334:	40021000 	.word	0x40021000
 8006338:	40010000 	.word	0x40010000
 800633c:	40010800 	.word	0x40010800
 8006340:	40010c00 	.word	0x40010c00
 8006344:	40011000 	.word	0x40011000
 8006348:	40011400 	.word	0x40011400
 800634c:	40011800 	.word	0x40011800
 8006350:	40011c00 	.word	0x40011c00
 8006354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006358:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <HAL_GPIO_Init+0x324>)
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	43db      	mvns	r3, r3
 8006360:	4913      	ldr	r1, [pc, #76]	; (80063b0 <HAL_GPIO_Init+0x324>)
 8006362:	4013      	ands	r3, r2
 8006364:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d006      	beq.n	8006380 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <HAL_GPIO_Init+0x324>)
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	490e      	ldr	r1, [pc, #56]	; (80063b0 <HAL_GPIO_Init+0x324>)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	4313      	orrs	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]
 800637e:	e006      	b.n	800638e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_GPIO_Init+0x324>)
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	43db      	mvns	r3, r3
 8006388:	4909      	ldr	r1, [pc, #36]	; (80063b0 <HAL_GPIO_Init+0x324>)
 800638a:	4013      	ands	r3, r2
 800638c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	3301      	adds	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f47f ae7e 	bne.w	80060a0 <HAL_GPIO_Init+0x14>
  }
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	372c      	adds	r7, #44	; 0x2c
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr
 80063b0:	40010400 	.word	0x40010400

080063b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80063c2:	e0a6      	b.n	8006512 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80063c4:	2201      	movs	r2, #1
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	4013      	ands	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8099 	beq.w	800650c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80063da:	4a54      	ldr	r2, [pc, #336]	; (800652c <HAL_GPIO_DeInit+0x178>)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	3302      	adds	r3, #2
 80063e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	220f      	movs	r2, #15
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4013      	ands	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a4c      	ldr	r2, [pc, #304]	; (8006530 <HAL_GPIO_DeInit+0x17c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01f      	beq.n	8006444 <HAL_GPIO_DeInit+0x90>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a4b      	ldr	r2, [pc, #300]	; (8006534 <HAL_GPIO_DeInit+0x180>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d019      	beq.n	8006440 <HAL_GPIO_DeInit+0x8c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a4a      	ldr	r2, [pc, #296]	; (8006538 <HAL_GPIO_DeInit+0x184>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_GPIO_DeInit+0x88>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a49      	ldr	r2, [pc, #292]	; (800653c <HAL_GPIO_DeInit+0x188>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00d      	beq.n	8006438 <HAL_GPIO_DeInit+0x84>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a48      	ldr	r2, [pc, #288]	; (8006540 <HAL_GPIO_DeInit+0x18c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <HAL_GPIO_DeInit+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a47      	ldr	r2, [pc, #284]	; (8006544 <HAL_GPIO_DeInit+0x190>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_GPIO_DeInit+0x7c>
 800642c:	2305      	movs	r3, #5
 800642e:	e00a      	b.n	8006446 <HAL_GPIO_DeInit+0x92>
 8006430:	2306      	movs	r3, #6
 8006432:	e008      	b.n	8006446 <HAL_GPIO_DeInit+0x92>
 8006434:	2304      	movs	r3, #4
 8006436:	e006      	b.n	8006446 <HAL_GPIO_DeInit+0x92>
 8006438:	2303      	movs	r3, #3
 800643a:	e004      	b.n	8006446 <HAL_GPIO_DeInit+0x92>
 800643c:	2302      	movs	r3, #2
 800643e:	e002      	b.n	8006446 <HAL_GPIO_DeInit+0x92>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <HAL_GPIO_DeInit+0x92>
 8006444:	2300      	movs	r3, #0
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	f002 0203 	and.w	r2, r2, #3
 800644c:	0092      	lsls	r2, r2, #2
 800644e:	4093      	lsls	r3, r2
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	429a      	cmp	r2, r3
 8006454:	d132      	bne.n	80064bc <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	220f      	movs	r2, #15
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8006466:	4a31      	ldr	r2, [pc, #196]	; (800652c <HAL_GPIO_DeInit+0x178>)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	089b      	lsrs	r3, r3, #2
 800646c:	3302      	adds	r3, #2
 800646e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	43da      	mvns	r2, r3
 8006476:	482d      	ldr	r0, [pc, #180]	; (800652c <HAL_GPIO_DeInit+0x178>)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	400a      	ands	r2, r1
 800647e:	3302      	adds	r3, #2
 8006480:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006484:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	43db      	mvns	r3, r3
 800648c:	492e      	ldr	r1, [pc, #184]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 800648e:	4013      	ands	r3, r2
 8006490:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006492:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	43db      	mvns	r3, r3
 800649a:	492b      	ldr	r1, [pc, #172]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 800649c:	4013      	ands	r3, r2
 800649e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80064a0:	4b29      	ldr	r3, [pc, #164]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	4927      	ldr	r1, [pc, #156]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80064ae:	4b26      	ldr	r3, [pc, #152]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	43db      	mvns	r3, r3
 80064b6:	4924      	ldr	r1, [pc, #144]	; (8006548 <HAL_GPIO_DeInit+0x194>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2bff      	cmp	r3, #255	; 0xff
 80064c0:	d801      	bhi.n	80064c6 <HAL_GPIO_DeInit+0x112>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	e001      	b.n	80064ca <HAL_GPIO_DeInit+0x116>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2bff      	cmp	r3, #255	; 0xff
 80064d0:	d802      	bhi.n	80064d8 <HAL_GPIO_DeInit+0x124>
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	e002      	b.n	80064de <HAL_GPIO_DeInit+0x12a>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	3b08      	subs	r3, #8
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	210f      	movs	r1, #15
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	2104      	movs	r1, #4
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	431a      	orrs	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	43db      	mvns	r3, r3
 8006506:	401a      	ands	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	f47f af52 	bne.w	80063c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3724      	adds	r7, #36	; 0x24
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	40010000 	.word	0x40010000
 8006530:	40010800 	.word	0x40010800
 8006534:	40010c00 	.word	0x40010c00
 8006538:	40011000 	.word	0x40011000
 800653c:	40011400 	.word	0x40011400
 8006540:	40011800 	.word	0x40011800
 8006544:	40011c00 	.word	0x40011c00
 8006548:	40010400 	.word	0x40010400

0800654c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
 8006558:	4613      	mov	r3, r2
 800655a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800655c:	787b      	ldrb	r3, [r7, #1]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006568:	e003      	b.n	8006572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800656a:	887b      	ldrh	r3, [r7, #2]
 800656c:	041a      	lsls	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4013      	ands	r3, r2
 8006594:	041a      	lsls	r2, r3, #16
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	43d9      	mvns	r1, r3
 800659a:	887b      	ldrh	r3, [r7, #2]
 800659c:	400b      	ands	r3, r1
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	611a      	str	r2, [r3, #16]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065c6:	4a05      	ldr	r2, [pc, #20]	; (80065dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f806 	bl	80065e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40010400 	.word	0x40010400

080065e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e12b      	b.n	800685e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fe fc08 	bl	8004e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0201 	bic.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006658:	f001 fd0c 	bl	8008074 <HAL_RCC_GetPCLK1Freq>
 800665c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4a81      	ldr	r2, [pc, #516]	; (8006868 <HAL_I2C_Init+0x274>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d807      	bhi.n	8006678 <HAL_I2C_Init+0x84>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a80      	ldr	r2, [pc, #512]	; (800686c <HAL_I2C_Init+0x278>)
 800666c:	4293      	cmp	r3, r2
 800666e:	bf94      	ite	ls
 8006670:	2301      	movls	r3, #1
 8006672:	2300      	movhi	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e006      	b.n	8006686 <HAL_I2C_Init+0x92>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a7d      	ldr	r2, [pc, #500]	; (8006870 <HAL_I2C_Init+0x27c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	bf94      	ite	ls
 8006680:	2301      	movls	r3, #1
 8006682:	2300      	movhi	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e0e7      	b.n	800685e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a78      	ldr	r2, [pc, #480]	; (8006874 <HAL_I2C_Init+0x280>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	0c9b      	lsrs	r3, r3, #18
 8006698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4a6a      	ldr	r2, [pc, #424]	; (8006868 <HAL_I2C_Init+0x274>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d802      	bhi.n	80066c8 <HAL_I2C_Init+0xd4>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	3301      	adds	r3, #1
 80066c6:	e009      	b.n	80066dc <HAL_I2C_Init+0xe8>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	4a69      	ldr	r2, [pc, #420]	; (8006878 <HAL_I2C_Init+0x284>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	099b      	lsrs	r3, r3, #6
 80066da:	3301      	adds	r3, #1
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	495c      	ldr	r1, [pc, #368]	; (8006868 <HAL_I2C_Init+0x274>)
 80066f8:	428b      	cmp	r3, r1
 80066fa:	d819      	bhi.n	8006730 <HAL_I2C_Init+0x13c>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	1e59      	subs	r1, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	fbb1 f3f3 	udiv	r3, r1, r3
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006710:	400b      	ands	r3, r1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_I2C_Init+0x138>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1e59      	subs	r1, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	fbb1 f3f3 	udiv	r3, r1, r3
 8006724:	3301      	adds	r3, #1
 8006726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800672a:	e051      	b.n	80067d0 <HAL_I2C_Init+0x1dc>
 800672c:	2304      	movs	r3, #4
 800672e:	e04f      	b.n	80067d0 <HAL_I2C_Init+0x1dc>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d111      	bne.n	800675c <HAL_I2C_Init+0x168>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1e58      	subs	r0, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6859      	ldr	r1, [r3, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	440b      	add	r3, r1
 8006746:	fbb0 f3f3 	udiv	r3, r0, r3
 800674a:	3301      	adds	r3, #1
 800674c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e012      	b.n	8006782 <HAL_I2C_Init+0x18e>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1e58      	subs	r0, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	0099      	lsls	r1, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006772:	3301      	adds	r3, #1
 8006774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_I2C_Init+0x196>
 8006786:	2301      	movs	r3, #1
 8006788:	e022      	b.n	80067d0 <HAL_I2C_Init+0x1dc>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10e      	bne.n	80067b0 <HAL_I2C_Init+0x1bc>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1e58      	subs	r0, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6859      	ldr	r1, [r3, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	440b      	add	r3, r1
 80067a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a4:	3301      	adds	r3, #1
 80067a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ae:	e00f      	b.n	80067d0 <HAL_I2C_Init+0x1dc>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1e58      	subs	r0, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	0099      	lsls	r1, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c6:	3301      	adds	r3, #1
 80067c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	6809      	ldr	r1, [r1, #0]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69da      	ldr	r2, [r3, #28]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6911      	ldr	r1, [r2, #16]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68d2      	ldr	r2, [r2, #12]
 800680a:	4311      	orrs	r1, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	430b      	orrs	r3, r1
 8006812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	000186a0 	.word	0x000186a0
 800686c:	001e847f 	.word	0x001e847f
 8006870:	003d08ff 	.word	0x003d08ff
 8006874:	431bde83 	.word	0x431bde83
 8006878:	10624dd3 	.word	0x10624dd3

0800687c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e021      	b.n	80068d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2224      	movs	r2, #36	; 0x24
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fe fb02 	bl	8004eb0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	817b      	strh	r3, [r7, #10]
 80068ee:	460b      	mov	r3, r1
 80068f0:	813b      	strh	r3, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068f6:	f7fe fe39 	bl	800556c <HAL_GetTick>
 80068fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b20      	cmp	r3, #32
 8006906:	f040 80d9 	bne.w	8006abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	2319      	movs	r3, #25
 8006910:	2201      	movs	r2, #1
 8006912:	496d      	ldr	r1, [pc, #436]	; (8006ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fdfd 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
 8006922:	e0cc      	b.n	8006abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_I2C_Mem_Write+0x56>
 800692e:	2302      	movs	r3, #2
 8006930:	e0c5      	b.n	8006abe <HAL_I2C_Mem_Write+0x1e2>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d007      	beq.n	8006958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2221      	movs	r2, #33	; 0x21
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2240      	movs	r2, #64	; 0x40
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a4d      	ldr	r2, [pc, #308]	; (8006acc <HAL_I2C_Mem_Write+0x1f0>)
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800699a:	88f8      	ldrh	r0, [r7, #6]
 800699c:	893a      	ldrh	r2, [r7, #8]
 800699e:	8979      	ldrh	r1, [r7, #10]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4603      	mov	r3, r0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fc34 	bl	8007218 <I2C_RequestMemoryWrite>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d052      	beq.n	8006a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e081      	b.n	8006abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fe7e 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d107      	bne.n	80069e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e06b      	b.n	8006abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d11b      	bne.n	8006a5c <HAL_I2C_Mem_Write+0x180>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d017      	beq.n	8006a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1aa      	bne.n	80069ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fe6a 	bl	8007742 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00d      	beq.n	8006a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d107      	bne.n	8006a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e016      	b.n	8006abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e000      	b.n	8006abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006abc:	2302      	movs	r3, #2
  }
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	00100002 	.word	0x00100002
 8006acc:	ffff0000 	.word	0xffff0000

08006ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	817b      	strh	r3, [r7, #10]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	813b      	strh	r3, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aee:	f7fe fd3d 	bl	800556c <HAL_GetTick>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	f040 8244 	bne.w	8006f8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	2319      	movs	r3, #25
 8006b08:	2201      	movs	r2, #1
 8006b0a:	4982      	ldr	r1, [pc, #520]	; (8006d14 <HAL_I2C_Mem_Read+0x244>)
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fd01 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e237      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_I2C_Mem_Read+0x5a>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e230      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d007      	beq.n	8006b50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2222      	movs	r2, #34	; 0x22
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2240      	movs	r2, #64	; 0x40
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4a62      	ldr	r2, [pc, #392]	; (8006d18 <HAL_I2C_Mem_Read+0x248>)
 8006b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b92:	88f8      	ldrh	r0, [r7, #6]
 8006b94:	893a      	ldrh	r2, [r7, #8]
 8006b96:	8979      	ldrh	r1, [r7, #10]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fbce 	bl	8007344 <I2C_RequestMemoryRead>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e1ec      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d113      	bne.n	8006be2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	e1c0      	b.n	8006f64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d11e      	bne.n	8006c28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bfa:	b672      	cpsid	i
}
 8006bfc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c24:	b662      	cpsie	i
}
 8006c26:	e035      	b.n	8006c94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d11e      	bne.n	8006c6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c40:	b672      	cpsid	i
}
 8006c42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c6a:	b662      	cpsie	i
}
 8006c6c:	e012      	b.n	8006c94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006c94:	e166      	b.n	8006f64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	f200 811f 	bhi.w	8006ede <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d123      	bne.n	8006cf0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fd89 	bl	80077c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e167      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cee:	e139      	b.n	8006f64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d152      	bne.n	8006d9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	2200      	movs	r2, #0
 8006d00:	4906      	ldr	r1, [pc, #24]	; (8006d1c <HAL_I2C_Mem_Read+0x24c>)
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fc06 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e13c      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
 8006d12:	bf00      	nop
 8006d14:	00100002 	.word	0x00100002
 8006d18:	ffff0000 	.word	0xffff0000
 8006d1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006d20:	b672      	cpsid	i
}
 8006d22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d66:	b662      	cpsie	i
}
 8006d68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d9c:	e0e2      	b.n	8006f64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	2200      	movs	r2, #0
 8006da6:	497b      	ldr	r1, [pc, #492]	; (8006f94 <HAL_I2C_Mem_Read+0x4c4>)
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fbb3 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0e9      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dc8:	b672      	cpsid	i
}
 8006dca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006dfe:	4b66      	ldr	r3, [pc, #408]	; (8006f98 <HAL_I2C_Mem_Read+0x4c8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	08db      	lsrs	r3, r3, #3
 8006e04:	4a65      	ldr	r2, [pc, #404]	; (8006f9c <HAL_I2C_Mem_Read+0x4cc>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	0a1a      	lsrs	r2, r3, #8
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	00da      	lsls	r2, r3, #3
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d118      	bne.n	8006e56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006e46:	b662      	cpsie	i
}
 8006e48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e09a      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d1d9      	bne.n	8006e18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006ea6:	b662      	cpsie	i
}
 8006ea8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006edc:	e042      	b.n	8006f64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 fc6e 	bl	80077c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e04c      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d118      	bne.n	8006f64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f47f ae94 	bne.w	8006c96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3728      	adds	r7, #40	; 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	00010004 	.word	0x00010004
 8006f98:	20000000 	.word	0x20000000
 8006f9c:	14f8b589 	.word	0x14f8b589

08006fa0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	460b      	mov	r3, r1
 8006fae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006fb0:	f7fe fadc 	bl	800556c <HAL_GetTick>
 8006fb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	f040 8111 	bne.w	80071ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	2319      	movs	r3, #25
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4988      	ldr	r1, [pc, #544]	; (80071f4 <HAL_I2C_IsDeviceReady+0x254>)
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fa9e 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e104      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_I2C_IsDeviceReady+0x50>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e0fd      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b01      	cmp	r3, #1
 8007004:	d007      	beq.n	8007016 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0201 	orr.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2224      	movs	r2, #36	; 0x24
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a70      	ldr	r2, [pc, #448]	; (80071f8 <HAL_I2C_IsDeviceReady+0x258>)
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007048:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fa5c 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00d      	beq.n	800707e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007070:	d103      	bne.n	800707a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007078:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e0b6      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800707e:	897b      	ldrh	r3, [r7, #10]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800708c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800708e:	f7fe fa6d 	bl	800556c <HAL_GetTick>
 8007092:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b8:	bf0c      	ite	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	2300      	movne	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80070c2:	e025      	b.n	8007110 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070c4:	f7fe fa52 	bl	800556c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d302      	bcc.n	80070da <HAL_I2C_IsDeviceReady+0x13a>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	22a0      	movs	r2, #160	; 0xa0
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007106:	bf0c      	ite	eq
 8007108:	2301      	moveq	r3, #1
 800710a:	2300      	movne	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2ba0      	cmp	r3, #160	; 0xa0
 800711a:	d005      	beq.n	8007128 <HAL_I2C_IsDeviceReady+0x188>
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <HAL_I2C_IsDeviceReady+0x188>
 8007122:	7dbb      	ldrb	r3, [r7, #22]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0cd      	beq.n	80070c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d129      	bne.n	8007192 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2319      	movs	r3, #25
 800716a:	2201      	movs	r2, #1
 800716c:	4921      	ldr	r1, [pc, #132]	; (80071f4 <HAL_I2C_IsDeviceReady+0x254>)
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f9d0 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e036      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e02c      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	2319      	movs	r3, #25
 80071b2:	2201      	movs	r2, #1
 80071b4:	490f      	ldr	r1, [pc, #60]	; (80071f4 <HAL_I2C_IsDeviceReady+0x254>)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f9ac 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e012      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	3301      	adds	r3, #1
 80071ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	f4ff af32 	bcc.w	800703a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	00100002 	.word	0x00100002
 80071f8:	ffff0000 	.word	0xffff0000

080071fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720a:	b2db      	uxtb	r3, r3
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
	...

08007218 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	4608      	mov	r0, r1
 8007222:	4611      	mov	r1, r2
 8007224:	461a      	mov	r2, r3
 8007226:	4603      	mov	r3, r0
 8007228:	817b      	strh	r3, [r7, #10]
 800722a:	460b      	mov	r3, r1
 800722c:	813b      	strh	r3, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007240:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	2200      	movs	r2, #0
 800724a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f960 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00d      	beq.n	8007276 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007268:	d103      	bne.n	8007272 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e05f      	b.n	8007336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007276:	897b      	ldrh	r3, [r7, #10]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	492d      	ldr	r1, [pc, #180]	; (8007340 <I2C_RequestMemoryWrite+0x128>)
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f998 	bl	80075c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e04c      	b.n	8007336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b4:	6a39      	ldr	r1, [r7, #32]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fa02 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00d      	beq.n	80072de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d107      	bne.n	80072da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e02b      	b.n	8007336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d105      	bne.n	80072f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072e4:	893b      	ldrh	r3, [r7, #8]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	611a      	str	r2, [r3, #16]
 80072ee:	e021      	b.n	8007334 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072f0:	893b      	ldrh	r3, [r7, #8]
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007300:	6a39      	ldr	r1, [r7, #32]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f9dc 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00d      	beq.n	800732a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	2b04      	cmp	r3, #4
 8007314:	d107      	bne.n	8007326 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e005      	b.n	8007336 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800732a:	893b      	ldrh	r3, [r7, #8]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	00010002 	.word	0x00010002

08007344 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af02      	add	r7, sp, #8
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	461a      	mov	r2, r3
 8007352:	4603      	mov	r3, r0
 8007354:	817b      	strh	r3, [r7, #10]
 8007356:	460b      	mov	r3, r1
 8007358:	813b      	strh	r3, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800736c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800737c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	2200      	movs	r2, #0
 8007386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f8c2 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a4:	d103      	bne.n	80073ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e0aa      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073b2:	897b      	ldrh	r3, [r7, #10]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	6a3a      	ldr	r2, [r7, #32]
 80073c6:	4952      	ldr	r1, [pc, #328]	; (8007510 <I2C_RequestMemoryRead+0x1cc>)
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f8fa 	bl	80075c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e097      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	6a39      	ldr	r1, [r7, #32]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f964 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00d      	beq.n	800741a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	2b04      	cmp	r3, #4
 8007404:	d107      	bne.n	8007416 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e076      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d105      	bne.n	800742c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007420:	893b      	ldrh	r3, [r7, #8]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	611a      	str	r2, [r3, #16]
 800742a:	e021      	b.n	8007470 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800742c:	893b      	ldrh	r3, [r7, #8]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	b29b      	uxth	r3, r3
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	6a39      	ldr	r1, [r7, #32]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f93e 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	2b04      	cmp	r3, #4
 8007450:	d107      	bne.n	8007462 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e050      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007466:	893b      	ldrh	r3, [r7, #8]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007472:	6a39      	ldr	r1, [r7, #32]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f923 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	2b04      	cmp	r3, #4
 8007486:	d107      	bne.n	8007498 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007496:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e035      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f82b 	bl	8007514 <I2C_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00d      	beq.n	80074e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d2:	d103      	bne.n	80074dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e013      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074e0:	897b      	ldrh	r3, [r7, #10]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	6a3a      	ldr	r2, [r7, #32]
 80074f4:	4906      	ldr	r1, [pc, #24]	; (8007510 <I2C_RequestMemoryRead+0x1cc>)
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f863 	bl	80075c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	00010002 	.word	0x00010002

08007514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007524:	e025      	b.n	8007572 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d021      	beq.n	8007572 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752e:	f7fe f81d 	bl	800556c <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d302      	bcc.n	8007544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d116      	bne.n	8007572 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f043 0220 	orr.w	r2, r3, #32
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e023      	b.n	80075ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d10d      	bne.n	8007598 <I2C_WaitOnFlagUntilTimeout+0x84>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	43da      	mvns	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	e00c      	b.n	80075b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	43da      	mvns	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d0b6      	beq.n	8007526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075d0:	e051      	b.n	8007676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e0:	d123      	bne.n	800762a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f043 0204 	orr.w	r2, r3, #4
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e046      	b.n	80076b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d021      	beq.n	8007676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007632:	f7fd ff9b 	bl	800556c <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d302      	bcc.n	8007648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d116      	bne.n	8007676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f043 0220 	orr.w	r2, r3, #32
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e020      	b.n	80076b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10c      	bne.n	800769a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	43da      	mvns	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4013      	ands	r3, r2
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	e00b      	b.n	80076b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	43da      	mvns	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4013      	ands	r3, r2
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bf14      	ite	ne
 80076ac:	2301      	movne	r3, #1
 80076ae:	2300      	moveq	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d18d      	bne.n	80075d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076cc:	e02d      	b.n	800772a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f8ce 	bl	8007870 <I2C_IsAcknowledgeFailed>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e02d      	b.n	800773a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d021      	beq.n	800772a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e6:	f7fd ff41 	bl	800556c <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d302      	bcc.n	80076fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d116      	bne.n	800772a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e007      	b.n	800773a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d1ca      	bne.n	80076ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800774e:	e02d      	b.n	80077ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f88d 	bl	8007870 <I2C_IsAcknowledgeFailed>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e02d      	b.n	80077bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007766:	d021      	beq.n	80077ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007768:	f7fd ff00 	bl	800556c <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	429a      	cmp	r2, r3
 8007776:	d302      	bcc.n	800777e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d116      	bne.n	80077ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	f043 0220 	orr.w	r2, r3, #32
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e007      	b.n	80077bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d1ca      	bne.n	8007750 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077d0:	e042      	b.n	8007858 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d119      	bne.n	8007814 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0210 	mvn.w	r2, #16
 80077e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e029      	b.n	8007868 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007814:	f7fd feaa 	bl	800556c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d116      	bne.n	8007858 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e007      	b.n	8007868 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d1b5      	bne.n	80077d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007886:	d11b      	bne.n	80078c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007890:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 0204 	orr.w	r2, r3, #4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e272      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8087 	beq.w	80079fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078ec:	4b92      	ldr	r3, [pc, #584]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f003 030c 	and.w	r3, r3, #12
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d00c      	beq.n	8007912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80078f8:	4b8f      	ldr	r3, [pc, #572]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f003 030c 	and.w	r3, r3, #12
 8007900:	2b08      	cmp	r3, #8
 8007902:	d112      	bne.n	800792a <HAL_RCC_OscConfig+0x5e>
 8007904:	4b8c      	ldr	r3, [pc, #560]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007910:	d10b      	bne.n	800792a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007912:	4b89      	ldr	r3, [pc, #548]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d06c      	beq.n	80079f8 <HAL_RCC_OscConfig+0x12c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d168      	bne.n	80079f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e24c      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	d106      	bne.n	8007942 <HAL_RCC_OscConfig+0x76>
 8007934:	4b80      	ldr	r3, [pc, #512]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a7f      	ldr	r2, [pc, #508]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800793a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	e02e      	b.n	80079a0 <HAL_RCC_OscConfig+0xd4>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10c      	bne.n	8007964 <HAL_RCC_OscConfig+0x98>
 800794a:	4b7b      	ldr	r3, [pc, #492]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a7a      	ldr	r2, [pc, #488]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b78      	ldr	r3, [pc, #480]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a77      	ldr	r2, [pc, #476]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800795c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e01d      	b.n	80079a0 <HAL_RCC_OscConfig+0xd4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0xbc>
 800796e:	4b72      	ldr	r3, [pc, #456]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a71      	ldr	r2, [pc, #452]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b6f      	ldr	r3, [pc, #444]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a6e      	ldr	r2, [pc, #440]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e00b      	b.n	80079a0 <HAL_RCC_OscConfig+0xd4>
 8007988:	4b6b      	ldr	r3, [pc, #428]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a6a      	ldr	r2, [pc, #424]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800798e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4b68      	ldr	r3, [pc, #416]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a67      	ldr	r2, [pc, #412]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800799a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d013      	beq.n	80079d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a8:	f7fd fde0 	bl	800556c <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b0:	f7fd fddc 	bl	800556c <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b64      	cmp	r3, #100	; 0x64
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e200      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c2:	4b5d      	ldr	r3, [pc, #372]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0xe4>
 80079ce:	e014      	b.n	80079fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d0:	f7fd fdcc 	bl	800556c <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d8:	f7fd fdc8 	bl	800556c <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	; 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e1ec      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ea:	4b53      	ldr	r3, [pc, #332]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x10c>
 80079f6:	e000      	b.n	80079fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d063      	beq.n	8007ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a06:	4b4c      	ldr	r3, [pc, #304]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007a12:	4b49      	ldr	r3, [pc, #292]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 030c 	and.w	r3, r3, #12
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d11c      	bne.n	8007a58 <HAL_RCC_OscConfig+0x18c>
 8007a1e:	4b46      	ldr	r3, [pc, #280]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d116      	bne.n	8007a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2a:	4b43      	ldr	r3, [pc, #268]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <HAL_RCC_OscConfig+0x176>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d001      	beq.n	8007a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e1c0      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a42:	4b3d      	ldr	r3, [pc, #244]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	4939      	ldr	r1, [pc, #228]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a56:	e03a      	b.n	8007ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d020      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a60:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <HAL_RCC_OscConfig+0x270>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a66:	f7fd fd81 	bl	800556c <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a6e:	f7fd fd7d 	bl	800556c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e1a1      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a80:	4b2d      	ldr	r3, [pc, #180]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8c:	4b2a      	ldr	r3, [pc, #168]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	4927      	ldr	r1, [pc, #156]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	600b      	str	r3, [r1, #0]
 8007aa0:	e015      	b.n	8007ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aa2:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <HAL_RCC_OscConfig+0x270>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fd fd60 	bl	800556c <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ab0:	f7fd fd5c 	bl	800556c <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e180      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d03a      	beq.n	8007b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d019      	beq.n	8007b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ae2:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <HAL_RCC_OscConfig+0x274>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae8:	f7fd fd40 	bl	800556c <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007af0:	f7fd fd3c 	bl	800556c <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e160      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b02:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f000 fb08 	bl	8008124 <RCC_Delay>
 8007b14:	e01c      	b.n	8007b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <HAL_RCC_OscConfig+0x274>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b1c:	f7fd fd26 	bl	800556c <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b22:	e00f      	b.n	8007b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b24:	f7fd fd22 	bl	800556c <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d908      	bls.n	8007b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e146      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
 8007b36:	bf00      	nop
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	42420000 	.word	0x42420000
 8007b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b44:	4b92      	ldr	r3, [pc, #584]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e9      	bne.n	8007b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a6 	beq.w	8007caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b62:	4b8b      	ldr	r3, [pc, #556]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b6e:	4b88      	ldr	r3, [pc, #544]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	4a87      	ldr	r2, [pc, #540]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	61d3      	str	r3, [r2, #28]
 8007b7a:	4b85      	ldr	r3, [pc, #532]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b8a:	4b82      	ldr	r3, [pc, #520]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d118      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b96:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7e      	ldr	r2, [pc, #504]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ba2:	f7fd fce3 	bl	800556c <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007baa:	f7fd fcdf 	bl	800556c <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b64      	cmp	r3, #100	; 0x64
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e103      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bbc:	4b75      	ldr	r3, [pc, #468]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d106      	bne.n	8007bde <HAL_RCC_OscConfig+0x312>
 8007bd0:	4b6f      	ldr	r3, [pc, #444]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	4a6e      	ldr	r2, [pc, #440]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6213      	str	r3, [r2, #32]
 8007bdc:	e02d      	b.n	8007c3a <HAL_RCC_OscConfig+0x36e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x334>
 8007be6:	4b6a      	ldr	r3, [pc, #424]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	4a69      	ldr	r2, [pc, #420]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	6213      	str	r3, [r2, #32]
 8007bf2:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	4a66      	ldr	r2, [pc, #408]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bf8:	f023 0304 	bic.w	r3, r3, #4
 8007bfc:	6213      	str	r3, [r2, #32]
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCC_OscConfig+0x36e>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d10c      	bne.n	8007c22 <HAL_RCC_OscConfig+0x356>
 8007c08:	4b61      	ldr	r3, [pc, #388]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	4a60      	ldr	r2, [pc, #384]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c0e:	f043 0304 	orr.w	r3, r3, #4
 8007c12:	6213      	str	r3, [r2, #32]
 8007c14:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	4a5d      	ldr	r2, [pc, #372]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6213      	str	r3, [r2, #32]
 8007c20:	e00b      	b.n	8007c3a <HAL_RCC_OscConfig+0x36e>
 8007c22:	4b5b      	ldr	r3, [pc, #364]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	4a5a      	ldr	r2, [pc, #360]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	6213      	str	r3, [r2, #32]
 8007c2e:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	4a57      	ldr	r2, [pc, #348]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c42:	f7fd fc93 	bl	800556c <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c48:	e00a      	b.n	8007c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7fd fc8f 	bl	800556c <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e0b1      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c60:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0ee      	beq.n	8007c4a <HAL_RCC_OscConfig+0x37e>
 8007c6c:	e014      	b.n	8007c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c6e:	f7fd fc7d 	bl	800556c <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c74:	e00a      	b.n	8007c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c76:	f7fd fc79 	bl	800556c <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e09b      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c8c:	4b40      	ldr	r3, [pc, #256]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ee      	bne.n	8007c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d105      	bne.n	8007caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9e:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4a3b      	ldr	r2, [pc, #236]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8087 	beq.w	8007dc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cb4:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 030c 	and.w	r3, r3, #12
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d061      	beq.n	8007d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d146      	bne.n	8007d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b33      	ldr	r3, [pc, #204]	; (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cce:	f7fd fc4d 	bl	800556c <HAL_GetTick>
 8007cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd6:	f7fd fc49 	bl	800556c <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e06d      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ce8:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfc:	d108      	bne.n	8007d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4921      	ldr	r1, [pc, #132]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d10:	4b1f      	ldr	r3, [pc, #124]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a19      	ldr	r1, [r3, #32]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	430b      	orrs	r3, r1
 8007d22:	491b      	ldr	r1, [pc, #108]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d28:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2e:	f7fd fc1d 	bl	800556c <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d34:	e008      	b.n	8007d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d36:	f7fd fc19 	bl	800556c <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e03d      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f0      	beq.n	8007d36 <HAL_RCC_OscConfig+0x46a>
 8007d54:	e035      	b.n	8007dc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d5c:	f7fd fc06 	bl	800556c <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d64:	f7fd fc02 	bl	800556c <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e026      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <HAL_RCC_OscConfig+0x498>
 8007d82:	e01e      	b.n	8007dc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e019      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40007000 	.word	0x40007000
 8007d98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <HAL_RCC_OscConfig+0x500>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d106      	bne.n	8007dbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d001      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40021000 	.word	0x40021000

08007dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0d0      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007de4:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d910      	bls.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 0207 	bic.w	r2, r3, #7
 8007dfa:	4965      	ldr	r1, [pc, #404]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e0b8      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e2c:	4b59      	ldr	r3, [pc, #356]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4a58      	ldr	r2, [pc, #352]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e44:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a52      	ldr	r2, [pc, #328]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e50:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	494d      	ldr	r1, [pc, #308]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d040      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e76:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d115      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e07f      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e8e:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e073      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e9e:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e06b      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eae:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f023 0203 	bic.w	r2, r3, #3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	4936      	ldr	r1, [pc, #216]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ec0:	f7fd fb54 	bl	800556c <HAL_GetTick>
 8007ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec6:	e00a      	b.n	8007ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec8:	f7fd fb50 	bl	800556c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e053      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ede:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f003 020c 	and.w	r2, r3, #12
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d1eb      	bne.n	8007ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ef0:	4b27      	ldr	r3, [pc, #156]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d210      	bcs.n	8007f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f023 0207 	bic.w	r2, r3, #7
 8007f06:	4922      	ldr	r1, [pc, #136]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d001      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e032      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f2c:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	4916      	ldr	r1, [pc, #88]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	490e      	ldr	r1, [pc, #56]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f5e:	f000 f821 	bl	8007fa4 <HAL_RCC_GetSysClockFreq>
 8007f62:	4602      	mov	r2, r0
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	490a      	ldr	r1, [pc, #40]	; (8007f98 <HAL_RCC_ClockConfig+0x1c8>)
 8007f70:	5ccb      	ldrb	r3, [r1, r3]
 8007f72:	fa22 f303 	lsr.w	r3, r2, r3
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <HAL_RCC_ClockConfig+0x1cc>)
 8007f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd f864 	bl	800504c <HAL_InitTick>

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40022000 	.word	0x40022000
 8007f94:	40021000 	.word	0x40021000
 8007f98:	080158e0 	.word	0x080158e0
 8007f9c:	20000000 	.word	0x20000000
 8007fa0:	20000004 	.word	0x20000004

08007fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fa4:	b490      	push	{r4, r7}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007faa:	4b29      	ldr	r3, [pc, #164]	; (8008050 <HAL_RCC_GetSysClockFreq+0xac>)
 8007fac:	1d3c      	adds	r4, r7, #4
 8007fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007fb4:	f240 2301 	movw	r3, #513	; 0x201
 8007fb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007fce:	4b21      	ldr	r3, [pc, #132]	; (8008054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d002      	beq.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d003      	beq.n	8007fea <HAL_RCC_GetSysClockFreq+0x46>
 8007fe2:	e02b      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007fe4:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007fe6:	623b      	str	r3, [r7, #32]
      break;
 8007fe8:	e02b      	b.n	8008042 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	0c9b      	lsrs	r3, r3, #18
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	3328      	adds	r3, #40	; 0x28
 8007ff4:	443b      	add	r3, r7
 8007ff6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007ffa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d012      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	0c5b      	lsrs	r3, r3, #17
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	3328      	adds	r3, #40	; 0x28
 8008012:	443b      	add	r3, r7
 8008014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008018:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <HAL_RCC_GetSysClockFreq+0xb4>)
 800801e:	fb03 f202 	mul.w	r2, r3, r2
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	fbb2 f3f3 	udiv	r3, r2, r3
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	e004      	b.n	8008036 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4a0b      	ldr	r2, [pc, #44]	; (800805c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008030:	fb02 f303 	mul.w	r3, r2, r3
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	623b      	str	r3, [r7, #32]
      break;
 800803a:	e002      	b.n	8008042 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800803c:	4b06      	ldr	r3, [pc, #24]	; (8008058 <HAL_RCC_GetSysClockFreq+0xb4>)
 800803e:	623b      	str	r3, [r7, #32]
      break;
 8008040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008042:	6a3b      	ldr	r3, [r7, #32]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	; 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bc90      	pop	{r4, r7}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	08015698 	.word	0x08015698
 8008054:	40021000 	.word	0x40021000
 8008058:	007a1200 	.word	0x007a1200
 800805c:	003d0900 	.word	0x003d0900

08008060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008064:	4b02      	ldr	r3, [pc, #8]	; (8008070 <HAL_RCC_GetHCLKFreq+0x10>)
 8008066:	681b      	ldr	r3, [r3, #0]
}
 8008068:	4618      	mov	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr
 8008070:	20000000 	.word	0x20000000

08008074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008078:	f7ff fff2 	bl	8008060 <HAL_RCC_GetHCLKFreq>
 800807c:	4602      	mov	r2, r0
 800807e:	4b05      	ldr	r3, [pc, #20]	; (8008094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	4903      	ldr	r1, [pc, #12]	; (8008098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800808a:	5ccb      	ldrb	r3, [r1, r3]
 800808c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008090:	4618      	mov	r0, r3
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40021000 	.word	0x40021000
 8008098:	080158f0 	.word	0x080158f0

0800809c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080a0:	f7ff ffde 	bl	8008060 <HAL_RCC_GetHCLKFreq>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	0adb      	lsrs	r3, r3, #11
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	4903      	ldr	r1, [pc, #12]	; (80080c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080b2:	5ccb      	ldrb	r3, [r1, r3]
 80080b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40021000 	.word	0x40021000
 80080c0:	080158f0 	.word	0x080158f0

080080c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220f      	movs	r2, #15
 80080d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080d4:	4b11      	ldr	r3, [pc, #68]	; (800811c <HAL_RCC_GetClockConfig+0x58>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f003 0203 	and.w	r2, r3, #3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080e0:	4b0e      	ldr	r3, [pc, #56]	; (800811c <HAL_RCC_GetClockConfig+0x58>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80080ec:	4b0b      	ldr	r3, [pc, #44]	; (800811c <HAL_RCC_GetClockConfig+0x58>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80080f8:	4b08      	ldr	r3, [pc, #32]	; (800811c <HAL_RCC_GetClockConfig+0x58>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	08db      	lsrs	r3, r3, #3
 80080fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <HAL_RCC_GetClockConfig+0x5c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0207 	and.w	r2, r3, #7
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr
 800811c:	40021000 	.word	0x40021000
 8008120:	40022000 	.word	0x40022000

08008124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <RCC_Delay+0x34>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a0a      	ldr	r2, [pc, #40]	; (800815c <RCC_Delay+0x38>)
 8008132:	fba2 2303 	umull	r2, r3, r2, r3
 8008136:	0a5b      	lsrs	r3, r3, #9
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008140:	bf00      	nop
  }
  while (Delay --);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	1e5a      	subs	r2, r3, #1
 8008146:	60fa      	str	r2, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1f9      	bne.n	8008140 <RCC_Delay+0x1c>
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr
 8008158:	20000000 	.word	0x20000000
 800815c:	10624dd3 	.word	0x10624dd3

08008160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e041      	b.n	80081f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f839 	bl	80081fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f000 f9c2 	bl	8008528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d001      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e044      	b.n	80082b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <HAL_TIM_Base_Start_IT+0xac>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d00e      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a16      	ldr	r2, [pc, #88]	; (80082c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a15      	ldr	r2, [pc, #84]	; (80082cc <HAL_TIM_Base_Start_IT+0xbc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d111      	bne.n	80082a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b06      	cmp	r3, #6
 800828c:	d010      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	e007      	b.n	80082b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr
 80082bc:	40012c00 	.word	0x40012c00
 80082c0:	40013400 	.word	0x40013400
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00

080082d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d122      	bne.n	800832c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d11b      	bne.n	800832c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0202 	mvn.w	r2, #2
 80082fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f8ed 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 8008318:	e005      	b.n	8008326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8e0 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8ef 	bl	8008504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b04      	cmp	r3, #4
 8008338:	d122      	bne.n	8008380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b04      	cmp	r3, #4
 8008346:	d11b      	bne.n	8008380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f06f 0204 	mvn.w	r2, #4
 8008350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f8c3 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 800836c:	e005      	b.n	800837a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f8b6 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f8c5 	bl	8008504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b08      	cmp	r3, #8
 800838c:	d122      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b08      	cmp	r3, #8
 800839a:	d11b      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0208 	mvn.w	r2, #8
 80083a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f899 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 80083c0:	e005      	b.n	80083ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f88c 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f89b 	bl	8008504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 0310 	and.w	r3, r3, #16
 80083de:	2b10      	cmp	r3, #16
 80083e0:	d122      	bne.n	8008428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d11b      	bne.n	8008428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0210 	mvn.w	r2, #16
 80083f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2208      	movs	r2, #8
 80083fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f86f 	bl	80084f2 <HAL_TIM_IC_CaptureCallback>
 8008414:	e005      	b.n	8008422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f862 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f871 	bl	8008504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b01      	cmp	r3, #1
 8008434:	d10e      	bne.n	8008454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d107      	bne.n	8008454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0201 	mvn.w	r2, #1
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fc fdac 	bl	8004fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	d10e      	bne.n	8008480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d107      	bne.n	8008480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8d7 	bl	800862e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d10e      	bne.n	80084ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d107      	bne.n	80084ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f835 	bl	8008516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d10e      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d107      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0220 	mvn.w	r2, #32
 80084d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f8a2 	bl	800861c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	bc80      	pop	{r7}
 8008502:	4770      	bx	lr

08008504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr

08008516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a33      	ldr	r2, [pc, #204]	; (8008608 <TIM_Base_SetConfig+0xe0>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a32      	ldr	r2, [pc, #200]	; (800860c <TIM_Base_SetConfig+0xe4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00f      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d00b      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a2f      	ldr	r2, [pc, #188]	; (8008610 <TIM_Base_SetConfig+0xe8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d007      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a2e      	ldr	r2, [pc, #184]	; (8008614 <TIM_Base_SetConfig+0xec>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <TIM_Base_SetConfig+0xf0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <TIM_Base_SetConfig+0xe0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d013      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a21      	ldr	r2, [pc, #132]	; (800860c <TIM_Base_SetConfig+0xe4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00f      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008590:	d00b      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <TIM_Base_SetConfig+0xe8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d007      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <TIM_Base_SetConfig+0xec>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d003      	beq.n	80085aa <TIM_Base_SetConfig+0x82>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <TIM_Base_SetConfig+0xf0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d108      	bne.n	80085bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a09      	ldr	r2, [pc, #36]	; (8008608 <TIM_Base_SetConfig+0xe0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d003      	beq.n	80085f0 <TIM_Base_SetConfig+0xc8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a08      	ldr	r2, [pc, #32]	; (800860c <TIM_Base_SetConfig+0xe4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d103      	bne.n	80085f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	615a      	str	r2, [r3, #20]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr
 8008608:	40012c00 	.word	0x40012c00
 800860c:	40013400 	.word	0x40013400
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800
 8008618:	40000c00 	.word	0x40000c00

0800861c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e03f      	b.n	80086d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7fc fe88 	bl	800537c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2224      	movs	r2, #36	; 0x24
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fe49 	bl	800931c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	691a      	ldr	r2, [r3, #16]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	695a      	ldr	r2, [r3, #20]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b08a      	sub	sp, #40	; 0x28
 80086de:	af02      	add	r7, sp, #8
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	603b      	str	r3, [r7, #0]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d17c      	bne.n	80087f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <HAL_UART_Transmit+0x2c>
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e075      	b.n	80087f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_UART_Transmit+0x3e>
 8008714:	2302      	movs	r3, #2
 8008716:	e06e      	b.n	80087f6 <HAL_UART_Transmit+0x11c>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2221      	movs	r2, #33	; 0x21
 800872a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800872e:	f7fc ff1d 	bl	800556c <HAL_GetTick>
 8008732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	88fa      	ldrh	r2, [r7, #6]
 800873e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008748:	d108      	bne.n	800875c <HAL_UART_Transmit+0x82>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e003      	b.n	8008764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800876c:	e02a      	b.n	80087c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2200      	movs	r2, #0
 8008776:	2180      	movs	r1, #128	; 0x80
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fbbb 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e036      	b.n	80087f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10b      	bne.n	80087a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800879c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	3302      	adds	r3, #2
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e007      	b.n	80087b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	781a      	ldrb	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1cf      	bne.n	800876e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2200      	movs	r2, #0
 80087d6:	2140      	movs	r1, #64	; 0x40
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 fb8b 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e006      	b.n	80087f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e000      	b.n	80087f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b20      	cmp	r3, #32
 8008818:	d153      	bne.n	80088c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <HAL_UART_Transmit_DMA+0x26>
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e04c      	b.n	80088c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_UART_Transmit_DMA+0x38>
 8008834:	2302      	movs	r3, #2
 8008836:	e045      	b.n	80088c4 <HAL_UART_Transmit_DMA+0xc4>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2221      	movs	r2, #33	; 0x21
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	4a19      	ldr	r2, [pc, #100]	; (80088cc <HAL_UART_Transmit_DMA+0xcc>)
 8008866:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886c:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <HAL_UART_Transmit_DMA+0xd0>)
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008874:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <HAL_UART_Transmit_DMA+0xd4>)
 8008876:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887c:	2200      	movs	r2, #0
 800887e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8008880:	f107 0308 	add.w	r3, r7, #8
 8008884:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3304      	adds	r3, #4
 8008894:	461a      	mov	r2, r3
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	f7fc ffec 	bl	8005874 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695a      	ldr	r2, [r3, #20]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	e000      	b.n	80088c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80088c2:	2302      	movs	r3, #2
  }
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08008d27 	.word	0x08008d27
 80088d0:	08008d79 	.word	0x08008d79
 80088d4:	08008e61 	.word	0x08008e61

080088d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d13c      	bne.n	800896c <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e035      	b.n	800896e <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800890c:	2302      	movs	r3, #2
 800890e:	e02e      	b.n	800896e <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	461a      	mov	r2, r3
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 fb2f 	bl	8008f88 <UART_Start_Receive_DMA>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d119      	bne.n	8008968 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	2b01      	cmp	r3, #1
 800893a:	d113      	bne.n	8008964 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800893c:	2300      	movs	r3, #0
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0210 	orr.w	r2, r2, #16
 8008960:	60da      	str	r2, [r3, #12]
 8008962:	e001      	b.n	8008968 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	e000      	b.n	800896e <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800896c:	2302      	movs	r3, #2
  }
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10d      	bne.n	80089ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_UART_IRQHandler+0x52>
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fc00 	bl	80091c8 <UART_Receive_IT>
      return;
 80089c8:	e17b      	b.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 80b1 	beq.w	8008b34 <HAL_UART_IRQHandler+0x1bc>
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <HAL_UART_IRQHandler+0x70>
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 80a6 	beq.w	8008b34 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_UART_IRQHandler+0x90>
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	f043 0201 	orr.w	r2, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <HAL_UART_IRQHandler+0xb0>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	f043 0202 	orr.w	r2, r3, #2
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <HAL_UART_IRQHandler+0xd0>
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	f043 0204 	orr.w	r2, r3, #4
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	f003 0308 	and.w	r3, r3, #8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00f      	beq.n	8008a72 <HAL_UART_IRQHandler+0xfa>
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <HAL_UART_IRQHandler+0xee>
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f043 0208 	orr.w	r2, r3, #8
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 811e 	beq.w	8008cb8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <HAL_UART_IRQHandler+0x11e>
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fb99 	bl	80091c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bf14      	ite	ne
 8008aa4:	2301      	movne	r3, #1
 8008aa6:	2300      	moveq	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <HAL_UART_IRQHandler+0x146>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d031      	beq.n	8008b22 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fadb 	bl	800907a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d023      	beq.n	8008b1a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ae0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d013      	beq.n	8008b12 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	4a76      	ldr	r2, [pc, #472]	; (8008cc8 <HAL_UART_IRQHandler+0x350>)
 8008af0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fc ff56 	bl	80059a8 <HAL_DMA_Abort_IT>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d016      	beq.n	8008b30 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b10:	e00e      	b.n	8008b30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f8fe 	bl	8008d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	e00a      	b.n	8008b30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f8fa 	bl	8008d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b20:	e006      	b.n	8008b30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8f6 	bl	8008d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b2e:	e0c3      	b.n	8008cb8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	bf00      	nop
    return;
 8008b32:	e0c1      	b.n	8008cb8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	f040 80a1 	bne.w	8008c80 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 809b 	beq.w	8008c80 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8095 	beq.w	8008c80 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d04e      	beq.n	8008c18 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008b84:	8a3b      	ldrh	r3, [r7, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8098 	beq.w	8008cbc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b90:	8a3a      	ldrh	r2, [r7, #16]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	f080 8092 	bcs.w	8008cbc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8a3a      	ldrh	r2, [r7, #16]
 8008b9c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d02b      	beq.n	8008c00 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bb6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695a      	ldr	r2, [r3, #20]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0201 	bic.w	r2, r2, #1
 8008bc6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695a      	ldr	r2, [r3, #20]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0210 	bic.w	r2, r2, #16
 8008bf4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fc fe99 	bl	8005932 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7fb ff6b 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008c16:	e051      	b.n	8008cbc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d047      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008c30:	8a7b      	ldrh	r3, [r7, #18]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d044      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c44:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f022 0201 	bic.w	r2, r2, #1
 8008c54:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0210 	bic.w	r2, r2, #16
 8008c72:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c74:	8a7b      	ldrh	r3, [r7, #18]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7fb ff37 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008c7e:	e01f      	b.n	8008cc0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d008      	beq.n	8008c9c <HAL_UART_IRQHandler+0x324>
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa30 	bl	80090fa <UART_Transmit_IT>
    return;
 8008c9a:	e012      	b.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00d      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fa71 	bl	8009198 <UART_EndTransmit_IT>
    return;
 8008cb6:	e004      	b.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
    return;
 8008cb8:	bf00      	nop
 8008cba:	e002      	b.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
      return;
 8008cbc:	bf00      	nop
 8008cbe:	e000      	b.n	8008cc2 <HAL_UART_IRQHandler+0x34a>
      return;
 8008cc0:	bf00      	nop
  }
}
 8008cc2:	3728      	adds	r7, #40	; 0x28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	080090d3 	.word	0x080090d3

08008ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bc80      	pop	{r7}
 8008cdc:	4770      	bx	lr

08008cde <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr

08008cf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr

08008d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr

08008d26 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d113      	bne.n	8008d6a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d56:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d66:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d68:	e002      	b.n	8008d70 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff ffae 	bl	8008ccc <HAL_UART_TxCpltCallback>
}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff ffa9 	bl	8008cde <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d12a      	bne.n	8008e06 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dc4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695a      	ldr	r2, [r3, #20]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0201 	bic.w	r2, r2, #1
 8008dd4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695a      	ldr	r2, [r3, #20]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d107      	bne.n	8008e06 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0210 	bic.w	r2, r2, #16
 8008e04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d106      	bne.n	8008e1c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e12:	4619      	mov	r1, r3
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7fb fe69 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e1a:	e002      	b.n	8008e22 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff ff67 	bl	8008cf0 <HAL_UART_RxCpltCallback>
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d108      	bne.n	8008e52 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e44:	085b      	lsrs	r3, r3, #1
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	4619      	mov	r1, r3
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f7fb fe4e 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e50:	e002      	b.n	8008e58 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f7ff ff55 	bl	8008d02 <HAL_UART_RxHalfCpltCallback>
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bf14      	ite	ne
 8008e80:	2301      	movne	r3, #1
 8008e82:	2300      	moveq	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b21      	cmp	r3, #33	; 0x21
 8008e92:	d108      	bne.n	8008ea6 <UART_DMAError+0x46>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ea0:	68b8      	ldr	r0, [r7, #8]
 8008ea2:	f000 f8d5 	bl	8009050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	2301      	movne	r3, #1
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b22      	cmp	r3, #34	; 0x22
 8008ec6:	d108      	bne.n	8008eda <UART_DMAError+0x7a>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ed4:	68b8      	ldr	r0, [r7, #8]
 8008ed6:	f000 f8d0 	bl	800907a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	f043 0210 	orr.w	r2, r3, #16
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ee6:	68b8      	ldr	r0, [r7, #8]
 8008ee8:	f7ff ff14 	bl	8008d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eec:	bf00      	nop
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	4613      	mov	r3, r2
 8008f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f04:	e02c      	b.n	8008f60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d028      	beq.n	8008f60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f14:	f7fc fb2a 	bl	800556c <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d21d      	bcs.n	8008f60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695a      	ldr	r2, [r3, #20]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0201 	bic.w	r2, r2, #1
 8008f42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e00f      	b.n	8008f80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d0c3      	beq.n	8008f06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	88fa      	ldrh	r2, [r7, #6]
 8008fa0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2222      	movs	r2, #34	; 0x22
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	4a23      	ldr	r2, [pc, #140]	; (8009044 <UART_Start_Receive_DMA+0xbc>)
 8008fb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	4a22      	ldr	r2, [pc, #136]	; (8009048 <UART_Start_Receive_DMA+0xc0>)
 8008fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	4a21      	ldr	r2, [pc, #132]	; (800904c <UART_Start_Receive_DMA+0xc4>)
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	2200      	movs	r2, #0
 8008fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008fd0:	f107 0308 	add.w	r3, r7, #8
 8008fd4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	f7fc fc44 	bl	8005874 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008fec:	2300      	movs	r3, #0
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	613b      	str	r3, [r7, #16]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009018:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695a      	ldr	r2, [r3, #20]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009038:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	08008d95 	.word	0x08008d95
 8009048:	08008e2b 	.word	0x08008e2b
 800904c:	08008e61 	.word	0x08008e61

08009050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009066:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr

0800907a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009090:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	695a      	ldr	r2, [r3, #20]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0201 	bic.w	r2, r2, #1
 80090a0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d107      	bne.n	80090ba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0210 	bic.w	r2, r2, #16
 80090b8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f7ff fe11 	bl	8008d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b21      	cmp	r3, #33	; 0x21
 800910c:	d13e      	bne.n	800918c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009116:	d114      	bne.n	8009142 <UART_Transmit_IT+0x48>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d110      	bne.n	8009142 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009134:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	1c9a      	adds	r2, r3, #2
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	621a      	str	r2, [r3, #32]
 8009140:	e008      	b.n	8009154 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	1c59      	adds	r1, r3, #1
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	6211      	str	r1, [r2, #32]
 800914c:	781a      	ldrb	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29b      	uxth	r3, r3
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4619      	mov	r1, r3
 8009162:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10f      	bne.n	8009188 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009176:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009186:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	e000      	b.n	800918e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	bc80      	pop	{r7}
 8009196:	4770      	bx	lr

08009198 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fd87 	bl	8008ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b22      	cmp	r3, #34	; 0x22
 80091da:	f040 8099 	bne.w	8009310 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e6:	d117      	bne.n	8009218 <UART_Receive_IT+0x50>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d113      	bne.n	8009218 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	b29b      	uxth	r3, r3
 8009202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009206:	b29a      	uxth	r2, r3
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	1c9a      	adds	r2, r3, #2
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	629a      	str	r2, [r3, #40]	; 0x28
 8009216:	e026      	b.n	8009266 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922a:	d007      	beq.n	800923c <UART_Receive_IT+0x74>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <UART_Receive_IT+0x82>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	b2da      	uxtb	r2, r3
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	e008      	b.n	800925c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009256:	b2da      	uxtb	r2, r3
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	b29b      	uxth	r3, r3
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	4619      	mov	r1, r3
 8009274:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009276:	2b00      	cmp	r3, #0
 8009278:	d148      	bne.n	800930c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0220 	bic.w	r2, r2, #32
 8009288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009298:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	695a      	ldr	r2, [r3, #20]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0201 	bic.w	r2, r2, #1
 80092a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d123      	bne.n	8009302 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0210 	bic.w	r2, r2, #16
 80092ce:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0310 	and.w	r3, r3, #16
 80092da:	2b10      	cmp	r3, #16
 80092dc:	d10a      	bne.n	80092f4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fb fbf6 	bl	8004aec <HAL_UARTEx_RxEventCallback>
 8009300:	e002      	b.n	8009308 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fcf4 	bl	8008cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	e002      	b.n	8009312 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	e000      	b.n	8009312 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009310:	2302      	movs	r3, #2
  }
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	4313      	orrs	r3, r2
 800934a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009356:	f023 030c 	bic.w	r3, r3, #12
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	430b      	orrs	r3, r1
 8009362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699a      	ldr	r2, [r3, #24]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a2c      	ldr	r2, [pc, #176]	; (8009430 <UART_SetConfig+0x114>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d103      	bne.n	800938c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009384:	f7fe fe8a 	bl	800809c <HAL_RCC_GetPCLK2Freq>
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	e002      	b.n	8009392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800938c:	f7fe fe72 	bl	8008074 <HAL_RCC_GetPCLK1Freq>
 8009390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009a      	lsls	r2, r3, #2
 800939c:	441a      	add	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <UART_SetConfig+0x118>)
 80093aa:	fba2 2303 	umull	r2, r3, r2, r3
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	0119      	lsls	r1, r3, #4
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009a      	lsls	r2, r3, #2
 80093bc:	441a      	add	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80093c8:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <UART_SetConfig+0x118>)
 80093ca:	fba3 0302 	umull	r0, r3, r3, r2
 80093ce:	095b      	lsrs	r3, r3, #5
 80093d0:	2064      	movs	r0, #100	; 0x64
 80093d2:	fb00 f303 	mul.w	r3, r0, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	3332      	adds	r3, #50	; 0x32
 80093dc:	4a15      	ldr	r2, [pc, #84]	; (8009434 <UART_SetConfig+0x118>)
 80093de:	fba2 2303 	umull	r2, r3, r2, r3
 80093e2:	095b      	lsrs	r3, r3, #5
 80093e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093e8:	4419      	add	r1, r3
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009a      	lsls	r2, r3, #2
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <UART_SetConfig+0x118>)
 8009402:	fba3 0302 	umull	r0, r3, r3, r2
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	2064      	movs	r0, #100	; 0x64
 800940a:	fb00 f303 	mul.w	r3, r0, r3
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	3332      	adds	r3, #50	; 0x32
 8009414:	4a07      	ldr	r2, [pc, #28]	; (8009434 <UART_SetConfig+0x118>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	f003 020f 	and.w	r2, r3, #15
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	440a      	add	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	40013800 	.word	0x40013800
 8009434:	51eb851f 	.word	0x51eb851f

08009438 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on)
 8009442:	4b29      	ldr	r3, [pc, #164]	; (80094e8 <set_int_enable+0xb0>)
 8009444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01c      	beq.n	8009486 <set_int_enable+0x4e>
    {
        if (enable)
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8009452:	2302      	movs	r3, #2
 8009454:	73fb      	strb	r3, [r7, #15]
 8009456:	e001      	b.n	800945c <set_int_enable+0x24>
        else
            tmp = 0x00;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800945c:	4b22      	ldr	r3, [pc, #136]	; (80094e8 <set_int_enable+0xb0>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	7818      	ldrb	r0, [r3, #0]
 8009462:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <set_int_enable+0xb0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	7c59      	ldrb	r1, [r3, #17]
 8009468:	f107 030f 	add.w	r3, r7, #15
 800946c:	2201      	movs	r2, #1
 800946e:	f005 f9e5 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <set_int_enable+0x46>
            return -1;
 8009478:	f04f 33ff 	mov.w	r3, #4294967295
 800947c:	e030      	b.n	80094e0 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800947e:	7bfa      	ldrb	r2, [r7, #15]
 8009480:	4b19      	ldr	r3, [pc, #100]	; (80094e8 <set_int_enable+0xb0>)
 8009482:	745a      	strb	r2, [r3, #17]
 8009484:	e02b      	b.n	80094de <set_int_enable+0xa6>
    }
    else
    {
        if (!st.chip_cfg.sensors)
 8009486:	4b18      	ldr	r3, [pc, #96]	; (80094e8 <set_int_enable+0xb0>)
 8009488:	7a9b      	ldrb	r3, [r3, #10]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <set_int_enable+0x5c>
            return -1;
 800948e:	f04f 33ff 	mov.w	r3, #4294967295
 8009492:	e025      	b.n	80094e0 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <set_int_enable+0x6e>
 800949a:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <set_int_enable+0xb0>)
 800949c:	7c5b      	ldrb	r3, [r3, #17]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <set_int_enable+0x6e>
            return 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e01c      	b.n	80094e0 <set_int_enable+0xa8>
        if (enable)
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 80094ac:	2301      	movs	r3, #1
 80094ae:	73fb      	strb	r3, [r7, #15]
 80094b0:	e001      	b.n	80094b6 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <set_int_enable+0xb0>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	7818      	ldrb	r0, [r3, #0]
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <set_int_enable+0xb0>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	7c59      	ldrb	r1, [r3, #17]
 80094c2:	f107 030f 	add.w	r3, r7, #15
 80094c6:	2201      	movs	r2, #1
 80094c8:	f005 f9b8 	bl	800e83c <Sensors_I2C_WriteRegister>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <set_int_enable+0xa0>
            return -1;
 80094d2:	f04f 33ff 	mov.w	r3, #4294967295
 80094d6:	e003      	b.n	80094e0 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80094d8:	7bfa      	ldrb	r2, [r7, #15]
 80094da:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <set_int_enable+0xb0>)
 80094dc:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	2000000c 	.word	0x2000000c

080094ec <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 80094f4:	2380      	movs	r3, #128	; 0x80
 80094f6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80094f8:	4b4f      	ldr	r3, [pc, #316]	; (8009638 <mpu_init+0x14c>)
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	7818      	ldrb	r0, [r3, #0]
 80094fe:	4b4e      	ldr	r3, [pc, #312]	; (8009638 <mpu_init+0x14c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	7d59      	ldrb	r1, [r3, #21]
 8009504:	f107 0308 	add.w	r3, r7, #8
 8009508:	2201      	movs	r2, #1
 800950a:	f005 f997 	bl	800e83c <Sensors_I2C_WriteRegister>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <mpu_init+0x2e>
        return -1;
 8009514:	f04f 33ff 	mov.w	r3, #4294967295
 8009518:	e08a      	b.n	8009630 <mpu_init+0x144>
    delay_ms(100);
 800951a:	2064      	movs	r0, #100	; 0x64
 800951c:	f7fc f830 	bl	8005580 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8009520:	2300      	movs	r3, #0
 8009522:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8009524:	4b44      	ldr	r3, [pc, #272]	; (8009638 <mpu_init+0x14c>)
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	7818      	ldrb	r0, [r3, #0]
 800952a:	4b43      	ldr	r3, [pc, #268]	; (8009638 <mpu_init+0x14c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	7d59      	ldrb	r1, [r3, #21]
 8009530:	f107 0308 	add.w	r3, r7, #8
 8009534:	2201      	movs	r2, #1
 8009536:	f005 f981 	bl	800e83c <Sensors_I2C_WriteRegister>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <mpu_init+0x5a>
        return -1;
 8009540:	f04f 33ff 	mov.w	r3, #4294967295
 8009544:	e074      	b.n	8009630 <mpu_init+0x144>

    st.chip_cfg.accel_half = 0;
 8009546:	4b3c      	ldr	r3, [pc, #240]	; (8009638 <mpu_init+0x14c>)
 8009548:	2200      	movs	r2, #0
 800954a:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800954c:	4b3a      	ldr	r3, [pc, #232]	; (8009638 <mpu_init+0x14c>)
 800954e:	22ff      	movs	r2, #255	; 0xff
 8009550:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8009552:	4b39      	ldr	r3, [pc, #228]	; (8009638 <mpu_init+0x14c>)
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8009558:	4b37      	ldr	r3, [pc, #220]	; (8009638 <mpu_init+0x14c>)
 800955a:	22ff      	movs	r2, #255	; 0xff
 800955c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800955e:	4b36      	ldr	r3, [pc, #216]	; (8009638 <mpu_init+0x14c>)
 8009560:	22ff      	movs	r2, #255	; 0xff
 8009562:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8009564:	4b34      	ldr	r3, [pc, #208]	; (8009638 <mpu_init+0x14c>)
 8009566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800956a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800956c:	4b32      	ldr	r3, [pc, #200]	; (8009638 <mpu_init+0x14c>)
 800956e:	22ff      	movs	r2, #255	; 0xff
 8009570:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8009572:	4b31      	ldr	r3, [pc, #196]	; (8009638 <mpu_init+0x14c>)
 8009574:	22ff      	movs	r2, #255	; 0xff
 8009576:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8009578:	4b2f      	ldr	r3, [pc, #188]	; (8009638 <mpu_init+0x14c>)
 800957a:	2201      	movs	r2, #1
 800957c:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800957e:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <mpu_init+0x14c>)
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8009586:	4b2c      	ldr	r3, [pc, #176]	; (8009638 <mpu_init+0x14c>)
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800958e:	4b2a      	ldr	r3, [pc, #168]	; (8009638 <mpu_init+0x14c>)
 8009590:	2200      	movs	r2, #0
 8009592:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8009594:	4b28      	ldr	r3, [pc, #160]	; (8009638 <mpu_init+0x14c>)
 8009596:	2200      	movs	r2, #0
 8009598:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800959a:	220c      	movs	r2, #12
 800959c:	2100      	movs	r1, #0
 800959e:	4827      	ldr	r0, [pc, #156]	; (800963c <mpu_init+0x150>)
 80095a0:	f008 fa88 	bl	8011ab4 <memset>
    st.chip_cfg.dmp_on = 0;
 80095a4:	4b24      	ldr	r3, [pc, #144]	; (8009638 <mpu_init+0x14c>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 80095ac:	4b22      	ldr	r3, [pc, #136]	; (8009638 <mpu_init+0x14c>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 80095b4:	4b20      	ldr	r3, [pc, #128]	; (8009638 <mpu_init+0x14c>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 80095ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80095be:	f000 fa57 	bl	8009a70 <mpu_set_gyro_fsr>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <mpu_init+0xe2>
        return -1;
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	e030      	b.n	8009630 <mpu_init+0x144>
    if (mpu_set_accel_fsr(2))
 80095ce:	2002      	movs	r0, #2
 80095d0:	f000 fadc 	bl	8009b8c <mpu_set_accel_fsr>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <mpu_init+0xf4>
        return -1;
 80095da:	f04f 33ff 	mov.w	r3, #4294967295
 80095de:	e027      	b.n	8009630 <mpu_init+0x144>
    if (mpu_set_lpf(42))
 80095e0:	202a      	movs	r0, #42	; 0x2a
 80095e2:	f000 fb77 	bl	8009cd4 <mpu_set_lpf>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <mpu_init+0x106>
        return -1;
 80095ec:	f04f 33ff 	mov.w	r3, #4294967295
 80095f0:	e01e      	b.n	8009630 <mpu_init+0x144>
    if (mpu_set_sample_rate(50))
 80095f2:	2032      	movs	r0, #50	; 0x32
 80095f4:	f000 fbd4 	bl	8009da0 <mpu_set_sample_rate>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <mpu_init+0x118>
        return -1;
 80095fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009602:	e015      	b.n	8009630 <mpu_init+0x144>
    if (mpu_configure_fifo(0))
 8009604:	2000      	movs	r0, #0
 8009606:	f000 fc41 	bl	8009e8c <mpu_configure_fifo>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <mpu_init+0x12a>
        return -1;
 8009610:	f04f 33ff 	mov.w	r3, #4294967295
 8009614:	e00c      	b.n	8009630 <mpu_init+0x144>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8009616:	2000      	movs	r0, #0
 8009618:	f000 fd8e 	bl	800a138 <mpu_set_bypass>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <mpu_init+0x13c>
        return -1;
 8009622:	f04f 33ff 	mov.w	r3, #4294967295
 8009626:	e003      	b.n	8009630 <mpu_init+0x144>
#endif

    mpu_set_sensors(0);
 8009628:	2000      	movs	r0, #0
 800962a:	f000 fc81 	bl	8009f30 <mpu_set_sensors>
    return 0;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	2000000c 	.word	0x2000000c
 800963c:	20000022 	.word	0x20000022

08009640 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	2b28      	cmp	r3, #40	; 0x28
 800964e:	d902      	bls.n	8009656 <mpu_lp_accel_mode+0x16>
        return -1;
 8009650:	f04f 33ff 	mov.w	r3, #4294967295
 8009654:	e06a      	b.n	800972c <mpu_lp_accel_mode+0xec>

    if (!rate)
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d11c      	bne.n	8009696 <mpu_lp_accel_mode+0x56>
    {
        mpu_set_int_latched(0);
 800965c:	2000      	movs	r0, #0
 800965e:	f000 fe31 	bl	800a2c4 <mpu_set_int_latched>
        tmp[0] = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8009666:	2307      	movs	r3, #7
 8009668:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800966a:	4b32      	ldr	r3, [pc, #200]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	7818      	ldrb	r0, [r3, #0]
 8009670:	4b30      	ldr	r3, [pc, #192]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	7d59      	ldrb	r1, [r3, #21]
 8009676:	f107 030c 	add.w	r3, r7, #12
 800967a:	2202      	movs	r2, #2
 800967c:	f005 f8de 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <mpu_lp_accel_mode+0x4c>
            return -1;
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
 800968a:	e04f      	b.n	800972c <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 800968c:	4b29      	ldr	r3, [pc, #164]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 800968e:	2200      	movs	r2, #0
 8009690:	751a      	strb	r2, [r3, #20]
        return 0;
 8009692:	2300      	movs	r3, #0
 8009694:	e04a      	b.n	800972c <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8009696:	2001      	movs	r0, #1
 8009698:	f000 fe14 	bl	800a2c4 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800969c:	2320      	movs	r3, #32
 800969e:	733b      	strb	r3, [r7, #12]
    if (rate == 1)
 80096a0:	88fb      	ldrh	r3, [r7, #6]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d105      	bne.n	80096b2 <mpu_lp_accel_mode+0x72>
    {
        tmp[1] = INV_LPA_1_25HZ;
 80096a6:	2300      	movs	r3, #0
 80096a8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 80096aa:	2005      	movs	r0, #5
 80096ac:	f000 fb12 	bl	8009cd4 <mpu_set_lpf>
 80096b0:	e016      	b.n	80096e0 <mpu_lp_accel_mode+0xa0>
    }
    else if (rate <= 5)
 80096b2:	88fb      	ldrh	r3, [r7, #6]
 80096b4:	2b05      	cmp	r3, #5
 80096b6:	d805      	bhi.n	80096c4 <mpu_lp_accel_mode+0x84>
    {
        tmp[1] = INV_LPA_5HZ;
 80096b8:	2301      	movs	r3, #1
 80096ba:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 80096bc:	2005      	movs	r0, #5
 80096be:	f000 fb09 	bl	8009cd4 <mpu_set_lpf>
 80096c2:	e00d      	b.n	80096e0 <mpu_lp_accel_mode+0xa0>
    }
    else if (rate <= 20)
 80096c4:	88fb      	ldrh	r3, [r7, #6]
 80096c6:	2b14      	cmp	r3, #20
 80096c8:	d805      	bhi.n	80096d6 <mpu_lp_accel_mode+0x96>
    {
        tmp[1] = INV_LPA_20HZ;
 80096ca:	2302      	movs	r3, #2
 80096cc:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 80096ce:	200a      	movs	r0, #10
 80096d0:	f000 fb00 	bl	8009cd4 <mpu_set_lpf>
 80096d4:	e004      	b.n	80096e0 <mpu_lp_accel_mode+0xa0>
    }
    else
    {
        tmp[1] = INV_LPA_40HZ;
 80096d6:	2303      	movs	r3, #3
 80096d8:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 80096da:	2014      	movs	r0, #20
 80096dc:	f000 fafa 	bl	8009cd4 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 80096e0:	7b7b      	ldrb	r3, [r7, #13]
 80096e2:	019b      	lsls	r3, r3, #6
 80096e4:	b25b      	sxtb	r3, r3
 80096e6:	f043 0307 	orr.w	r3, r3, #7
 80096ea:	b25b      	sxtb	r3, r3
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80096f0:	4b10      	ldr	r3, [pc, #64]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	7818      	ldrb	r0, [r3, #0]
 80096f6:	4b0f      	ldr	r3, [pc, #60]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	7d59      	ldrb	r1, [r3, #21]
 80096fc:	f107 030c 	add.w	r3, r7, #12
 8009700:	2202      	movs	r2, #2
 8009702:	f005 f89b 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <mpu_lp_accel_mode+0xd2>
        return -1;
 800970c:	f04f 33ff 	mov.w	r3, #4294967295
 8009710:	e00c      	b.n	800972c <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8009712:	4b08      	ldr	r3, [pc, #32]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 8009714:	2208      	movs	r2, #8
 8009716:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8009718:	4b06      	ldr	r3, [pc, #24]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 800971a:	2200      	movs	r2, #0
 800971c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <mpu_lp_accel_mode+0xf4>)
 8009720:	2201      	movs	r2, #1
 8009722:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8009724:	2000      	movs	r0, #0
 8009726:	f000 fbb1 	bl	8009e8c <mpu_configure_fifo>

    return 0;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	2000000c 	.word	0x2000000c

08009738 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 8009742:	4b2d      	ldr	r3, [pc, #180]	; (80097f8 <mpu_get_temperature+0xc0>)
 8009744:	7a9b      	ldrb	r3, [r3, #10]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <mpu_get_temperature+0x18>
        return -1;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	e04f      	b.n	80097f0 <mpu_get_temperature+0xb8>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 8009750:	4b29      	ldr	r3, [pc, #164]	; (80097f8 <mpu_get_temperature+0xc0>)
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	7818      	ldrb	r0, [r3, #0]
 8009756:	4b28      	ldr	r3, [pc, #160]	; (80097f8 <mpu_get_temperature+0xc0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	7c19      	ldrb	r1, [r3, #16]
 800975c:	f107 030c 	add.w	r3, r7, #12
 8009760:	2202      	movs	r2, #2
 8009762:	f005 f821 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <mpu_get_temperature+0x3a>
        return -1;
 800976c:	f04f 33ff 	mov.w	r3, #4294967295
 8009770:	e03e      	b.n	80097f0 <mpu_get_temperature+0xb8>
    raw = (tmp[0] << 8) | tmp[1];
 8009772:	7b3b      	ldrb	r3, [r7, #12]
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	b21a      	sxth	r2, r3
 8009778:	7b7b      	ldrb	r3, [r7, #13]
 800977a:	b21b      	sxth	r3, r3
 800977c:	4313      	orrs	r3, r2
 800977e:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <mpu_get_temperature+0x54>
        get_ms(timestamp);
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	f005 f8a2 	bl	800e8d0 <get_ms_user>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 800978c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009790:	4618      	mov	r0, r3
 8009792:	f7fa f85b 	bl	800384c <__aeabi_i2f>
 8009796:	4604      	mov	r4, r0
 8009798:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <mpu_get_temperature+0xc0>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fa f853 	bl	800384c <__aeabi_i2f>
 80097a6:	4603      	mov	r3, r0
 80097a8:	4619      	mov	r1, r3
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7f9 ff98 	bl	80036e0 <__aeabi_fsub>
 80097b0:	4603      	mov	r3, r0
 80097b2:	461c      	mov	r4, r3
 80097b4:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <mpu_get_temperature+0xc0>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fa f846 	bl	800384c <__aeabi_i2f>
 80097c0:	4603      	mov	r3, r0
 80097c2:	4619      	mov	r1, r3
 80097c4:	4620      	mov	r0, r4
 80097c6:	f7fa f949 	bl	8003a5c <__aeabi_fdiv>
 80097ca:	4603      	mov	r3, r0
 80097cc:	490b      	ldr	r1, [pc, #44]	; (80097fc <mpu_get_temperature+0xc4>)
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f9 ff88 	bl	80036e4 <__addsf3>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fa f88a 	bl	80038f4 <__aeabi_fmul>
 80097e0:	4603      	mov	r3, r0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fa fa62 	bl	8003cac <__aeabi_f2iz>
 80097e8:	4602      	mov	r2, r0
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
    return 0;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd90      	pop	{r4, r7, pc}
 80097f8:	2000000c 	.word	0x2000000c
 80097fc:	420c0000 	.word	0x420c0000

08009800 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8009806:	4b7e      	ldr	r3, [pc, #504]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009808:	7a9b      	ldrb	r3, [r3, #10]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <mpu_reset_fifo+0x14>
        return -1;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	e0f1      	b.n	80099f8 <mpu_reset_fifo+0x1f8>

    data = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8009818:	4b79      	ldr	r3, [pc, #484]	; (8009a00 <mpu_reset_fifo+0x200>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	7818      	ldrb	r0, [r3, #0]
 800981e:	4b78      	ldr	r3, [pc, #480]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	7c59      	ldrb	r1, [r3, #17]
 8009824:	1dfb      	adds	r3, r7, #7
 8009826:	2201      	movs	r2, #1
 8009828:	f005 f808 	bl	800e83c <Sensors_I2C_WriteRegister>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <mpu_reset_fifo+0x38>
        return -1;
 8009832:	f04f 33ff 	mov.w	r3, #4294967295
 8009836:	e0df      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8009838:	4b71      	ldr	r3, [pc, #452]	; (8009a00 <mpu_reset_fifo+0x200>)
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	7818      	ldrb	r0, [r3, #0]
 800983e:	4b70      	ldr	r3, [pc, #448]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	7959      	ldrb	r1, [r3, #5]
 8009844:	1dfb      	adds	r3, r7, #7
 8009846:	2201      	movs	r2, #1
 8009848:	f004 fff8 	bl	800e83c <Sensors_I2C_WriteRegister>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <mpu_reset_fifo+0x58>
        return -1;
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	e0cf      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8009858:	4b69      	ldr	r3, [pc, #420]	; (8009a00 <mpu_reset_fifo+0x200>)
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	7818      	ldrb	r0, [r3, #0]
 800985e:	4b68      	ldr	r3, [pc, #416]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	7919      	ldrb	r1, [r3, #4]
 8009864:	1dfb      	adds	r3, r7, #7
 8009866:	2201      	movs	r2, #1
 8009868:	f004 ffe8 	bl	800e83c <Sensors_I2C_WriteRegister>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <mpu_reset_fifo+0x78>
        return -1;
 8009872:	f04f 33ff 	mov.w	r3, #4294967295
 8009876:	e0bf      	b.n	80099f8 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on)
 8009878:	4b61      	ldr	r3, [pc, #388]	; (8009a00 <mpu_reset_fifo+0x200>)
 800987a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d05c      	beq.n	800993c <mpu_reset_fifo+0x13c>
    {
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8009882:	230c      	movs	r3, #12
 8009884:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8009886:	4b5e      	ldr	r3, [pc, #376]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	7818      	ldrb	r0, [r3, #0]
 800988c:	4b5c      	ldr	r3, [pc, #368]	; (8009a00 <mpu_reset_fifo+0x200>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	7919      	ldrb	r1, [r3, #4]
 8009892:	1dfb      	adds	r3, r7, #7
 8009894:	2201      	movs	r2, #1
 8009896:	f004 ffd1 	bl	800e83c <Sensors_I2C_WriteRegister>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <mpu_reset_fifo+0xa6>
            return -1;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	e0a8      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80098a6:	2032      	movs	r0, #50	; 0x32
 80098a8:	f7fb fe6a 	bl	8005580 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80098ac:	23c0      	movs	r3, #192	; 0xc0
 80098ae:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80098b0:	4b53      	ldr	r3, [pc, #332]	; (8009a00 <mpu_reset_fifo+0x200>)
 80098b2:	7a9b      	ldrb	r3, [r3, #10]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	f043 0320 	orr.w	r3, r3, #32
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80098c6:	4b4e      	ldr	r3, [pc, #312]	; (8009a00 <mpu_reset_fifo+0x200>)
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	7818      	ldrb	r0, [r3, #0]
 80098cc:	4b4c      	ldr	r3, [pc, #304]	; (8009a00 <mpu_reset_fifo+0x200>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	7919      	ldrb	r1, [r3, #4]
 80098d2:	1dfb      	adds	r3, r7, #7
 80098d4:	2201      	movs	r2, #1
 80098d6:	f004 ffb1 	bl	800e83c <Sensors_I2C_WriteRegister>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <mpu_reset_fifo+0xe6>
            return -1;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	e088      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 80098e6:	4b46      	ldr	r3, [pc, #280]	; (8009a00 <mpu_reset_fifo+0x200>)
 80098e8:	7c5b      	ldrb	r3, [r3, #17]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 80098ee:	2302      	movs	r3, #2
 80098f0:	71fb      	strb	r3, [r7, #7]
 80098f2:	e001      	b.n	80098f8 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80098f8:	4b41      	ldr	r3, [pc, #260]	; (8009a00 <mpu_reset_fifo+0x200>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	7818      	ldrb	r0, [r3, #0]
 80098fe:	4b40      	ldr	r3, [pc, #256]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	7c59      	ldrb	r1, [r3, #17]
 8009904:	1dfb      	adds	r3, r7, #7
 8009906:	2201      	movs	r2, #1
 8009908:	f004 ff98 	bl	800e83c <Sensors_I2C_WriteRegister>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <mpu_reset_fifo+0x118>
            return -1;
 8009912:	f04f 33ff 	mov.w	r3, #4294967295
 8009916:	e06f      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
        data = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800991c:	4b38      	ldr	r3, [pc, #224]	; (8009a00 <mpu_reset_fifo+0x200>)
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	7818      	ldrb	r0, [r3, #0]
 8009922:	4b37      	ldr	r3, [pc, #220]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	7959      	ldrb	r1, [r3, #5]
 8009928:	1dfb      	adds	r3, r7, #7
 800992a:	2201      	movs	r2, #1
 800992c:	f004 ff86 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d05f      	beq.n	80099f6 <mpu_reset_fifo+0x1f6>
            return -1;
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	e05d      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
    }
    else
    {
        data = BIT_FIFO_RST;
 800993c:	2304      	movs	r3, #4
 800993e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8009940:	4b2f      	ldr	r3, [pc, #188]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	7818      	ldrb	r0, [r3, #0]
 8009946:	4b2e      	ldr	r3, [pc, #184]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	7919      	ldrb	r1, [r3, #4]
 800994c:	1dfb      	adds	r3, r7, #7
 800994e:	2201      	movs	r2, #1
 8009950:	f004 ff74 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d002      	beq.n	8009960 <mpu_reset_fifo+0x160>
            return -1;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295
 800995e:	e04b      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8009960:	4b27      	ldr	r3, [pc, #156]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009962:	7c9b      	ldrb	r3, [r3, #18]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <mpu_reset_fifo+0x174>
 8009968:	4b25      	ldr	r3, [pc, #148]	; (8009a00 <mpu_reset_fifo+0x200>)
 800996a:	7a9b      	ldrb	r3, [r3, #10]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	71fb      	strb	r3, [r7, #7]
 8009978:	e001      	b.n	800997e <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800997a:	2360      	movs	r3, #96	; 0x60
 800997c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800997e:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	7818      	ldrb	r0, [r3, #0]
 8009984:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <mpu_reset_fifo+0x200>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	7919      	ldrb	r1, [r3, #4]
 800998a:	1dfb      	adds	r3, r7, #7
 800998c:	2201      	movs	r2, #1
 800998e:	f004 ff55 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <mpu_reset_fifo+0x19e>
            return -1;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295
 800999c:	e02c      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800999e:	2032      	movs	r0, #50	; 0x32
 80099a0:	f7fb fdee 	bl	8005580 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 80099a4:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <mpu_reset_fifo+0x200>)
 80099a6:	7c5b      	ldrb	r3, [r3, #17]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 80099ac:	2301      	movs	r3, #1
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	e001      	b.n	80099b6 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80099b6:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <mpu_reset_fifo+0x200>)
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	7818      	ldrb	r0, [r3, #0]
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <mpu_reset_fifo+0x200>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	7c59      	ldrb	r1, [r3, #17]
 80099c2:	1dfb      	adds	r3, r7, #7
 80099c4:	2201      	movs	r2, #1
 80099c6:	f004 ff39 	bl	800e83c <Sensors_I2C_WriteRegister>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <mpu_reset_fifo+0x1d6>
            return -1;
 80099d0:	f04f 33ff 	mov.w	r3, #4294967295
 80099d4:	e010      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <mpu_reset_fifo+0x200>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	7818      	ldrb	r0, [r3, #0]
 80099dc:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <mpu_reset_fifo+0x200>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	7959      	ldrb	r1, [r3, #5]
 80099e2:	4b08      	ldr	r3, [pc, #32]	; (8009a04 <mpu_reset_fifo+0x204>)
 80099e4:	2201      	movs	r2, #1
 80099e6:	f004 ff29 	bl	800e83c <Sensors_I2C_WriteRegister>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <mpu_reset_fifo+0x1f6>
            return -1;
 80099f0:	f04f 33ff 	mov.w	r3, #4294967295
 80099f4:	e000      	b.n	80099f8 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	2000000c 	.word	0x2000000c
 8009a04:	2000001c 	.word	0x2000001c

08009a08 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr)
 8009a10:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <mpu_get_gyro_fsr+0x64>)
 8009a12:	7a1b      	ldrb	r3, [r3, #8]
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d81e      	bhi.n	8009a56 <mpu_get_gyro_fsr+0x4e>
 8009a18:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <mpu_get_gyro_fsr+0x18>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a31 	.word	0x08009a31
 8009a24:	08009a39 	.word	0x08009a39
 8009a28:	08009a43 	.word	0x08009a43
 8009a2c:	08009a4d 	.word	0x08009a4d
    {
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	22fa      	movs	r2, #250	; 0xfa
 8009a34:	801a      	strh	r2, [r3, #0]
        break;
 8009a36:	e012      	b.n	8009a5e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009a3e:	801a      	strh	r2, [r3, #0]
        break;
 8009a40:	e00d      	b.n	8009a5e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a48:	801a      	strh	r2, [r3, #0]
        break;
 8009a4a:	e008      	b.n	8009a5e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009a52:	801a      	strh	r2, [r3, #0]
        break;
 8009a54:	e003      	b.n	8009a5e <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	801a      	strh	r2, [r3, #0]
        break;
 8009a5c:	bf00      	nop
    }
    return 0;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	2000000c 	.word	0x2000000c

08009a70 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8009a7a:	4b26      	ldr	r3, [pc, #152]	; (8009b14 <mpu_set_gyro_fsr+0xa4>)
 8009a7c:	7a9b      	ldrb	r3, [r3, #10]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <mpu_set_gyro_fsr+0x18>
        return -1;
 8009a82:	f04f 33ff 	mov.w	r3, #4294967295
 8009a86:	e041      	b.n	8009b0c <mpu_set_gyro_fsr+0x9c>

    switch (fsr)
 8009a88:	88fb      	ldrh	r3, [r7, #6]
 8009a8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009a8e:	d017      	beq.n	8009ac0 <mpu_set_gyro_fsr+0x50>
 8009a90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009a94:	dc17      	bgt.n	8009ac6 <mpu_set_gyro_fsr+0x56>
 8009a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a9a:	d00e      	beq.n	8009aba <mpu_set_gyro_fsr+0x4a>
 8009a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aa0:	dc11      	bgt.n	8009ac6 <mpu_set_gyro_fsr+0x56>
 8009aa2:	2bfa      	cmp	r3, #250	; 0xfa
 8009aa4:	d003      	beq.n	8009aae <mpu_set_gyro_fsr+0x3e>
 8009aa6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009aaa:	d003      	beq.n	8009ab4 <mpu_set_gyro_fsr+0x44>
 8009aac:	e00b      	b.n	8009ac6 <mpu_set_gyro_fsr+0x56>
    {
    case 250:
        data = INV_FSR_250DPS << 3;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8009ab2:	e00b      	b.n	8009acc <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	73fb      	strb	r3, [r7, #15]
        break;
 8009ab8:	e008      	b.n	8009acc <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8009aba:	2310      	movs	r3, #16
 8009abc:	73fb      	strb	r3, [r7, #15]
        break;
 8009abe:	e005      	b.n	8009acc <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8009ac0:	2318      	movs	r3, #24
 8009ac2:	73fb      	strb	r3, [r7, #15]
        break;
 8009ac4:	e002      	b.n	8009acc <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8009ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aca:	e01f      	b.n	8009b0c <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8009acc:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <mpu_set_gyro_fsr+0xa4>)
 8009ace:	7a1a      	ldrb	r2, [r3, #8]
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d101      	bne.n	8009ade <mpu_set_gyro_fsr+0x6e>
        return 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e016      	b.n	8009b0c <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8009ade:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <mpu_set_gyro_fsr+0xa4>)
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	7818      	ldrb	r0, [r3, #0]
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <mpu_set_gyro_fsr+0xa4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	7999      	ldrb	r1, [r3, #6]
 8009aea:	f107 030f 	add.w	r3, r7, #15
 8009aee:	2201      	movs	r2, #1
 8009af0:	f004 fea4 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <mpu_set_gyro_fsr+0x90>
        return -1;
 8009afa:	f04f 33ff 	mov.w	r3, #4294967295
 8009afe:	e005      	b.n	8009b0c <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	08db      	lsrs	r3, r3, #3
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <mpu_set_gyro_fsr+0xa4>)
 8009b08:	721a      	strb	r2, [r3, #8]
    return 0;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000000c 	.word	0x2000000c

08009b18 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr)
 8009b20:	4b19      	ldr	r3, [pc, #100]	; (8009b88 <mpu_get_accel_fsr+0x70>)
 8009b22:	7a5b      	ldrb	r3, [r3, #9]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d81b      	bhi.n	8009b60 <mpu_get_accel_fsr+0x48>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <mpu_get_accel_fsr+0x18>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
    {
    case INV_FSR_2G:
        fsr[0] = 2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
        break;
 8009b46:	e00e      	b.n	8009b66 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2204      	movs	r2, #4
 8009b4c:	701a      	strb	r2, [r3, #0]
        break;
 8009b4e:	e00a      	b.n	8009b66 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2208      	movs	r2, #8
 8009b54:	701a      	strb	r2, [r3, #0]
        break;
 8009b56:	e006      	b.n	8009b66 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2210      	movs	r2, #16
 8009b5c:	701a      	strb	r2, [r3, #0]
        break;
 8009b5e:	e002      	b.n	8009b66 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8009b60:	f04f 33ff 	mov.w	r3, #4294967295
 8009b64:	e00a      	b.n	8009b7c <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8009b66:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <mpu_get_accel_fsr+0x70>)
 8009b68:	7cdb      	ldrb	r3, [r3, #19]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	701a      	strb	r2, [r3, #0]
    return 0;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	2000000c 	.word	0x2000000c

08009b8c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8009b96:	4b30      	ldr	r3, [pc, #192]	; (8009c58 <mpu_set_accel_fsr+0xcc>)
 8009b98:	7a9b      	ldrb	r3, [r3, #10]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d102      	bne.n	8009ba4 <mpu_set_accel_fsr+0x18>
        return -1;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	e054      	b.n	8009c4e <mpu_set_accel_fsr+0xc2>

    switch (fsr)
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	3b02      	subs	r3, #2
 8009ba8:	2b0e      	cmp	r3, #14
 8009baa:	d82d      	bhi.n	8009c08 <mpu_set_accel_fsr+0x7c>
 8009bac:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <mpu_set_accel_fsr+0x28>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009bf1 	.word	0x08009bf1
 8009bb8:	08009c09 	.word	0x08009c09
 8009bbc:	08009bf7 	.word	0x08009bf7
 8009bc0:	08009c09 	.word	0x08009c09
 8009bc4:	08009c09 	.word	0x08009c09
 8009bc8:	08009c09 	.word	0x08009c09
 8009bcc:	08009bfd 	.word	0x08009bfd
 8009bd0:	08009c09 	.word	0x08009c09
 8009bd4:	08009c09 	.word	0x08009c09
 8009bd8:	08009c09 	.word	0x08009c09
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	08009c09 	.word	0x08009c09
 8009be4:	08009c09 	.word	0x08009c09
 8009be8:	08009c09 	.word	0x08009c09
 8009bec:	08009c03 	.word	0x08009c03
    {
    case 2:
        data = INV_FSR_2G << 3;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73fb      	strb	r3, [r7, #15]
        break;
 8009bf4:	e00b      	b.n	8009c0e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8009bfa:	e008      	b.n	8009c0e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	73fb      	strb	r3, [r7, #15]
        break;
 8009c00:	e005      	b.n	8009c0e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8009c02:	2318      	movs	r3, #24
 8009c04:	73fb      	strb	r3, [r7, #15]
        break;
 8009c06:	e002      	b.n	8009c0e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8009c08:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0c:	e01f      	b.n	8009c4e <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <mpu_set_accel_fsr+0xcc>)
 8009c10:	7a5a      	ldrb	r2, [r3, #9]
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	08db      	lsrs	r3, r3, #3
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d101      	bne.n	8009c20 <mpu_set_accel_fsr+0x94>
        return 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e016      	b.n	8009c4e <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8009c20:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <mpu_set_accel_fsr+0xcc>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	7818      	ldrb	r0, [r3, #0]
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <mpu_set_accel_fsr+0xcc>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	79d9      	ldrb	r1, [r3, #7]
 8009c2c:	f107 030f 	add.w	r3, r7, #15
 8009c30:	2201      	movs	r2, #1
 8009c32:	f004 fe03 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <mpu_set_accel_fsr+0xb6>
        return -1;
 8009c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c40:	e005      	b.n	8009c4e <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	08db      	lsrs	r3, r3, #3
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <mpu_set_accel_fsr+0xcc>)
 8009c4a:	725a      	strb	r2, [r3, #9]
    return 0;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	2000000c 	.word	0x2000000c

08009c5c <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf)
 8009c64:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <mpu_get_lpf+0x74>)
 8009c66:	7adb      	ldrb	r3, [r3, #11]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d826      	bhi.n	8009cbc <mpu_get_lpf+0x60>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <mpu_get_lpf+0x18>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cb5 	.word	0x08009cb5
    {
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	22bc      	movs	r2, #188	; 0xbc
 8009c90:	801a      	strh	r2, [r3, #0]
        break;
 8009c92:	e017      	b.n	8009cc4 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2262      	movs	r2, #98	; 0x62
 8009c98:	801a      	strh	r2, [r3, #0]
        break;
 8009c9a:	e013      	b.n	8009cc4 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	222a      	movs	r2, #42	; 0x2a
 8009ca0:	801a      	strh	r2, [r3, #0]
        break;
 8009ca2:	e00f      	b.n	8009cc4 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2214      	movs	r2, #20
 8009ca8:	801a      	strh	r2, [r3, #0]
        break;
 8009caa:	e00b      	b.n	8009cc4 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	220a      	movs	r2, #10
 8009cb0:	801a      	strh	r2, [r3, #0]
        break;
 8009cb2:	e007      	b.n	8009cc4 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2205      	movs	r2, #5
 8009cb8:	801a      	strh	r2, [r3, #0]
        break;
 8009cba:	e003      	b.n	8009cc4 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	801a      	strh	r2, [r3, #0]
        break;
 8009cc2:	bf00      	nop
    }
    return 0;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bc80      	pop	{r7}
 8009cce:	4770      	bx	lr
 8009cd0:	2000000c 	.word	0x2000000c

08009cd4 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8009cde:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <mpu_set_lpf+0x98>)
 8009ce0:	7a9b      	ldrb	r3, [r3, #10]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <mpu_set_lpf+0x18>
        return -1;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cea:	e03b      	b.n	8009d64 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8009cec:	88fb      	ldrh	r3, [r7, #6]
 8009cee:	2bbb      	cmp	r3, #187	; 0xbb
 8009cf0:	d902      	bls.n	8009cf8 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	73fb      	strb	r3, [r7, #15]
 8009cf6:	e019      	b.n	8009d2c <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8009cf8:	88fb      	ldrh	r3, [r7, #6]
 8009cfa:	2b61      	cmp	r3, #97	; 0x61
 8009cfc:	d902      	bls.n	8009d04 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	73fb      	strb	r3, [r7, #15]
 8009d02:	e013      	b.n	8009d2c <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8009d04:	88fb      	ldrh	r3, [r7, #6]
 8009d06:	2b29      	cmp	r3, #41	; 0x29
 8009d08:	d902      	bls.n	8009d10 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	73fb      	strb	r3, [r7, #15]
 8009d0e:	e00d      	b.n	8009d2c <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	2b13      	cmp	r3, #19
 8009d14:	d902      	bls.n	8009d1c <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8009d16:	2304      	movs	r3, #4
 8009d18:	73fb      	strb	r3, [r7, #15]
 8009d1a:	e007      	b.n	8009d2c <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8009d1c:	88fb      	ldrh	r3, [r7, #6]
 8009d1e:	2b09      	cmp	r3, #9
 8009d20:	d902      	bls.n	8009d28 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8009d22:	2305      	movs	r3, #5
 8009d24:	73fb      	strb	r3, [r7, #15]
 8009d26:	e001      	b.n	8009d2c <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8009d28:	2306      	movs	r3, #6
 8009d2a:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <mpu_set_lpf+0x98>)
 8009d2e:	7ada      	ldrb	r2, [r3, #11]
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d101      	bne.n	8009d3a <mpu_set_lpf+0x66>
        return 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e014      	b.n	8009d64 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8009d3a:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <mpu_set_lpf+0x98>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	7818      	ldrb	r0, [r3, #0]
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <mpu_set_lpf+0x98>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	7899      	ldrb	r1, [r3, #2]
 8009d46:	f107 030f 	add.w	r3, r7, #15
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f004 fd76 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <mpu_set_lpf+0x88>
        return -1;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5a:	e003      	b.n	8009d64 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8009d5c:	7bfa      	ldrb	r2, [r7, #15]
 8009d5e:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <mpu_set_lpf+0x98>)
 8009d60:	72da      	strb	r2, [r3, #11]
    return 0;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	2000000c 	.word	0x2000000c

08009d70 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8009d78:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <mpu_get_sample_rate+0x2c>)
 8009d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <mpu_get_sample_rate+0x18>
        return -1;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	e004      	b.n	8009d92 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <mpu_get_sample_rate+0x2c>)
 8009d8a:	89da      	ldrh	r2, [r3, #14]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	801a      	strh	r2, [r3, #0]
    return 0;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr
 8009d9c:	2000000c 	.word	0x2000000c

08009da0 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8009daa:	4b2f      	ldr	r3, [pc, #188]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009dac:	7a9b      	ldrb	r3, [r3, #10]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d102      	bne.n	8009db8 <mpu_set_sample_rate+0x18>
        return -1;
 8009db2:	f04f 33ff 	mov.w	r3, #4294967295
 8009db6:	e052      	b.n	8009e5e <mpu_set_sample_rate+0xbe>

    if (st.chip_cfg.dmp_on)
 8009db8:	4b2b      	ldr	r3, [pc, #172]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <mpu_set_sample_rate+0x28>
        return -1;
 8009dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc6:	e04a      	b.n	8009e5e <mpu_set_sample_rate+0xbe>
    else
    {
        if (st.chip_cfg.lp_accel_mode)
 8009dc8:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009dca:	7d1b      	ldrb	r3, [r3, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00e      	beq.n	8009dee <mpu_set_sample_rate+0x4e>
        {
            if (rate && (rate <= 40))
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d008      	beq.n	8009de8 <mpu_set_sample_rate+0x48>
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	2b28      	cmp	r3, #40	; 0x28
 8009dda:	d805      	bhi.n	8009de8 <mpu_set_sample_rate+0x48>
            {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8009ddc:	88fb      	ldrh	r3, [r7, #6]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff fc2e 	bl	8009640 <mpu_lp_accel_mode>
                return 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	e03a      	b.n	8009e5e <mpu_set_sample_rate+0xbe>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8009de8:	2000      	movs	r0, #0
 8009dea:	f7ff fc29 	bl	8009640 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d802      	bhi.n	8009dfa <mpu_set_sample_rate+0x5a>
            rate = 4;
 8009df4:	2304      	movs	r3, #4
 8009df6:	80fb      	strh	r3, [r7, #6]
 8009df8:	e006      	b.n	8009e08 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e00:	d902      	bls.n	8009e08 <mpu_set_sample_rate+0x68>
            rate = 1000;
 8009e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e06:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8009e08:	88fb      	ldrh	r3, [r7, #6]
 8009e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	7818      	ldrb	r0, [r3, #0]
 8009e20:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	7859      	ldrb	r1, [r3, #1]
 8009e26:	f107 030f 	add.w	r3, r7, #15
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f004 fd06 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <mpu_set_sample_rate+0x9c>
            return -1;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	e010      	b.n	8009e5e <mpu_set_sample_rate+0xbe>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009e4c:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8009e4e:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <mpu_set_sample_rate+0xc8>)
 8009e50:	89db      	ldrh	r3, [r3, #14]
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7ff ff3c 	bl	8009cd4 <mpu_set_lpf>
        return 0;
 8009e5c:	2300      	movs	r3, #0
    }
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	2000000c 	.word	0x2000000c

08009e6c <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <mpu_get_fifo_config+0x1c>)
 8009e76:	7c1a      	ldrb	r2, [r3, #16]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	701a      	strb	r2, [r3, #0]
    return 0;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr
 8009e88:	2000000c 	.word	0x2000000c

08009e8c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8009ea2:	4b22      	ldr	r3, [pc, #136]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <mpu_configure_fifo+0x24>
        return 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	e038      	b.n	8009f22 <mpu_configure_fifo+0x96>
    else
    {
        if (!(st.chip_cfg.sensors))
 8009eb0:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009eb2:	7a9b      	ldrb	r3, [r3, #10]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <mpu_configure_fifo+0x32>
            return -1;
 8009eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebc:	e031      	b.n	8009f22 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8009ebe:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009ec0:	7c1b      	ldrb	r3, [r3, #16]
 8009ec2:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8009ec4:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009ec6:	7a9a      	ldrb	r2, [r3, #10]
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	4013      	ands	r3, r2
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	4b17      	ldr	r3, [pc, #92]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009ed0:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8009ed2:	4b16      	ldr	r3, [pc, #88]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009ed4:	7c1b      	ldrb	r3, [r3, #16]
 8009ed6:	79fa      	ldrb	r2, [r7, #7]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d003      	beq.n	8009ee4 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e001      	b.n	8009ee8 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <mpu_configure_fifo+0x6a>
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009ef0:	7d1b      	ldrb	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	f7ff fa9e 	bl	8009438 <set_int_enable>
 8009efc:	e002      	b.n	8009f04 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8009efe:	2000      	movs	r0, #0
 8009f00:	f7ff fa9a 	bl	8009438 <set_int_enable>
        if (sensors)
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <mpu_configure_fifo+0x94>
        {
            if (mpu_reset_fifo())
 8009f0a:	f7ff fc79 	bl	8009800 <mpu_reset_fifo>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <mpu_configure_fifo+0x94>
            {
                st.chip_cfg.fifo_enable = prev;
 8009f14:	4a05      	ldr	r2, [pc, #20]	; (8009f2c <mpu_configure_fifo+0xa0>)
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	7413      	strb	r3, [r2, #16]
                return -1;
 8009f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1e:	e000      	b.n	8009f22 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8009f20:	68fb      	ldr	r3, [r7, #12]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	2000000c 	.word	0x2000000c

08009f30 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8009f44:	2301      	movs	r3, #1
 8009f46:	73fb      	strb	r3, [r7, #15]
 8009f48:	e007      	b.n	8009f5a <mpu_set_sensors+0x2a>
    else if (sensors)
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <mpu_set_sensors+0x26>
        data = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e001      	b.n	8009f5a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8009f56:	2340      	movs	r3, #64	; 0x40
 8009f58:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data))
 8009f5a:	4b37      	ldr	r3, [pc, #220]	; (800a038 <mpu_set_sensors+0x108>)
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	7818      	ldrb	r0, [r3, #0]
 8009f60:	4b35      	ldr	r3, [pc, #212]	; (800a038 <mpu_set_sensors+0x108>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	7d59      	ldrb	r1, [r3, #21]
 8009f66:	f107 030f 	add.w	r3, r7, #15
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f004 fc66 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d005      	beq.n	8009f82 <mpu_set_sensors+0x52>
    {
        st.chip_cfg.sensors = 0;
 8009f76:	4b30      	ldr	r3, [pc, #192]	; (800a038 <mpu_set_sensors+0x108>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	729a      	strb	r2, [r3, #10]
        return -1;
 8009f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f80:	e056      	b.n	800a030 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	4b2b      	ldr	r3, [pc, #172]	; (800a038 <mpu_set_sensors+0x108>)
 8009f8c:	731a      	strb	r2, [r3, #12]

    data = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d104      	bne.n	8009fa6 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	f043 0304 	orr.w	r3, r3, #4
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	f003 0320 	and.w	r3, r3, #32
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	f043 0302 	orr.w	r3, r3, #2
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d104      	bne.n	8009fce <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	f043 0301 	orr.w	r3, r3, #1
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8009fce:	79fb      	ldrb	r3, [r7, #7]
 8009fd0:	f003 0308 	and.w	r3, r3, #8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d104      	bne.n	8009fe2 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data))
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <mpu_set_sensors+0x108>)
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	7818      	ldrb	r0, [r3, #0]
 8009fe8:	4b13      	ldr	r3, [pc, #76]	; (800a038 <mpu_set_sensors+0x108>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	7d99      	ldrb	r1, [r3, #22]
 8009fee:	f107 030f 	add.w	r3, r7, #15
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f004 fc22 	bl	800e83c <Sensors_I2C_WriteRegister>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <mpu_set_sensors+0xda>
    {
        st.chip_cfg.sensors = 0;
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <mpu_set_sensors+0x108>)
 800a000:	2200      	movs	r2, #0
 800a002:	729a      	strb	r2, [r3, #10]
        return -1;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	e012      	b.n	800a030 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800a00a:	79fb      	ldrb	r3, [r7, #7]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <mpu_set_sensors+0xec>
 800a010:	79fb      	ldrb	r3, [r7, #7]
 800a012:	2b08      	cmp	r3, #8
 800a014:	d002      	beq.n	800a01c <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800a016:	2000      	movs	r0, #0
 800a018:	f000 f954 	bl	800a2c4 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 800a01c:	4a06      	ldr	r2, [pc, #24]	; (800a038 <mpu_set_sensors+0x108>)
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800a022:	4b05      	ldr	r3, [pc, #20]	; (800a038 <mpu_set_sensors+0x108>)
 800a024:	2200      	movs	r2, #0
 800a026:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800a028:	2032      	movs	r0, #50	; 0x32
 800a02a:	f7fb faa9 	bl	8005580 <HAL_Delay>
    return 0;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	2000000c 	.word	0x2000000c

0800a03c <mpu_read_fifo_stream>:
 *  @param[in]  length  Length of one FIFO packet.
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data, unsigned char *more)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 800a04a:	4b3a      	ldr	r3, [pc, #232]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a04c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <mpu_read_fifo_stream+0x1e>
        return -1;
 800a054:	f04f 33ff 	mov.w	r3, #4294967295
 800a058:	e067      	b.n	800a12a <mpu_read_fifo_stream+0xee>
    if (!st.chip_cfg.sensors)
 800a05a:	4b36      	ldr	r3, [pc, #216]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a05c:	7a9b      	ldrb	r3, [r3, #10]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <mpu_read_fifo_stream+0x2c>
        return -1;
 800a062:	f04f 33ff 	mov.w	r3, #4294967295
 800a066:	e060      	b.n	800a12a <mpu_read_fifo_stream+0xee>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800a068:	4b32      	ldr	r3, [pc, #200]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	7818      	ldrb	r0, [r3, #0]
 800a06e:	4b31      	ldr	r3, [pc, #196]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	7b19      	ldrb	r1, [r3, #12]
 800a074:	f107 0314 	add.w	r3, r7, #20
 800a078:	2202      	movs	r2, #2
 800a07a:	f004 fb95 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <mpu_read_fifo_stream+0x4e>
        return -1;
 800a084:	f04f 33ff 	mov.w	r3, #4294967295
 800a088:	e04f      	b.n	800a12a <mpu_read_fifo_stream+0xee>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800a08a:	7d3b      	ldrb	r3, [r7, #20]
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	b21a      	sxth	r2, r3
 800a090:	7d7b      	ldrb	r3, [r7, #21]
 800a092:	b21b      	sxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b21b      	sxth	r3, r3
 800a098:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length)
 800a09a:	8afa      	ldrh	r2, [r7, #22]
 800a09c:	89fb      	ldrh	r3, [r7, #14]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d205      	bcs.n	800a0ae <mpu_read_fifo_stream+0x72>
    {
        more[0] = 0;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
        return -1;
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ac:	e03d      	b.n	800a12a <mpu_read_fifo_stream+0xee>
    }
    if (fifo_count > (st.hw->max_fifo >> 1))
 800a0ae:	4b21      	ldr	r3, [pc, #132]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	885b      	ldrh	r3, [r3, #2]
 800a0b4:	085b      	lsrs	r3, r3, #1
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	8afa      	ldrh	r2, [r7, #22]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d91a      	bls.n	800a0f4 <mpu_read_fifo_stream+0xb8>
    {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800a0be:	4b1d      	ldr	r3, [pc, #116]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	7818      	ldrb	r0, [r3, #0]
 800a0c4:	4b1b      	ldr	r3, [pc, #108]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	7cd9      	ldrb	r1, [r3, #19]
 800a0ca:	f107 0314 	add.w	r3, r7, #20
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f004 fb6a 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <mpu_read_fifo_stream+0xa4>
            return -1;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	e024      	b.n	800a12a <mpu_read_fifo_stream+0xee>
        if (tmp[0] & BIT_FIFO_OVERFLOW)
 800a0e0:	7d3b      	ldrb	r3, [r7, #20]
 800a0e2:	f003 0310 	and.w	r3, r3, #16
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <mpu_read_fifo_stream+0xb8>
        {
            mpu_reset_fifo();
 800a0ea:	f7ff fb89 	bl	8009800 <mpu_reset_fifo>
            return -2;
 800a0ee:	f06f 0301 	mvn.w	r3, #1
 800a0f2:	e01a      	b.n	800a12a <mpu_read_fifo_stream+0xee>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800a0f4:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	7818      	ldrb	r0, [r3, #0]
 800a0fa:	4b0e      	ldr	r3, [pc, #56]	; (800a134 <mpu_read_fifo_stream+0xf8>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	7b59      	ldrb	r1, [r3, #13]
 800a100:	89fa      	ldrh	r2, [r7, #14]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	f004 fb50 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <mpu_read_fifo_stream+0xd8>
        return -1;
 800a10e:	f04f 33ff 	mov.w	r3, #4294967295
 800a112:	e00a      	b.n	800a12a <mpu_read_fifo_stream+0xee>
    more[0] = fifo_count / length - 1;
 800a114:	8afa      	ldrh	r2, [r7, #22]
 800a116:	89fb      	ldrh	r3, [r7, #14]
 800a118:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	b2da      	uxtb	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	701a      	strb	r2, [r3, #0]
    return 0;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	2000000c 	.word	0x2000000c

0800a138 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800a142:	4b5f      	ldr	r3, [pc, #380]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a144:	7c9b      	ldrb	r3, [r3, #18]
 800a146:	79fa      	ldrb	r2, [r7, #7]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d101      	bne.n	800a150 <mpu_set_bypass+0x18>
        return 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	e0b2      	b.n	800a2b6 <mpu_set_bypass+0x17e>

    if (bypass_on)
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d050      	beq.n	800a1f8 <mpu_set_bypass+0xc0>
    {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800a156:	4b5a      	ldr	r3, [pc, #360]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	7818      	ldrb	r0, [r3, #0]
 800a15c:	4b58      	ldr	r3, [pc, #352]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	7919      	ldrb	r1, [r3, #4]
 800a162:	f107 030f 	add.w	r3, r7, #15
 800a166:	2201      	movs	r2, #1
 800a168:	f004 fb1e 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <mpu_set_bypass+0x40>
            return -1;
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	e09e      	b.n	800a2b6 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	f023 0320 	bic.w	r3, r3, #32
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800a182:	4b4f      	ldr	r3, [pc, #316]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	7818      	ldrb	r0, [r3, #0]
 800a188:	4b4d      	ldr	r3, [pc, #308]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	7919      	ldrb	r1, [r3, #4]
 800a18e:	f107 030f 	add.w	r3, r7, #15
 800a192:	2201      	movs	r2, #1
 800a194:	f004 fb52 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <mpu_set_bypass+0x6c>
            return -1;
 800a19e:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a2:	e088      	b.n	800a2b6 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800a1a4:	2003      	movs	r0, #3
 800a1a6:	f7fb f9eb 	bl	8005580 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800a1ae:	4b44      	ldr	r3, [pc, #272]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a1b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800a1c2:	4b3f      	ldr	r3, [pc, #252]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a1c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800a1d6:	4b3a      	ldr	r3, [pc, #232]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	7818      	ldrb	r0, [r3, #0]
 800a1dc:	4b38      	ldr	r3, [pc, #224]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	7dd9      	ldrb	r1, [r3, #23]
 800a1e2:	f107 030f 	add.w	r3, r7, #15
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f004 fb28 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d05d      	beq.n	800a2ae <mpu_set_bypass+0x176>
            return -1;
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f6:	e05e      	b.n	800a2b6 <mpu_set_bypass+0x17e>
    }
    else
    {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800a1f8:	4b31      	ldr	r3, [pc, #196]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	7818      	ldrb	r0, [r3, #0]
 800a1fe:	4b30      	ldr	r3, [pc, #192]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	7919      	ldrb	r1, [r3, #4]
 800a204:	f107 030f 	add.w	r3, r7, #15
 800a208:	2201      	movs	r2, #1
 800a20a:	f004 facd 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <mpu_set_bypass+0xe2>
            return -1;
 800a214:	f04f 33ff 	mov.w	r3, #4294967295
 800a218:	e04d      	b.n	800a2b6 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800a21a:	4b29      	ldr	r3, [pc, #164]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a21c:	7a9b      	ldrb	r3, [r3, #10]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	f043 0320 	orr.w	r3, r3, #32
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	73fb      	strb	r3, [r7, #15]
 800a230:	e004      	b.n	800a23c <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	f023 0320 	bic.w	r3, r3, #32
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800a23c:	4b20      	ldr	r3, [pc, #128]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	7818      	ldrb	r0, [r3, #0]
 800a242:	4b1f      	ldr	r3, [pc, #124]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	7919      	ldrb	r1, [r3, #4]
 800a248:	f107 030f 	add.w	r3, r7, #15
 800a24c:	2201      	movs	r2, #1
 800a24e:	f004 faf5 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <mpu_set_bypass+0x126>
            return -1;
 800a258:	f04f 33ff 	mov.w	r3, #4294967295
 800a25c:	e02b      	b.n	800a2b6 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800a25e:	2003      	movs	r0, #3
 800a260:	f7fb f98e 	bl	8005580 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a266:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800a26e:	2380      	movs	r3, #128	; 0x80
 800a270:	73fb      	strb	r3, [r7, #15]
 800a272:	e001      	b.n	800a278 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800a278:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a27a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800a28c:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	7818      	ldrb	r0, [r3, #0]
 800a292:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	7dd9      	ldrb	r1, [r3, #23]
 800a298:	f107 030f 	add.w	r3, r7, #15
 800a29c:	2201      	movs	r2, #1
 800a29e:	f004 facd 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <mpu_set_bypass+0x176>
            return -1;
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	e003      	b.n	800a2b6 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800a2ae:	4a04      	ldr	r2, [pc, #16]	; (800a2c0 <mpu_set_bypass+0x188>)
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	7493      	strb	r3, [r2, #18]
    return 0;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000000c 	.word	0x2000000c

0800a2c4 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800a2ce:	4b1e      	ldr	r3, [pc, #120]	; (800a348 <mpu_set_int_latched+0x84>)
 800a2d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a2d4:	79fa      	ldrb	r2, [r7, #7]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d101      	bne.n	800a2de <mpu_set_int_latched+0x1a>
        return 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e030      	b.n	800a340 <mpu_set_int_latched+0x7c>

    if (enable)
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800a2e4:	2330      	movs	r3, #48	; 0x30
 800a2e6:	73fb      	strb	r3, [r7, #15]
 800a2e8:	e001      	b.n	800a2ee <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800a2ee:	4b16      	ldr	r3, [pc, #88]	; (800a348 <mpu_set_int_latched+0x84>)
 800a2f0:	7c9b      	ldrb	r3, [r3, #18]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d004      	beq.n	800a300 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	f043 0302 	orr.w	r3, r3, #2
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800a300:	4b11      	ldr	r3, [pc, #68]	; (800a348 <mpu_set_int_latched+0x84>)
 800a302:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a310:	b2db      	uxtb	r3, r3
 800a312:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800a314:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <mpu_set_int_latched+0x84>)
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	7818      	ldrb	r0, [r3, #0]
 800a31a:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <mpu_set_int_latched+0x84>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	7dd9      	ldrb	r1, [r3, #23]
 800a320:	f107 030f 	add.w	r3, r7, #15
 800a324:	2201      	movs	r2, #1
 800a326:	f004 fa89 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <mpu_set_int_latched+0x72>
        return -1;
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	e004      	b.n	800a340 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 800a336:	4a04      	ldr	r2, [pc, #16]	; (800a348 <mpu_set_int_latched+0x84>)
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	2000000c 	.word	0x2000000c

0800a34c <mpu_write_mem>:
 *  @param[in]  length      Number of bytes to write.
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length, unsigned char *data)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	603a      	str	r2, [r7, #0]
 800a356:	80fb      	strh	r3, [r7, #6]
 800a358:	460b      	mov	r3, r1
 800a35a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d102      	bne.n	800a368 <mpu_write_mem+0x1c>
        return -1;
 800a362:	f04f 33ff 	mov.w	r3, #4294967295
 800a366:	e03c      	b.n	800a3e2 <mpu_write_mem+0x96>
    if (!st.chip_cfg.sensors)
 800a368:	4b20      	ldr	r3, [pc, #128]	; (800a3ec <mpu_write_mem+0xa0>)
 800a36a:	7a9b      	ldrb	r3, [r3, #10]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <mpu_write_mem+0x2a>
        return -1;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	e035      	b.n	800a3e2 <mpu_write_mem+0x96>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	0a1b      	lsrs	r3, r3, #8
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800a386:	7b7b      	ldrb	r3, [r7, #13]
 800a388:	461a      	mov	r2, r3
 800a38a:	88bb      	ldrh	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	4a17      	ldr	r2, [pc, #92]	; (800a3ec <mpu_write_mem+0xa0>)
 800a390:	6852      	ldr	r2, [r2, #4]
 800a392:	8952      	ldrh	r2, [r2, #10]
 800a394:	4293      	cmp	r3, r2
 800a396:	dd02      	ble.n	800a39e <mpu_write_mem+0x52>
        return -1;
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	e021      	b.n	800a3e2 <mpu_write_mem+0x96>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <mpu_write_mem+0xa0>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	7818      	ldrb	r0, [r3, #0]
 800a3a4:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <mpu_write_mem+0xa0>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	7ed9      	ldrb	r1, [r3, #27]
 800a3aa:	f107 030c 	add.w	r3, r7, #12
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	f004 fa44 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <mpu_write_mem+0x74>
        return -1;
 800a3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a3be:	e010      	b.n	800a3e2 <mpu_write_mem+0x96>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <mpu_write_mem+0xa0>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	7818      	ldrb	r0, [r3, #0]
 800a3c6:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <mpu_write_mem+0xa0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	7e19      	ldrb	r1, [r3, #24]
 800a3cc:	88ba      	ldrh	r2, [r7, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f004 fa34 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <mpu_write_mem+0x94>
        return -1;
 800a3da:	f04f 33ff 	mov.w	r3, #4294967295
 800a3de:	e000      	b.n	800a3e2 <mpu_write_mem+0x96>
    return 0;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000000c 	.word	0x2000000c

0800a3f0 <mpu_read_mem>:
 *  @param[in]  length      Number of bytes to read.
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length, unsigned char *data)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	603a      	str	r2, [r7, #0]
 800a3fa:	80fb      	strh	r3, [r7, #6]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d102      	bne.n	800a40c <mpu_read_mem+0x1c>
        return -1;
 800a406:	f04f 33ff 	mov.w	r3, #4294967295
 800a40a:	e03c      	b.n	800a486 <mpu_read_mem+0x96>
    if (!st.chip_cfg.sensors)
 800a40c:	4b20      	ldr	r3, [pc, #128]	; (800a490 <mpu_read_mem+0xa0>)
 800a40e:	7a9b      	ldrb	r3, [r3, #10]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <mpu_read_mem+0x2a>
        return -1;
 800a414:	f04f 33ff 	mov.w	r3, #4294967295
 800a418:	e035      	b.n	800a486 <mpu_read_mem+0x96>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	0a1b      	lsrs	r3, r3, #8
 800a41e:	b29b      	uxth	r3, r3
 800a420:	b2db      	uxtb	r3, r3
 800a422:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800a42a:	7b7b      	ldrb	r3, [r7, #13]
 800a42c:	461a      	mov	r2, r3
 800a42e:	88bb      	ldrh	r3, [r7, #4]
 800a430:	4413      	add	r3, r2
 800a432:	4a17      	ldr	r2, [pc, #92]	; (800a490 <mpu_read_mem+0xa0>)
 800a434:	6852      	ldr	r2, [r2, #4]
 800a436:	8952      	ldrh	r2, [r2, #10]
 800a438:	4293      	cmp	r3, r2
 800a43a:	dd02      	ble.n	800a442 <mpu_read_mem+0x52>
        return -1;
 800a43c:	f04f 33ff 	mov.w	r3, #4294967295
 800a440:	e021      	b.n	800a486 <mpu_read_mem+0x96>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <mpu_read_mem+0xa0>)
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	7818      	ldrb	r0, [r3, #0]
 800a448:	4b11      	ldr	r3, [pc, #68]	; (800a490 <mpu_read_mem+0xa0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	7ed9      	ldrb	r1, [r3, #27]
 800a44e:	f107 030c 	add.w	r3, r7, #12
 800a452:	2202      	movs	r2, #2
 800a454:	f004 f9f2 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <mpu_read_mem+0x74>
        return -1;
 800a45e:	f04f 33ff 	mov.w	r3, #4294967295
 800a462:	e010      	b.n	800a486 <mpu_read_mem+0x96>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800a464:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <mpu_read_mem+0xa0>)
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	7818      	ldrb	r0, [r3, #0]
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <mpu_read_mem+0xa0>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	7e19      	ldrb	r1, [r3, #24]
 800a470:	88ba      	ldrh	r2, [r7, #4]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	f004 f998 	bl	800e7a8 <Sensors_I2C_ReadRegister>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <mpu_read_mem+0x94>
        return -1;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	e000      	b.n	800a486 <mpu_read_mem+0x96>
    return 0;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	2000000c 	.word	0x2000000c

0800a494 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware, unsigned short start_addr,
                      unsigned short sample_rate)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	; 0x28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	4611      	mov	r1, r2
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	81fb      	strh	r3, [r7, #14]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	81bb      	strh	r3, [r7, #12]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800a4ac:	4b37      	ldr	r3, [pc, #220]	; (800a58c <mpu_load_firmware+0xf8>)
 800a4ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	e062      	b.n	800a582 <mpu_load_firmware+0xee>

    if (!firmware)
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <mpu_load_firmware+0x34>
        return -1;
 800a4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c6:	e05c      	b.n	800a582 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a4cc:	e034      	b.n	800a538 <mpu_load_firmware+0xa4>
    {
        this_write = min(LOAD_CHUNK, length - ii);
 800a4ce:	89fa      	ldrh	r2, [r7, #14]
 800a4d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b10      	cmp	r3, #16
 800a4d6:	bfa8      	it	ge
 800a4d8:	2310      	movge	r3, #16
 800a4da:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char *)&firmware[ii]))
 800a4dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	441a      	add	r2, r3
 800a4e2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800a4e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff ff30 	bl	800a34c <mpu_write_mem>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <mpu_load_firmware+0x64>
            return -1;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	e044      	b.n	800a582 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 800a4f8:	f107 0214 	add.w	r2, r7, #20
 800a4fc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800a4fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff ff75 	bl	800a3f0 <mpu_read_mem>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <mpu_load_firmware+0x7e>
            return -1;
 800a50c:	f04f 33ff 	mov.w	r3, #4294967295
 800a510:	e037      	b.n	800a582 <mpu_load_firmware+0xee>
        if (memcmp(firmware + ii, cur, this_write))
 800a512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	4413      	add	r3, r2
 800a518:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a51a:	f107 0114 	add.w	r1, r7, #20
 800a51e:	4618      	mov	r0, r3
 800a520:	f007 fa90 	bl	8011a44 <memcmp>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <mpu_load_firmware+0x9c>
            return -2;
 800a52a:	f06f 0301 	mvn.w	r3, #1
 800a52e:	e028      	b.n	800a582 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write)
 800a530:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a534:	4413      	add	r3, r2
 800a536:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a538:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a53a:	89fb      	ldrh	r3, [r7, #14]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d3c6      	bcc.n	800a4ce <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800a540:	89bb      	ldrh	r3, [r7, #12]
 800a542:	0a1b      	lsrs	r3, r3, #8
 800a544:	b29b      	uxth	r3, r3
 800a546:	b2db      	uxtb	r3, r3
 800a548:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800a54a:	89bb      	ldrh	r3, [r7, #12]
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800a550:	4b0e      	ldr	r3, [pc, #56]	; (800a58c <mpu_load_firmware+0xf8>)
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	7818      	ldrb	r0, [r3, #0]
 800a556:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <mpu_load_firmware+0xf8>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	7f59      	ldrb	r1, [r3, #29]
 800a55c:	f107 0310 	add.w	r3, r7, #16
 800a560:	2202      	movs	r2, #2
 800a562:	f004 f96b 	bl	800e83c <Sensors_I2C_WriteRegister>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <mpu_load_firmware+0xde>
        return -1;
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
 800a570:	e007      	b.n	800a582 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <mpu_load_firmware+0xf8>)
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800a57a:	4a04      	ldr	r2, [pc, #16]	; (800a58c <mpu_load_firmware+0xf8>)
 800a57c:	88fb      	ldrh	r3, [r7, #6]
 800a57e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3728      	adds	r7, #40	; 0x28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2000000c 	.word	0x2000000c

0800a590 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800a59a:	4b26      	ldr	r3, [pc, #152]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a59c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5a0:	79fa      	ldrb	r2, [r7, #7]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d101      	bne.n	800a5aa <mpu_set_dmp_state+0x1a>
        return 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e040      	b.n	800a62c <mpu_set_dmp_state+0x9c>

    if (enable)
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d027      	beq.n	800a600 <mpu_set_dmp_state+0x70>
    {
        if (!st.chip_cfg.dmp_loaded)
 800a5b0:	4b20      	ldr	r3, [pc, #128]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a5b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <mpu_set_dmp_state+0x30>
            return -1;
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	e035      	b.n	800a62c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	f7fe ff39 	bl	8009438 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f7ff fdb6 	bl	800a138 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800a5cc:	4b19      	ldr	r3, [pc, #100]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a5ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff fbe5 	bl	8009da0 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	7818      	ldrb	r0, [r3, #0]
 800a5e0:	f107 030f 	add.w	r3, r7, #15
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	2123      	movs	r1, #35	; 0x23
 800a5e8:	f004 f928 	bl	800e83c <Sensors_I2C_WriteRegister>
        st.chip_cfg.dmp_on = 1;
 800a5ec:	4b11      	ldr	r3, [pc, #68]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	f7fe ff1f 	bl	8009438 <set_int_enable>
        mpu_reset_fifo();
 800a5fa:	f7ff f901 	bl	8009800 <mpu_reset_fifo>
 800a5fe:	e014      	b.n	800a62a <mpu_set_dmp_state+0x9a>
    }
    else
    {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800a600:	2000      	movs	r0, #0
 800a602:	f7fe ff19 	bl	8009438 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800a606:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a608:	7c1b      	ldrb	r3, [r3, #16]
 800a60a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800a60c:	4b09      	ldr	r3, [pc, #36]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	7818      	ldrb	r0, [r3, #0]
 800a612:	f107 030f 	add.w	r3, r7, #15
 800a616:	2201      	movs	r2, #1
 800a618:	2123      	movs	r1, #35	; 0x23
 800a61a:	f004 f90f 	bl	800e83c <Sensors_I2C_WriteRegister>
        st.chip_cfg.dmp_on = 0;
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <mpu_set_dmp_state+0xa4>)
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 800a626:	f7ff f8eb 	bl	8009800 <mpu_reset_fifo>
    }
    return 0;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	2000000c 	.word	0x2000000c

0800a638 <mpu_lp_motion_interrupt>:
 *                          exceed @e thresh before motion is reported.
 *  @param[in]  lpa_freq    Minimum sampling rate, or zero to disable.
 *  @return     0 if successful.
 */
int mpu_lp_motion_interrupt(unsigned short thresh, unsigned char time, unsigned short lpa_freq)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	80fb      	strh	r3, [r7, #6]
 800a642:	460b      	mov	r3, r1
 800a644:	717b      	strb	r3, [r7, #5]
 800a646:	4613      	mov	r3, r2
 800a648:	807b      	strh	r3, [r7, #2]

#if defined MPU6500
    unsigned char data[3];
#endif
    if (lpa_freq)
 800a64a:	887b      	ldrh	r3, [r7, #2]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d02d      	beq.n	800a6ac <mpu_lp_motion_interrupt+0x74>
            thresh_hw = 1;
        else
            thresh_hw = thresh >> 2;
#endif

        if (!time)
 800a650:	797b      	ldrb	r3, [r7, #5]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <mpu_lp_motion_interrupt+0x22>
            /* Minimum duration must be 1ms. */
            time = 1;
 800a656:	2301      	movs	r3, #1
 800a658:	717b      	strb	r3, [r7, #5]
             * function can safely exit.
             */
            return -1;
#endif

        if (!st.chip_cfg.int_motion_only)
 800a65a:	4b41      	ldr	r3, [pc, #260]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a65c:	7d5b      	ldrb	r3, [r3, #21]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d139      	bne.n	800a6d6 <mpu_lp_motion_interrupt+0x9e>
        {
            /* Store current settings for later. */
            if (st.chip_cfg.dmp_on)
 800a662:	4b3f      	ldr	r3, [pc, #252]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <mpu_lp_motion_interrupt+0x44>
            {
                mpu_set_dmp_state(0);
 800a66c:	2000      	movs	r0, #0
 800a66e:	f7ff ff8f 	bl	800a590 <mpu_set_dmp_state>
                st.chip_cfg.cache.dmp_on = 1;
 800a672:	4b3b      	ldr	r3, [pc, #236]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2020 	strb.w	r2, [r3, #32]
 800a67a:	e003      	b.n	800a684 <mpu_lp_motion_interrupt+0x4c>
            }
            else
                st.chip_cfg.cache.dmp_on = 0;
 800a67c:	4b38      	ldr	r3, [pc, #224]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2020 	strb.w	r2, [r3, #32]
            mpu_get_gyro_fsr(&st.chip_cfg.cache.gyro_fsr);
 800a684:	4837      	ldr	r0, [pc, #220]	; (800a764 <mpu_lp_motion_interrupt+0x12c>)
 800a686:	f7ff f9bf 	bl	8009a08 <mpu_get_gyro_fsr>
            mpu_get_accel_fsr(&st.chip_cfg.cache.accel_fsr);
 800a68a:	4837      	ldr	r0, [pc, #220]	; (800a768 <mpu_lp_motion_interrupt+0x130>)
 800a68c:	f7ff fa44 	bl	8009b18 <mpu_get_accel_fsr>
            mpu_get_lpf(&st.chip_cfg.cache.lpf);
 800a690:	4836      	ldr	r0, [pc, #216]	; (800a76c <mpu_lp_motion_interrupt+0x134>)
 800a692:	f7ff fae3 	bl	8009c5c <mpu_get_lpf>
            mpu_get_sample_rate(&st.chip_cfg.cache.sample_rate);
 800a696:	4836      	ldr	r0, [pc, #216]	; (800a770 <mpu_lp_motion_interrupt+0x138>)
 800a698:	f7ff fb6a 	bl	8009d70 <mpu_get_sample_rate>
            st.chip_cfg.cache.sensors_on = st.chip_cfg.sensors;
 800a69c:	4b30      	ldr	r3, [pc, #192]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a69e:	7a9a      	ldrb	r2, [r3, #10]
 800a6a0:	4b2f      	ldr	r3, [pc, #188]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6a2:	779a      	strb	r2, [r3, #30]
            mpu_get_fifo_config(&st.chip_cfg.cache.fifo_sensors);
 800a6a4:	4833      	ldr	r0, [pc, #204]	; (800a774 <mpu_lp_motion_interrupt+0x13c>)
 800a6a6:	f7ff fbe1 	bl	8009e6c <mpu_get_fifo_config>
 800a6aa:	e014      	b.n	800a6d6 <mpu_lp_motion_interrupt+0x9e>
    }
    else
    {
        /* Don't "restore" the previous state if no state has been saved. */
        unsigned int ii;
        char *cache_ptr = (char *)&st.chip_cfg.cache;
 800a6ac:	4b2d      	ldr	r3, [pc, #180]	; (800a764 <mpu_lp_motion_interrupt+0x12c>)
 800a6ae:	60bb      	str	r3, [r7, #8]
        for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	e008      	b.n	800a6c8 <mpu_lp_motion_interrupt+0x90>
        {
            if (cache_ptr[ii] != 0)
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d108      	bne.n	800a6d4 <mpu_lp_motion_interrupt+0x9c>
        for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b0b      	cmp	r3, #11
 800a6cc:	d9f3      	bls.n	800a6b6 <mpu_lp_motion_interrupt+0x7e>
                goto lp_int_restore;
        }
        /* If we reach this point, motion interrupt mode hasn't been used yet. */
        return -1;
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	e040      	b.n	800a756 <mpu_lp_motion_interrupt+0x11e>
                goto lp_int_restore;
 800a6d4:	bf00      	nop
    }
lp_int_restore:
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800a6d6:	4b22      	ldr	r3, [pc, #136]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6d8:	22ff      	movs	r2, #255	; 0xff
 800a6da:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800a6dc:	4b20      	ldr	r3, [pc, #128]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6de:	22ff      	movs	r2, #255	; 0xff
 800a6e0:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800a6e2:	4b1f      	ldr	r3, [pc, #124]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ee:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800a6f0:	4b1b      	ldr	r3, [pc, #108]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6f2:	22ff      	movs	r2, #255	; 0xff
 800a6f4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6f8:	22ff      	movs	r2, #255	; 0xff
 800a6fa:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800a6fc:	4b18      	ldr	r3, [pc, #96]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	731a      	strb	r2, [r3, #12]
    mpu_set_sensors(st.chip_cfg.cache.sensors_on);
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a704:	7f9b      	ldrb	r3, [r3, #30]
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fc12 	bl	8009f30 <mpu_set_sensors>
    mpu_set_gyro_fsr(st.chip_cfg.cache.gyro_fsr);
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a70e:	8adb      	ldrh	r3, [r3, #22]
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff f9ad 	bl	8009a70 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(st.chip_cfg.cache.accel_fsr);
 800a716:	4b12      	ldr	r3, [pc, #72]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a718:	7e1b      	ldrb	r3, [r3, #24]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fa36 	bl	8009b8c <mpu_set_accel_fsr>
    mpu_set_lpf(st.chip_cfg.cache.lpf);
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a722:	8b5b      	ldrh	r3, [r3, #26]
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff fad5 	bl	8009cd4 <mpu_set_lpf>
    mpu_set_sample_rate(st.chip_cfg.cache.sample_rate);
 800a72a:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a72c:	8b9b      	ldrh	r3, [r3, #28]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fb36 	bl	8009da0 <mpu_set_sample_rate>
    mpu_configure_fifo(st.chip_cfg.cache.fifo_sensors);
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a736:	7fdb      	ldrb	r3, [r3, #31]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fba7 	bl	8009e8c <mpu_configure_fifo>

    if (st.chip_cfg.cache.dmp_on)
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a740:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <mpu_lp_motion_interrupt+0x116>
        mpu_set_dmp_state(1);
 800a748:	2001      	movs	r0, #1
 800a74a:	f7ff ff21 	bl	800a590 <mpu_set_dmp_state>
    data[0] = 0;
    if (i2c_write(st.hw->addr, st.reg->accel_intel, 1, data))
        goto lp_int_restore;
#endif

    st.chip_cfg.int_motion_only = 0;
 800a74e:	4b04      	ldr	r3, [pc, #16]	; (800a760 <mpu_lp_motion_interrupt+0x128>)
 800a750:	2200      	movs	r2, #0
 800a752:	755a      	strb	r2, [r3, #21]
    return 0;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	2000000c 	.word	0x2000000c
 800a764:	20000022 	.word	0x20000022
 800a768:	20000024 	.word	0x20000024
 800a76c:	20000026 	.word	0x20000026
 800a770:	20000028 	.word	0x20000028
 800a774:	2000002b 	.word	0x2000002b

0800a778 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress, DMP_SAMPLE_RATE);
 800a77c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a780:	23c8      	movs	r3, #200	; 0xc8
 800a782:	4904      	ldr	r1, [pc, #16]	; (800a794 <dmp_load_motion_driver_firmware+0x1c>)
 800a784:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800a788:	f7ff fe84 	bl	800a494 <mpu_load_firmware>
 800a78c:	4603      	mov	r3, r0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	0801594c 	.word	0x0801594c

0800a798 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800a7a2:	4a6e      	ldr	r2, [pc, #440]	; (800a95c <dmp_set_orientation+0x1c4>)
 800a7a4:	f107 0314 	add.w	r3, r7, #20
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	8019      	strh	r1, [r3, #0]
 800a7ae:	3302      	adds	r3, #2
 800a7b0:	0c12      	lsrs	r2, r2, #16
 800a7b2:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800a7b4:	4a6a      	ldr	r2, [pc, #424]	; (800a960 <dmp_set_orientation+0x1c8>)
 800a7b6:	f107 0310 	add.w	r3, r7, #16
 800a7ba:	6812      	ldr	r2, [r2, #0]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	8019      	strh	r1, [r3, #0]
 800a7c0:	3302      	adds	r3, #2
 800a7c2:	0c12      	lsrs	r2, r2, #16
 800a7c4:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800a7c6:	4a67      	ldr	r2, [pc, #412]	; (800a964 <dmp_set_orientation+0x1cc>)
 800a7c8:	f107 030c 	add.w	r3, r7, #12
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	8019      	strh	r1, [r3, #0]
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	0c12      	lsrs	r2, r2, #16
 800a7d6:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800a7d8:	4a63      	ldr	r2, [pc, #396]	; (800a968 <dmp_set_orientation+0x1d0>)
 800a7da:	f107 0308 	add.w	r3, r7, #8
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	8019      	strh	r1, [r3, #0]
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	0c12      	lsrs	r2, r2, #16
 800a7e8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800a7ea:	88fb      	ldrh	r3, [r7, #6]
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	3320      	adds	r3, #32
 800a7f2:	443b      	add	r3, r7
 800a7f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a7f8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	08db      	lsrs	r3, r3, #3
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	f003 0303 	and.w	r3, r3, #3
 800a804:	3320      	adds	r3, #32
 800a806:	443b      	add	r3, r7
 800a808:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a80c:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800a80e:	88fb      	ldrh	r3, [r7, #6]
 800a810:	099b      	lsrs	r3, r3, #6
 800a812:	b29b      	uxth	r3, r3
 800a814:	f003 0303 	and.w	r3, r3, #3
 800a818:	3320      	adds	r3, #32
 800a81a:	443b      	add	r3, r7
 800a81c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a820:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800a822:	88fb      	ldrh	r3, [r7, #6]
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	3320      	adds	r3, #32
 800a82a:	443b      	add	r3, r7
 800a82c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a830:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800a832:	88fb      	ldrh	r3, [r7, #6]
 800a834:	08db      	lsrs	r3, r3, #3
 800a836:	b29b      	uxth	r3, r3
 800a838:	f003 0303 	and.w	r3, r3, #3
 800a83c:	3320      	adds	r3, #32
 800a83e:	443b      	add	r3, r7
 800a840:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a844:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	099b      	lsrs	r3, r3, #6
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	3320      	adds	r3, #32
 800a852:	443b      	add	r3, r7
 800a854:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a858:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800a85a:	f107 031c 	add.w	r3, r7, #28
 800a85e:	461a      	mov	r2, r3
 800a860:	2103      	movs	r1, #3
 800a862:	f240 4026 	movw	r0, #1062	; 0x426
 800a866:	f7ff fd71 	bl	800a34c <mpu_write_mem>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <dmp_set_orientation+0xde>
        return -1;
 800a870:	f04f 33ff 	mov.w	r3, #4294967295
 800a874:	e06e      	b.n	800a954 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800a876:	f107 0318 	add.w	r3, r7, #24
 800a87a:	461a      	mov	r2, r3
 800a87c:	2103      	movs	r1, #3
 800a87e:	f240 402a 	movw	r0, #1066	; 0x42a
 800a882:	f7ff fd63 	bl	800a34c <mpu_write_mem>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <dmp_set_orientation+0xfa>
        return -1;
 800a88c:	f04f 33ff 	mov.w	r3, #4294967295
 800a890:	e060      	b.n	800a954 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800a892:	f107 031c 	add.w	r3, r7, #28
 800a896:	f107 020c 	add.w	r2, r7, #12
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	4611      	mov	r1, r2
 800a89e:	8019      	strh	r1, [r3, #0]
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	0c12      	lsrs	r2, r2, #16
 800a8a4:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800a8a6:	f107 0318 	add.w	r3, r7, #24
 800a8aa:	f107 0208 	add.w	r2, r7, #8
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	8019      	strh	r1, [r3, #0]
 800a8b4:	3302      	adds	r3, #2
 800a8b6:	0c12      	lsrs	r2, r2, #16
 800a8b8:	701a      	strb	r2, [r3, #0]
    if (orient & 4)
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <dmp_set_orientation+0x140>
    {
        gyro_regs[0] |= 1;
 800a8c4:	7f3b      	ldrb	r3, [r7, #28]
 800a8c6:	f043 0301 	orr.w	r3, r3, #1
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800a8ce:	7e3b      	ldrb	r3, [r7, #24]
 800a8d0:	f043 0301 	orr.w	r3, r3, #1
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20)
 800a8d8:	88fb      	ldrh	r3, [r7, #6]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d009      	beq.n	800a8f6 <dmp_set_orientation+0x15e>
    {
        gyro_regs[1] |= 1;
 800a8e2:	7f7b      	ldrb	r3, [r7, #29]
 800a8e4:	f043 0301 	orr.w	r3, r3, #1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800a8ec:	7e7b      	ldrb	r3, [r7, #25]
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100)
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d009      	beq.n	800a914 <dmp_set_orientation+0x17c>
    {
        gyro_regs[2] |= 1;
 800a900:	7fbb      	ldrb	r3, [r7, #30]
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	b2db      	uxtb	r3, r3
 800a908:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800a90a:	7ebb      	ldrb	r3, [r7, #26]
 800a90c:	f043 0301 	orr.w	r3, r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800a914:	f107 031c 	add.w	r3, r7, #28
 800a918:	461a      	mov	r2, r3
 800a91a:	2103      	movs	r1, #3
 800a91c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800a920:	f7ff fd14 	bl	800a34c <mpu_write_mem>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <dmp_set_orientation+0x198>
        return -1;
 800a92a:	f04f 33ff 	mov.w	r3, #4294967295
 800a92e:	e011      	b.n	800a954 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800a930:	f107 0318 	add.w	r3, r7, #24
 800a934:	461a      	mov	r2, r3
 800a936:	2103      	movs	r1, #3
 800a938:	f240 4031 	movw	r0, #1073	; 0x431
 800a93c:	f7ff fd06 	bl	800a34c <mpu_write_mem>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <dmp_set_orientation+0x1b4>
        return -1;
 800a946:	f04f 33ff 	mov.w	r3, #4294967295
 800a94a:	e003      	b.n	800a954 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800a94c:	4a07      	ldr	r2, [pc, #28]	; (800a96c <dmp_set_orientation+0x1d4>)
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	8113      	strh	r3, [r2, #8]
    return 0;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3720      	adds	r7, #32
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	080156a8 	.word	0x080156a8
 800a960:	080156ac 	.word	0x080156ac
 800a964:	080156b0 	.word	0x080156b0
 800a968:	080156b4 	.word	0x080156b4
 800a96c:	20000834 	.word	0x20000834

0800a970 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB, 0xc4, DINAAA, DINAF1,
 800a97a:	4a1f      	ldr	r2, [pc, #124]	; (800a9f8 <dmp_set_fifo_rate+0x88>)
 800a97c:	f107 0310 	add.w	r3, r7, #16
 800a980:	ca07      	ldmia	r2, {r0, r1, r2}
 800a982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                        DINADF, DINADF, 0xBB,   0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	2bc8      	cmp	r3, #200	; 0xc8
 800a98a:	d902      	bls.n	800a992 <dmp_set_fifo_rate+0x22>
        return -1;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295
 800a990:	e02e      	b.n	800a9f0 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	22c8      	movs	r2, #200	; 0xc8
 800a996:	fb92 f3f3 	sdiv	r3, r2, r3
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	3b01      	subs	r3, #1
 800a99e:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800a9a0:	8bfb      	ldrh	r3, [r7, #30]
 800a9a2:	0a1b      	lsrs	r3, r3, #8
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800a9aa:	8bfb      	ldrh	r3, [r7, #30]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	f240 2016 	movw	r0, #534	; 0x216
 800a9bc:	f7ff fcc6 	bl	800a34c <mpu_write_mem>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <dmp_set_fifo_rate+0x5c>
        return -1;
 800a9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ca:	e011      	b.n	800a9f0 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char *)regs_end))
 800a9cc:	f107 0310 	add.w	r3, r7, #16
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	210c      	movs	r1, #12
 800a9d4:	f640 20c1 	movw	r0, #2753	; 0xac1
 800a9d8:	f7ff fcb8 	bl	800a34c <mpu_write_mem>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <dmp_set_fifo_rate+0x78>
        return -1;
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e6:	e003      	b.n	800a9f0 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800a9e8:	4a04      	ldr	r2, [pc, #16]	; (800a9fc <dmp_set_fifo_rate+0x8c>)
 800a9ea:	88fb      	ldrh	r3, [r7, #6]
 800a9ec:	8193      	strh	r3, [r2, #12]
    return 0;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	080156b8 	.word	0x080156b8
 800a9fc:	20000834 	.word	0x20000834

0800aa00 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	460a      	mov	r2, r1
 800aa0a:	71fb      	strb	r3, [r7, #7]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	f003 0307 	and.w	r3, r3, #7
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <dmp_set_tap_thresh+0x22>
 800aa1a:	88bb      	ldrh	r3, [r7, #4]
 800aa1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa20:	d902      	bls.n	800aa28 <dmp_set_tap_thresh+0x28>
        return -1;
 800aa22:	f04f 33ff 	mov.w	r3, #4294967295
 800aa26:	e107      	b.n	800ac38 <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800aa28:	88bb      	ldrh	r3, [r7, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7f8 ff0a 	bl	8003844 <__aeabi_ui2f>
 800aa30:	4603      	mov	r3, r0
 800aa32:	4983      	ldr	r1, [pc, #524]	; (800ac40 <dmp_set_tap_thresh+0x240>)
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f9 f811 	bl	8003a5c <__aeabi_fdiv>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800aa3e:	f107 030b 	add.w	r3, r7, #11
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff f868 	bl	8009b18 <mpu_get_accel_fsr>
    switch (accel_fsr)
 800aa48:	7afb      	ldrb	r3, [r7, #11]
 800aa4a:	3b02      	subs	r3, #2
 800aa4c:	2b0e      	cmp	r3, #14
 800aa4e:	d879      	bhi.n	800ab44 <dmp_set_tap_thresh+0x144>
 800aa50:	a201      	add	r2, pc, #4	; (adr r2, 800aa58 <dmp_set_tap_thresh+0x58>)
 800aa52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa56:	bf00      	nop
 800aa58:	0800aa95 	.word	0x0800aa95
 800aa5c:	0800ab45 	.word	0x0800ab45
 800aa60:	0800aac1 	.word	0x0800aac1
 800aa64:	0800ab45 	.word	0x0800ab45
 800aa68:	0800ab45 	.word	0x0800ab45
 800aa6c:	0800ab45 	.word	0x0800ab45
 800aa70:	0800aaed 	.word	0x0800aaed
 800aa74:	0800ab45 	.word	0x0800ab45
 800aa78:	0800ab45 	.word	0x0800ab45
 800aa7c:	0800ab45 	.word	0x0800ab45
 800aa80:	0800ab45 	.word	0x0800ab45
 800aa84:	0800ab45 	.word	0x0800ab45
 800aa88:	0800ab45 	.word	0x0800ab45
 800aa8c:	0800ab45 	.word	0x0800ab45
 800aa90:	0800ab19 	.word	0x0800ab19
    {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800aa94:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800aa98:	6938      	ldr	r0, [r7, #16]
 800aa9a:	f7f8 ff2b 	bl	80038f4 <__aeabi_fmul>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7f9 f929 	bl	8003cf8 <__aeabi_f2uiz>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800aaaa:	4966      	ldr	r1, [pc, #408]	; (800ac44 <dmp_set_tap_thresh+0x244>)
 800aaac:	6938      	ldr	r0, [r7, #16]
 800aaae:	f7f8 ff21 	bl	80038f4 <__aeabi_fmul>
 800aab2:	4603      	mov	r3, r0
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7f9 f91f 	bl	8003cf8 <__aeabi_f2uiz>
 800aaba:	4603      	mov	r3, r0
 800aabc:	82bb      	strh	r3, [r7, #20]
        break;
 800aabe:	e044      	b.n	800ab4a <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800aac0:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800aac4:	6938      	ldr	r0, [r7, #16]
 800aac6:	f7f8 ff15 	bl	80038f4 <__aeabi_fmul>
 800aaca:	4603      	mov	r3, r0
 800aacc:	4618      	mov	r0, r3
 800aace:	f7f9 f913 	bl	8003cf8 <__aeabi_f2uiz>
 800aad2:	4603      	mov	r3, r0
 800aad4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800aad6:	495c      	ldr	r1, [pc, #368]	; (800ac48 <dmp_set_tap_thresh+0x248>)
 800aad8:	6938      	ldr	r0, [r7, #16]
 800aada:	f7f8 ff0b 	bl	80038f4 <__aeabi_fmul>
 800aade:	4603      	mov	r3, r0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7f9 f909 	bl	8003cf8 <__aeabi_f2uiz>
 800aae6:	4603      	mov	r3, r0
 800aae8:	82bb      	strh	r3, [r7, #20]
        break;
 800aaea:	e02e      	b.n	800ab4a <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800aaec:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800aaf0:	6938      	ldr	r0, [r7, #16]
 800aaf2:	f7f8 feff 	bl	80038f4 <__aeabi_fmul>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7f9 f8fd 	bl	8003cf8 <__aeabi_f2uiz>
 800aafe:	4603      	mov	r3, r0
 800ab00:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800ab02:	4952      	ldr	r1, [pc, #328]	; (800ac4c <dmp_set_tap_thresh+0x24c>)
 800ab04:	6938      	ldr	r0, [r7, #16]
 800ab06:	f7f8 fef5 	bl	80038f4 <__aeabi_fmul>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f9 f8f3 	bl	8003cf8 <__aeabi_f2uiz>
 800ab12:	4603      	mov	r3, r0
 800ab14:	82bb      	strh	r3, [r7, #20]
        break;
 800ab16:	e018      	b.n	800ab4a <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800ab18:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800ab1c:	6938      	ldr	r0, [r7, #16]
 800ab1e:	f7f8 fee9 	bl	80038f4 <__aeabi_fmul>
 800ab22:	4603      	mov	r3, r0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7f9 f8e7 	bl	8003cf8 <__aeabi_f2uiz>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800ab2e:	4948      	ldr	r1, [pc, #288]	; (800ac50 <dmp_set_tap_thresh+0x250>)
 800ab30:	6938      	ldr	r0, [r7, #16]
 800ab32:	f7f8 fedf 	bl	80038f4 <__aeabi_fmul>
 800ab36:	4603      	mov	r3, r0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f9 f8dd 	bl	8003cf8 <__aeabi_f2uiz>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	82bb      	strh	r3, [r7, #20]
        break;
 800ab42:	e002      	b.n	800ab4a <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295
 800ab48:	e076      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800ab4a:	8afb      	ldrh	r3, [r7, #22]
 800ab4c:	0a1b      	lsrs	r3, r3, #8
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800ab54:	8afb      	ldrh	r3, [r7, #22]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800ab5a:	8abb      	ldrh	r3, [r7, #20]
 800ab5c:	0a1b      	lsrs	r3, r3, #8
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800ab64:	8abb      	ldrh	r3, [r7, #20]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d01c      	beq.n	800abae <dmp_set_tap_thresh+0x1ae>
    {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800ab74:	f107 030c 	add.w	r3, r7, #12
 800ab78:	461a      	mov	r2, r3
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800ab80:	f7ff fbe4 	bl	800a34c <mpu_write_mem>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <dmp_set_tap_thresh+0x190>
            return -1;
 800ab8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8e:	e053      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp + 2))
 800ab90:	f107 030c 	add.w	r3, r7, #12
 800ab94:	3302      	adds	r3, #2
 800ab96:	461a      	mov	r2, r3
 800ab98:	2102      	movs	r1, #2
 800ab9a:	f44f 7092 	mov.w	r0, #292	; 0x124
 800ab9e:	f7ff fbd5 	bl	800a34c <mpu_write_mem>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <dmp_set_tap_thresh+0x1ae>
            return -1;
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295
 800abac:	e044      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y)
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	f003 0302 	and.w	r3, r3, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d01c      	beq.n	800abf2 <dmp_set_tap_thresh+0x1f2>
    {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800abb8:	f107 030c 	add.w	r3, r7, #12
 800abbc:	461a      	mov	r2, r3
 800abbe:	2102      	movs	r1, #2
 800abc0:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800abc4:	f7ff fbc2 	bl	800a34c <mpu_write_mem>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <dmp_set_tap_thresh+0x1d4>
            return -1;
 800abce:	f04f 33ff 	mov.w	r3, #4294967295
 800abd2:	e031      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp + 2))
 800abd4:	f107 030c 	add.w	r3, r7, #12
 800abd8:	3302      	adds	r3, #2
 800abda:	461a      	mov	r2, r3
 800abdc:	2102      	movs	r1, #2
 800abde:	f44f 7094 	mov.w	r0, #296	; 0x128
 800abe2:	f7ff fbb3 	bl	800a34c <mpu_write_mem>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <dmp_set_tap_thresh+0x1f2>
            return -1;
 800abec:	f04f 33ff 	mov.w	r3, #4294967295
 800abf0:	e022      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z)
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01c      	beq.n	800ac36 <dmp_set_tap_thresh+0x236>
    {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800abfc:	f107 030c 	add.w	r3, r7, #12
 800ac00:	461a      	mov	r2, r3
 800ac02:	2102      	movs	r1, #2
 800ac04:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800ac08:	f7ff fba0 	bl	800a34c <mpu_write_mem>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <dmp_set_tap_thresh+0x218>
            return -1;
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	e00f      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp + 2))
 800ac18:	f107 030c 	add.w	r3, r7, #12
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	461a      	mov	r2, r3
 800ac20:	2102      	movs	r1, #2
 800ac22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ac26:	f7ff fb91 	bl	800a34c <mpu_write_mem>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <dmp_set_tap_thresh+0x236>
            return -1;
 800ac30:	f04f 33ff 	mov.w	r3, #4294967295
 800ac34:	e000      	b.n	800ac38 <dmp_set_tap_thresh+0x238>
    }
    return 0;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	43480000 	.word	0x43480000
 800ac44:	46400000 	.word	0x46400000
 800ac48:	45c00000 	.word	0x45c00000
 800ac4c:	45400000 	.word	0x45400000
 800ac50:	44c00000 	.word	0x44c00000

0800ac54 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800ac62:	79fb      	ldrb	r3, [r7, #7]
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d004      	beq.n	800ac76 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d004      	beq.n	800ac8a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	f043 030c 	orr.w	r3, r3, #12
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d004      	beq.n	800ac9e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	f043 0303 	orr.w	r3, r3, #3
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800ac9e:	f107 030f 	add.w	r3, r7, #15
 800aca2:	461a      	mov	r2, r3
 800aca4:	2101      	movs	r1, #1
 800aca6:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800acaa:	f7ff fb4f 	bl	800a34c <mpu_write_mem>
 800acae:	4603      	mov	r3, r0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d102      	bne.n	800acce <dmp_set_tap_count+0x16>
        min_taps = 1;
 800acc8:	2301      	movs	r3, #1
 800acca:	71fb      	strb	r3, [r7, #7]
 800accc:	e004      	b.n	800acd8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d901      	bls.n	800acd8 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800acd4:	2304      	movs	r3, #4
 800acd6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	3b01      	subs	r3, #1
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800ace0:	f107 030f 	add.w	r3, r7, #15
 800ace4:	461a      	mov	r2, r3
 800ace6:	2101      	movs	r1, #1
 800ace8:	f240 104f 	movw	r0, #335	; 0x14f
 800acec:	f7ff fb2e 	bl	800a34c <mpu_write_mem>
 800acf0:	4603      	mov	r3, r0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800ad06:	88fb      	ldrh	r3, [r7, #6]
 800ad08:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <dmp_set_tap_time+0x40>)
 800ad0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0e:	089b      	lsrs	r3, r3, #2
 800ad10:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800ad12:	89fb      	ldrh	r3, [r7, #14]
 800ad14:	0a1b      	lsrs	r3, r3, #8
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800ad1c:	89fb      	ldrh	r3, [r7, #14]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800ad22:	f107 030c 	add.w	r3, r7, #12
 800ad26:	461a      	mov	r2, r3
 800ad28:	2102      	movs	r1, #2
 800ad2a:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800ad2e:	f7ff fb0d 	bl	800a34c <mpu_write_mem>
 800ad32:	4603      	mov	r3, r0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	cccccccd 	.word	0xcccccccd

0800ad40 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	4a0c      	ldr	r2, [pc, #48]	; (800ad80 <dmp_set_tap_time_multi+0x40>)
 800ad4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad52:	089b      	lsrs	r3, r3, #2
 800ad54:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800ad56:	89fb      	ldrh	r3, [r7, #14]
 800ad58:	0a1b      	lsrs	r3, r3, #8
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800ad60:	89fb      	ldrh	r3, [r7, #14]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800ad66:	f107 030c 	add.w	r3, r7, #12
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	2102      	movs	r1, #2
 800ad6e:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800ad72:	f7ff faeb 	bl	800a34c <mpu_write_mem>
 800ad76:	4603      	mov	r3, r0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	cccccccd 	.word	0xcccccccd

0800ad84 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <dmp_set_shake_reject_thresh+0x5c>)
 800ad94:	fb82 1203 	smull	r1, r2, r2, r3
 800ad98:	1192      	asrs	r2, r2, #6
 800ad9a:	17db      	asrs	r3, r3, #31
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	887a      	ldrh	r2, [r7, #2]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	161b      	asrs	r3, r3, #24
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	141b      	asrs	r3, r3, #16
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	121b      	asrs	r3, r3, #8
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	461a      	mov	r2, r3
 800adca:	2104      	movs	r1, #4
 800adcc:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800add0:	f7ff fabc 	bl	800a34c <mpu_write_mem>
 800add4:	4603      	mov	r3, r0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	10624dd3 	.word	0x10624dd3

0800ade4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800adee:	88fb      	ldrh	r3, [r7, #6]
 800adf0:	4a0c      	ldr	r2, [pc, #48]	; (800ae24 <dmp_set_shake_reject_time+0x40>)
 800adf2:	fba2 2303 	umull	r2, r3, r2, r3
 800adf6:	089b      	lsrs	r3, r3, #2
 800adf8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	0a1b      	lsrs	r3, r3, #8
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800ae04:	88fb      	ldrh	r3, [r7, #6]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90, 2, tmp);
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	461a      	mov	r2, r3
 800ae10:	2102      	movs	r1, #2
 800ae12:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800ae16:	f7ff fa99 	bl	800a34c <mpu_write_mem>
 800ae1a:	4603      	mov	r3, r0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	cccccccd 	.word	0xcccccccd

0800ae28 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	4a0c      	ldr	r2, [pc, #48]	; (800ae68 <dmp_set_shake_reject_timeout+0x40>)
 800ae36:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3a:	089b      	lsrs	r3, r3, #2
 800ae3c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800ae3e:	88fb      	ldrh	r3, [r7, #6]
 800ae40:	0a1b      	lsrs	r3, r3, #8
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88, 2, tmp);
 800ae4e:	f107 030c 	add.w	r3, r7, #12
 800ae52:	461a      	mov	r2, r3
 800ae54:	2102      	movs	r1, #2
 800ae56:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800ae5a:	f7ff fa77 	bl	800a34c <mpu_write_mem>
 800ae5e:	4603      	mov	r3, r0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	cccccccd 	.word	0xcccccccd

0800ae6c <dmp_get_pedometer_step_count>:
 *  @brief      Get current step count.
 *  @param[out] count   Number of steps detected.
 *  @return     0 if successful.
 */
int dmp_get_pedometer_step_count(unsigned long *count)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4];
    if (!count)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <dmp_get_pedometer_step_count+0x14>
        return -1;
 800ae7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7e:	e01a      	b.n	800aeb6 <dmp_get_pedometer_step_count+0x4a>

    if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
 800ae80:	f107 030c 	add.w	r3, r7, #12
 800ae84:	461a      	mov	r2, r3
 800ae86:	2104      	movs	r1, #4
 800ae88:	f44f 7058 	mov.w	r0, #864	; 0x360
 800ae8c:	f7ff fab0 	bl	800a3f0 <mpu_read_mem>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <dmp_get_pedometer_step_count+0x30>
        return -1;
 800ae96:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9a:	e00c      	b.n	800aeb6 <dmp_get_pedometer_step_count+0x4a>

    count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) | ((unsigned long)tmp[2] << 8) | tmp[3];
 800ae9c:	7b3b      	ldrb	r3, [r7, #12]
 800ae9e:	061a      	lsls	r2, r3, #24
 800aea0:	7b7b      	ldrb	r3, [r7, #13]
 800aea2:	041b      	lsls	r3, r3, #16
 800aea4:	431a      	orrs	r2, r3
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	7bfa      	ldrb	r2, [r7, #15]
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	601a      	str	r2, [r3, #0]
    return 0;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <dmp_get_pedometer_walk_time>:
 *  @brief      Get duration of walking time.
 *  @param[in]  time    Walk time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_get_pedometer_walk_time(unsigned long *time)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4];
    if (!time)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <dmp_get_pedometer_walk_time+0x14>
        return -1;
 800aecc:	f04f 33ff 	mov.w	r3, #4294967295
 800aed0:	e01f      	b.n	800af12 <dmp_get_pedometer_walk_time+0x54>

    if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
 800aed2:	f107 030c 	add.w	r3, r7, #12
 800aed6:	461a      	mov	r2, r3
 800aed8:	2104      	movs	r1, #4
 800aeda:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 800aede:	f7ff fa87 	bl	800a3f0 <mpu_read_mem>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <dmp_get_pedometer_walk_time+0x30>
        return -1;
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	e011      	b.n	800af12 <dmp_get_pedometer_walk_time+0x54>

    time[0] =
        (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) | ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
 800aeee:	7b3b      	ldrb	r3, [r7, #12]
 800aef0:	061a      	lsls	r2, r3, #24
 800aef2:	7b7b      	ldrb	r3, [r7, #13]
 800aef4:	041b      	lsls	r3, r3, #16
 800aef6:	431a      	orrs	r2, r3
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	021b      	lsls	r3, r3, #8
 800aefc:	4313      	orrs	r3, r2
 800aefe:	7bfa      	ldrb	r2, [r7, #15]
 800af00:	431a      	orrs	r2, r3
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	461a      	mov	r2, r3
    time[0] =
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	601a      	str	r2, [r3, #0]
    return 0;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800af26:	2302      	movs	r3, #2
 800af28:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800af2a:	23ca      	movs	r3, #202	; 0xca
 800af2c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800af2e:	23e3      	movs	r3, #227	; 0xe3
 800af30:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800af32:	2309      	movs	r3, #9
 800af34:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800af36:	f107 030c 	add.w	r3, r7, #12
 800af3a:	461a      	mov	r2, r3
 800af3c:	2104      	movs	r1, #4
 800af3e:	2068      	movs	r0, #104	; 0x68
 800af40:	f7ff fa04 	bl	800a34c <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800af44:	23a3      	movs	r3, #163	; 0xa3
 800af46:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800af48:	88fb      	ldrh	r3, [r7, #6]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d006      	beq.n	800af60 <dmp_enable_feature+0x44>
    {
        tmp[1] = 0xC0;
 800af52:	23c0      	movs	r3, #192	; 0xc0
 800af54:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800af56:	23c8      	movs	r3, #200	; 0xc8
 800af58:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800af5a:	23c2      	movs	r3, #194	; 0xc2
 800af5c:	73fb      	strb	r3, [r7, #15]
 800af5e:	e005      	b.n	800af6c <dmp_enable_feature+0x50>
    }
    else
    {
        tmp[1] = 0xA3;
 800af60:	23a3      	movs	r3, #163	; 0xa3
 800af62:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800af64:	23a3      	movs	r3, #163	; 0xa3
 800af66:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800af68:	23a3      	movs	r3, #163	; 0xa3
 800af6a:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800af72:	2b00      	cmp	r3, #0
 800af74:	d006      	beq.n	800af84 <dmp_enable_feature+0x68>
    {
        tmp[4] = 0xC4;
 800af76:	23c4      	movs	r3, #196	; 0xc4
 800af78:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800af7a:	23cc      	movs	r3, #204	; 0xcc
 800af7c:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800af7e:	23c6      	movs	r3, #198	; 0xc6
 800af80:	74bb      	strb	r3, [r7, #18]
 800af82:	e005      	b.n	800af90 <dmp_enable_feature+0x74>
    }
    else
    {
        tmp[4] = 0xA3;
 800af84:	23a3      	movs	r3, #163	; 0xa3
 800af86:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800af88:	23a3      	movs	r3, #163	; 0xa3
 800af8a:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800af8c:	23a3      	movs	r3, #163	; 0xa3
 800af8e:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800af90:	23a3      	movs	r3, #163	; 0xa3
 800af92:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800af94:	23a3      	movs	r3, #163	; 0xa3
 800af96:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800af98:	23a3      	movs	r3, #163	; 0xa3
 800af9a:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15, 10, tmp);
 800af9c:	f107 030c 	add.w	r3, r7, #12
 800afa0:	461a      	mov	r2, r3
 800afa2:	210a      	movs	r1, #10
 800afa4:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800afa8:	f7ff f9d0 	bl	800a34c <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800afac:	88fb      	ldrh	r3, [r7, #6]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d002      	beq.n	800afbc <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800afb6:	2320      	movs	r3, #32
 800afb8:	733b      	strb	r3, [r7, #12]
 800afba:	e001      	b.n	800afc0 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800afbc:	23d8      	movs	r3, #216	; 0xd8
 800afbe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27, 1, tmp);
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	461a      	mov	r2, r3
 800afc6:	2101      	movs	r1, #1
 800afc8:	f640 20b6 	movw	r0, #2742	; 0xab6
 800afcc:	f7ff f9be 	bl	800a34c <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800afd0:	88fb      	ldrh	r3, [r7, #6]
 800afd2:	f003 0320 	and.w	r3, r3, #32
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800afda:	2001      	movs	r0, #1
 800afdc:	f000 f8c6 	bl	800b16c <dmp_enable_gyro_cal>
 800afe0:	e002      	b.n	800afe8 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800afe2:	2000      	movs	r0, #0
 800afe4:	f000 f8c2 	bl	800b16c <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800afe8:	88fb      	ldrh	r3, [r7, #6]
 800afea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01d      	beq.n	800b02e <dmp_enable_feature+0x112>
    {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO)
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d008      	beq.n	800b00e <dmp_enable_feature+0xf2>
        {
            tmp[0] = 0xB2;
 800affc:	23b2      	movs	r3, #178	; 0xb2
 800affe:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800b000:	238b      	movs	r3, #139	; 0x8b
 800b002:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800b004:	23b6      	movs	r3, #182	; 0xb6
 800b006:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800b008:	239b      	movs	r3, #155	; 0x9b
 800b00a:	73fb      	strb	r3, [r7, #15]
 800b00c:	e007      	b.n	800b01e <dmp_enable_feature+0x102>
        }
        else
        {
            tmp[0] = DINAC0;
 800b00e:	23b0      	movs	r3, #176	; 0xb0
 800b010:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800b012:	2380      	movs	r3, #128	; 0x80
 800b014:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800b016:	23b4      	movs	r3, #180	; 0xb4
 800b018:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800b01a:	2390      	movs	r3, #144	; 0x90
 800b01c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800b01e:	f107 030c 	add.w	r3, r7, #12
 800b022:	461a      	mov	r2, r3
 800b024:	2104      	movs	r1, #4
 800b026:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800b02a:	f7ff f98f 	bl	800a34c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP)
 800b02e:	88fb      	ldrh	r3, [r7, #6]
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	d025      	beq.n	800b084 <dmp_enable_feature+0x168>
    {
        /* Enable tap. */
        tmp[0] = 0xF8;
 800b038:	23f8      	movs	r3, #248	; 0xf8
 800b03a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800b03c:	f107 030c 	add.w	r3, r7, #12
 800b040:	461a      	mov	r2, r3
 800b042:	2101      	movs	r1, #1
 800b044:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800b048:	f7ff f980 	bl	800a34c <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800b04c:	21fa      	movs	r1, #250	; 0xfa
 800b04e:	2007      	movs	r0, #7
 800b050:	f7ff fcd6 	bl	800aa00 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800b054:	2007      	movs	r0, #7
 800b056:	f7ff fdfd 	bl	800ac54 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800b05a:	2001      	movs	r0, #1
 800b05c:	f7ff fe2c 	bl	800acb8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800b060:	2064      	movs	r0, #100	; 0x64
 800b062:	f7ff fe4b 	bl	800acfc <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800b066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b06a:	f7ff fe69 	bl	800ad40 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800b06e:	21c8      	movs	r1, #200	; 0xc8
 800b070:	483c      	ldr	r0, [pc, #240]	; (800b164 <dmp_enable_feature+0x248>)
 800b072:	f7ff fe87 	bl	800ad84 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800b076:	2028      	movs	r0, #40	; 0x28
 800b078:	f7ff feb4 	bl	800ade4 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800b07c:	200a      	movs	r0, #10
 800b07e:	f7ff fed3 	bl	800ae28 <dmp_set_shake_reject_timeout>
 800b082:	e009      	b.n	800b098 <dmp_enable_feature+0x17c>
    }
    else
    {
        tmp[0] = 0xD8;
 800b084:	23d8      	movs	r3, #216	; 0xd8
 800b086:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800b088:	f107 030c 	add.w	r3, r7, #12
 800b08c:	461a      	mov	r2, r3
 800b08e:	2101      	movs	r1, #1
 800b090:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800b094:	f7ff f95a 	bl	800a34c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT)
 800b098:	88fb      	ldrh	r3, [r7, #6]
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <dmp_enable_feature+0x18c>
    {
        tmp[0] = 0xD9;
 800b0a2:	23d9      	movs	r3, #217	; 0xd9
 800b0a4:	733b      	strb	r3, [r7, #12]
 800b0a6:	e001      	b.n	800b0ac <dmp_enable_feature+0x190>
    }
    else
        tmp[0] = 0xD8;
 800b0a8:	23d8      	movs	r3, #216	; 0xd8
 800b0aa:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800b0ac:	f107 030c 	add.w	r3, r7, #12
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	f240 703d 	movw	r0, #1853	; 0x73d
 800b0b8:	f7ff f948 	bl	800a34c <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	f000 f880 	bl	800b1cc <dmp_enable_lp_quat>
 800b0cc:	e002      	b.n	800b0d4 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	f000 f87c 	bl	800b1cc <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	f003 0310 	and.w	r3, r3, #16
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800b0de:	2001      	movs	r0, #1
 800b0e0:	f000 f89b 	bl	800b21a <dmp_enable_6x_lp_quat>
 800b0e4:	e002      	b.n	800b0ec <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	f000 f897 	bl	800b21a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	f043 0308 	orr.w	r3, r3, #8
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	; (800b168 <dmp_enable_feature+0x24c>)
 800b0f6:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800b0f8:	f7fe fb82 	bl	8009800 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800b0fc:	4b1a      	ldr	r3, [pc, #104]	; (800b168 <dmp_enable_feature+0x24c>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800b10c:	4b16      	ldr	r3, [pc, #88]	; (800b168 <dmp_enable_feature+0x24c>)
 800b10e:	7b9b      	ldrb	r3, [r3, #14]
 800b110:	3306      	adds	r3, #6
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b14      	ldr	r3, [pc, #80]	; (800b168 <dmp_enable_feature+0x24c>)
 800b116:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800b122:	4b11      	ldr	r3, [pc, #68]	; (800b168 <dmp_enable_feature+0x24c>)
 800b124:	7b9b      	ldrb	r3, [r3, #14]
 800b126:	3306      	adds	r3, #6
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <dmp_enable_feature+0x24c>)
 800b12c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800b12e:	88fb      	ldrh	r3, [r7, #6]
 800b130:	f003 0314 	and.w	r3, r3, #20
 800b134:	2b00      	cmp	r3, #0
 800b136:	d005      	beq.n	800b144 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800b138:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <dmp_enable_feature+0x24c>)
 800b13a:	7b9b      	ldrb	r3, [r3, #14]
 800b13c:	3310      	adds	r3, #16
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	4b09      	ldr	r3, [pc, #36]	; (800b168 <dmp_enable_feature+0x24c>)
 800b142:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800b144:	88fb      	ldrh	r3, [r7, #6]
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800b14e:	4b06      	ldr	r3, [pc, #24]	; (800b168 <dmp_enable_feature+0x24c>)
 800b150:	7b9b      	ldrb	r3, [r3, #14]
 800b152:	3304      	adds	r3, #4
 800b154:	b2da      	uxtb	r2, r3
 800b156:	4b04      	ldr	r3, [pc, #16]	; (800b168 <dmp_enable_feature+0x24c>)
 800b158:	739a      	strb	r2, [r3, #14]

    return 0;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	02cae309 	.word	0x02cae309
 800b168:	20000834 	.word	0x20000834

0800b16c <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	71fb      	strb	r3, [r7, #7]
    if (enable)
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00f      	beq.n	800b19c <dmp_enable_gyro_cal+0x30>
    {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800b17c:	4a11      	ldr	r2, [pc, #68]	; (800b1c4 <dmp_enable_gyro_cal+0x58>)
 800b17e:	f107 0314 	add.w	r3, r7, #20
 800b182:	ca07      	ldmia	r2, {r0, r1, r2}
 800b184:	c303      	stmia	r3!, {r0, r1}
 800b186:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800b188:	f107 0314 	add.w	r3, r7, #20
 800b18c:	461a      	mov	r2, r3
 800b18e:	2109      	movs	r1, #9
 800b190:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800b194:	f7ff f8da 	bl	800a34c <mpu_write_mem>
 800b198:	4603      	mov	r3, r0
 800b19a:	e00e      	b.n	800b1ba <dmp_enable_gyro_cal+0x4e>
    }
    else
    {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800b19c:	4a0a      	ldr	r2, [pc, #40]	; (800b1c8 <dmp_enable_gyro_cal+0x5c>)
 800b19e:	f107 0308 	add.w	r3, r7, #8
 800b1a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1a4:	c303      	stmia	r3!, {r0, r1}
 800b1a6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800b1a8:	f107 0308 	add.w	r3, r7, #8
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	2109      	movs	r1, #9
 800b1b0:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800b1b4:	f7ff f8ca 	bl	800a34c <mpu_write_mem>
 800b1b8:	4603      	mov	r3, r0
    }
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	080156c4 	.word	0x080156c4
 800b1c8:	080156d0 	.word	0x080156d0

0800b1cc <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable)
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d008      	beq.n	800b1ee <dmp_enable_lp_quat+0x22>
    {
        regs[0] = DINBC0;
 800b1dc:	23c0      	movs	r3, #192	; 0xc0
 800b1de:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800b1e0:	23c2      	movs	r3, #194	; 0xc2
 800b1e2:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800b1e4:	23c4      	movs	r3, #196	; 0xc4
 800b1e6:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800b1e8:	23c6      	movs	r3, #198	; 0xc6
 800b1ea:	73fb      	strb	r3, [r7, #15]
 800b1ec:	e006      	b.n	800b1fc <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800b1ee:	f107 030c 	add.w	r3, r7, #12
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	218b      	movs	r1, #139	; 0x8b
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f006 fc5c 	bl	8011ab4 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800b1fc:	f107 030c 	add.w	r3, r7, #12
 800b200:	461a      	mov	r2, r3
 800b202:	2104      	movs	r1, #4
 800b204:	f640 2098 	movw	r0, #2712	; 0xa98
 800b208:	f7ff f8a0 	bl	800a34c <mpu_write_mem>

    return mpu_reset_fifo();
 800b20c:	f7fe faf8 	bl	8009800 <mpu_reset_fifo>
 800b210:	4603      	mov	r3, r0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	4603      	mov	r3, r0
 800b222:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable)
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d008      	beq.n	800b23c <dmp_enable_6x_lp_quat+0x22>
    {
        regs[0] = DINA20;
 800b22a:	2320      	movs	r3, #32
 800b22c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800b22e:	2328      	movs	r3, #40	; 0x28
 800b230:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800b232:	2330      	movs	r3, #48	; 0x30
 800b234:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800b236:	2338      	movs	r3, #56	; 0x38
 800b238:	73fb      	strb	r3, [r7, #15]
 800b23a:	e006      	b.n	800b24a <dmp_enable_6x_lp_quat+0x30>
    }
    else
        memset(regs, 0xA3, 4);
 800b23c:	f107 030c 	add.w	r3, r7, #12
 800b240:	2204      	movs	r2, #4
 800b242:	21a3      	movs	r1, #163	; 0xa3
 800b244:	4618      	mov	r0, r3
 800b246:	f006 fc35 	bl	8011ab4 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800b24a:	f107 030c 	add.w	r3, r7, #12
 800b24e:	461a      	mov	r2, r3
 800b250:	2104      	movs	r1, #4
 800b252:	f640 209e 	movw	r0, #2718	; 0xa9e
 800b256:	f7ff f879 	bl	800a34c <mpu_write_mem>

    return mpu_reset_fifo();
 800b25a:	f7fe fad1 	bl	8009800 <mpu_reset_fifo>
 800b25e:	4603      	mov	r3, r0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3303      	adds	r3, #3
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b27a:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3303      	adds	r3, #3
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b286:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3301      	adds	r3, #1
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d012      	beq.n	800b2bc <decode_gesture+0x54>
    {
        unsigned char direction, count;
        direction = tap >> 3;
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800b2a8:	4b10      	ldr	r3, [pc, #64]	; (800b2ec <decode_gesture+0x84>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800b2b0:	4b0e      	ldr	r3, [pc, #56]	; (800b2ec <decode_gesture+0x84>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	7b39      	ldrb	r1, [r7, #12]
 800b2b6:	7b7a      	ldrb	r2, [r7, #13]
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	f003 0308 	and.w	r3, r3, #8
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <decode_gesture+0x78>
    {
        if (dmp.android_orient_cb)
 800b2ca:	4b08      	ldr	r3, [pc, #32]	; (800b2ec <decode_gesture+0x84>)
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d006      	beq.n	800b2e0 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800b2d2:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <decode_gesture+0x84>)
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	7bfa      	ldrb	r2, [r7, #15]
 800b2d8:	0992      	lsrs	r2, r2, #6
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
    }

    return 0;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20000834 	.word	0x20000834

0800b2f0 <dmp_read_fifo>:
 *  @param[out] sensors     Mask of sensors read from FIFO.
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat, unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b092      	sub	sp, #72	; 0x48
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800b304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b306:	2200      	movs	r2, #0
 800b308:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800b30a:	4bae      	ldr	r3, [pc, #696]	; (800b5c4 <dmp_read_fifo+0x2d4>)
 800b30c:	7b9b      	ldrb	r3, [r3, #14]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	f107 0120 	add.w	r1, r7, #32
 800b314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fe90 	bl	800a03c <mpu_read_fifo_stream>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <dmp_read_fifo+0x38>
        return -1;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	e148      	b.n	800b5ba <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800b328:	4ba6      	ldr	r3, [pc, #664]	; (800b5c4 <dmp_read_fifo+0x2d4>)
 800b32a:	895b      	ldrh	r3, [r3, #10]
 800b32c:	f003 0314 	and.w	r3, r3, #20
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 808a 	beq.w	800b44a <dmp_read_fifo+0x15a>
    {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) | ((long)fifo_data[2] << 8) | fifo_data[3];
 800b336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b33a:	061a      	lsls	r2, r3, #24
 800b33c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b340:	041b      	lsls	r3, r3, #16
 800b342:	431a      	orrs	r2, r3
 800b344:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b348:	021b      	lsls	r3, r3, #8
 800b34a:	4313      	orrs	r3, r2
 800b34c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b350:	431a      	orrs	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) | ((long)fifo_data[6] << 8) | fifo_data[7];
 800b356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b35a:	061a      	lsls	r2, r3, #24
 800b35c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b360:	041b      	lsls	r3, r3, #16
 800b362:	431a      	orrs	r2, r3
 800b364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b368:	021b      	lsls	r3, r3, #8
 800b36a:	431a      	orrs	r2, r3
 800b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b370:	4619      	mov	r1, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3304      	adds	r3, #4
 800b376:	430a      	orrs	r2, r1
 800b378:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) | ((long)fifo_data[10] << 8) | fifo_data[11];
 800b37a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b37e:	061a      	lsls	r2, r3, #24
 800b380:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b384:	041b      	lsls	r3, r3, #16
 800b386:	431a      	orrs	r2, r3
 800b388:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	431a      	orrs	r2, r3
 800b390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b394:	4619      	mov	r1, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3308      	adds	r3, #8
 800b39a:	430a      	orrs	r2, r1
 800b39c:	601a      	str	r2, [r3, #0]
        quat[3] =
            ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) | ((long)fifo_data[14] << 8) | fifo_data[15];
 800b39e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3a2:	061a      	lsls	r2, r3, #24
 800b3a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3b8:	4619      	mov	r1, r3
        quat[3] =
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	330c      	adds	r3, #12
            ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) | ((long)fifo_data[14] << 8) | fifo_data[15];
 800b3be:	430a      	orrs	r2, r1
        quat[3] =
 800b3c0:	601a      	str	r2, [r3, #0]
        ii += 16;
 800b3c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b3c6:	3310      	adds	r3, #16
 800b3c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	141b      	asrs	r3, r3, #16
 800b3d2:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	141b      	asrs	r3, r3, #16
 800b3dc:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	141b      	asrs	r3, r3, #16
 800b3e6:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	330c      	adds	r3, #12
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	141b      	asrs	r3, r3, #16
 800b3f0:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] + quat_q14[2] * quat_q14[2] +
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	fb03 f202 	mul.w	r2, r3, r2
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	6979      	ldr	r1, [r7, #20]
 800b3fe:	fb01 f303 	mul.w	r3, r1, r3
 800b402:	441a      	add	r2, r3
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	69b9      	ldr	r1, [r7, #24]
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	441a      	add	r2, r3
                      quat_q14[3] * quat_q14[3];
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	69f9      	ldr	r1, [r7, #28]
 800b412:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] + quat_q14[2] * quat_q14[2] +
 800b416:	4413      	add	r3, r2
 800b418:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) || (quat_mag_sq > QUAT_MAG_SQ_MAX))
 800b41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b41c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b420:	db03      	blt.n	800b42a <dmp_read_fifo+0x13a>
 800b422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b424:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 800b428:	dd07      	ble.n	800b43a <dmp_read_fifo+0x14a>
        {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800b42a:	f7fe f9e9 	bl	8009800 <mpu_reset_fifo>
            sensors[0] = 0;
 800b42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b430:	2200      	movs	r2, #0
 800b432:	801a      	strh	r2, [r3, #0]
            return -1;
 800b434:	f04f 33ff 	mov.w	r3, #4294967295
 800b438:	e0bf      	b.n	800b5ba <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800b43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b444:	b21a      	sxth	r2, r3
 800b446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b448:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800b44a:	4b5e      	ldr	r3, [pc, #376]	; (800b5c4 <dmp_read_fifo+0x2d4>)
 800b44c:	895b      	ldrh	r3, [r3, #10]
 800b44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	d04c      	beq.n	800b4f0 <dmp_read_fifo+0x200>
    {
        accel[0] = ((short)fifo_data[ii + 0] << 8) | fifo_data[ii + 1];
 800b456:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b45a:	3348      	adds	r3, #72	; 0x48
 800b45c:	443b      	add	r3, r7
 800b45e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	b21a      	sxth	r2, r3
 800b466:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b46a:	3301      	adds	r3, #1
 800b46c:	3348      	adds	r3, #72	; 0x48
 800b46e:	443b      	add	r3, r7
 800b470:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b474:	b21b      	sxth	r3, r3
 800b476:	4313      	orrs	r3, r2
 800b478:	b21a      	sxth	r2, r3
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii + 2] << 8) | fifo_data[ii + 3];
 800b47e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b482:	3302      	adds	r3, #2
 800b484:	3348      	adds	r3, #72	; 0x48
 800b486:	443b      	add	r3, r7
 800b488:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b48c:	021b      	lsls	r3, r3, #8
 800b48e:	b219      	sxth	r1, r3
 800b490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b494:	3303      	adds	r3, #3
 800b496:	3348      	adds	r3, #72	; 0x48
 800b498:	443b      	add	r3, r7
 800b49a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b49e:	b21a      	sxth	r2, r3
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	3302      	adds	r3, #2
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	b212      	sxth	r2, r2
 800b4a8:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii + 4] << 8) | fifo_data[ii + 5];
 800b4aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	3348      	adds	r3, #72	; 0x48
 800b4b2:	443b      	add	r3, r7
 800b4b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	b219      	sxth	r1, r3
 800b4bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4c0:	3305      	adds	r3, #5
 800b4c2:	3348      	adds	r3, #72	; 0x48
 800b4c4:	443b      	add	r3, r7
 800b4c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b4ca:	b21a      	sxth	r2, r3
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	b212      	sxth	r2, r2
 800b4d4:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800b4d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b4da:	3306      	adds	r3, #6
 800b4dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800b4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4e6:	f043 0308 	orr.w	r3, r3, #8
 800b4ea:	b21a      	sxth	r2, r3
 800b4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ee:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO)
 800b4f0:	4b34      	ldr	r3, [pc, #208]	; (800b5c4 <dmp_read_fifo+0x2d4>)
 800b4f2:	895b      	ldrh	r3, [r3, #10]
 800b4f4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d04c      	beq.n	800b596 <dmp_read_fifo+0x2a6>
    {
        gyro[0] = ((short)fifo_data[ii + 0] << 8) | fifo_data[ii + 1];
 800b4fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b500:	3348      	adds	r3, #72	; 0x48
 800b502:	443b      	add	r3, r7
 800b504:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b508:	021b      	lsls	r3, r3, #8
 800b50a:	b21a      	sxth	r2, r3
 800b50c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b510:	3301      	adds	r3, #1
 800b512:	3348      	adds	r3, #72	; 0x48
 800b514:	443b      	add	r3, r7
 800b516:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b51a:	b21b      	sxth	r3, r3
 800b51c:	4313      	orrs	r3, r2
 800b51e:	b21a      	sxth	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii + 2] << 8) | fifo_data[ii + 3];
 800b524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b528:	3302      	adds	r3, #2
 800b52a:	3348      	adds	r3, #72	; 0x48
 800b52c:	443b      	add	r3, r7
 800b52e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	b219      	sxth	r1, r3
 800b536:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b53a:	3303      	adds	r3, #3
 800b53c:	3348      	adds	r3, #72	; 0x48
 800b53e:	443b      	add	r3, r7
 800b540:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b544:	b21a      	sxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3302      	adds	r3, #2
 800b54a:	430a      	orrs	r2, r1
 800b54c:	b212      	sxth	r2, r2
 800b54e:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii + 4] << 8) | fifo_data[ii + 5];
 800b550:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b554:	3304      	adds	r3, #4
 800b556:	3348      	adds	r3, #72	; 0x48
 800b558:	443b      	add	r3, r7
 800b55a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b55e:	021b      	lsls	r3, r3, #8
 800b560:	b219      	sxth	r1, r3
 800b562:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b566:	3305      	adds	r3, #5
 800b568:	3348      	adds	r3, #72	; 0x48
 800b56a:	443b      	add	r3, r7
 800b56c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b570:	b21a      	sxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3304      	adds	r3, #4
 800b576:	430a      	orrs	r2, r1
 800b578:	b212      	sxth	r2, r2
 800b57a:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800b57c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b580:	3306      	adds	r3, #6
 800b582:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800b586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b58c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800b590:	b21a      	sxth	r2, r3
 800b592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b594:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800b596:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <dmp_read_fifo+0x2d4>)
 800b598:	895b      	ldrh	r3, [r3, #10]
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d007      	beq.n	800b5b2 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 800b5a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5a6:	f107 0220 	add.w	r2, r7, #32
 800b5aa:	4413      	add	r3, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7ff fe5b 	bl	800b268 <decode_gesture>

    get_ms(timestamp);
 800b5b2:	6838      	ldr	r0, [r7, #0]
 800b5b4:	f003 f98c 	bl	800e8d0 <get_ms_user>
    return 0;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3748      	adds	r7, #72	; 0x48
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000834 	.word	0x20000834

0800b5c8 <eMPL_send_quat>:

    return 0;
}

void eMPL_send_quat(long *quat)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	; 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
    char out[PACKET_LENGTH];
    int i;
    if (!quat)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d07b      	beq.n	800b6ce <eMPL_send_quat+0x106>
        return;
    memset(out, 0, PACKET_LENGTH);
 800b5d6:	f107 030c 	add.w	r3, r7, #12
 800b5da:	2217      	movs	r2, #23
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f006 fa68 	bl	8011ab4 <memset>
    out[0] = '$';
 800b5e4:	2324      	movs	r3, #36	; 0x24
 800b5e6:	733b      	strb	r3, [r7, #12]
    out[1] = PACKET_QUAT;
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	737b      	strb	r3, [r7, #13]
    out[3] = (char)(quat[0] >> 24);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	161b      	asrs	r3, r3, #24
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	73fb      	strb	r3, [r7, #15]
    out[4] = (char)(quat[0] >> 16);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	141b      	asrs	r3, r3, #16
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	743b      	strb	r3, [r7, #16]
    out[5] = (char)(quat[0] >> 8);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	121b      	asrs	r3, r3, #8
 800b606:	b2db      	uxtb	r3, r3
 800b608:	747b      	strb	r3, [r7, #17]
    out[6] = (char)quat[0];
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	74bb      	strb	r3, [r7, #18]
    out[7] = (char)(quat[1] >> 24);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3304      	adds	r3, #4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	161b      	asrs	r3, r3, #24
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	74fb      	strb	r3, [r7, #19]
    out[8] = (char)(quat[1] >> 16);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3304      	adds	r3, #4
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	141b      	asrs	r3, r3, #16
 800b626:	b2db      	uxtb	r3, r3
 800b628:	753b      	strb	r3, [r7, #20]
    out[9] = (char)(quat[1] >> 8);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3304      	adds	r3, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	121b      	asrs	r3, r3, #8
 800b632:	b2db      	uxtb	r3, r3
 800b634:	757b      	strb	r3, [r7, #21]
    out[10] = (char)quat[1];
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	75bb      	strb	r3, [r7, #22]
    out[11] = (char)(quat[2] >> 24);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3308      	adds	r3, #8
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	161b      	asrs	r3, r3, #24
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	75fb      	strb	r3, [r7, #23]
    out[12] = (char)(quat[2] >> 16);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3308      	adds	r3, #8
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	141b      	asrs	r3, r3, #16
 800b654:	b2db      	uxtb	r3, r3
 800b656:	763b      	strb	r3, [r7, #24]
    out[13] = (char)(quat[2] >> 8);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3308      	adds	r3, #8
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	121b      	asrs	r3, r3, #8
 800b660:	b2db      	uxtb	r3, r3
 800b662:	767b      	strb	r3, [r7, #25]
    out[14] = (char)quat[2];
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3308      	adds	r3, #8
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	76bb      	strb	r3, [r7, #26]
    out[15] = (char)(quat[3] >> 24);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	330c      	adds	r3, #12
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	161b      	asrs	r3, r3, #24
 800b676:	b2db      	uxtb	r3, r3
 800b678:	76fb      	strb	r3, [r7, #27]
    out[16] = (char)(quat[3] >> 16);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	330c      	adds	r3, #12
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	141b      	asrs	r3, r3, #16
 800b682:	b2db      	uxtb	r3, r3
 800b684:	773b      	strb	r3, [r7, #28]
    out[17] = (char)(quat[3] >> 8);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	330c      	adds	r3, #12
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	121b      	asrs	r3, r3, #8
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	777b      	strb	r3, [r7, #29]
    out[18] = (char)quat[3];
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	330c      	adds	r3, #12
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	77bb      	strb	r3, [r7, #30]
    out[21] = '\r';
 800b69c:	230d      	movs	r3, #13
 800b69e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    out[22] = '\n';
 800b6a2:	230a      	movs	r3, #10
 800b6a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    for (i = 0; i < PACKET_LENGTH; i++)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ac:	e00b      	b.n	800b6c6 <eMPL_send_quat+0xfe>
    {
        // fputc(out[i]);
    	HAL_UART_Transmit_DMA(&PRINT_UART_HANDLE, (uint8_t*) out + i, 1);
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	f107 020c 	add.w	r2, r7, #12
 800b6b4:	4413      	add	r3, r2
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4807      	ldr	r0, [pc, #28]	; (800b6d8 <eMPL_send_quat+0x110>)
 800b6bc:	f7fd f8a0 	bl	8008800 <HAL_UART_Transmit_DMA>
    for (i = 0; i < PACKET_LENGTH; i++)
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	2b16      	cmp	r3, #22
 800b6ca:	ddf0      	ble.n	800b6ae <eMPL_send_quat+0xe6>
 800b6cc:	e000      	b.n	800b6d0 <eMPL_send_quat+0x108>
        return;
 800b6ce:	bf00      	nop
    }
}
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000764 	.word	0x20000764

0800b6dc <eMPL_send_data>:

void eMPL_send_data(unsigned char type, long *data)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08a      	sub	sp, #40	; 0x28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	6039      	str	r1, [r7, #0]
 800b6e6:	71fb      	strb	r3, [r7, #7]
    char out[PACKET_LENGTH];
    int i;
    if (!data)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 8114 	beq.w	800b918 <eMPL_send_data+0x23c>
        return;
    memset(out, 0, PACKET_LENGTH);
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	2217      	movs	r2, #23
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f006 f9db 	bl	8011ab4 <memset>
    out[0] = '$';
 800b6fe:	2324      	movs	r3, #36	; 0x24
 800b700:	733b      	strb	r3, [r7, #12]
    out[1] = PACKET_DATA;
 800b702:	2303      	movs	r3, #3
 800b704:	737b      	strb	r3, [r7, #13]
    out[2] = type;
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	73bb      	strb	r3, [r7, #14]
    out[21] = '\r';
 800b70a:	230d      	movs	r3, #13
 800b70c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    out[22] = '\n';
 800b710:	230a      	movs	r3, #10
 800b712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    switch (type)
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	2b06      	cmp	r3, #6
 800b71a:	f200 80ff 	bhi.w	800b91c <eMPL_send_data+0x240>
 800b71e:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <eMPL_send_data+0x48>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b847 	.word	0x0800b847
 800b728:	0800b847 	.word	0x0800b847
 800b72c:	0800b847 	.word	0x0800b847
 800b730:	0800b819 	.word	0x0800b819
 800b734:	0800b847 	.word	0x0800b847
 800b738:	0800b741 	.word	0x0800b741
 800b73c:	0800b8cb 	.word	0x0800b8cb
    {
    /* Two bytes per-element. */
    case PACKET_DATA_ROT:
        out[3] = (char)(data[0] >> 24);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	161b      	asrs	r3, r3, #24
 800b746:	b2db      	uxtb	r3, r3
 800b748:	73fb      	strb	r3, [r7, #15]
        out[4] = (char)(data[0] >> 16);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	141b      	asrs	r3, r3, #16
 800b750:	b2db      	uxtb	r3, r3
 800b752:	743b      	strb	r3, [r7, #16]
        out[5] = (char)(data[1] >> 24);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	3304      	adds	r3, #4
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	161b      	asrs	r3, r3, #24
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	747b      	strb	r3, [r7, #17]
        out[6] = (char)(data[1] >> 16);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	3304      	adds	r3, #4
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	141b      	asrs	r3, r3, #16
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	74bb      	strb	r3, [r7, #18]
        out[7] = (char)(data[2] >> 24);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	3308      	adds	r3, #8
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	161b      	asrs	r3, r3, #24
 800b774:	b2db      	uxtb	r3, r3
 800b776:	74fb      	strb	r3, [r7, #19]
        out[8] = (char)(data[2] >> 16);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	3308      	adds	r3, #8
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	141b      	asrs	r3, r3, #16
 800b780:	b2db      	uxtb	r3, r3
 800b782:	753b      	strb	r3, [r7, #20]
        out[9] = (char)(data[3] >> 24);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	330c      	adds	r3, #12
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	161b      	asrs	r3, r3, #24
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	757b      	strb	r3, [r7, #21]
        out[10] = (char)(data[3] >> 16);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	330c      	adds	r3, #12
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	141b      	asrs	r3, r3, #16
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	75bb      	strb	r3, [r7, #22]
        out[11] = (char)(data[4] >> 24);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	3310      	adds	r3, #16
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	161b      	asrs	r3, r3, #24
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	75fb      	strb	r3, [r7, #23]
        out[12] = (char)(data[4] >> 16);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	3310      	adds	r3, #16
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	141b      	asrs	r3, r3, #16
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	763b      	strb	r3, [r7, #24]
        out[13] = (char)(data[5] >> 24);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	3314      	adds	r3, #20
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	161b      	asrs	r3, r3, #24
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	767b      	strb	r3, [r7, #25]
        out[14] = (char)(data[5] >> 16);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	3314      	adds	r3, #20
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	141b      	asrs	r3, r3, #16
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	76bb      	strb	r3, [r7, #26]
        out[15] = (char)(data[6] >> 24);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	3318      	adds	r3, #24
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	161b      	asrs	r3, r3, #24
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	76fb      	strb	r3, [r7, #27]
        out[16] = (char)(data[6] >> 16);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	3318      	adds	r3, #24
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	141b      	asrs	r3, r3, #16
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	773b      	strb	r3, [r7, #28]
        out[17] = (char)(data[7] >> 24);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	331c      	adds	r3, #28
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	161b      	asrs	r3, r3, #24
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	777b      	strb	r3, [r7, #29]
        out[18] = (char)(data[7] >> 16);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	331c      	adds	r3, #28
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	141b      	asrs	r3, r3, #16
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	77bb      	strb	r3, [r7, #30]
        out[19] = (char)(data[8] >> 24);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	3320      	adds	r3, #32
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	161b      	asrs	r3, r3, #24
 800b804:	b2db      	uxtb	r3, r3
 800b806:	77fb      	strb	r3, [r7, #31]
        out[20] = (char)(data[8] >> 16);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	3320      	adds	r3, #32
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	141b      	asrs	r3, r3, #16
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f887 3020 	strb.w	r3, [r7, #32]
        break;
 800b816:	e06c      	b.n	800b8f2 <eMPL_send_data+0x216>
    /* Four bytes per-element. */
    /* Four elements. */
    case PACKET_DATA_QUAT:
        out[15] = (char)(data[3] >> 24);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	330c      	adds	r3, #12
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	161b      	asrs	r3, r3, #24
 800b820:	b2db      	uxtb	r3, r3
 800b822:	76fb      	strb	r3, [r7, #27]
        out[16] = (char)(data[3] >> 16);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	330c      	adds	r3, #12
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	141b      	asrs	r3, r3, #16
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	773b      	strb	r3, [r7, #28]
        out[17] = (char)(data[3] >> 8);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	330c      	adds	r3, #12
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	121b      	asrs	r3, r3, #8
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	777b      	strb	r3, [r7, #29]
        out[18] = (char)data[3];
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	330c      	adds	r3, #12
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	77bb      	strb	r3, [r7, #30]
    /* Three elements. */
    case PACKET_DATA_ACCEL:
    case PACKET_DATA_GYRO:
    case PACKET_DATA_COMPASS:
    case PACKET_DATA_EULER:
        out[3] = (char)(data[0] >> 24);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	161b      	asrs	r3, r3, #24
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	73fb      	strb	r3, [r7, #15]
        out[4] = (char)(data[0] >> 16);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	141b      	asrs	r3, r3, #16
 800b856:	b2db      	uxtb	r3, r3
 800b858:	743b      	strb	r3, [r7, #16]
        out[5] = (char)(data[0] >> 8);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	121b      	asrs	r3, r3, #8
 800b860:	b2db      	uxtb	r3, r3
 800b862:	747b      	strb	r3, [r7, #17]
        out[6] = (char)data[0];
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	74bb      	strb	r3, [r7, #18]
        out[7] = (char)(data[1] >> 24);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	3304      	adds	r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	161b      	asrs	r3, r3, #24
 800b874:	b2db      	uxtb	r3, r3
 800b876:	74fb      	strb	r3, [r7, #19]
        out[8] = (char)(data[1] >> 16);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	3304      	adds	r3, #4
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	141b      	asrs	r3, r3, #16
 800b880:	b2db      	uxtb	r3, r3
 800b882:	753b      	strb	r3, [r7, #20]
        out[9] = (char)(data[1] >> 8);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	3304      	adds	r3, #4
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	121b      	asrs	r3, r3, #8
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	757b      	strb	r3, [r7, #21]
        out[10] = (char)data[1];
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	3304      	adds	r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	b2db      	uxtb	r3, r3
 800b898:	75bb      	strb	r3, [r7, #22]
        out[11] = (char)(data[2] >> 24);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	161b      	asrs	r3, r3, #24
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	75fb      	strb	r3, [r7, #23]
        out[12] = (char)(data[2] >> 16);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	3308      	adds	r3, #8
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	141b      	asrs	r3, r3, #16
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	763b      	strb	r3, [r7, #24]
        out[13] = (char)(data[2] >> 8);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	121b      	asrs	r3, r3, #8
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	767b      	strb	r3, [r7, #25]
        out[14] = (char)data[2];
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	76bb      	strb	r3, [r7, #26]
        break;
 800b8c8:	e013      	b.n	800b8f2 <eMPL_send_data+0x216>
    case PACKET_DATA_HEADING:
        out[3] = (char)(data[0] >> 24);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	161b      	asrs	r3, r3, #24
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	73fb      	strb	r3, [r7, #15]
        out[4] = (char)(data[0] >> 16);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	141b      	asrs	r3, r3, #16
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	743b      	strb	r3, [r7, #16]
        out[5] = (char)(data[0] >> 8);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	121b      	asrs	r3, r3, #8
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	747b      	strb	r3, [r7, #17]
        out[6] = (char)data[0];
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	74bb      	strb	r3, [r7, #18]
        break;
 800b8f0:	bf00      	nop
    default:
        return;
    }
    for (i = 0; i < PACKET_LENGTH; i++)
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f6:	e00b      	b.n	800b910 <eMPL_send_data+0x234>
    {
        // fputc(out[i]);
    	HAL_UART_Transmit_DMA(&PRINT_UART_HANDLE, (uint8_t*) out + i, 1);
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	f107 020c 	add.w	r2, r7, #12
 800b8fe:	4413      	add	r3, r2
 800b900:	2201      	movs	r2, #1
 800b902:	4619      	mov	r1, r3
 800b904:	4807      	ldr	r0, [pc, #28]	; (800b924 <eMPL_send_data+0x248>)
 800b906:	f7fc ff7b 	bl	8008800 <HAL_UART_Transmit_DMA>
    for (i = 0; i < PACKET_LENGTH; i++)
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	3301      	adds	r3, #1
 800b90e:	627b      	str	r3, [r7, #36]	; 0x24
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	2b16      	cmp	r3, #22
 800b914:	ddf0      	ble.n	800b8f8 <eMPL_send_data+0x21c>
 800b916:	e002      	b.n	800b91e <eMPL_send_data+0x242>
        return;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <eMPL_send_data+0x242>
        return;
 800b91c:	bf00      	nop
    }
}
 800b91e:	3728      	adds	r7, #40	; 0x28
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20000764 	.word	0x20000764

0800b928 <inv_get_sensor_type_accel>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_accel(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
    inv_get_accel_set(data, accuracy, timestamp);
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f001 f85d 	bl	800c9f8 <inv_get_accel_set>
    if (eMPL_out.accel_status & INV_NEW_DATA)
 800b93e:	4b06      	ldr	r3, [pc, #24]	; (800b958 <inv_get_sensor_type_accel+0x30>)
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <inv_get_sensor_type_accel+0x26>
        return 1;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <inv_get_sensor_type_accel+0x28>
    else
        return 0;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000844 	.word	0x20000844

0800b95c <inv_get_sensor_type_gyro>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_gyro(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
    inv_get_gyro_set(data, accuracy, timestamp);
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f001 f869 	bl	800ca44 <inv_get_gyro_set>
    if (eMPL_out.gyro_status & INV_NEW_DATA)
 800b972:	4b06      	ldr	r3, [pc, #24]	; (800b98c <inv_get_sensor_type_gyro+0x30>)
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <inv_get_sensor_type_gyro+0x26>
        return 1;
 800b97e:	2301      	movs	r3, #1
 800b980:	e000      	b.n	800b984 <inv_get_sensor_type_gyro+0x28>
    else
        return 0;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20000844 	.word	0x20000844

0800b990 <inv_get_sensor_type_quat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_quat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
    memcpy(data, eMPL_out.quat, sizeof(eMPL_out.quat));
 800b99c:	2210      	movs	r2, #16
 800b99e:	4909      	ldr	r1, [pc, #36]	; (800b9c4 <inv_get_sensor_type_quat+0x34>)
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f006 f85f 	bl	8011a64 <memcpy>
    accuracy[0] = eMPL_out.quat_accuracy;
 800b9a6:	4b07      	ldr	r3, [pc, #28]	; (800b9c4 <inv_get_sensor_type_quat+0x34>)
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	b25a      	sxtb	r2, r3
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800b9b0:	4b04      	ldr	r3, [pc, #16]	; (800b9c4 <inv_get_sensor_type_quat+0x34>)
 800b9b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800b9b8:	4b02      	ldr	r3, [pc, #8]	; (800b9c4 <inv_get_sensor_type_quat+0x34>)
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20000844 	.word	0x20000844

0800b9c8 <inv_get_sensor_type_heading>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_heading(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800b9c8:	b590      	push	{r4, r7, lr}
 800b9ca:	b08d      	sub	sp, #52	; 0x34
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
    long t1, t2, q00, q03, q12, q22;
    float fdata;

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
 800b9d4:	4b37      	ldr	r3, [pc, #220]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a36      	ldr	r2, [pc, #216]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800b9da:	6812      	ldr	r2, [r2, #0]
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f001 fc22 	bl	800d228 <inv_q29_mult>
 800b9e4:	62b8      	str	r0, [r7, #40]	; 0x28
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
 800b9e6:	4b33      	ldr	r3, [pc, #204]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a32      	ldr	r2, [pc, #200]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800b9ec:	68d2      	ldr	r2, [r2, #12]
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f001 fc19 	bl	800d228 <inv_q29_mult>
 800b9f6:	6278      	str	r0, [r7, #36]	; 0x24
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
 800b9f8:	4b2e      	ldr	r3, [pc, #184]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	4a2d      	ldr	r2, [pc, #180]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800b9fe:	6892      	ldr	r2, [r2, #8]
 800ba00:	4611      	mov	r1, r2
 800ba02:	4618      	mov	r0, r3
 800ba04:	f001 fc10 	bl	800d228 <inv_q29_mult>
 800ba08:	6238      	str	r0, [r7, #32]
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
 800ba0a:	4b2a      	ldr	r3, [pc, #168]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	4a29      	ldr	r2, [pc, #164]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800ba10:	6892      	ldr	r2, [r2, #8]
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f001 fc07 	bl	800d228 <inv_q29_mult>
 800ba1a:	61f8      	str	r0, [r7, #28]

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
 800ba1c:	6a3a      	ldr	r2, [r7, #32]
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	61bb      	str	r3, [r7, #24]

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
 800ba24:	69fa      	ldr	r2, [r7, #28]
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	4413      	add	r3, r2
 800ba2a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800ba2e:	617b      	str	r3, [r7, #20]
    fdata = atan2f((float)t1, (float)t2) * 180.f / (float)M_PI;
 800ba30:	69b8      	ldr	r0, [r7, #24]
 800ba32:	f7f7 ff0b 	bl	800384c <__aeabi_i2f>
 800ba36:	4604      	mov	r4, r0
 800ba38:	6978      	ldr	r0, [r7, #20]
 800ba3a:	f7f7 ff07 	bl	800384c <__aeabi_i2f>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4619      	mov	r1, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	f008 fcf8 	bl	8014438 <atan2f>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	491b      	ldr	r1, [pc, #108]	; (800bab8 <inv_get_sensor_type_heading+0xf0>)
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f7 ff51 	bl	80038f4 <__aeabi_fmul>
 800ba52:	4603      	mov	r3, r0
 800ba54:	4919      	ldr	r1, [pc, #100]	; (800babc <inv_get_sensor_type_heading+0xf4>)
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f8 f800 	bl	8003a5c <__aeabi_fdiv>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (fdata < 0.f)
 800ba60:	f04f 0100 	mov.w	r1, #0
 800ba64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba66:	f7f8 f8e3 	bl	8003c30 <__aeabi_fcmplt>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <inv_get_sensor_type_heading+0xb4>
        fdata += 360.f;
 800ba70:	4913      	ldr	r1, [pc, #76]	; (800bac0 <inv_get_sensor_type_heading+0xf8>)
 800ba72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba74:	f7f7 fe36 	bl	80036e4 <__addsf3>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    data[0] = (long)(fdata * 65536.f);
 800ba7c:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800ba80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba82:	f7f7 ff37 	bl	80038f4 <__aeabi_fmul>
 800ba86:	4603      	mov	r3, r0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7f8 f90f 	bl	8003cac <__aeabi_f2iz>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	601a      	str	r2, [r3, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
 800ba94:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	b25a      	sxtb	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800ba9e:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800baa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800baa6:	4b03      	ldr	r3, [pc, #12]	; (800bab4 <inv_get_sensor_type_heading+0xec>)
 800baa8:	6a1b      	ldr	r3, [r3, #32]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3734      	adds	r7, #52	; 0x34
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd90      	pop	{r4, r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000844 	.word	0x20000844
 800bab8:	43340000 	.word	0x43340000
 800babc:	40490fdb 	.word	0x40490fdb
 800bac0:	43b40000 	.word	0x43b40000

0800bac4 <inv_get_sensor_type_euler>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_euler(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800bac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac6:	b095      	sub	sp, #84	; 0x54
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
    long t1, t2, t3;
    long q00, q01, q02, q03, q11, q12, q13, q22, q23, q33;
    float values[3];

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
 800bad0:	4b69      	ldr	r3, [pc, #420]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a68      	ldr	r2, [pc, #416]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bad6:	6812      	ldr	r2, [r2, #0]
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f001 fba4 	bl	800d228 <inv_q29_mult>
 800bae0:	64f8      	str	r0, [r7, #76]	; 0x4c
    q01 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[1]);
 800bae2:	4b65      	ldr	r3, [pc, #404]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a64      	ldr	r2, [pc, #400]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bae8:	6852      	ldr	r2, [r2, #4]
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f001 fb9b 	bl	800d228 <inv_q29_mult>
 800baf2:	64b8      	str	r0, [r7, #72]	; 0x48
    q02 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[2]);
 800baf4:	4b60      	ldr	r3, [pc, #384]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a5f      	ldr	r2, [pc, #380]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bafa:	6892      	ldr	r2, [r2, #8]
 800bafc:	4611      	mov	r1, r2
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 fb92 	bl	800d228 <inv_q29_mult>
 800bb04:	6478      	str	r0, [r7, #68]	; 0x44
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
 800bb06:	4b5c      	ldr	r3, [pc, #368]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a5b      	ldr	r2, [pc, #364]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb0c:	68d2      	ldr	r2, [r2, #12]
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f001 fb89 	bl	800d228 <inv_q29_mult>
 800bb16:	6438      	str	r0, [r7, #64]	; 0x40
    q11 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[1]);
 800bb18:	4b57      	ldr	r3, [pc, #348]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	4a56      	ldr	r2, [pc, #344]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb1e:	6852      	ldr	r2, [r2, #4]
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f001 fb80 	bl	800d228 <inv_q29_mult>
 800bb28:	63f8      	str	r0, [r7, #60]	; 0x3c
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
 800bb2a:	4b53      	ldr	r3, [pc, #332]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4a52      	ldr	r2, [pc, #328]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb30:	6892      	ldr	r2, [r2, #8]
 800bb32:	4611      	mov	r1, r2
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 fb77 	bl	800d228 <inv_q29_mult>
 800bb3a:	63b8      	str	r0, [r7, #56]	; 0x38
    q13 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[3]);
 800bb3c:	4b4e      	ldr	r3, [pc, #312]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4a4d      	ldr	r2, [pc, #308]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb42:	68d2      	ldr	r2, [r2, #12]
 800bb44:	4611      	mov	r1, r2
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 fb6e 	bl	800d228 <inv_q29_mult>
 800bb4c:	6378      	str	r0, [r7, #52]	; 0x34
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
 800bb4e:	4b4a      	ldr	r3, [pc, #296]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	4a49      	ldr	r2, [pc, #292]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb54:	6892      	ldr	r2, [r2, #8]
 800bb56:	4611      	mov	r1, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f001 fb65 	bl	800d228 <inv_q29_mult>
 800bb5e:	6338      	str	r0, [r7, #48]	; 0x30
    q23 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[3]);
 800bb60:	4b45      	ldr	r3, [pc, #276]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	4a44      	ldr	r2, [pc, #272]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb66:	68d2      	ldr	r2, [r2, #12]
 800bb68:	4611      	mov	r1, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f001 fb5c 	bl	800d228 <inv_q29_mult>
 800bb70:	62f8      	str	r0, [r7, #44]	; 0x2c
    q33 = inv_q29_mult(eMPL_out.quat[3], eMPL_out.quat[3]);
 800bb72:	4b41      	ldr	r3, [pc, #260]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	4a40      	ldr	r2, [pc, #256]	; (800bc78 <inv_get_sensor_type_euler+0x1b4>)
 800bb78:	68d2      	ldr	r2, [r2, #12]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fb53 	bl	800d228 <inv_q29_mult>
 800bb82:	62b8      	str	r0, [r7, #40]	; 0x28

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
 800bb84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
 800bb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb90:	4413      	add	r3, r2
 800bb92:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bb96:	623b      	str	r3, [r7, #32]
    values[2] = -atan2f((float)t1, (float)t2) * 180.f / (float)M_PI;
 800bb98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb9a:	f7f7 fe57 	bl	800384c <__aeabi_i2f>
 800bb9e:	4604      	mov	r4, r0
 800bba0:	6a38      	ldr	r0, [r7, #32]
 800bba2:	f7f7 fe53 	bl	800384c <__aeabi_i2f>
 800bba6:	4603      	mov	r3, r0
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f008 fc44 	bl	8014438 <atan2f>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bbb6:	4931      	ldr	r1, [pc, #196]	; (800bc7c <inv_get_sensor_type_euler+0x1b8>)
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7f7 fe9b 	bl	80038f4 <__aeabi_fmul>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	492f      	ldr	r1, [pc, #188]	; (800bc80 <inv_get_sensor_type_euler+0x1bc>)
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f7 ff4a 	bl	8003a5c <__aeabi_fdiv>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	61bb      	str	r3, [r7, #24]

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
 800bbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd0:	4413      	add	r3, r2
 800bbd2:	61fb      	str	r3, [r7, #28]
    values[0] = atan2f((float)t3, sqrtf((float)t1 * t1 + (float)t2 * t2)) * 180.f / (float)M_PI;
 800bbd4:	69f8      	ldr	r0, [r7, #28]
 800bbd6:	f7f7 fe39 	bl	800384c <__aeabi_i2f>
 800bbda:	4604      	mov	r4, r0
 800bbdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbde:	f7f7 fe35 	bl	800384c <__aeabi_i2f>
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbe6:	f7f7 fe31 	bl	800384c <__aeabi_i2f>
 800bbea:	4603      	mov	r3, r0
 800bbec:	4619      	mov	r1, r3
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f7f7 fe80 	bl	80038f4 <__aeabi_fmul>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461e      	mov	r6, r3
 800bbf8:	6a38      	ldr	r0, [r7, #32]
 800bbfa:	f7f7 fe27 	bl	800384c <__aeabi_i2f>
 800bbfe:	4605      	mov	r5, r0
 800bc00:	6a38      	ldr	r0, [r7, #32]
 800bc02:	f7f7 fe23 	bl	800384c <__aeabi_i2f>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f7f7 fe72 	bl	80038f4 <__aeabi_fmul>
 800bc10:	4603      	mov	r3, r0
 800bc12:	4619      	mov	r1, r3
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7f7 fd65 	bl	80036e4 <__addsf3>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f008 fc0d 	bl	801443c <sqrtf>
 800bc22:	4603      	mov	r3, r0
 800bc24:	4619      	mov	r1, r3
 800bc26:	4620      	mov	r0, r4
 800bc28:	f008 fc06 	bl	8014438 <atan2f>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	4913      	ldr	r1, [pc, #76]	; (800bc7c <inv_get_sensor_type_euler+0x1b8>)
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7f7 fe5f 	bl	80038f4 <__aeabi_fmul>
 800bc36:	4603      	mov	r3, r0
 800bc38:	4911      	ldr	r1, [pc, #68]	; (800bc80 <inv_get_sensor_type_euler+0x1bc>)
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7f7 ff0e 	bl	8003a5c <__aeabi_fdiv>
 800bc40:	4603      	mov	r3, r0
 800bc42:	613b      	str	r3, [r7, #16]
    /* Z component of the Zbody axis in World frame */
    t2 = q33 + q00 - (1L << 30);
 800bc44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc48:	4413      	add	r3, r2
 800bc4a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bc4e:	623b      	str	r3, [r7, #32]
    if (t2 < 0)
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da1d      	bge.n	800bc92 <inv_get_sensor_type_euler+0x1ce>
    {
        if (values[0] >= 0)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f04f 0100 	mov.w	r1, #0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f7 fffb 	bl	8003c58 <__aeabi_fcmpge>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00d      	beq.n	800bc84 <inv_get_sensor_type_euler+0x1c0>
            values[0] = 180.f - values[0];
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4803      	ldr	r0, [pc, #12]	; (800bc7c <inv_get_sensor_type_euler+0x1b8>)
 800bc6e:	f7f7 fd37 	bl	80036e0 <__aeabi_fsub>
 800bc72:	4603      	mov	r3, r0
 800bc74:	613b      	str	r3, [r7, #16]
 800bc76:	e00c      	b.n	800bc92 <inv_get_sensor_type_euler+0x1ce>
 800bc78:	20000844 	.word	0x20000844
 800bc7c:	43340000 	.word	0x43340000
 800bc80:	40490fdb 	.word	0x40490fdb
        else
            values[0] = -180.f - values[0];
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	4619      	mov	r1, r3
 800bc88:	4848      	ldr	r0, [pc, #288]	; (800bdac <inv_get_sensor_type_euler+0x2e8>)
 800bc8a:	f7f7 fd29 	bl	80036e0 <__aeabi_fsub>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	613b      	str	r3, [r7, #16]
    }

    /* X component of the Xbody axis in World frame */
    t1 = q11 + q00 - (1L << 30);
 800bc92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc96:	4413      	add	r3, r2
 800bc98:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Y component of the Xbody axis in World frame */
    t2 = q12 + q03;
 800bc9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bca2:	4413      	add	r3, r2
 800bca4:	623b      	str	r3, [r7, #32]
    /* Z component of the Xbody axis in World frame */
    t3 = q13 - q02;
 800bca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	61fb      	str	r3, [r7, #28]

    values[1] = (atan2f((float)(q33 + q00 - (1L << 30)), (float)(q13 - q02)) * 180.f / (float)M_PI - 90);
 800bcae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7f7 fdc7 	bl	800384c <__aeabi_i2f>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f7 fdc0 	bl	800384c <__aeabi_i2f>
 800bccc:	4603      	mov	r3, r0
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f008 fbb1 	bl	8014438 <atan2f>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	4935      	ldr	r1, [pc, #212]	; (800bdb0 <inv_get_sensor_type_euler+0x2ec>)
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7f7 fe0a 	bl	80038f4 <__aeabi_fmul>
 800bce0:	4603      	mov	r3, r0
 800bce2:	4934      	ldr	r1, [pc, #208]	; (800bdb4 <inv_get_sensor_type_euler+0x2f0>)
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7f7 feb9 	bl	8003a5c <__aeabi_fdiv>
 800bcea:	4603      	mov	r3, r0
 800bcec:	4932      	ldr	r1, [pc, #200]	; (800bdb8 <inv_get_sensor_type_euler+0x2f4>)
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7f7 fcf6 	bl	80036e0 <__aeabi_fsub>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	617b      	str	r3, [r7, #20]
    if (values[1] >= 90)
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	492f      	ldr	r1, [pc, #188]	; (800bdb8 <inv_get_sensor_type_euler+0x2f4>)
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7f7 ffab 	bl	8003c58 <__aeabi_fcmpge>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d006      	beq.n	800bd16 <inv_get_sensor_type_euler+0x252>
        values[1] = 180 - values[1];
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4828      	ldr	r0, [pc, #160]	; (800bdb0 <inv_get_sensor_type_euler+0x2ec>)
 800bd0e:	f7f7 fce7 	bl	80036e0 <__aeabi_fsub>
 800bd12:	4603      	mov	r3, r0
 800bd14:	617b      	str	r3, [r7, #20]

    if (values[1] < -90)
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	4928      	ldr	r1, [pc, #160]	; (800bdbc <inv_get_sensor_type_euler+0x2f8>)
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7f7 ff88 	bl	8003c30 <__aeabi_fcmplt>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <inv_get_sensor_type_euler+0x270>
        values[1] = -180 - values[1];
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4820      	ldr	r0, [pc, #128]	; (800bdac <inv_get_sensor_type_euler+0x2e8>)
 800bd2c:	f7f7 fcd8 	bl	80036e0 <__aeabi_fsub>
 800bd30:	4603      	mov	r3, r0
 800bd32:	617b      	str	r3, [r7, #20]
    data[0] = (long)(values[0] * 65536.f);
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f7 fdda 	bl	80038f4 <__aeabi_fmul>
 800bd40:	4603      	mov	r3, r0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f7 ffb2 	bl	8003cac <__aeabi_f2iz>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	601a      	str	r2, [r3, #0]
    data[1] = (long)(values[1] * 65536.f);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f7 fdcd 	bl	80038f4 <__aeabi_fmul>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	1d1c      	adds	r4, r3, #4
 800bd62:	4610      	mov	r0, r2
 800bd64:	f7f7 ffa2 	bl	8003cac <__aeabi_f2iz>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	6023      	str	r3, [r4, #0]
    data[2] = (long)(values[2] * 65536.f);
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7f7 fdbe 	bl	80038f4 <__aeabi_fmul>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f103 0408 	add.w	r4, r3, #8
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7f7 ff92 	bl	8003cac <__aeabi_f2iz>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	6023      	str	r3, [r4, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
 800bd8c:	4b0c      	ldr	r3, [pc, #48]	; (800bdc0 <inv_get_sensor_type_euler+0x2fc>)
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	b25a      	sxtb	r2, r3
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800bd96:	4b0a      	ldr	r3, [pc, #40]	; (800bdc0 <inv_get_sensor_type_euler+0x2fc>)
 800bd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800bd9e:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <inv_get_sensor_type_euler+0x2fc>)
 800bda0:	6a1b      	ldr	r3, [r3, #32]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3754      	adds	r7, #84	; 0x54
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	c3340000 	.word	0xc3340000
 800bdb0:	43340000 	.word	0x43340000
 800bdb4:	40490fdb 	.word	0x40490fdb
 800bdb8:	42b40000 	.word	0x42b40000
 800bdbc:	c2b40000 	.word	0xc2b40000
 800bdc0:	20000844 	.word	0x20000844

0800bdc4 <inv_get_sensor_type_rot_mat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_rot_mat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
    inv_quaternion_to_rotation(eMPL_out.quat, data);
 800bdd0:	68f9      	ldr	r1, [r7, #12]
 800bdd2:	4809      	ldr	r0, [pc, #36]	; (800bdf8 <inv_get_sensor_type_rot_mat+0x34>)
 800bdd4:	f001 ff05 	bl	800dbe2 <inv_quaternion_to_rotation>
    accuracy[0] = eMPL_out.quat_accuracy;
 800bdd8:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <inv_get_sensor_type_rot_mat+0x34>)
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	b25a      	sxtb	r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <inv_get_sensor_type_rot_mat+0x34>)
 800bde4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800bdea:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <inv_get_sensor_type_rot_mat+0x34>)
 800bdec:	6a1b      	ldr	r3, [r3, #32]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000844 	.word	0x20000844

0800bdfc <inv_generate_eMPL_outputs>:

static inv_error_t inv_generate_eMPL_outputs(struct inv_sensor_cal_t *sensor_cal)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
    int use_sensor;
    long sr = 1000;
 800be04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be08:	60bb      	str	r3, [r7, #8]
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
 800be0a:	4a4c      	ldr	r2, [pc, #304]	; (800bf3c <inv_generate_eMPL_outputs+0x140>)
 800be0c:	494c      	ldr	r1, [pc, #304]	; (800bf40 <inv_generate_eMPL_outputs+0x144>)
 800be0e:	484d      	ldr	r0, [pc, #308]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800be10:	f002 fade 	bl	800e3d0 <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be18:	4a4a      	ldr	r2, [pc, #296]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800be1a:	6153      	str	r3, [r2, #20]
    eMPL_out.accel_status = sensor_cal->accel.status;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be20:	4a48      	ldr	r2, [pc, #288]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800be22:	6193      	str	r3, [r2, #24]
    eMPL_out.compass_status = sensor_cal->compass.status;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be2a:	4a46      	ldr	r2, [pc, #280]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800be2c:	61d3      	str	r3, [r2, #28]

    /* Find the highest sample rate and tie sensor fusion timestamps to that one. */
    if (sensor_cal->gyro.status & INV_SENSOR_ON)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be36:	2b00      	cmp	r3, #0
 800be38:	d004      	beq.n	800be44 <inv_generate_eMPL_outputs+0x48>
    {
        sr = sensor_cal->gyro.sample_rate_ms;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	60bb      	str	r3, [r7, #8]
        use_sensor = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d009      	beq.n	800be64 <inv_generate_eMPL_outputs+0x68>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	429a      	cmp	r2, r3
 800be58:	dd04      	ble.n	800be64 <inv_generate_eMPL_outputs+0x68>
    {
        sr = sensor_cal->accel.sample_rate_ms;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5e:	60bb      	str	r3, [r7, #8]
        use_sensor = 1;
 800be60:	2301      	movs	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00b      	beq.n	800be8a <inv_generate_eMPL_outputs+0x8e>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	dd05      	ble.n	800be8a <inv_generate_eMPL_outputs+0x8e>
    {
        sr = sensor_cal->compass.sample_rate_ms;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be84:	60bb      	str	r3, [r7, #8]
        use_sensor = 2;
 800be86:	2302      	movs	r3, #2
 800be88:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800be90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <inv_generate_eMPL_outputs+0xb4>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	dd05      	ble.n	800beb0 <inv_generate_eMPL_outputs+0xb4>
    {
        sr = sensor_cal->quat.sample_rate_ms;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800beaa:	60bb      	str	r3, [r7, #8]
        use_sensor = 3;
 800beac:	2303      	movs	r3, #3
 800beae:	60fb      	str	r3, [r7, #12]
    }

    switch (use_sensor)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d02e      	beq.n	800bf14 <inv_generate_eMPL_outputs+0x118>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b03      	cmp	r3, #3
 800beba:	dc05      	bgt.n	800bec8 <inv_generate_eMPL_outputs+0xcc>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d00e      	beq.n	800bee0 <inv_generate_eMPL_outputs+0xe4>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d017      	beq.n	800bef8 <inv_generate_eMPL_outputs+0xfc>
    {
    default:
    case 0:
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800becc:	119b      	asrs	r3, r3, #6
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	4a1c      	ldr	r2, [pc, #112]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bed4:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beda:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bedc:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800bede:	e027      	b.n	800bf30 <inv_generate_eMPL_outputs+0x134>
    case 1:
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bee4:	119b      	asrs	r3, r3, #6
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	4a16      	ldr	r2, [pc, #88]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800beec:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef2:	4a14      	ldr	r2, [pc, #80]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bef4:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800bef6:	e01b      	b.n	800bf30 <inv_generate_eMPL_outputs+0x134>
    case 2:
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800befe:	119b      	asrs	r3, r3, #6
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	4a0f      	ldr	r2, [pc, #60]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bf06:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bf0e:	4a0d      	ldr	r2, [pc, #52]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bf10:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800bf12:	e00d      	b.n	800bf30 <inv_generate_eMPL_outputs+0x134>
    case 3:
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800bf1a:	119b      	asrs	r3, r3, #6
 800bf1c:	f003 0301 	and.w	r3, r3, #1
 800bf20:	4a08      	ldr	r2, [pc, #32]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bf22:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800bf2a:	4a06      	ldr	r2, [pc, #24]	; (800bf44 <inv_generate_eMPL_outputs+0x148>)
 800bf2c:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800bf2e:	bf00      	nop
    }

    return INV_SUCCESS;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000868 	.word	0x20000868
 800bf40:	20000854 	.word	0x20000854
 800bf44:	20000844 	.word	0x20000844

0800bf48 <inv_start_eMPL_outputs>:

inv_error_t inv_start_eMPL_outputs(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
    return inv_register_data_cb(inv_generate_eMPL_outputs, INV_PRIORITY_EMPL_OUTPUTS,
 800bf4c:	2207      	movs	r2, #7
 800bf4e:	f240 3183 	movw	r1, #899	; 0x383
 800bf52:	4803      	ldr	r0, [pc, #12]	; (800bf60 <inv_start_eMPL_outputs+0x18>)
 800bf54:	f000 fb5c 	bl	800c610 <inv_register_data_cb>
 800bf58:	4603      	mov	r3, r0
                                INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);

}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800bdfd 	.word	0x0800bdfd

0800bf64 <inv_init_eMPL_outputs>:
{
    return inv_unregister_data_cb(inv_generate_eMPL_outputs);
}

static inv_error_t inv_init_eMPL_outputs(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
    memset(&eMPL_out, 0, sizeof(eMPL_out));
 800bf68:	2228      	movs	r2, #40	; 0x28
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4802      	ldr	r0, [pc, #8]	; (800bf78 <inv_init_eMPL_outputs+0x14>)
 800bf6e:	f005 fda1 	bl	8011ab4 <memset>
    return INV_SUCCESS;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20000844 	.word	0x20000844

0800bf7c <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_eMPL_outputs();
 800bf82:	f7ff ffef 	bl	800bf64 <inv_init_eMPL_outputs>
 800bf86:	6078      	str	r0, [r7, #4]
    if (result)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <inv_enable_eMPL_outputs+0x16>
        return result;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	e003      	b.n	800bf9a <inv_enable_eMPL_outputs+0x1e>
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
 800bf92:	4804      	ldr	r0, [pc, #16]	; (800bfa4 <inv_enable_eMPL_outputs+0x28>)
 800bf94:	f002 fb46 	bl	800e624 <inv_register_mpl_start_notification>
 800bf98:	4603      	mov	r3, r0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	0800bf49 	.word	0x0800bf49

0800bfa8 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
 800bfb0:	2248      	movs	r2, #72	; 0x48
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	480f      	ldr	r0, [pc, #60]	; (800bff4 <inv_db_load_func+0x4c>)
 800bfb6:	f005 fd55 	bl	8011a64 <memcpy>
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <inv_db_load_func+0x50>)
 800bfbc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800bfc0:	4a0e      	ldr	r2, [pc, #56]	; (800bffc <inv_db_load_func+0x54>)
 800bfc2:	6353      	str	r3, [r2, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
 800bfc4:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <inv_db_load_func+0x50>)
 800bfc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bfca:	4a0c      	ldr	r2, [pc, #48]	; (800bffc <inv_db_load_func+0x54>)
 800bfcc:	6793      	str	r3, [r2, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
 800bfce:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <inv_db_load_func+0x50>)
 800bfd0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bfd4:	4a09      	ldr	r2, [pc, #36]	; (800bffc <inv_db_load_func+0x54>)
 800bfd6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    // TODO
    if (sensors.compass.accuracy == 3)
 800bfda:	4b08      	ldr	r3, [pc, #32]	; (800bffc <inv_db_load_func+0x54>)
 800bfdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d102      	bne.n	800bfea <inv_db_load_func+0x42>
    {
        inv_set_compass_bias_found(1);
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	f002 fa91 	bl	800e50c <inv_set_compass_bias_found>
    }
    return INV_SUCCESS;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	20000960 	.word	0x20000960
 800bff8:	2000086c 	.word	0x2000086c
 800bffc:	200009ac 	.word	0x200009ac

0800c000 <inv_db_save_func>:

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
 800c008:	2248      	movs	r2, #72	; 0x48
 800c00a:	4904      	ldr	r1, [pc, #16]	; (800c01c <inv_db_save_func+0x1c>)
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f005 fd29 	bl	8011a64 <memcpy>
    return INV_SUCCESS;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20000960 	.word	0x20000960

0800c020 <inv_init_data_builder>:

/** Initialize the data builder
 */
inv_error_t inv_init_data_builder(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
 800c024:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c028:	2100      	movs	r1, #0
 800c02a:	480a      	ldr	r0, [pc, #40]	; (800c054 <inv_init_data_builder+0x34>)
 800c02c:	f005 fd42 	bl	8011ab4 <memset>
    memset(&sensors, 0, sizeof(sensors));
 800c030:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c034:	2100      	movs	r1, #0
 800c036:	4808      	ldr	r0, [pc, #32]	; (800c058 <inv_init_data_builder+0x38>)
 800c038:	f005 fd3c 	bl	8011ab4 <memset>

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
 800c03c:	f000 fd8c 	bl	800cb58 <inv_reset_compass_soft_iron_matrix>

    return inv_register_load_store(inv_db_load_func, inv_db_save_func, sizeof(inv_data_builder.save), INV_DB_SAVE_KEY);
 800c040:	f24d 0393 	movw	r3, #53395	; 0xd093
 800c044:	2248      	movs	r2, #72	; 0x48
 800c046:	4905      	ldr	r1, [pc, #20]	; (800c05c <inv_init_data_builder+0x3c>)
 800c048:	4805      	ldr	r0, [pc, #20]	; (800c060 <inv_init_data_builder+0x40>)
 800c04a:	f002 fb3f 	bl	800e6cc <inv_register_load_store>
 800c04e:	4603      	mov	r3, r0
}
 800c050:	4618      	mov	r0, r3
 800c052:	bd80      	pop	{r7, pc}
 800c054:	2000086c 	.word	0x2000086c
 800c058:	200009ac 	.word	0x200009ac
 800c05c:	0800c001 	.word	0x0800c001
 800c060:	0800bfa9 	.word	0x0800bfa9

0800c064 <set_sensor_orientation_and_scale>:
 * @param[in] orientation Orientation description of how part is mounted.
 * @param[in] sensitivity A Scale factor to convert from hardware units to
 *            standard units (dps, uT, g).
 */
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor, int orientation, long sensitivity)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
    sensor->sensitivity = sensitivity;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->orientation = orientation;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	601a      	str	r2, [r3, #0]
}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr
	...

0800c088 <inv_set_gyro_orientation_and_scale>:
 * @param[in] sensitivity A scale factor to convert device units to degrees per second scaled by 2^16
 *            such that degrees_per_second  = device_units * sensitivity / 2^30. Typically
 *            it works out to be the maximum rate * 2^15.
 */
void inv_set_gyro_orientation_and_scale(int orientation, long sensitivity)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation, sensitivity);
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4803      	ldr	r0, [pc, #12]	; (800c0a4 <inv_set_gyro_orientation_and_scale+0x1c>)
 800c098:	f7ff ffe4 	bl	800c064 <set_sensor_orientation_and_scale>
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	200009ac 	.word	0x200009ac

0800c0a8 <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
 * @param[in] sample_rate_us Set Gyro Sample rate in us
 */
void inv_set_gyro_sample_rate(long sample_rate_us)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
 800c0b0:	4a0d      	ldr	r2, [pc, #52]	; (800c0e8 <inv_set_gyro_sample_rate+0x40>)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6293      	str	r3, [r2, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a0c      	ldr	r2, [pc, #48]	; (800c0ec <inv_set_gyro_sample_rate+0x44>)
 800c0ba:	fb82 1203 	smull	r1, r2, r2, r3
 800c0be:	1192      	asrs	r2, r2, #6
 800c0c0:	17db      	asrs	r3, r3, #31
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <inv_set_gyro_sample_rate+0x40>)
 800c0c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0)
 800c0c8:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <inv_set_gyro_sample_rate+0x40>)
 800c0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d105      	bne.n	800c0dc <inv_set_gyro_sample_rate+0x34>
    {
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
 800c0d0:	4a07      	ldr	r2, [pc, #28]	; (800c0f0 <inv_set_gyro_sample_rate+0x48>)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0d8:	4a03      	ldr	r2, [pc, #12]	; (800c0e8 <inv_set_gyro_sample_rate+0x40>)
 800c0da:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bc80      	pop	{r7}
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	200009ac 	.word	0x200009ac
 800c0ec:	10624dd3 	.word	0x10624dd3
 800c0f0:	000f4240 	.word	0x000f4240

0800c0f4 <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
 * @param[in] sample_rate_us Set Accel Sample rate in us
 */
void inv_set_accel_sample_rate(long sample_rate_us)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
 800c0fc:	4a0e      	ldr	r2, [pc, #56]	; (800c138 <inv_set_accel_sample_rate+0x44>)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	66d3      	str	r3, [r2, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a0d      	ldr	r2, [pc, #52]	; (800c13c <inv_set_accel_sample_rate+0x48>)
 800c106:	fb82 1203 	smull	r1, r2, r2, r3
 800c10a:	1192      	asrs	r2, r2, #6
 800c10c:	17db      	asrs	r3, r3, #31
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	4a09      	ldr	r2, [pc, #36]	; (800c138 <inv_set_accel_sample_rate+0x44>)
 800c112:	6713      	str	r3, [r2, #112]	; 0x70
    if (sensors.accel.bandwidth == 0)
 800c114:	4b08      	ldr	r3, [pc, #32]	; (800c138 <inv_set_accel_sample_rate+0x44>)
 800c116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d106      	bne.n	800c12c <inv_set_accel_sample_rate+0x38>
    {
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
 800c11e:	4a08      	ldr	r2, [pc, #32]	; (800c140 <inv_set_accel_sample_rate+0x4c>)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	fb92 f3f3 	sdiv	r3, r2, r3
 800c126:	4a04      	ldr	r2, [pc, #16]	; (800c138 <inv_set_accel_sample_rate+0x44>)
 800c128:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	bc80      	pop	{r7}
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	200009ac 	.word	0x200009ac
 800c13c:	10624dd3 	.word	0x10624dd3
 800c140:	000f4240 	.word	0x000f4240

0800c144 <inv_get_compass_on>:

/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
 */
int inv_get_compass_on()
{
 800c144:	b480      	push	{r7}
 800c146:	af00      	add	r7, sp, #0
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800c148:	4b06      	ldr	r3, [pc, #24]	; (800c164 <inv_get_compass_on+0x20>)
 800c14a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c152:	2b00      	cmp	r3, #0
 800c154:	bf14      	ite	ne
 800c156:	2301      	movne	r3, #1
 800c158:	2300      	moveq	r3, #0
 800c15a:	b2db      	uxtb	r3, r3
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	46bd      	mov	sp, r7
 800c160:	bc80      	pop	{r7}
 800c162:	4770      	bx	lr
 800c164:	200009ac 	.word	0x200009ac

0800c168 <inv_get_gyro_on>:

/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
 */
int inv_get_gyro_on()
{
 800c168:	b480      	push	{r7}
 800c16a:	af00      	add	r7, sp, #0
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800c16c:	4b06      	ldr	r3, [pc, #24]	; (800c188 <inv_get_gyro_on+0x20>)
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c174:	2b00      	cmp	r3, #0
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
}
 800c17e:	4618      	mov	r0, r3
 800c180:	46bd      	mov	sp, r7
 800c182:	bc80      	pop	{r7}
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	200009ac 	.word	0x200009ac

0800c18c <inv_get_accel_on>:

/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
 */
int inv_get_accel_on()
{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800c190:	4b06      	ldr	r3, [pc, #24]	; (800c1ac <inv_get_accel_on+0x20>)
 800c192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	bf14      	ite	ne
 800c19c:	2301      	movne	r3, #1
 800c19e:	2300      	moveq	r3, #0
 800c1a0:	b2db      	uxtb	r3, r3
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bc80      	pop	{r7}
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	200009ac 	.word	0x200009ac

0800c1b0 <inv_get_last_timestamp>:
/** Get last timestamp across all 3 sensors that are on.
 * This find out which timestamp has the largest value for sensors that are on.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_time_t inv_get_last_timestamp()
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
    inv_time_t timestamp = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_SENSOR_ON)
 800c1ba:	4b1f      	ldr	r3, [pc, #124]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <inv_get_last_timestamp+0x1c>
    {
        timestamp = sensors.accel.timestamp;
 800c1c6:	4b1c      	ldr	r3, [pc, #112]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ca:	607b      	str	r3, [r7, #4]
    }
    if (sensors.gyro.status & INV_SENSOR_ON)
 800c1cc:	4b1a      	ldr	r3, [pc, #104]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d007      	beq.n	800c1e8 <inv_get_last_timestamp+0x38>
    {
        if (timestamp < sensors.gyro.timestamp)
 800c1d8:	4b17      	ldr	r3, [pc, #92]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d202      	bcs.n	800c1e8 <inv_get_last_timestamp+0x38>
        {
            timestamp = sensors.gyro.timestamp;
 800c1e2:	4b15      	ldr	r3, [pc, #84]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e6:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON)
 800c1e8:	4b13      	ldr	r3, [pc, #76]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <inv_get_last_timestamp+0x5a>
    {
        if (timestamp < sensors.compass.timestamp)
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c1f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d203      	bcs.n	800c20a <inv_get_last_timestamp+0x5a>
        {
            timestamp = sensors.compass.timestamp;
 800c202:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c208:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON)
 800c20a:	4b0b      	ldr	r3, [pc, #44]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c20c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c214:	2b00      	cmp	r3, #0
 800c216:	d009      	beq.n	800c22c <inv_get_last_timestamp+0x7c>
    {
        if (timestamp < sensors.temp.timestamp)
 800c218:	4b07      	ldr	r3, [pc, #28]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c21a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	429a      	cmp	r2, r3
 800c222:	d203      	bcs.n	800c22c <inv_get_last_timestamp+0x7c>
            timestamp = sensors.temp.timestamp;
 800c224:	4b04      	ldr	r3, [pc, #16]	; (800c238 <inv_get_last_timestamp+0x88>)
 800c226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c22a:	607b      	str	r3, [r7, #4]
    }
    return timestamp;
 800c22c:	687b      	ldr	r3, [r7, #4]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr
 800c238:	200009ac 	.word	0x200009ac

0800c23c <inv_set_accel_orientation_and_scale>:
 * @param[in] sensitivity A scale factor to convert device units to g's
 *            such that g's = device_units * sensitivity / 2^30. Typically
 *            it works out to be the maximum g_value * 2^15.
 */
void inv_set_accel_orientation_and_scale(int orientation, long sensitivity)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation, sensitivity);
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	4803      	ldr	r0, [pc, #12]	; (800c258 <inv_set_accel_orientation_and_scale+0x1c>)
 800c24c:	f7ff ff0a 	bl	800c064 <set_sensor_orientation_and_scale>
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	200009f0 	.word	0x200009f0

0800c25c <inv_apply_calibration>:
 * @param[in,out] sensor structure to modify
 * @param[in] bias bias in the mounting frame, in hardware units scaled by
 *                 2^16. Length 3.
 */
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c26c:	03db      	lsls	r3, r3, #15
 800c26e:	60fb      	str	r3, [r7, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c276:	03db      	lsls	r3, r3, #15
 800c278:	613b      	str	r3, [r7, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c280:	03db      	lsls	r3, r3, #15
 800c282:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	b298      	uxth	r0, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28e:	0059      	lsls	r1, r3, #1
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	330c      	adds	r3, #12
 800c294:	f107 020c 	add.w	r2, r7, #12
 800c298:	f001 fdf7 	bl	800de8a <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	105b      	asrs	r3, r3, #1
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	60fb      	str	r3, [r7, #12]
    raw32[1] -= bias[1] >> 1;
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	105b      	asrs	r3, r3, #1
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	613b      	str	r3, [r7, #16]
    raw32[2] -= bias[2] >> 1;
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	105b      	asrs	r3, r3, #1
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	b298      	uxth	r0, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	0059      	lsls	r1, r3, #1
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3318      	adds	r3, #24
 800c2d4:	f107 020c 	add.w	r2, r7, #12
 800c2d8:	f001 fdd7 	bl	800de8a <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e0:	f043 0220 	orr.w	r2, r3, #32
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c2e8:	bf00      	nop
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <inv_set_compass_disturbance>:

/** Set the state of a compass disturbance
 * @param[in] dist 1=disturbance, 0=no disturbance
 */
void inv_set_compass_disturbance(int dist)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
    inv_data_builder.compass_disturbance = dist;
 800c2f8:	4a04      	ldr	r2, [pc, #16]	; (800c30c <inv_set_compass_disturbance+0x1c>)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	bc80      	pop	{r7}
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	2000086c 	.word	0x2000086c

0800c310 <inv_set_gyro_bias>:
 * @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
 *            Length 3.
 * @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
 */
void inv_set_gyro_bias(const long *bias, int accuracy)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d010      	beq.n	800c342 <inv_set_gyro_bias+0x32>
    {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias)))
 800c320:	220c      	movs	r2, #12
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	4819      	ldr	r0, [pc, #100]	; (800c38c <inv_set_gyro_bias+0x7c>)
 800c326:	f005 fb8d 	bl	8011a44 <memcmp>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d008      	beq.n	800c342 <inv_set_gyro_bias+0x32>
        {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
 800c330:	220c      	movs	r2, #12
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	4815      	ldr	r0, [pc, #84]	; (800c38c <inv_set_gyro_bias+0x7c>)
 800c336:	f005 fb95 	bl	8011a64 <memcpy>
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800c33a:	4914      	ldr	r1, [pc, #80]	; (800c38c <inv_set_gyro_bias+0x7c>)
 800c33c:	4814      	ldr	r0, [pc, #80]	; (800c390 <inv_set_gyro_bias+0x80>)
 800c33e:	f7ff ff8d 	bl	800c25c <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
 800c342:	4a13      	ldr	r2, [pc, #76]	; (800c390 <inv_set_gyro_bias+0x80>)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	6353      	str	r3, [r2, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
 800c348:	4a12      	ldr	r2, [pc, #72]	; (800c394 <inv_set_gyro_bias+0x84>)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
 800c350:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <inv_set_gyro_bias+0x80>)
 800c352:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c356:	2b00      	cmp	r3, #0
 800c358:	d006      	beq.n	800c368 <inv_set_gyro_bias+0x58>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
 800c35a:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <inv_set_gyro_bias+0x80>)
 800c35c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c360:	4a0c      	ldr	r2, [pc, #48]	; (800c394 <inv_set_gyro_bias+0x84>)
 800c362:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800c366:	e004      	b.n	800c372 <inv_set_gyro_bias+0x62>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
 800c368:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <inv_set_gyro_bias+0x84>)
 800c36a:	f44f 12d8 	mov.w	r2, #1769472	; 0x1b0000
 800c36e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
 800c372:	2200      	movs	r2, #0
 800c374:	2104      	movs	r1, #4
 800c376:	2004      	movs	r0, #4
 800c378:	f000 fe6a 	bl	800d050 <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
 800c37c:	4b05      	ldr	r3, [pc, #20]	; (800c394 <inv_set_gyro_bias+0x84>)
 800c37e:	2201      	movs	r2, #1
 800c380:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	2000096c 	.word	0x2000096c
 800c390:	200009ac 	.word	0x200009ac
 800c394:	2000086c 	.word	0x2000086c

0800c398 <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
 800c39e:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <inv_get_gyro_bias_tc_set+0x2c>)
 800c3a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	bf0c      	ite	eq
 800c3a8:	2301      	moveq	r3, #1
 800c3aa:	2300      	movne	r3, #0
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	607b      	str	r3, [r7, #4]
    inv_data_builder.save.gyro_bias_tc_set = false;
 800c3b0:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <inv_get_gyro_bias_tc_set+0x2c>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return flag;
 800c3b8:	687b      	ldr	r3, [r7, #4]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bc80      	pop	{r7}
 800c3c2:	4770      	bx	lr
 800c3c4:	2000086c 	.word	0x2000086c

0800c3c8 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d004      	beq.n	800c3e2 <inv_get_gyro_bias+0x1a>
        memcpy(bias, inv_data_builder.save.gyro_bias, sizeof(inv_data_builder.save.gyro_bias));
 800c3d8:	220c      	movs	r2, #12
 800c3da:	4908      	ldr	r1, [pc, #32]	; (800c3fc <inv_get_gyro_bias+0x34>)
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f005 fb41 	bl	8011a64 <memcpy>
    if (temp != NULL)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d004      	beq.n	800c3f2 <inv_get_gyro_bias+0x2a>
        temp[0] = inv_data_builder.save.gyro_temp;
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <inv_get_gyro_bias+0x38>)
 800c3ea:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	601a      	str	r2, [r3, #0]
}
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	2000096c 	.word	0x2000096c
 800c400:	2000086c 	.word	0x2000086c

0800c404 <inv_build_accel>:
 *  @param[in]  timestamp
 *              Monotonic time stamp, for Android it's in nanoseconds.
 *  @return     Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_accel(const long *accel, int status, inv_time_t timestamp)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
        fwrite(accel, sizeof(accel[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f003 0320 	and.w	r3, r3, #32
 800c416:	2b00      	cmp	r3, #0
 800c418:	d11e      	bne.n	800c458 <inv_build_accel+0x54>
    {
        sensors.accel.raw[0] = (short)accel[0];
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	b21a      	sxth	r2, r3
 800c420:	4b25      	ldr	r3, [pc, #148]	; (800c4b8 <inv_build_accel+0xb4>)
 800c422:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        sensors.accel.raw[1] = (short)accel[1];
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3304      	adds	r3, #4
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	b21a      	sxth	r2, r3
 800c42e:	4b22      	ldr	r3, [pc, #136]	; (800c4b8 <inv_build_accel+0xb4>)
 800c430:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        sensors.accel.raw[2] = (short)accel[2];
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3308      	adds	r3, #8
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	b21a      	sxth	r2, r3
 800c43c:	4b1e      	ldr	r3, [pc, #120]	; (800c4b8 <inv_build_accel+0xb4>)
 800c43e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        sensors.accel.status |= INV_RAW_DATA;
 800c442:	4b1d      	ldr	r3, [pc, #116]	; (800c4b8 <inv_build_accel+0xb4>)
 800c444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c44a:	4a1b      	ldr	r2, [pc, #108]	; (800c4b8 <inv_build_accel+0xb4>)
 800c44c:	6753      	str	r3, [r2, #116]	; 0x74
        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 800c44e:	491b      	ldr	r1, [pc, #108]	; (800c4bc <inv_build_accel+0xb8>)
 800c450:	481b      	ldr	r0, [pc, #108]	; (800c4c0 <inv_build_accel+0xbc>)
 800c452:	f7ff ff03 	bl	800c25c <inv_apply_calibration>
 800c456:	e01c      	b.n	800c492 <inv_build_accel+0x8e>
    }
    else
    {
        sensors.accel.calibrated[0] = accel[0];
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a16      	ldr	r2, [pc, #88]	; (800c4b8 <inv_build_accel+0xb4>)
 800c45e:	65d3      	str	r3, [r2, #92]	; 0x5c
        sensors.accel.calibrated[1] = accel[1];
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	4a14      	ldr	r2, [pc, #80]	; (800c4b8 <inv_build_accel+0xb4>)
 800c466:	6613      	str	r3, [r2, #96]	; 0x60
        sensors.accel.calibrated[2] = accel[2];
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4a12      	ldr	r2, [pc, #72]	; (800c4b8 <inv_build_accel+0xb4>)
 800c46e:	6653      	str	r3, [r2, #100]	; 0x64
        sensors.accel.status |= INV_CALIBRATED;
 800c470:	4b11      	ldr	r3, [pc, #68]	; (800c4b8 <inv_build_accel+0xb4>)
 800c472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c474:	f043 0320 	orr.w	r3, r3, #32
 800c478:	4a0f      	ldr	r2, [pc, #60]	; (800c4b8 <inv_build_accel+0xb4>)
 800c47a:	6753      	str	r3, [r2, #116]	; 0x74
        sensors.accel.accuracy = status & 3;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f003 0303 	and.w	r3, r3, #3
 800c482:	4a0d      	ldr	r2, [pc, #52]	; (800c4b8 <inv_build_accel+0xb4>)
 800c484:	6793      	str	r3, [r2, #120]	; 0x78
        inv_data_builder.save.accel_accuracy = status & 3;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f003 0303 	and.w	r3, r3, #3
 800c48c:	4a0d      	ldr	r2, [pc, #52]	; (800c4c4 <inv_build_accel+0xc0>)
 800c48e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    }
    sensors.accel.status |= INV_NEW_DATA | INV_SENSOR_ON;
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <inv_build_accel+0xb4>)
 800c494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c496:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800c49a:	4a07      	ldr	r2, [pc, #28]	; (800c4b8 <inv_build_accel+0xb4>)
 800c49c:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.accel.timestamp_prev = sensors.accel.timestamp;
 800c49e:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <inv_build_accel+0xb4>)
 800c4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a2:	4a05      	ldr	r2, [pc, #20]	; (800c4b8 <inv_build_accel+0xb4>)
 800c4a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    sensors.accel.timestamp = timestamp;
 800c4a8:	4a03      	ldr	r2, [pc, #12]	; (800c4b8 <inv_build_accel+0xb4>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	67d3      	str	r3, [r2, #124]	; 0x7c

    return INV_SUCCESS;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	200009ac 	.word	0x200009ac
 800c4bc:	20000980 	.word	0x20000980
 800c4c0:	200009f0 	.word	0x200009f0
 800c4c4:	2000086c 	.word	0x2000086c

0800c4c8 <inv_build_gyro>:
 * @param[in] timestamp Monotonic time stamp, for Android it's in nanoseconds.
 * @param[out] executed Set to 1 if data processing was done.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_gyro(const short *gyro, inv_time_t timestamp)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
        fwrite(gyro, sizeof(gyro[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.gyro.raw, gyro, 3 * sizeof(short));
 800c4d2:	2206      	movs	r2, #6
 800c4d4:	6879      	ldr	r1, [r7, #4]
 800c4d6:	480c      	ldr	r0, [pc, #48]	; (800c508 <inv_build_gyro+0x40>)
 800c4d8:	f005 fac4 	bl	8011a64 <memcpy>
    sensors.gyro.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800c4dc:	4b0b      	ldr	r3, [pc, #44]	; (800c50c <inv_build_gyro+0x44>)
 800c4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e0:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800c4e4:	4a09      	ldr	r2, [pc, #36]	; (800c50c <inv_build_gyro+0x44>)
 800c4e6:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.gyro.timestamp_prev = sensors.gyro.timestamp;
 800c4e8:	4b08      	ldr	r3, [pc, #32]	; (800c50c <inv_build_gyro+0x44>)
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ec:	4a07      	ldr	r2, [pc, #28]	; (800c50c <inv_build_gyro+0x44>)
 800c4ee:	63d3      	str	r3, [r2, #60]	; 0x3c
    sensors.gyro.timestamp = timestamp;
 800c4f0:	4a06      	ldr	r2, [pc, #24]	; (800c50c <inv_build_gyro+0x44>)
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	6393      	str	r3, [r2, #56]	; 0x38
    inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800c4f6:	4906      	ldr	r1, [pc, #24]	; (800c510 <inv_build_gyro+0x48>)
 800c4f8:	4804      	ldr	r0, [pc, #16]	; (800c50c <inv_build_gyro+0x44>)
 800c4fa:	f7ff feaf 	bl	800c25c <inv_apply_calibration>

    return INV_SUCCESS;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	200009b0 	.word	0x200009b0
 800c50c:	200009ac 	.word	0x200009ac
 800c510:	2000096c 	.word	0x2000096c

0800c514 <inv_build_temp>:
 *  @param[in]  timestamp   Monotonic time stamp; for Android it's in
 *                          nanoseconds.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_temp(const long temp, inv_time_t timestamp)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&temp, sizeof(temp), 1, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    sensors.temp.calibrated[0] = temp;
 800c51e:	4a0e      	ldr	r2, [pc, #56]	; (800c558 <inv_build_temp+0x44>)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    sensors.temp.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800c526:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <inv_build_temp+0x44>)
 800c528:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c52c:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800c530:	4a09      	ldr	r2, [pc, #36]	; (800c558 <inv_build_temp+0x44>)
 800c532:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.temp.timestamp_prev = sensors.temp.timestamp;
 800c536:	4b08      	ldr	r3, [pc, #32]	; (800c558 <inv_build_temp+0x44>)
 800c538:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c53c:	4a06      	ldr	r2, [pc, #24]	; (800c558 <inv_build_temp+0x44>)
 800c53e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    sensors.temp.timestamp = timestamp;
 800c542:	4a05      	ldr	r2, [pc, #20]	; (800c558 <inv_build_temp+0x44>)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    /* TODO: Apply scale, remove offset. */

    return INV_SUCCESS;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	bc80      	pop	{r7}
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	200009ac 	.word	0x200009ac

0800c55c <inv_build_quat>:
 *                         nanoseconds.
 * @param[out] executed Set to 1 if data processing was done.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_quat(const long *quat, int status, inv_time_t timestamp)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
        fwrite(quat, sizeof(quat[0]), 4, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.quat.raw, quat, sizeof(sensors.quat.raw));
 800c568:	2210      	movs	r2, #16
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	480e      	ldr	r0, [pc, #56]	; (800c5a8 <inv_build_quat+0x4c>)
 800c56e:	f005 fa79 	bl	8011a64 <memcpy>
    sensors.quat.timestamp = timestamp;
 800c572:	4a0e      	ldr	r2, [pc, #56]	; (800c5ac <inv_build_quat+0x50>)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    sensors.quat.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <inv_build_quat+0x50>)
 800c57c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c580:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800c584:	4a09      	ldr	r2, [pc, #36]	; (800c5ac <inv_build_quat+0x50>)
 800c586:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    sensors.quat.status |= (INV_BIAS_APPLIED & status);
 800c58a:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <inv_build_quat+0x50>)
 800c58c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c596:	4313      	orrs	r3, r2
 800c598:	4a04      	ldr	r2, [pc, #16]	; (800c5ac <inv_build_quat+0x50>)
 800c59a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return INV_SUCCESS;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20000abc 	.word	0x20000abc
 800c5ac:	200009ac 	.word	0x200009ac

0800c5b0 <inv_accel_was_turned_off>:

/** This should be called when the accel has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_accel_was_turned_off()
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
    sensors.accel.status = 0;
 800c5b4:	4b03      	ldr	r3, [pc, #12]	; (800c5c4 <inv_accel_was_turned_off+0x14>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c5ba:	bf00      	nop
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	200009ac 	.word	0x200009ac

0800c5c8 <inv_compass_was_turned_off>:

/** This should be called when the compass has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_compass_was_turned_off()
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
    sensors.compass.status = 0;
 800c5cc:	4b03      	ldr	r3, [pc, #12]	; (800c5dc <inv_compass_was_turned_off+0x14>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800c5d4:	bf00      	nop
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bc80      	pop	{r7}
 800c5da:	4770      	bx	lr
 800c5dc:	200009ac 	.word	0x200009ac

0800c5e0 <inv_quaternion_sensor_was_turned_off>:

/** This should be called when the quaternion data from the DMP has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_quaternion_sensor_was_turned_off(void)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	af00      	add	r7, sp, #0
    sensors.quat.status = 0;
 800c5e4:	4b03      	ldr	r3, [pc, #12]	; (800c5f4 <inv_quaternion_sensor_was_turned_off+0x14>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800c5ec:	bf00      	nop
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bc80      	pop	{r7}
 800c5f2:	4770      	bx	lr
 800c5f4:	200009ac 	.word	0x200009ac

0800c5f8 <inv_gyro_was_turned_off>:

/** This should be called when the gyro has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_gyro_was_turned_off()
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0
    sensors.gyro.status = 0;
 800c5fc:	4b03      	ldr	r3, [pc, #12]	; (800c60c <inv_gyro_was_turned_off+0x14>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c602:	bf00      	nop
 800c604:	46bd      	mov	sp, r7
 800c606:	bc80      	pop	{r7}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	200009ac 	.word	0x200009ac

0800c610 <inv_register_data_cb>:
 *            gyro data, INV_MAG_NEW = compass data. So passing in
 *            INV_ACCEL_NEW | INV_MAG_NEW, a
 *            callback would be generated if there was new magnetomer data OR new accel data.
 */
inv_error_t inv_register_data_cb(inv_error_t (*func)(struct inv_sensor_cal_t *data), int priority, int sensor_type)
{
 800c610:	b480      	push	{r7}
 800c612:	b089      	sub	sp, #36	; 0x24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
    inv_error_t result = INV_SUCCESS;
 800c61c:	2300      	movs	r3, #0
 800c61e:	61fb      	str	r3, [r7, #28]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800c620:	2300      	movs	r3, #0
 800c622:	61bb      	str	r3, [r7, #24]
 800c624:	e01c      	b.n	800c660 <inv_register_data_cb+0x50>
    {
        if ((inv_data_builder.process[kk].func == func) || (inv_data_builder.process[kk].priority == priority))
 800c626:	4948      	ldr	r1, [pc, #288]	; (800c748 <inv_register_data_cb+0x138>)
 800c628:	69ba      	ldr	r2, [r7, #24]
 800c62a:	4613      	mov	r3, r2
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	4413      	add	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	440b      	add	r3, r1
 800c634:	3304      	adds	r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d00b      	beq.n	800c656 <inv_register_data_cb+0x46>
 800c63e:	4942      	ldr	r1, [pc, #264]	; (800c748 <inv_register_data_cb+0x138>)
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	4613      	mov	r3, r2
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	4413      	add	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	440b      	add	r3, r1
 800c64c:	3308      	adds	r3, #8
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	429a      	cmp	r2, r3
 800c654:	d101      	bne.n	800c65a <inv_register_data_cb+0x4a>
        {
            return INV_ERROR_INVALID_PARAMETER; // fixme give a warning
 800c656:	2316      	movs	r3, #22
 800c658:	e071      	b.n	800c73e <inv_register_data_cb+0x12e>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	3301      	adds	r3, #1
 800c65e:	61bb      	str	r3, [r7, #24]
 800c660:	4b39      	ldr	r3, [pc, #228]	; (800c748 <inv_register_data_cb+0x138>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	69ba      	ldr	r2, [r7, #24]
 800c666:	429a      	cmp	r2, r3
 800c668:	dbdd      	blt.n	800c626 <inv_register_data_cb+0x16>
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1)
 800c66a:	4b37      	ldr	r3, [pc, #220]	; (800c748 <inv_register_data_cb+0x138>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b13      	cmp	r3, #19
 800c670:	dc62      	bgt.n	800c738 <inv_register_data_cb+0x128>
    {
        kk = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	61bb      	str	r3, [r7, #24]
        if (inv_data_builder.num_cb != 0)
 800c676:	4b34      	ldr	r3, [pc, #208]	; (800c748 <inv_register_data_cb+0x138>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d038      	beq.n	800c6f0 <inv_register_data_cb+0xe0>
        {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) && (inv_data_builder.process[kk].priority < priority))
 800c67e:	e002      	b.n	800c686 <inv_register_data_cb+0x76>
            {
                kk++;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	3301      	adds	r3, #1
 800c684:	61bb      	str	r3, [r7, #24]
            while ((kk < inv_data_builder.num_cb) && (inv_data_builder.process[kk].priority < priority))
 800c686:	4b30      	ldr	r3, [pc, #192]	; (800c748 <inv_register_data_cb+0x138>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	da0b      	bge.n	800c6a8 <inv_register_data_cb+0x98>
 800c690:	492d      	ldr	r1, [pc, #180]	; (800c748 <inv_register_data_cb+0x138>)
 800c692:	69ba      	ldr	r2, [r7, #24]
 800c694:	4613      	mov	r3, r2
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	3308      	adds	r3, #8
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	dceb      	bgt.n	800c680 <inv_register_data_cb+0x70>
            }
            if (kk != inv_data_builder.num_cb)
 800c6a8:	4b27      	ldr	r3, [pc, #156]	; (800c748 <inv_register_data_cb+0x138>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d01e      	beq.n	800c6f0 <inv_register_data_cb+0xe0>
            {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn)
 800c6b2:	4b25      	ldr	r3, [pc, #148]	; (800c748 <inv_register_data_cb+0x138>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	e016      	b.n	800c6e8 <inv_register_data_cb+0xd8>
                {
                    inv_data_builder.process[nn] = inv_data_builder.process[nn - 1];
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	1e5a      	subs	r2, r3, #1
 800c6be:	4822      	ldr	r0, [pc, #136]	; (800c748 <inv_register_data_cb+0x138>)
 800c6c0:	6979      	ldr	r1, [r7, #20]
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	440b      	add	r3, r1
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	18c1      	adds	r1, r0, r3
 800c6cc:	481e      	ldr	r0, [pc, #120]	; (800c748 <inv_register_data_cb+0x138>)
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	18c2      	adds	r2, r0, r3
 800c6d8:	1d0b      	adds	r3, r1, #4
 800c6da:	3204      	adds	r2, #4
 800c6dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                for (nn = inv_data_builder.num_cb; nn > kk; --nn)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	617b      	str	r3, [r7, #20]
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	dce4      	bgt.n	800c6ba <inv_register_data_cb+0xaa>
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
 800c6f0:	4915      	ldr	r1, [pc, #84]	; (800c748 <inv_register_data_cb+0x138>)
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	4413      	add	r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	3304      	adds	r3, #4
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].priority = priority;
 800c704:	4910      	ldr	r1, [pc, #64]	; (800c748 <inv_register_data_cb+0x138>)
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	4613      	mov	r3, r2
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	440b      	add	r3, r1
 800c712:	3308      	adds	r3, #8
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].data_required = sensor_type;
 800c718:	490b      	ldr	r1, [pc, #44]	; (800c748 <inv_register_data_cb+0x138>)
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	4613      	mov	r3, r2
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	4413      	add	r3, r2
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	440b      	add	r3, r1
 800c726:	330c      	adds	r3, #12
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	601a      	str	r2, [r3, #0]
        inv_data_builder.num_cb++;
 800c72c:	4b06      	ldr	r3, [pc, #24]	; (800c748 <inv_register_data_cb+0x138>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3301      	adds	r3, #1
 800c732:	4a05      	ldr	r2, [pc, #20]	; (800c748 <inv_register_data_cb+0x138>)
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	e001      	b.n	800c73c <inv_register_data_cb+0x12c>
    }
    else
    {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
 800c738:	230c      	movs	r3, #12
 800c73a:	61fb      	str	r3, [r7, #28]
    }

    return result;
 800c73c:	69fb      	ldr	r3, [r7, #28]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3724      	adds	r7, #36	; 0x24
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr
 800c748:	2000086c 	.word	0x2000086c

0800c74c <inv_unregister_data_cb>:
 *            gyro data, INV_MAG_NEW = compass data. So passing in
 *            INV_ACCEL_NEW | INV_MAG_NEW, a
 *            callback would be generated if there was new magnetomer data OR new accel data.
 */
inv_error_t inv_unregister_data_cb(inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800c754:	2300      	movs	r3, #0
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e035      	b.n	800c7c6 <inv_unregister_data_cb+0x7a>
    {
        if (inv_data_builder.process[kk].func == func)
 800c75a:	4920      	ldr	r1, [pc, #128]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	440b      	add	r3, r1
 800c768:	3304      	adds	r3, #4
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d126      	bne.n	800c7c0 <inv_unregister_data_cb+0x74>
        {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3301      	adds	r3, #1
 800c776:	60bb      	str	r3, [r7, #8]
 800c778:	e016      	b.n	800c7a8 <inv_unregister_data_cb+0x5c>
            {
                inv_data_builder.process[nn - 1] = inv_data_builder.process[nn];
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	1e5a      	subs	r2, r3, #1
 800c77e:	4917      	ldr	r1, [pc, #92]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c780:	4613      	mov	r3, r2
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	4413      	add	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4419      	add	r1, r3
 800c78a:	4814      	ldr	r0, [pc, #80]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	4613      	mov	r3, r2
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	18c2      	adds	r2, r0, r3
 800c798:	1d0b      	adds	r3, r1, #4
 800c79a:	3204      	adds	r2, #4
 800c79c:	ca07      	ldmia	r2, {r0, r1, r2}
 800c79e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	60bb      	str	r3, [r7, #8]
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	dbe3      	blt.n	800c77a <inv_unregister_data_cb+0x2e>
            }
            inv_data_builder.num_cb--;
 800c7b2:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	4a08      	ldr	r2, [pc, #32]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c7ba:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	e008      	b.n	800c7d2 <inv_unregister_data_cb+0x86>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <inv_unregister_data_cb+0x90>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	dbc4      	blt.n	800c75a <inv_unregister_data_cb+0xe>
        }
    }

    return INV_SUCCESS; // We did not find the callback
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3714      	adds	r7, #20
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bc80      	pop	{r7}
 800c7da:	4770      	bx	lr
 800c7dc:	2000086c 	.word	0x2000086c

0800c7e0 <inv_execute_on_data>:
 * It will process the data it has received and update all the internal states
 * and features that have been turned on.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_execute_on_data(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
        int type = PLAYBACK_DBG_TYPE_EXECUTE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
 800c7ea:	4b35      	ldr	r3, [pc, #212]	; (800c8c0 <inv_execute_on_data+0xe0>)
 800c7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <inv_execute_on_data+0x1e>
        mode |= INV_GYRO_NEW;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f043 0302 	orr.w	r3, r3, #2
 800c7fc:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_NEW_DATA)
 800c7fe:	4b30      	ldr	r3, [pc, #192]	; (800c8c0 <inv_execute_on_data+0xe0>)
 800c800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <inv_execute_on_data+0x32>
        mode |= INV_ACCEL_NEW;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f043 0301 	orr.w	r3, r3, #1
 800c810:	607b      	str	r3, [r7, #4]
    if (sensors.compass.status & INV_NEW_DATA)
 800c812:	4b2b      	ldr	r3, [pc, #172]	; (800c8c0 <inv_execute_on_data+0xe0>)
 800c814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <inv_execute_on_data+0x48>
        mode |= INV_MAG_NEW;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f043 0304 	orr.w	r3, r3, #4
 800c826:	607b      	str	r3, [r7, #4]
    if (sensors.temp.status & INV_NEW_DATA)
 800c828:	4b25      	ldr	r3, [pc, #148]	; (800c8c0 <inv_execute_on_data+0xe0>)
 800c82a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <inv_execute_on_data+0x5e>
        mode |= INV_TEMP_NEW;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f043 0308 	orr.w	r3, r3, #8
 800c83c:	607b      	str	r3, [r7, #4]
    if (sensors.quat.status & INV_NEW_DATA)
 800c83e:	4b20      	ldr	r3, [pc, #128]	; (800c8c0 <inv_execute_on_data+0xe0>)
 800c840:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <inv_execute_on_data+0x74>
        mode |= INV_QUAT_NEW;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f043 0310 	orr.w	r3, r3, #16
 800c852:	607b      	str	r3, [r7, #4]

    first_error = INV_SUCCESS;
 800c854:	2300      	movs	r3, #0
 800c856:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800c858:	2300      	movs	r3, #0
 800c85a:	60bb      	str	r3, [r7, #8]
 800c85c:	e023      	b.n	800c8a6 <inv_execute_on_data+0xc6>
    {
        if (mode & inv_data_builder.process[kk].data_required)
 800c85e:	4919      	ldr	r1, [pc, #100]	; (800c8c4 <inv_execute_on_data+0xe4>)
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	440b      	add	r3, r1
 800c86c:	330c      	adds	r3, #12
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4013      	ands	r3, r2
 800c874:	2b00      	cmp	r3, #0
 800c876:	d013      	beq.n	800c8a0 <inv_execute_on_data+0xc0>
        {
            result = inv_data_builder.process[kk].func(&sensors);
 800c878:	4912      	ldr	r1, [pc, #72]	; (800c8c4 <inv_execute_on_data+0xe4>)
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	4613      	mov	r3, r2
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	440b      	add	r3, r1
 800c886:	3304      	adds	r3, #4
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	480d      	ldr	r0, [pc, #52]	; (800c8c0 <inv_execute_on_data+0xe0>)
 800c88c:	4798      	blx	r3
 800c88e:	6038      	str	r0, [r7, #0]
            if (result && !first_error)
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d004      	beq.n	800c8a0 <inv_execute_on_data+0xc0>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <inv_execute_on_data+0xc0>
            {
                first_error = result;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	60bb      	str	r3, [r7, #8]
 800c8a6:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <inv_execute_on_data+0xe4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	dbd6      	blt.n	800c85e <inv_execute_on_data+0x7e>
            }
        }
    }

    inv_set_contiguous();
 800c8b0:	f000 f80a 	bl	800c8c8 <inv_set_contiguous>

    return first_error;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200009ac 	.word	0x200009ac
 800c8c4:	2000086c 	.word	0x2000086c

0800c8c8 <inv_set_contiguous>:

/** Cleans up status bits after running all the callbacks. It sets the contiguous flag.
 *
 */
static void inv_set_contiguous(void)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
    inv_time_t current_time = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
 800c8d2:	4b48      	ldr	r3, [pc, #288]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d008      	beq.n	800c8f0 <inv_set_contiguous+0x28>
    {
        sensors.gyro.status |= INV_CONTIGUOUS;
 800c8de:	4b45      	ldr	r3, [pc, #276]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e2:	f043 0310 	orr.w	r3, r3, #16
 800c8e6:	4a43      	ldr	r2, [pc, #268]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c8e8:	6313      	str	r3, [r2, #48]	; 0x30
        current_time = sensors.gyro.timestamp;
 800c8ea:	4b42      	ldr	r3, [pc, #264]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ee:	607b      	str	r3, [r7, #4]
    }
    if (sensors.accel.status & INV_NEW_DATA)
 800c8f0:	4b40      	ldr	r3, [pc, #256]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00c      	beq.n	800c916 <inv_set_contiguous+0x4e>
    {
        sensors.accel.status |= INV_CONTIGUOUS;
 800c8fc:	4b3d      	ldr	r3, [pc, #244]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c900:	f043 0310 	orr.w	r3, r3, #16
 800c904:	4a3b      	ldr	r2, [pc, #236]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c906:	6753      	str	r3, [r2, #116]	; 0x74
        current_time = MAX(current_time, sensors.accel.timestamp);
 800c908:	4b3a      	ldr	r3, [pc, #232]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c90a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	4293      	cmp	r3, r2
 800c910:	bf38      	it	cc
 800c912:	4613      	movcc	r3, r2
 800c914:	607b      	str	r3, [r7, #4]
    }
    if (sensors.compass.status & INV_NEW_DATA)
 800c916:	4b37      	ldr	r3, [pc, #220]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00f      	beq.n	800c944 <inv_set_contiguous+0x7c>
    {
        sensors.compass.status |= INV_CONTIGUOUS;
 800c924:	4b33      	ldr	r3, [pc, #204]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c926:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c92a:	f043 0310 	orr.w	r3, r3, #16
 800c92e:	4a31      	ldr	r2, [pc, #196]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c930:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        current_time = MAX(current_time, sensors.compass.timestamp);
 800c934:	4b2f      	ldr	r3, [pc, #188]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c936:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	4293      	cmp	r3, r2
 800c93e:	bf38      	it	cc
 800c940:	4613      	movcc	r3, r2
 800c942:	607b      	str	r3, [r7, #4]
    }
    if (sensors.temp.status & INV_NEW_DATA)
 800c944:	4b2b      	ldr	r3, [pc, #172]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c946:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00f      	beq.n	800c972 <inv_set_contiguous+0xaa>
    {
        sensors.temp.status |= INV_CONTIGUOUS;
 800c952:	4b28      	ldr	r3, [pc, #160]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c954:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c958:	f043 0310 	orr.w	r3, r3, #16
 800c95c:	4a25      	ldr	r2, [pc, #148]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c95e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        current_time = MAX(current_time, sensors.temp.timestamp);
 800c962:	4b24      	ldr	r3, [pc, #144]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c964:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	4293      	cmp	r3, r2
 800c96c:	bf38      	it	cc
 800c96e:	4613      	movcc	r3, r2
 800c970:	607b      	str	r3, [r7, #4]
    }
    if (sensors.quat.status & INV_NEW_DATA)
 800c972:	4b20      	ldr	r3, [pc, #128]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c974:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00f      	beq.n	800c9a0 <inv_set_contiguous+0xd8>
    {
        sensors.quat.status |= INV_CONTIGUOUS;
 800c980:	4b1c      	ldr	r3, [pc, #112]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c982:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c986:	f043 0310 	orr.w	r3, r3, #16
 800c98a:	4a1a      	ldr	r2, [pc, #104]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c98c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
        current_time = MAX(current_time, sensors.quat.timestamp);
 800c990:	4b18      	ldr	r3, [pc, #96]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c992:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	4293      	cmp	r3, r2
 800c99a:	bf38      	it	cc
 800c99c:	4613      	movcc	r3, r2
 800c99e:	607b      	str	r3, [r7, #4]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
 800c9a0:	4b14      	ldr	r3, [pc, #80]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9a8:	4a12      	ldr	r2, [pc, #72]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9aa:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
 800c9ac:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9b4:	4a0f      	ldr	r2, [pc, #60]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9b6:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
 800c9b8:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c9be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9c2:	4a0c      	ldr	r2, [pc, #48]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9c4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    sensors.temp.status &= ~INV_NEW_DATA;
 800c9c8:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c9ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9d2:	4a08      	ldr	r2, [pc, #32]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9d4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.quat.status &= ~INV_NEW_DATA;
 800c9d8:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9da:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c9de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9e2:	4a04      	ldr	r2, [pc, #16]	; (800c9f4 <inv_set_contiguous+0x12c>)
 800c9e4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	200009ac 	.word	0x200009ac

0800c9f8 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
 */
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
    if (data != NULL)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d004      	beq.n	800ca14 <inv_get_accel_set+0x1c>
    {
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
 800ca0a:	220c      	movs	r2, #12
 800ca0c:	490b      	ldr	r1, [pc, #44]	; (800ca3c <inv_get_accel_set+0x44>)
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f005 f828 	bl	8011a64 <memcpy>
    }
    if (timestamp != NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <inv_get_accel_set+0x2a>
    {
        *timestamp = sensors.accel.timestamp;
 800ca1a:	4b09      	ldr	r3, [pc, #36]	; (800ca40 <inv_get_accel_set+0x48>)
 800ca1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL)
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d004      	beq.n	800ca32 <inv_get_accel_set+0x3a>
    {
        *accuracy = sensors.accel.accuracy;
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <inv_get_accel_set+0x48>)
 800ca2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca2c:	b25a      	sxtb	r2, r3
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	701a      	strb	r2, [r3, #0]
    }
}
 800ca32:	bf00      	nop
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000a08 	.word	0x20000a08
 800ca40:	200009ac 	.word	0x200009ac

0800ca44 <inv_get_gyro_set>:
 * @param[out] data Gyro Data where 1 dps = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
 */
void inv_get_gyro_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 800ca50:	220c      	movs	r2, #12
 800ca52:	490b      	ldr	r1, [pc, #44]	; (800ca80 <inv_get_gyro_set+0x3c>)
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f005 f805 	bl	8011a64 <memcpy>
    if (timestamp != NULL)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d003      	beq.n	800ca68 <inv_get_gyro_set+0x24>
    {
        *timestamp = sensors.gyro.timestamp;
 800ca60:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <inv_get_gyro_set+0x40>)
 800ca62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL)
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d004      	beq.n	800ca78 <inv_get_gyro_set+0x34>
    {
        *accuracy = sensors.gyro.accuracy;
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <inv_get_gyro_set+0x40>)
 800ca70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca72:	b25a      	sxtb	r2, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	701a      	strb	r2, [r3, #0]
    }
}
 800ca78:	bf00      	nop
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	200009c4 	.word	0x200009c4
 800ca84:	200009ac 	.word	0x200009ac

0800ca88 <inv_get_gyro>:

/** Get's latest gyro data.
 * @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
 */
void inv_get_gyro(long *gyro)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 800ca90:	220c      	movs	r2, #12
 800ca92:	4904      	ldr	r1, [pc, #16]	; (800caa4 <inv_get_gyro+0x1c>)
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f004 ffe5 	bl	8011a64 <memcpy>
}
 800ca9a:	bf00      	nop
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	200009c4 	.word	0x200009c4

0800caa8 <inv_get_compass_set>:
 * @param[out] data Compass Data where 1 uT = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
 */
void inv_get_compass_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.compass.calibrated, sizeof(sensors.compass.calibrated));
 800cab4:	220c      	movs	r2, #12
 800cab6:	4911      	ldr	r1, [pc, #68]	; (800cafc <inv_get_compass_set+0x54>)
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f004 ffd3 	bl	8011a64 <memcpy>
    if (timestamp != NULL)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d004      	beq.n	800cace <inv_get_compass_set+0x26>
    {
        *timestamp = sensors.compass.timestamp;
 800cac4:	4b0e      	ldr	r3, [pc, #56]	; (800cb00 <inv_get_compass_set+0x58>)
 800cac6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL)
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00e      	beq.n	800caf2 <inv_get_compass_set+0x4a>
    {
        if (inv_data_builder.compass_disturbance)
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <inv_get_compass_set+0x5c>)
 800cad6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <inv_get_compass_set+0x3e>
            *accuracy = 0;
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	2200      	movs	r2, #0
 800cae2:	701a      	strb	r2, [r3, #0]
        else
            *accuracy = sensors.compass.accuracy;
    }
}
 800cae4:	e005      	b.n	800caf2 <inv_get_compass_set+0x4a>
            *accuracy = sensors.compass.accuracy;
 800cae6:	4b06      	ldr	r3, [pc, #24]	; (800cb00 <inv_get_compass_set+0x58>)
 800cae8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800caec:	b25a      	sxtb	r2, r3
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	701a      	strb	r2, [r3, #0]
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20000a4c 	.word	0x20000a4c
 800cb00:	200009ac 	.word	0x200009ac
 800cb04:	2000086c 	.word	0x2000086c

0800cb08 <inv_get_gyro_accuracy>:

/** Returns accuracy of gyro.
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
 */
int inv_get_gyro_accuracy(void)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	af00      	add	r7, sp, #0
    return sensors.gyro.accuracy;
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <inv_get_gyro_accuracy+0x10>)
 800cb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bc80      	pop	{r7}
 800cb16:	4770      	bx	lr
 800cb18:	200009ac 	.word	0x200009ac

0800cb1c <inv_get_mag_accuracy>:

/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
 */
int inv_get_mag_accuracy(void)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	af00      	add	r7, sp, #0
    if (inv_data_builder.compass_disturbance)
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <inv_get_mag_accuracy+0x20>)
 800cb22:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <inv_get_mag_accuracy+0x12>
        return 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e002      	b.n	800cb34 <inv_get_mag_accuracy+0x18>
    return sensors.compass.accuracy;
 800cb2e:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <inv_get_mag_accuracy+0x24>)
 800cb30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bc80      	pop	{r7}
 800cb3a:	4770      	bx	lr
 800cb3c:	2000086c 	.word	0x2000086c
 800cb40:	200009ac 	.word	0x200009ac

0800cb44 <inv_get_accel_accuracy>:

/** Returns accuracy of accel.
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
 */
int inv_get_accel_accuracy(void)
{
 800cb44:	b480      	push	{r7}
 800cb46:	af00      	add	r7, sp, #0
    return sensors.accel.accuracy;
 800cb48:	4b02      	ldr	r3, [pc, #8]	; (800cb54 <inv_get_accel_accuracy+0x10>)
 800cb4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bc80      	pop	{r7}
 800cb52:	4770      	bx	lr
 800cb54:	200009ac 	.word	0x200009ac

0800cb58 <inv_reset_compass_soft_iron_matrix>:

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
 */
void inv_reset_compass_soft_iron_matrix(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 9; i++)
 800cb5e:	2300      	movs	r3, #0
 800cb60:	607b      	str	r3, [r7, #4]
 800cb62:	e00a      	b.n	800cb7a <inv_reset_compass_soft_iron_matrix+0x22>
    {
        sensors.soft_iron.matrix_f[i] = 0.0f;
 800cb64:	4a19      	ldr	r2, [pc, #100]	; (800cbcc <inv_reset_compass_soft_iron_matrix+0x74>)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	335a      	adds	r3, #90	; 0x5a
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f04f 0200 	mov.w	r2, #0
 800cb72:	605a      	str	r2, [r3, #4]
    for (i = 0; i < 9; i++)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3301      	adds	r3, #1
 800cb78:	607b      	str	r3, [r7, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b08      	cmp	r3, #8
 800cb7e:	ddf1      	ble.n	800cb64 <inv_reset_compass_soft_iron_matrix+0xc>
    }

    memset(&sensors.soft_iron.matrix_d, 0, sizeof(sensors.soft_iron.matrix_d));
 800cb80:	2224      	movs	r2, #36	; 0x24
 800cb82:	2100      	movs	r1, #0
 800cb84:	4812      	ldr	r0, [pc, #72]	; (800cbd0 <inv_reset_compass_soft_iron_matrix+0x78>)
 800cb86:	f004 ff95 	bl	8011ab4 <memset>

    for (i = 0; i < 3; i++)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	607b      	str	r3, [r7, #4]
 800cb8e:	e013      	b.n	800cbb8 <inv_reset_compass_soft_iron_matrix+0x60>
    {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i * 4] = 1.0;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4a0d      	ldr	r2, [pc, #52]	; (800cbcc <inv_reset_compass_soft_iron_matrix+0x74>)
 800cb96:	335a      	adds	r3, #90	; 0x5a
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cba0:	605a      	str	r2, [r3, #4]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i * 4] = ROT_MATRIX_SCALE_LONG;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4a09      	ldr	r2, [pc, #36]	; (800cbcc <inv_reset_compass_soft_iron_matrix+0x74>)
 800cba8:	3352      	adds	r3, #82	; 0x52
 800cbaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cbae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < 3; i++)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	607b      	str	r3, [r7, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	dde8      	ble.n	800cb90 <inv_reset_compass_soft_iron_matrix+0x38>
    }

    inv_disable_compass_soft_iron_matrix();
 800cbbe:	f000 f809 	bl	800cbd4 <inv_disable_compass_soft_iron_matrix>
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	200009ac 	.word	0x200009ac
 800cbd0:	20000af4 	.word	0x20000af4

0800cbd4 <inv_disable_compass_soft_iron_matrix>:
}

/** This subroutine disables the the soft iron transformation process.
 */
void inv_disable_compass_soft_iron_matrix(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
    sensors.soft_iron.enable = 0;
 800cbd8:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <inv_disable_compass_soft_iron_matrix+0x14>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 800cbe0:	bf00      	nop
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bc80      	pop	{r7}
 800cbe6:	4770      	bx	lr
 800cbe8:	200009ac 	.word	0x200009ac

0800cbec <inv_get_sensor_type_linear_acceleration>:
 * @param[out] timestamp The timestamp for this sensor. Derived from the timestamp sent to
 *             inv_build_accel().
 * @return     Returns 1 if the data was updated or 0 if it was not updated.
 */
int inv_get_sensor_type_linear_acceleration(float *values, int8_t *accuracy, inv_time_t *timestamp)
{
 800cbec:	b590      	push	{r4, r7, lr}
 800cbee:	b08b      	sub	sp, #44	; 0x2c
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
    long gravity[3], accel[3];

    inv_get_accel_set(accel, accuracy, timestamp);
 800cbf8:	f107 0310 	add.w	r3, r7, #16
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	68b9      	ldr	r1, [r7, #8]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fef9 	bl	800c9f8 <inv_get_accel_set>
    inv_get_gravity(gravity);
 800cc06:	f107 031c 	add.w	r3, r7, #28
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f001 fb5c 	bl	800e2c8 <inv_get_gravity>
    accel[0] -= gravity[0] >> 14;
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	139b      	asrs	r3, r3, #14
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	613b      	str	r3, [r7, #16]
    accel[1] -= gravity[1] >> 14;
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	139b      	asrs	r3, r3, #14
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	617b      	str	r3, [r7, #20]
    accel[2] -= gravity[2] >> 14;
 800cc24:	69ba      	ldr	r2, [r7, #24]
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	139b      	asrs	r3, r3, #14
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	61bb      	str	r3, [r7, #24]
    values[0] = accel[0] * ACCEL_CONVERSION;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f6 fe0b 	bl	800384c <__aeabi_i2f>
 800cc36:	4603      	mov	r3, r0
 800cc38:	4913      	ldr	r1, [pc, #76]	; (800cc88 <inv_get_sensor_type_linear_acceleration+0x9c>)
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f6 fe5a 	bl	80038f4 <__aeabi_fmul>
 800cc40:	4603      	mov	r3, r0
 800cc42:	461a      	mov	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	601a      	str	r2, [r3, #0]
    values[1] = accel[1] * ACCEL_CONVERSION;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7f6 fdfe 	bl	800384c <__aeabi_i2f>
 800cc50:	4602      	mov	r2, r0
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	1d1c      	adds	r4, r3, #4
 800cc56:	490c      	ldr	r1, [pc, #48]	; (800cc88 <inv_get_sensor_type_linear_acceleration+0x9c>)
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7f6 fe4b 	bl	80038f4 <__aeabi_fmul>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	6023      	str	r3, [r4, #0]
    values[2] = accel[2] * ACCEL_CONVERSION;
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7f6 fdf1 	bl	800384c <__aeabi_i2f>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f103 0408 	add.w	r4, r3, #8
 800cc72:	4905      	ldr	r1, [pc, #20]	; (800cc88 <inv_get_sensor_type_linear_acceleration+0x9c>)
 800cc74:	4610      	mov	r0, r2
 800cc76:	f7f6 fe3d 	bl	80038f4 <__aeabi_fmul>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6023      	str	r3, [r4, #0]

    return 1;
 800cc7e:	2301      	movs	r3, #1
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	372c      	adds	r7, #44	; 0x2c
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd90      	pop	{r4, r7, pc}
 800cc88:	391ce80a 	.word	0x391ce80a

0800cc8c <inv_get_sensor_type_gravity>:
 * @param[out] timestamp The timestamp for this sensor. Derived from the timestamp sent to
 *             inv_build_accel().
 * @return     Returns 1 if the data was updated or 0 if it was not updated.
 */
int inv_get_sensor_type_gravity(float *values, int8_t *accuracy, inv_time_t *timestamp)
{
 800cc8c:	b590      	push	{r4, r7, lr}
 800cc8e:	b089      	sub	sp, #36	; 0x24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
    long gravity[3];

    *accuracy = (int8_t)hal_out.accuracy_quat;
 800cc98:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <inv_get_sensor_type_gravity+0x88>)
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	b25a      	sxtb	r2, r3
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	701a      	strb	r2, [r3, #0]
    *timestamp = hal_out.nav_timestamp;
 800cca2:	4b1c      	ldr	r3, [pc, #112]	; (800cd14 <inv_get_sensor_type_gravity+0x88>)
 800cca4:	689a      	ldr	r2, [r3, #8]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	601a      	str	r2, [r3, #0]
    inv_get_gravity(gravity);
 800ccaa:	f107 0314 	add.w	r3, r7, #20
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 fb0a 	bl	800e2c8 <inv_get_gravity>
    values[0] = (gravity[0] >> 14) * ACCEL_CONVERSION;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	139b      	asrs	r3, r3, #14
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f6 fdc7 	bl	800384c <__aeabi_i2f>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4915      	ldr	r1, [pc, #84]	; (800cd18 <inv_get_sensor_type_gravity+0x8c>)
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f6 fe16 	bl	80038f4 <__aeabi_fmul>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461a      	mov	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	601a      	str	r2, [r3, #0]
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	139b      	asrs	r3, r3, #14
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7f6 fdb9 	bl	800384c <__aeabi_i2f>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	1d1c      	adds	r4, r3, #4
 800cce0:	490d      	ldr	r1, [pc, #52]	; (800cd18 <inv_get_sensor_type_gravity+0x8c>)
 800cce2:	4610      	mov	r0, r2
 800cce4:	f7f6 fe06 	bl	80038f4 <__aeabi_fmul>
 800cce8:	4603      	mov	r3, r0
 800ccea:	6023      	str	r3, [r4, #0]
    values[2] = (gravity[2] >> 14) * ACCEL_CONVERSION;
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	139b      	asrs	r3, r3, #14
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f6 fdab 	bl	800384c <__aeabi_i2f>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f103 0408 	add.w	r4, r3, #8
 800ccfe:	4906      	ldr	r1, [pc, #24]	; (800cd18 <inv_get_sensor_type_gravity+0x8c>)
 800cd00:	4610      	mov	r0, r2
 800cd02:	f7f6 fdf7 	bl	80038f4 <__aeabi_fmul>
 800cd06:	4603      	mov	r3, r0
 800cd08:	6023      	str	r3, [r4, #0]

    return 1;
 800cd0a:	2301      	movs	r3, #1
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3724      	adds	r7, #36	; 0x24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd90      	pop	{r4, r7, pc}
 800cd14:	20000b44 	.word	0x20000b44
 800cd18:	391ce80a 	.word	0x391ce80a

0800cd1c <inv_generate_hal_outputs>:
 * @param[in] sensor_cal Input variable to take sensor data whenever there is new
 * sensor data.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_hal_outputs(struct inv_sensor_cal_t *sensor_cal)
{
 800cd1c:	b590      	push	{r4, r7, lr}
 800cd1e:	b08b      	sub	sp, #44	; 0x2c
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
    int use_sensor = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	627b      	str	r3, [r7, #36]	; 0x24
    long sr = 1000;
 800cd28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd2c:	623b      	str	r3, [r7, #32]
    long compass[3];
    int8_t accuracy;
    int i;
    (void)sensor_cal;

    inv_get_quaternion_set(hal_out.nav_quat, &hal_out.accuracy_quat, &hal_out.nav_timestamp);
 800cd2e:	4a9f      	ldr	r2, [pc, #636]	; (800cfac <inv_generate_hal_outputs+0x290>)
 800cd30:	499f      	ldr	r1, [pc, #636]	; (800cfb0 <inv_generate_hal_outputs+0x294>)
 800cd32:	48a0      	ldr	r0, [pc, #640]	; (800cfb4 <inv_generate_hal_outputs+0x298>)
 800cd34:	f001 fb4c 	bl	800e3d0 <inv_get_quaternion_set>
    hal_out.gyro_status = sensor_cal->gyro.status;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3c:	4a9e      	ldr	r2, [pc, #632]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cd3e:	6253      	str	r3, [r2, #36]	; 0x24
    hal_out.accel_status = sensor_cal->accel.status;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd44:	4a9c      	ldr	r2, [pc, #624]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cd46:	6293      	str	r3, [r2, #40]	; 0x28
    hal_out.compass_status = sensor_cal->compass.status;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd4e:	4a9a      	ldr	r2, [pc, #616]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cd50:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Find the highest sample rate and tie generating 9-axis to that one.
    if (sensor_cal->gyro.status & INV_SENSOR_ON)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d004      	beq.n	800cd68 <inv_generate_hal_outputs+0x4c>
    {
        sr = sensor_cal->gyro.sample_rate_ms;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd62:	623b      	str	r3, [r7, #32]
        use_sensor = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <inv_generate_hal_outputs+0x6c>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd78:	6a3a      	ldr	r2, [r7, #32]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	dd04      	ble.n	800cd88 <inv_generate_hal_outputs+0x6c>
    {
        sr = sensor_cal->accel.sample_rate_ms;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd82:	623b      	str	r3, [r7, #32]
        use_sensor = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cd8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00b      	beq.n	800cdae <inv_generate_hal_outputs+0x92>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd9c:	6a3a      	ldr	r2, [r7, #32]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	dd05      	ble.n	800cdae <inv_generate_hal_outputs+0x92>
    {
        sr = sensor_cal->compass.sample_rate_ms;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cda8:	623b      	str	r3, [r7, #32]
        use_sensor = 2;
 800cdaa:	2302      	movs	r3, #2
 800cdac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <inv_generate_hal_outputs+0xb8>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800cdc2:	6a3a      	ldr	r2, [r7, #32]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	dd05      	ble.n	800cdd4 <inv_generate_hal_outputs+0xb8>
    {
        sr = sensor_cal->quat.sample_rate_ms;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800cdce:	623b      	str	r3, [r7, #32]
        use_sensor = 3;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Only output 9-axis if all 9 sensors are on.
    if (sensor_cal->quat.status & INV_SENSOR_ON)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00d      	beq.n	800cdfe <inv_generate_hal_outputs+0xe2>
    {
        // If quaternion sensor is on, gyros are not required as quaternion already has that part
        if ((sensor_cal->accel.status & sensor_cal->compass.status & INV_SENSOR_ON) == 0)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cdec:	4013      	ands	r3, r2
 800cdee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d113      	bne.n	800ce1e <inv_generate_hal_outputs+0x102>
        {
            use_sensor = -1;
 800cdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfc:	e00f      	b.n	800ce1e <inv_generate_hal_outputs+0x102>
        }
    }
    else
    {
        if ((sensor_cal->gyro.status & sensor_cal->accel.status & sensor_cal->compass.status & INV_SENSOR_ON) == 0)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce06:	401a      	ands	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ce0e:	4013      	ands	r3, r2
 800ce10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <inv_generate_hal_outputs+0x102>
        {
            use_sensor = -1;
 800ce18:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    switch (use_sensor)
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d83f      	bhi.n	800cea4 <inv_generate_hal_outputs+0x188>
 800ce24:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <inv_generate_hal_outputs+0x110>)
 800ce26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2a:	bf00      	nop
 800ce2c:	0800ce3d 	.word	0x0800ce3d
 800ce30:	0800ce55 	.word	0x0800ce55
 800ce34:	0800ce6d 	.word	0x0800ce6d
 800ce38:	0800ce89 	.word	0x0800ce89
    {
    case 0:
        hal_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce40:	119b      	asrs	r3, r3, #6
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	4a5c      	ldr	r2, [pc, #368]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce48:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->gyro.timestamp;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4e:	4a5a      	ldr	r2, [pc, #360]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce50:	6093      	str	r3, [r2, #8]
        break;
 800ce52:	e02b      	b.n	800ceac <inv_generate_hal_outputs+0x190>
    case 1:
        hal_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce58:	119b      	asrs	r3, r3, #6
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	4a56      	ldr	r2, [pc, #344]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce60:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->accel.timestamp;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce66:	4a54      	ldr	r2, [pc, #336]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce68:	6093      	str	r3, [r2, #8]
        break;
 800ce6a:	e01f      	b.n	800ceac <inv_generate_hal_outputs+0x190>
    case 2:
        hal_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ce72:	119b      	asrs	r3, r3, #6
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	4a4f      	ldr	r2, [pc, #316]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce7a:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->compass.timestamp;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ce82:	4a4d      	ldr	r2, [pc, #308]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce84:	6093      	str	r3, [r2, #8]
        break;
 800ce86:	e011      	b.n	800ceac <inv_generate_hal_outputs+0x190>
    case 3:
        hal_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ce8e:	119b      	asrs	r3, r3, #6
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	4a48      	ldr	r2, [pc, #288]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800ce96:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->quat.timestamp;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800ce9e:	4a46      	ldr	r2, [pc, #280]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cea0:	6093      	str	r3, [r2, #8]
        break;
 800cea2:	e003      	b.n	800ceac <inv_generate_hal_outputs+0x190>
    default:
        hal_out.nine_axis_status = 0; // Don't output quaternion related info
 800cea4:	4b44      	ldr	r3, [pc, #272]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800ceaa:	bf00      	nop

/* Converts fixed point to uT. Fixed point has 1 uT = 2^16.
 * So this is: 1 / 2^16*/
#define COMPASS_CONVERSION 1.52587890625e-005f

    inv_get_compass_set(compass, &accuracy, &(hal_out.mag_timestamp));
 800ceac:	f107 010f 	add.w	r1, r7, #15
 800ceb0:	f107 0310 	add.w	r3, r7, #16
 800ceb4:	4a41      	ldr	r2, [pc, #260]	; (800cfbc <inv_generate_hal_outputs+0x2a0>)
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff fdf6 	bl	800caa8 <inv_get_compass_set>
    hal_out.accuracy_mag = (int)accuracy;
 800cebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cec0:	461a      	mov	r2, r3
 800cec2:	4b3d      	ldr	r3, [pc, #244]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cec4:	601a      	str	r2, [r3, #0]

    for (i = 0; i < 3; i++)
 800cec6:	2300      	movs	r3, #0
 800cec8:	61fb      	str	r3, [r7, #28]
 800ceca:	e067      	b.n	800cf9c <inv_generate_hal_outputs+0x280>
    {
        if ((sensor_cal->compass.status & (INV_NEW_DATA | INV_CONTIGUOUS)) == INV_NEW_DATA)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ced2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ced6:	2b40      	cmp	r3, #64	; 0x40
 800ced8:	d115      	bne.n	800cf06 <inv_generate_hal_outputs+0x1ea>
        {
            // set the state variables to match output with input
            inv_calc_state_to_match_output(&hal_out.lp_filter[i], (float)compass[i]);
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	222c      	movs	r2, #44	; 0x2c
 800cede:	fb02 f303 	mul.w	r3, r2, r3
 800cee2:	3330      	adds	r3, #48	; 0x30
 800cee4:	4a34      	ldr	r2, [pc, #208]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cee6:	4413      	add	r3, r2
 800cee8:	1d1c      	adds	r4, r3, #4
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	3328      	adds	r3, #40	; 0x28
 800cef0:	443b      	add	r3, r7
 800cef2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7f6 fca8 	bl	800384c <__aeabi_i2f>
 800cefc:	4603      	mov	r3, r0
 800cefe:	4619      	mov	r1, r3
 800cf00:	4620      	mov	r0, r4
 800cf02:	f001 f846 	bl	800df92 <inv_calc_state_to_match_output>
        }

        if ((sensor_cal->compass.status & (INV_NEW_DATA | INV_RAW_DATA)) == (INV_NEW_DATA | INV_RAW_DATA))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cf0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cf10:	2bc0      	cmp	r3, #192	; 0xc0
 800cf12:	d123      	bne.n	800cf5c <inv_generate_hal_outputs+0x240>
        {

            hal_out.compass_float[i] =
                inv_biquad_filter_process(&hal_out.lp_filter[i], (float)compass[i]) * COMPASS_CONVERSION;
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	222c      	movs	r2, #44	; 0x2c
 800cf18:	fb02 f303 	mul.w	r3, r2, r3
 800cf1c:	3330      	adds	r3, #48	; 0x30
 800cf1e:	4a26      	ldr	r2, [pc, #152]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cf20:	4413      	add	r3, r2
 800cf22:	1d1c      	adds	r4, r3, #4
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	3328      	adds	r3, #40	; 0x28
 800cf2a:	443b      	add	r3, r7
 800cf2c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7f6 fc8b 	bl	800384c <__aeabi_i2f>
 800cf36:	4603      	mov	r3, r0
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f001 f854 	bl	800dfe8 <inv_biquad_filter_process>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f6 fcd4 	bl	80038f4 <__aeabi_fmul>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	4619      	mov	r1, r3
            hal_out.compass_float[i] =
 800cf50:	4a19      	ldr	r2, [pc, #100]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	332e      	adds	r3, #46	; 0x2e
 800cf56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800cf5a:	e01c      	b.n	800cf96 <inv_generate_hal_outputs+0x27a>
        }
        else if ((sensor_cal->compass.status & INV_NEW_DATA) == INV_NEW_DATA)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d015      	beq.n	800cf96 <inv_generate_hal_outputs+0x27a>
        {
            hal_out.compass_float[i] = (float)compass[i] * COMPASS_CONVERSION;
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	3328      	adds	r3, #40	; 0x28
 800cf70:	443b      	add	r3, r7
 800cf72:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7f6 fc68 	bl	800384c <__aeabi_i2f>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7f6 fcb6 	bl	80038f4 <__aeabi_fmul>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4a0a      	ldr	r2, [pc, #40]	; (800cfb8 <inv_generate_hal_outputs+0x29c>)
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	332e      	adds	r3, #46	; 0x2e
 800cf92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < 3; i++)
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	61fb      	str	r3, [r7, #28]
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	dd94      	ble.n	800cecc <inv_generate_hal_outputs+0x1b0>
        }
    }
    return INV_SUCCESS;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	372c      	adds	r7, #44	; 0x2c
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd90      	pop	{r4, r7, pc}
 800cfac:	20000b4c 	.word	0x20000b4c
 800cfb0:	20000b48 	.word	0x20000b48
 800cfb4:	20000b58 	.word	0x20000b58
 800cfb8:	20000b44 	.word	0x20000b44
 800cfbc:	20000b54 	.word	0x20000b54

0800cfc0 <inv_start_hal_outputs>:
/** Turns on generation of HAL outputs. This should be called after inv_stop_hal_outputs()
 * to turn generation of HAL outputs back on. It is automatically called by inv_enable_hal_outputs().
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_hal_outputs(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
    inv_error_t result;
    result =
        //        inv_register_data_cb(inv_generate_hal_outputs,
        //                             INV_PRIORITY_HAL_OUTPUTS,
        //                             INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
        inv_register_data_cb(inv_generate_hal_outputs, INV_PRIORITY_HAL_OUTPUTS,
 800cfc6:	2207      	movs	r2, #7
 800cfc8:	f44f 7161 	mov.w	r1, #900	; 0x384
 800cfcc:	4804      	ldr	r0, [pc, #16]	; (800cfe0 <inv_start_hal_outputs+0x20>)
 800cfce:	f7ff fb1f 	bl	800c610 <inv_register_data_cb>
 800cfd2:	6078      	str	r0, [r7, #4]
                             INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return result;
 800cfd4:	687b      	ldr	r3, [r7, #4]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	0800cd1d 	.word	0x0800cd1d

0800cfe4 <inv_init_hal_outputs>:
 * enable function. It may be called any time the feature is enabled, but
 * is typically not needed to be called by outside callers.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_hal_outputs(void)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
    int i;
    memset(&hal_out, 0, sizeof(hal_out));
 800cfea:	22c4      	movs	r2, #196	; 0xc4
 800cfec:	2100      	movs	r1, #0
 800cfee:	480e      	ldr	r0, [pc, #56]	; (800d028 <inv_init_hal_outputs+0x44>)
 800cff0:	f004 fd60 	bl	8011ab4 <memset>
    for (i = 0; i < 3; i++)
 800cff4:	2300      	movs	r3, #0
 800cff6:	607b      	str	r3, [r7, #4]
 800cff8:	e00e      	b.n	800d018 <inv_init_hal_outputs+0x34>
    {
        inv_init_biquad_filter(&hal_out.lp_filter[i], compass_low_pass_filter_coeff);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	222c      	movs	r2, #44	; 0x2c
 800cffe:	fb02 f303 	mul.w	r3, r2, r3
 800d002:	3330      	adds	r3, #48	; 0x30
 800d004:	4a08      	ldr	r2, [pc, #32]	; (800d028 <inv_init_hal_outputs+0x44>)
 800d006:	4413      	add	r3, r2
 800d008:	3304      	adds	r3, #4
 800d00a:	4908      	ldr	r1, [pc, #32]	; (800d02c <inv_init_hal_outputs+0x48>)
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 ff9a 	bl	800df46 <inv_init_biquad_filter>
    for (i = 0; i < 3; i++)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	3301      	adds	r3, #1
 800d016:	607b      	str	r3, [r7, #4]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	dded      	ble.n	800cffa <inv_init_hal_outputs+0x16>
    }

    return INV_SUCCESS;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	20000b44 	.word	0x20000b44
 800d02c:	20000038 	.word	0x20000038

0800d030 <inv_enable_hal_outputs>:

/** Turns on creation and storage of HAL type results.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_enable_hal_outputs(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
    inv_error_t result;

    // don't need to check the result for inv_init_hal_outputs
    // since it's always INV_SUCCESS
    inv_init_hal_outputs();
 800d036:	f7ff ffd5 	bl	800cfe4 <inv_init_hal_outputs>

    result = inv_register_mpl_start_notification(inv_start_hal_outputs);
 800d03a:	4804      	ldr	r0, [pc, #16]	; (800d04c <inv_enable_hal_outputs+0x1c>)
 800d03c:	f001 faf2 	bl	800e624 <inv_register_mpl_start_notification>
 800d040:	6078      	str	r0, [r7, #4]
    return result;
 800d042:	687b      	ldr	r3, [r7, #4]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	0800cfc1 	.word	0x0800cfc1

0800d050 <inv_set_message>:
*                  a motion or no motion message.
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
    if (level == 0) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10c      	bne.n	800d07c <inv_set_message+0x2c>
        mh.message &= ~clear;
 800d062:	4b09      	ldr	r3, [pc, #36]	; (800d088 <inv_set_message+0x38>)
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	43db      	mvns	r3, r3
 800d06a:	4013      	ands	r3, r2
 800d06c:	4a06      	ldr	r2, [pc, #24]	; (800d088 <inv_set_message+0x38>)
 800d06e:	6013      	str	r3, [r2, #0]
        mh.message |= set;
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <inv_set_message+0x38>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4313      	orrs	r3, r2
 800d078:	4a03      	ldr	r2, [pc, #12]	; (800d088 <inv_set_message+0x38>)
 800d07a:	6013      	str	r3, [r2, #0]
    }
}
 800d07c:	bf00      	nop
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	bc80      	pop	{r7}
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	20000c08 	.word	0x20000c08

0800d08c <inv_get_message_level_0>:
* @param[in] clear If set, will clear the message. Typically this will be set
*  for one reader, so that you don't get the same message over and over.
* @return bit field to corresponding message.
*/
long inv_get_message_level_0(int clear)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
    long msg;
    msg = mh.message;
 800d094:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <inv_get_message_level_0+0x28>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	60fb      	str	r3, [r7, #12]
    if (clear) {
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <inv_get_message_level_0+0x1a>
        mh.message = 0;
 800d0a0:	4b04      	ldr	r3, [pc, #16]	; (800d0b4 <inv_get_message_level_0+0x28>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
    }
    return msg;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bc80      	pop	{r7}
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	20000c08 	.word	0x20000c08

0800d0b8 <inv_q30_to_float>:
        float input;
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
        return (float) q30 / ((float)(1L << 30));
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7f6 fbc3 	bl	800384c <__aeabi_i2f>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7f6 fcc5 	bl	8003a5c <__aeabi_fdiv>
 800d0d2:	4603      	mov	r3, r0
    }
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
 800d0dc:	b590      	push	{r4, r7, lr}
 800d0de:	b097      	sub	sp, #92	; 0x5c
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	647b      	str	r3, [r7, #68]	; 0x44
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	f000 f8c2 	bl	800d284 <inv_q30_mult>
 800d100:	4604      	mov	r4, r0
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3308      	adds	r3, #8
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	3304      	adds	r3, #4
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f000 f8b7 	bl	800d284 <inv_q30_mult>
 800d116:	4603      	mov	r3, r0
 800d118:	1ae3      	subs	r3, r4, r3
 800d11a:	64bb      	str	r3, [r7, #72]	; 0x48
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3308      	adds	r3, #8
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4619      	mov	r1, r3
 800d128:	4610      	mov	r0, r2
 800d12a:	f000 f8ab 	bl	800d284 <inv_q30_mult>
 800d12e:	4604      	mov	r4, r0
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	3308      	adds	r3, #8
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4619      	mov	r1, r3
 800d13c:	4610      	mov	r0, r2
 800d13e:	f000 f8a1 	bl	800d284 <inv_q30_mult>
 800d142:	4603      	mov	r3, r0
 800d144:	1ae3      	subs	r3, r4, r3
 800d146:	64fb      	str	r3, [r7, #76]	; 0x4c
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	3304      	adds	r3, #4
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4619      	mov	r1, r3
 800d154:	4610      	mov	r0, r2
 800d156:	f000 f895 	bl	800d284 <inv_q30_mult>
 800d15a:	4604      	mov	r4, r0
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3304      	adds	r3, #4
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4619      	mov	r1, r3
 800d168:	4610      	mov	r0, r2
 800d16a:	f000 f88b 	bl	800d284 <inv_q30_mult>
 800d16e:	4603      	mov	r3, r0
 800d170:	1ae3      	subs	r3, r4, r3
 800d172:	653b      	str	r3, [r7, #80]	; 0x50

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
 800d174:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f8ae 	bl	800d2e0 <inv_q_mult>
    inv_q_invert(quat, qi);
 800d184:	f107 0314 	add.w	r3, r7, #20
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f9a1 	bl	800d4d2 <inv_q_invert>
    inv_q_mult(q1, qi, q2);
 800d190:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d194:	f107 0114 	add.w	r1, r7, #20
 800d198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 f89f 	bl	800d2e0 <inv_q_mult>

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d105      	bne.n	800d1b4 <inv_compass_angle+0xd8>
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <inv_compass_angle+0xd8>
        return 0.f;
 800d1ae:	f04f 0300 	mov.w	r3, #0
 800d1b2:	e012      	b.n	800d1da <inv_compass_angle+0xfe>

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7ff ff7e 	bl	800d0b8 <inv_q30_to_float>
 800d1bc:	4604      	mov	r4, r0
 800d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff ff79 	bl	800d0b8 <inv_q30_to_float>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f007 f934 	bl	8014438 <atan2f>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d1d6:	657b      	str	r3, [r7, #84]	; 0x54
    return angW;
 800d1d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	375c      	adds	r7, #92	; 0x5c
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd90      	pop	{r4, r7, pc}

0800d1e2 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b087      	sub	sp, #28
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
    unsigned long gmag = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	617b      	str	r3, [r7, #20]
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	613b      	str	r3, [r7, #16]
 800d1f2:	e010      	b.n	800d216 <inv_get_gyro_sum_of_sqr+0x34>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	135b      	asrs	r3, r3, #13
 800d200:	60fb      	str	r3, [r7, #12]
        gmag += temp * temp;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	fb03 f303 	mul.w	r3, r3, r3
 800d208:	461a      	mov	r2, r3
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	4413      	add	r3, r2
 800d20e:	617b      	str	r3, [r7, #20]
    for (kk = 0; kk < 3; ++kk) {
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	3301      	adds	r3, #1
 800d214:	613b      	str	r3, [r7, #16]
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b02      	cmp	r3, #2
 800d21a:	ddeb      	ble.n	800d1f4 <inv_get_gyro_sum_of_sqr+0x12>
    }

    return gmag;
 800d21c:	697b      	ldr	r3, [r7, #20]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	371c      	adds	r7, #28
 800d222:	46bd      	mov	sp, r7
 800d224:	bc80      	pop	{r7}
 800d226:	4770      	bx	lr

0800d228 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
 800d228:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800d22c:	b087      	sub	sp, #28
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800d234:	6879      	ldr	r1, [r7, #4]
 800d236:	17c8      	asrs	r0, r1, #31
 800d238:	4688      	mov	r8, r1
 800d23a:	4681      	mov	r9, r0
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	17c8      	asrs	r0, r1, #31
 800d240:	460c      	mov	r4, r1
 800d242:	4605      	mov	r5, r0
 800d244:	fb04 f009 	mul.w	r0, r4, r9
 800d248:	fb08 f105 	mul.w	r1, r8, r5
 800d24c:	4401      	add	r1, r0
 800d24e:	fba8 2304 	umull	r2, r3, r8, r4
 800d252:	4419      	add	r1, r3
 800d254:	460b      	mov	r3, r1
 800d256:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d25a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result = (long)(temp >> 29);
 800d25e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d262:	f04f 0200 	mov.w	r2, #0
 800d266:	f04f 0300 	mov.w	r3, #0
 800d26a:	0f42      	lsrs	r2, r0, #29
 800d26c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d270:	174b      	asrs	r3, r1, #29
 800d272:	4613      	mov	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]
    return result;
 800d276:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800d278:	4618      	mov	r0, r3
 800d27a:	371c      	adds	r7, #28
 800d27c:	46bd      	mov	sp, r7
 800d27e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800d282:	4770      	bx	lr

0800d284 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
 800d284:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800d288:	b087      	sub	sp, #28
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800d290:	6879      	ldr	r1, [r7, #4]
 800d292:	17c8      	asrs	r0, r1, #31
 800d294:	4688      	mov	r8, r1
 800d296:	4681      	mov	r9, r0
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	17c8      	asrs	r0, r1, #31
 800d29c:	460c      	mov	r4, r1
 800d29e:	4605      	mov	r5, r0
 800d2a0:	fb04 f009 	mul.w	r0, r4, r9
 800d2a4:	fb08 f105 	mul.w	r1, r8, r5
 800d2a8:	4401      	add	r1, r0
 800d2aa:	fba8 2304 	umull	r2, r3, r8, r4
 800d2ae:	4419      	add	r1, r3
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d2b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result = (long)(temp >> 30);
 800d2ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d2be:	f04f 0200 	mov.w	r2, #0
 800d2c2:	f04f 0300 	mov.w	r3, #0
 800d2c6:	0f82      	lsrs	r2, r0, #30
 800d2c8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800d2cc:	178b      	asrs	r3, r1, #30
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	60fb      	str	r3, [r7, #12]
    return result;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	371c      	adds	r7, #28
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800d2de:	4770      	bx	lr

0800d2e0 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f7ff ffc4 	bl	800d284 <inv_q30_mult>
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	3304      	adds	r3, #4
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	3304      	adds	r3, #4
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7ff ffb9 	bl	800d284 <inv_q30_mult>
 800d312:	4603      	mov	r3, r0
 800d314:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3308      	adds	r3, #8
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	3308      	adds	r3, #8
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4619      	mov	r1, r3
 800d324:	4610      	mov	r0, r2
 800d326:	f7ff ffad 	bl	800d284 <inv_q30_mult>
 800d32a:	4603      	mov	r3, r0
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800d32c:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	330c      	adds	r3, #12
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	330c      	adds	r3, #12
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4619      	mov	r1, r3
 800d33c:	4610      	mov	r0, r2
 800d33e:	f7ff ffa1 	bl	800d284 <inv_q30_mult>
 800d342:	4603      	mov	r3, r0
 800d344:	1ae2      	subs	r2, r4, r3
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	601a      	str	r2, [r3, #0]

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	3304      	adds	r3, #4
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	f7ff ff94 	bl	800d284 <inv_q30_mult>
 800d35c:	4604      	mov	r4, r0
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3304      	adds	r3, #4
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4619      	mov	r1, r3
 800d36a:	4610      	mov	r0, r2
 800d36c:	f7ff ff8a 	bl	800d284 <inv_q30_mult>
 800d370:	4603      	mov	r3, r0
 800d372:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3308      	adds	r3, #8
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	330c      	adds	r3, #12
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4619      	mov	r1, r3
 800d382:	4610      	mov	r0, r2
 800d384:	f7ff ff7e 	bl	800d284 <inv_q30_mult>
 800d388:	4603      	mov	r3, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800d38a:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	330c      	adds	r3, #12
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	3308      	adds	r3, #8
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4619      	mov	r1, r3
 800d39a:	4610      	mov	r0, r2
 800d39c:	f7ff ff72 	bl	800d284 <inv_q30_mult>
 800d3a0:	4602      	mov	r2, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3304      	adds	r3, #4
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800d3a6:	1aa2      	subs	r2, r4, r2
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800d3a8:	601a      	str	r2, [r3, #0]

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	3308      	adds	r3, #8
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7ff ff64 	bl	800d284 <inv_q30_mult>
 800d3bc:	4604      	mov	r4, r0
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	330c      	adds	r3, #12
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	f7ff ff59 	bl	800d284 <inv_q30_mult>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3308      	adds	r3, #8
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	f7ff ff4e 	bl	800d284 <inv_q30_mult>
 800d3e8:	4603      	mov	r3, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800d3ea:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	330c      	adds	r3, #12
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f7ff ff42 	bl	800d284 <inv_q30_mult>
 800d400:	4602      	mov	r2, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3308      	adds	r3, #8
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800d406:	4422      	add	r2, r4
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800d408:	601a      	str	r2, [r3, #0]

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	330c      	adds	r3, #12
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4619      	mov	r1, r3
 800d416:	4610      	mov	r0, r2
 800d418:	f7ff ff34 	bl	800d284 <inv_q30_mult>
 800d41c:	4604      	mov	r4, r0
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3304      	adds	r3, #4
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	3308      	adds	r3, #8
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7ff ff29 	bl	800d284 <inv_q30_mult>
 800d432:	4603      	mov	r3, r0
 800d434:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3308      	adds	r3, #8
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	3304      	adds	r3, #4
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7ff ff1d 	bl	800d284 <inv_q30_mult>
 800d44a:	4603      	mov	r3, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800d44c:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	330c      	adds	r3, #12
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4619      	mov	r1, r3
 800d45a:	4610      	mov	r0, r2
 800d45c:	f7ff ff12 	bl	800d284 <inv_q30_mult>
 800d460:	4602      	mov	r2, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	330c      	adds	r3, #12
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800d466:	4422      	add	r2, r4
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800d468:	601a      	str	r2, [r3, #0]
}
 800d46a:	bf00      	nop
 800d46c:	3714      	adds	r7, #20
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd90      	pop	{r4, r7, pc}

0800d472 <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
 800d472:	b480      	push	{r7}
 800d474:	b085      	sub	sp, #20
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	441a      	add	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3304      	adds	r3, #4
 800d490:	6819      	ldr	r1, [r3, #0]
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	3304      	adds	r3, #4
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	3304      	adds	r3, #4
 800d49c:	440a      	add	r2, r1
 800d49e:	601a      	str	r2, [r3, #0]
    qSum[2] = q1[2] + q2[2];
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	6819      	ldr	r1, [r3, #0]
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3308      	adds	r3, #8
 800d4b0:	440a      	add	r2, r1
 800d4b2:	601a      	str	r2, [r3, #0]
    qSum[3] = q1[3] + q2[3];
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	330c      	adds	r3, #12
 800d4b8:	6819      	ldr	r1, [r3, #0]
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	330c      	adds	r3, #12
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	330c      	adds	r3, #12
 800d4c4:	440a      	add	r2, r1
 800d4c6:	601a      	str	r2, [r3, #0]
}
 800d4c8:	bf00      	nop
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bc80      	pop	{r7}
 800d4d0:	4770      	bx	lr

0800d4d2 <inv_q_invert>:
    INVENSENSE_FUNC_START;
    inv_vector_normalize(q, 4);
}

void inv_q_invert(const long *q, long *qInverted)
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	4252      	negs	r2, r2
 800d4f0:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	4252      	negs	r2, r2
 800d4fe:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	330c      	adds	r3, #12
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	330c      	adds	r3, #12
 800d50a:	4252      	negs	r2, r2
 800d50c:	601a      	str	r2, [r3, #0]
}
 800d50e:	bf00      	nop
 800d510:	370c      	adds	r7, #12
 800d512:	46bd      	mov	sp, r7
 800d514:	bc80      	pop	{r7}
 800d516:	4770      	bx	lr

0800d518 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b094      	sub	sp, #80	; 0x50
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
 800d524:	2300      	movs	r3, #0
 800d526:	623b      	str	r3, [r7, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
 800d528:	f107 0320 	add.w	r3, r7, #32
 800d52c:	3304      	adds	r3, #4
 800d52e:	220c      	movs	r2, #12
 800d530:	68b9      	ldr	r1, [r7, #8]
 800d532:	4618      	mov	r0, r3
 800d534:	f004 fa96 	bl	8011a64 <memcpy>
    inv_q_mult(q, in4, q_temp1);
 800d538:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d53c:	f107 0320 	add.w	r3, r7, #32
 800d540:	4619      	mov	r1, r3
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f7ff fecc 	bl	800d2e0 <inv_q_mult>
    inv_q_invert(q, q_temp2);
 800d548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d54c:	4619      	mov	r1, r3
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff ffbf 	bl	800d4d2 <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
 800d554:	f107 0210 	add.w	r2, r7, #16
 800d558:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d55c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff febd 	bl	800d2e0 <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
 800d566:	f107 0310 	add.w	r3, r7, #16
 800d56a:	3304      	adds	r3, #4
 800d56c:	220c      	movs	r2, #12
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f004 fa77 	bl	8011a64 <memcpy>
}
 800d576:	bf00      	nop
 800d578:	3750      	adds	r7, #80	; 0x50
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
 800d57e:	b5b0      	push	{r4, r5, r7, lr}
 800d580:	b084      	sub	sp, #16
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7f6 f9ad 	bl	80038f4 <__aeabi_fmul>
 800d59a:	4603      	mov	r3, r0
 800d59c:	461c      	mov	r4, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	f7f6 f9a1 	bl	80038f4 <__aeabi_fmul>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f7f6 f892 	bl	80036e0 <__aeabi_fsub>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	461c      	mov	r4, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	f7f6 f990 	bl	80038f4 <__aeabi_fmul>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f7f6 f881 	bl	80036e0 <__aeabi_fsub>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	330c      	adds	r3, #12
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	330c      	adds	r3, #12
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f7f6 f97f 	bl	80038f4 <__aeabi_fmul>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f7f6 f870 	bl	80036e0 <__aeabi_fsub>
 800d600:	4603      	mov	r3, r0
 800d602:	461a      	mov	r2, r3
    qProd[0] =
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	601a      	str	r2, [r3, #0]
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	3304      	adds	r3, #4
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4619      	mov	r1, r3
 800d614:	4610      	mov	r0, r2
 800d616:	f7f6 f96d 	bl	80038f4 <__aeabi_fmul>
 800d61a:	4603      	mov	r3, r0
 800d61c:	461c      	mov	r4, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3304      	adds	r3, #4
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4619      	mov	r1, r3
 800d62a:	4610      	mov	r0, r2
 800d62c:	f7f6 f962 	bl	80038f4 <__aeabi_fmul>
 800d630:	4603      	mov	r3, r0
 800d632:	4619      	mov	r1, r3
 800d634:	4620      	mov	r0, r4
 800d636:	f7f6 f855 	bl	80036e4 <__addsf3>
 800d63a:	4603      	mov	r3, r0
 800d63c:	461c      	mov	r4, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3308      	adds	r3, #8
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	330c      	adds	r3, #12
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4619      	mov	r1, r3
 800d64c:	4610      	mov	r0, r2
 800d64e:	f7f6 f951 	bl	80038f4 <__aeabi_fmul>
 800d652:	4603      	mov	r3, r0
 800d654:	4619      	mov	r1, r3
 800d656:	4620      	mov	r0, r4
 800d658:	f7f6 f844 	bl	80036e4 <__addsf3>
 800d65c:	4603      	mov	r3, r0
 800d65e:	461d      	mov	r5, r3
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	330c      	adds	r3, #12
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	3308      	adds	r3, #8
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4619      	mov	r1, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	f7f6 f940 	bl	80038f4 <__aeabi_fmul>
 800d674:	4603      	mov	r3, r0
 800d676:	461a      	mov	r2, r3
    qProd[1] =
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	1d1c      	adds	r4, r3, #4
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800d67c:	4611      	mov	r1, r2
 800d67e:	4628      	mov	r0, r5
 800d680:	f7f6 f82e 	bl	80036e0 <__aeabi_fsub>
 800d684:	4603      	mov	r3, r0
    qProd[1] =
 800d686:	6023      	str	r3, [r4, #0]
    qProd[2] =
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	3308      	adds	r3, #8
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4619      	mov	r1, r3
 800d694:	4610      	mov	r0, r2
 800d696:	f7f6 f92d 	bl	80038f4 <__aeabi_fmul>
 800d69a:	4603      	mov	r3, r0
 800d69c:	461c      	mov	r4, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	330c      	adds	r3, #12
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	f7f6 f921 	bl	80038f4 <__aeabi_fmul>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f7f6 f812 	bl	80036e0 <__aeabi_fsub>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	461c      	mov	r4, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	3308      	adds	r3, #8
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	f7f6 f911 	bl	80038f4 <__aeabi_fmul>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7f6 f804 	bl	80036e4 <__addsf3>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	461d      	mov	r5, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	330c      	adds	r3, #12
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	f7f6 f900 	bl	80038f4 <__aeabi_fmul>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	461a      	mov	r2, r3
    qProd[2] =
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f103 0408 	add.w	r4, r3, #8
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800d6fe:	4611      	mov	r1, r2
 800d700:	4628      	mov	r0, r5
 800d702:	f7f5 ffef 	bl	80036e4 <__addsf3>
 800d706:	4603      	mov	r3, r0
    qProd[2] =
 800d708:	6023      	str	r3, [r4, #0]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	330c      	adds	r3, #12
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4619      	mov	r1, r3
 800d716:	4610      	mov	r0, r2
 800d718:	f7f6 f8ec 	bl	80038f4 <__aeabi_fmul>
 800d71c:	4603      	mov	r3, r0
 800d71e:	461c      	mov	r4, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3304      	adds	r3, #4
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	3308      	adds	r3, #8
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7f6 f8e0 	bl	80038f4 <__aeabi_fmul>
 800d734:	4603      	mov	r3, r0
 800d736:	4619      	mov	r1, r3
 800d738:	4620      	mov	r0, r4
 800d73a:	f7f5 ffd3 	bl	80036e4 <__addsf3>
 800d73e:	4603      	mov	r3, r0
 800d740:	461c      	mov	r4, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	3308      	adds	r3, #8
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3304      	adds	r3, #4
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4619      	mov	r1, r3
 800d750:	4610      	mov	r0, r2
 800d752:	f7f6 f8cf 	bl	80038f4 <__aeabi_fmul>
 800d756:	4603      	mov	r3, r0
 800d758:	4619      	mov	r1, r3
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7f5 ffc0 	bl	80036e0 <__aeabi_fsub>
 800d760:	4603      	mov	r3, r0
 800d762:	461d      	mov	r5, r3
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	330c      	adds	r3, #12
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4619      	mov	r1, r3
 800d770:	4610      	mov	r0, r2
 800d772:	f7f6 f8bf 	bl	80038f4 <__aeabi_fmul>
 800d776:	4603      	mov	r3, r0
 800d778:	461a      	mov	r2, r3
    qProd[3] =
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f103 040c 	add.w	r4, r3, #12
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800d780:	4611      	mov	r1, r2
 800d782:	4628      	mov	r0, r5
 800d784:	f7f5 ffae 	bl	80036e4 <__addsf3>
 800d788:	4603      	mov	r3, r0
    qProd[3] =
 800d78a:	6023      	str	r3, [r4, #0]
}
 800d78c:	bf00      	nop
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bdb0      	pop	{r4, r5, r7, pc}

0800d794 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
 800d794:	b590      	push	{r4, r7, lr}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	f7f5 ff9a 	bl	80036e4 <__addsf3>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	6819      	ldr	r1, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1d1c      	adds	r4, r3, #4
 800d7c8:	4610      	mov	r0, r2
 800d7ca:	f7f5 ff8b 	bl	80036e4 <__addsf3>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6023      	str	r3, [r4, #0]
    qSum[2] = q1[2] + q2[2];
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f103 0408 	add.w	r4, r3, #8
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	f7f5 ff7d 	bl	80036e4 <__addsf3>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	6023      	str	r3, [r4, #0]
    qSum[3] = q1[3] + q2[3];
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	330c      	adds	r3, #12
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	330c      	adds	r3, #12
 800d7f8:	6819      	ldr	r1, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f103 040c 	add.w	r4, r3, #12
 800d800:	4610      	mov	r0, r2
 800d802:	f7f5 ff6f 	bl	80036e4 <__addsf3>
 800d806:	4603      	mov	r3, r0
 800d808:	6023      	str	r3, [r4, #0]
}
 800d80a:	bf00      	nop
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd90      	pop	{r4, r7, pc}

0800d812 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
 800d812:	b590      	push	{r4, r7, lr}
 800d814:	b085      	sub	sp, #20
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
    INVENSENSE_FUNC_START;
    float normSF = 0;
 800d81a:	f04f 0300 	mov.w	r3, #0
 800d81e:	60fb      	str	r3, [r7, #12]
    float xHalf = 0;
 800d820:	f04f 0300 	mov.w	r3, #0
 800d824:	60bb      	str	r3, [r7, #8]
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4619      	mov	r1, r3
 800d830:	4610      	mov	r0, r2
 800d832:	f7f6 f85f 	bl	80038f4 <__aeabi_fmul>
 800d836:	4603      	mov	r3, r0
 800d838:	461c      	mov	r4, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3304      	adds	r3, #4
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	3304      	adds	r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4619      	mov	r1, r3
 800d848:	4610      	mov	r0, r2
 800d84a:	f7f6 f853 	bl	80038f4 <__aeabi_fmul>
 800d84e:	4603      	mov	r3, r0
 800d850:	4619      	mov	r1, r3
 800d852:	4620      	mov	r0, r4
 800d854:	f7f5 ff46 	bl	80036e4 <__addsf3>
 800d858:	4603      	mov	r3, r0
 800d85a:	461c      	mov	r4, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3308      	adds	r3, #8
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	3308      	adds	r3, #8
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4619      	mov	r1, r3
 800d86a:	4610      	mov	r0, r2
 800d86c:	f7f6 f842 	bl	80038f4 <__aeabi_fmul>
 800d870:	4603      	mov	r3, r0
 800d872:	4619      	mov	r1, r3
 800d874:	4620      	mov	r0, r4
 800d876:	f7f5 ff35 	bl	80036e4 <__addsf3>
 800d87a:	4603      	mov	r3, r0
 800d87c:	461c      	mov	r4, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	330c      	adds	r3, #12
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	330c      	adds	r3, #12
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4619      	mov	r1, r3
 800d88c:	4610      	mov	r0, r2
 800d88e:	f7f6 f831 	bl	80038f4 <__aeabi_fmul>
 800d892:	4603      	mov	r3, r0
 800d894:	4619      	mov	r1, r3
 800d896:	4620      	mov	r0, r4
 800d898:	f7f5 ff24 	bl	80036e4 <__addsf3>
 800d89c:	4603      	mov	r3, r0
 800d89e:	60fb      	str	r3, [r7, #12]
    if (normSF < 2) {
 800d8a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f7f6 f9c3 	bl	8003c30 <__aeabi_fcmplt>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 808d 	beq.w	800d9cc <inv_q_normalizef+0x1ba>
        xHalf = 0.5f * normSF;
 800d8b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f7f6 f81c 	bl	80038f4 <__aeabi_fmul>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	60bb      	str	r3, [r7, #8]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800d8c0:	68f9      	ldr	r1, [r7, #12]
 800d8c2:	68b8      	ldr	r0, [r7, #8]
 800d8c4:	f7f6 f816 	bl	80038f4 <__aeabi_fmul>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	68f9      	ldr	r1, [r7, #12]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7f6 f811 	bl	80038f4 <__aeabi_fmul>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800d8da:	f7f5 ff01 	bl	80036e0 <__aeabi_fsub>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7f6 f806 	bl	80038f4 <__aeabi_fmul>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800d8ec:	68f9      	ldr	r1, [r7, #12]
 800d8ee:	68b8      	ldr	r0, [r7, #8]
 800d8f0:	f7f6 f800 	bl	80038f4 <__aeabi_fmul>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	68f9      	ldr	r1, [r7, #12]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7f5 fffb 	bl	80038f4 <__aeabi_fmul>
 800d8fe:	4603      	mov	r3, r0
 800d900:	4619      	mov	r1, r3
 800d902:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800d906:	f7f5 feeb 	bl	80036e0 <__aeabi_fsub>
 800d90a:	4603      	mov	r3, r0
 800d90c:	4619      	mov	r1, r3
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f7f5 fff0 	bl	80038f4 <__aeabi_fmul>
 800d914:	4603      	mov	r3, r0
 800d916:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800d918:	68f9      	ldr	r1, [r7, #12]
 800d91a:	68b8      	ldr	r0, [r7, #8]
 800d91c:	f7f5 ffea 	bl	80038f4 <__aeabi_fmul>
 800d920:	4603      	mov	r3, r0
 800d922:	68f9      	ldr	r1, [r7, #12]
 800d924:	4618      	mov	r0, r3
 800d926:	f7f5 ffe5 	bl	80038f4 <__aeabi_fmul>
 800d92a:	4603      	mov	r3, r0
 800d92c:	4619      	mov	r1, r3
 800d92e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800d932:	f7f5 fed5 	bl	80036e0 <__aeabi_fsub>
 800d936:	4603      	mov	r3, r0
 800d938:	4619      	mov	r1, r3
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f7f5 ffda 	bl	80038f4 <__aeabi_fmul>
 800d940:	4603      	mov	r3, r0
 800d942:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800d944:	68f9      	ldr	r1, [r7, #12]
 800d946:	68b8      	ldr	r0, [r7, #8]
 800d948:	f7f5 ffd4 	bl	80038f4 <__aeabi_fmul>
 800d94c:	4603      	mov	r3, r0
 800d94e:	68f9      	ldr	r1, [r7, #12]
 800d950:	4618      	mov	r0, r3
 800d952:	f7f5 ffcf 	bl	80038f4 <__aeabi_fmul>
 800d956:	4603      	mov	r3, r0
 800d958:	4619      	mov	r1, r3
 800d95a:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800d95e:	f7f5 febf 	bl	80036e0 <__aeabi_fsub>
 800d962:	4603      	mov	r3, r0
 800d964:	4619      	mov	r1, r3
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7f5 ffc4 	bl	80038f4 <__aeabi_fmul>
 800d96c:	4603      	mov	r3, r0
 800d96e:	60fb      	str	r3, [r7, #12]
        q[0] *= normSF;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68f9      	ldr	r1, [r7, #12]
 800d976:	4618      	mov	r0, r3
 800d978:	f7f5 ffbc 	bl	80038f4 <__aeabi_fmul>
 800d97c:	4603      	mov	r3, r0
 800d97e:	461a      	mov	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	601a      	str	r2, [r3, #0]
        q[1] *= normSF;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	3304      	adds	r3, #4
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	1d1c      	adds	r4, r3, #4
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	4610      	mov	r0, r2
 800d992:	f7f5 ffaf 	bl	80038f4 <__aeabi_fmul>
 800d996:	4603      	mov	r3, r0
 800d998:	6023      	str	r3, [r4, #0]
        q[2] *= normSF;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	3308      	adds	r3, #8
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f103 0408 	add.w	r4, r3, #8
 800d9a6:	68f9      	ldr	r1, [r7, #12]
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	f7f5 ffa3 	bl	80038f4 <__aeabi_fmul>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	6023      	str	r3, [r4, #0]
        q[3] *= normSF;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	330c      	adds	r3, #12
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f103 040c 	add.w	r4, r3, #12
 800d9be:	68f9      	ldr	r1, [r7, #12]
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	f7f5 ff97 	bl	80038f4 <__aeabi_fmul>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	e012      	b.n	800d9f2 <inv_q_normalizef+0x1e0>
    } else {
        q[0] = 1.0;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d9d2:	601a      	str	r2, [r3, #0]
        q[1] = 0.0;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	f04f 0200 	mov.w	r2, #0
 800d9dc:	601a      	str	r2, [r3, #0]
        q[2] = 0.0;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	f04f 0200 	mov.w	r2, #0
 800d9e6:	601a      	str	r2, [r3, #0]
        q[3] = 0.0;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	330c      	adds	r3, #12
 800d9ec:	f04f 0200 	mov.w	r2, #0
 800d9f0:	601a      	str	r2, [r3, #0]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4610      	mov	r0, r2
 800d9fe:	f7f5 ff79 	bl	80038f4 <__aeabi_fmul>
 800da02:	4603      	mov	r3, r0
 800da04:	461c      	mov	r4, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	3304      	adds	r3, #4
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3304      	adds	r3, #4
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4619      	mov	r1, r3
 800da14:	4610      	mov	r0, r2
 800da16:	f7f5 ff6d 	bl	80038f4 <__aeabi_fmul>
 800da1a:	4603      	mov	r3, r0
 800da1c:	4619      	mov	r1, r3
 800da1e:	4620      	mov	r0, r4
 800da20:	f7f5 fe60 	bl	80036e4 <__addsf3>
 800da24:	4603      	mov	r3, r0
 800da26:	461c      	mov	r4, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3308      	adds	r3, #8
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3308      	adds	r3, #8
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4619      	mov	r1, r3
 800da36:	4610      	mov	r0, r2
 800da38:	f7f5 ff5c 	bl	80038f4 <__aeabi_fmul>
 800da3c:	4603      	mov	r3, r0
 800da3e:	4619      	mov	r1, r3
 800da40:	4620      	mov	r0, r4
 800da42:	f7f5 fe4f 	bl	80036e4 <__addsf3>
 800da46:	4603      	mov	r3, r0
 800da48:	461c      	mov	r4, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	330c      	adds	r3, #12
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	330c      	adds	r3, #12
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4619      	mov	r1, r3
 800da58:	4610      	mov	r0, r2
 800da5a:	f7f5 ff4b 	bl	80038f4 <__aeabi_fmul>
 800da5e:	4603      	mov	r3, r0
 800da60:	4619      	mov	r1, r3
 800da62:	4620      	mov	r0, r4
 800da64:	f7f5 fe3e 	bl	80036e4 <__addsf3>
 800da68:	4603      	mov	r3, r0
 800da6a:	60fb      	str	r3, [r7, #12]
}
 800da6c:	bf00      	nop
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	bd90      	pop	{r4, r7, pc}

0800da74 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
 800da74:	b590      	push	{r4, r7, lr}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f7f5 ff34 	bl	80038f4 <__aeabi_fmul>
 800da8c:	4603      	mov	r3, r0
 800da8e:	461c      	mov	r4, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3304      	adds	r3, #4
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3304      	adds	r3, #4
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7f5 ff28 	bl	80038f4 <__aeabi_fmul>
 800daa4:	4603      	mov	r3, r0
 800daa6:	4619      	mov	r1, r3
 800daa8:	4620      	mov	r0, r4
 800daaa:	f7f5 fe1b 	bl	80036e4 <__addsf3>
 800daae:	4603      	mov	r3, r0
 800dab0:	461c      	mov	r4, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	3308      	adds	r3, #8
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3308      	adds	r3, #8
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4619      	mov	r1, r3
 800dac0:	4610      	mov	r0, r2
 800dac2:	f7f5 ff17 	bl	80038f4 <__aeabi_fmul>
 800dac6:	4603      	mov	r3, r0
 800dac8:	4619      	mov	r1, r3
 800daca:	4620      	mov	r0, r4
 800dacc:	f7f5 fe0a 	bl	80036e4 <__addsf3>
 800dad0:	4603      	mov	r3, r0
 800dad2:	461c      	mov	r4, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	330c      	adds	r3, #12
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	330c      	adds	r3, #12
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7f5 ff06 	bl	80038f4 <__aeabi_fmul>
 800dae8:	4603      	mov	r3, r0
 800daea:	4619      	mov	r1, r3
 800daec:	4620      	mov	r0, r4
 800daee:	f7f5 fdf9 	bl	80036e4 <__addsf3>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4618      	mov	r0, r3
 800daf6:	f006 fca1 	bl	801443c <sqrtf>
 800dafa:	60f8      	str	r0, [r7, #12]
    if (mag) {
 800dafc:	f04f 0100 	mov.w	r1, #0
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7f6 f88b 	bl	8003c1c <__aeabi_fcmpeq>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d12d      	bne.n	800db68 <inv_q_norm4+0xf4>
        q[0] /= mag;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68f9      	ldr	r1, [r7, #12]
 800db12:	4618      	mov	r0, r3
 800db14:	f7f5 ffa2 	bl	8003a5c <__aeabi_fdiv>
 800db18:	4603      	mov	r3, r0
 800db1a:	461a      	mov	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	601a      	str	r2, [r3, #0]
        q[1] /= mag;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3304      	adds	r3, #4
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	1d1c      	adds	r4, r3, #4
 800db2a:	68f9      	ldr	r1, [r7, #12]
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7f5 ff95 	bl	8003a5c <__aeabi_fdiv>
 800db32:	4603      	mov	r3, r0
 800db34:	6023      	str	r3, [r4, #0]
        q[2] /= mag;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	3308      	adds	r3, #8
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f103 0408 	add.w	r4, r3, #8
 800db42:	68f9      	ldr	r1, [r7, #12]
 800db44:	4610      	mov	r0, r2
 800db46:	f7f5 ff89 	bl	8003a5c <__aeabi_fdiv>
 800db4a:	4603      	mov	r3, r0
 800db4c:	6023      	str	r3, [r4, #0]
        q[3] /= mag;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	330c      	adds	r3, #12
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f103 040c 	add.w	r4, r3, #12
 800db5a:	68f9      	ldr	r1, [r7, #12]
 800db5c:	4610      	mov	r0, r2
 800db5e:	f7f5 ff7d 	bl	8003a5c <__aeabi_fdiv>
 800db62:	4603      	mov	r3, r0
 800db64:	6023      	str	r3, [r4, #0]
        q[0] = 1.f;
        q[1] = 0.f;
        q[2] = 0.f;
        q[3] = 0.f;
    }
}
 800db66:	e012      	b.n	800db8e <inv_q_norm4+0x11a>
        q[0] = 1.f;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800db6e:	601a      	str	r2, [r3, #0]
        q[1] = 0.f;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3304      	adds	r3, #4
 800db74:	f04f 0200 	mov.w	r2, #0
 800db78:	601a      	str	r2, [r3, #0]
        q[2] = 0.f;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	3308      	adds	r3, #8
 800db7e:	f04f 0200 	mov.w	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
        q[3] = 0.f;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	330c      	adds	r3, #12
 800db88:	f04f 0200 	mov.w	r2, #0
 800db8c:	601a      	str	r2, [r3, #0]
}
 800db8e:	bf00      	nop
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	bd90      	pop	{r4, r7, pc}

0800db96 <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800dbb6:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3308      	adds	r3, #8
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800dbc6:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	330c      	adds	r3, #12
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	330c      	adds	r3, #12
 800dbd2:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800dbd6:	601a      	str	r2, [r3, #0]
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bc80      	pop	{r7}
 800dbe0:	4770      	bx	lr

0800dbe2 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
 800dbe2:	b590      	push	{r4, r7, lr}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	3304      	adds	r3, #4
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	f7ff fb14 	bl	800d228 <inv_q29_mult>
 800dc00:	4604      	mov	r4, r0
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	f7ff fb0b 	bl	800d228 <inv_q29_mult>
 800dc12:	4603      	mov	r3, r0
 800dc14:	4423      	add	r3, r4
                quat[0]) -
 800dc16:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    rot[0] =
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	3304      	adds	r3, #4
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	3308      	adds	r3, #8
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f7ff fafb 	bl	800d228 <inv_q29_mult>
 800dc32:	4604      	mov	r4, r0
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	330c      	adds	r3, #12
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4610      	mov	r0, r2
 800dc42:	f7ff faf1 	bl	800d228 <inv_q29_mult>
 800dc46:	4602      	mov	r2, r0
    rot[1] =
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	3304      	adds	r3, #4
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800dc4c:	1aa2      	subs	r2, r4, r2
    rot[1] =
 800dc4e:	601a      	str	r2, [r3, #0]
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	3304      	adds	r3, #4
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	330c      	adds	r3, #12
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7ff fae2 	bl	800d228 <inv_q29_mult>
 800dc64:	4604      	mov	r4, r0
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3308      	adds	r3, #8
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4619      	mov	r1, r3
 800dc72:	4610      	mov	r0, r2
 800dc74:	f7ff fad8 	bl	800d228 <inv_q29_mult>
 800dc78:	4602      	mov	r2, r0
    rot[2] =
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	3308      	adds	r3, #8
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800dc7e:	4422      	add	r2, r4
    rot[2] =
 800dc80:	601a      	str	r2, [r3, #0]
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	3304      	adds	r3, #4
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f7ff fac9 	bl	800d228 <inv_q29_mult>
 800dc96:	4604      	mov	r4, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4619      	mov	r1, r3
 800dca4:	4610      	mov	r0, r2
 800dca6:	f7ff fabf 	bl	800d228 <inv_q29_mult>
 800dcaa:	4602      	mov	r2, r0
    rot[3] =
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	330c      	adds	r3, #12
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800dcb0:	4422      	add	r2, r4
    rot[3] =
 800dcb2:	601a      	str	r2, [r3, #0]
    rot[4] =
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	3308      	adds	r3, #8
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	f7ff fab0 	bl	800d228 <inv_q29_mult>
 800dcc8:	4604      	mov	r4, r0
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f7ff faa7 	bl	800d228 <inv_q29_mult>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	18e2      	adds	r2, r4, r3
    rot[4] =
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	3310      	adds	r3, #16
                quat[0]) -
 800dce2:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    rot[4] =
 800dce6:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	3308      	adds	r3, #8
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	330c      	adds	r3, #12
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	f7ff fa96 	bl	800d228 <inv_q29_mult>
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3304      	adds	r3, #4
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	4610      	mov	r0, r2
 800dd0c:	f7ff fa8c 	bl	800d228 <inv_q29_mult>
 800dd10:	4602      	mov	r2, r0
    rot[5] =
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	3314      	adds	r3, #20
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800dd16:	1aa2      	subs	r2, r4, r2
    rot[5] =
 800dd18:	601a      	str	r2, [r3, #0]
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	330c      	adds	r3, #12
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4619      	mov	r1, r3
 800dd28:	4610      	mov	r0, r2
 800dd2a:	f7ff fa7d 	bl	800d228 <inv_q29_mult>
 800dd2e:	4604      	mov	r4, r0
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	3308      	adds	r3, #8
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	f7ff fa73 	bl	800d228 <inv_q29_mult>
 800dd42:	4602      	mov	r2, r0
    rot[6] =
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	3318      	adds	r3, #24
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800dd48:	1aa2      	subs	r2, r4, r2
    rot[6] =
 800dd4a:	601a      	str	r2, [r3, #0]
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3308      	adds	r3, #8
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	330c      	adds	r3, #12
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	f7ff fa64 	bl	800d228 <inv_q29_mult>
 800dd60:	4604      	mov	r4, r0
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	3304      	adds	r3, #4
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f7ff fa5a 	bl	800d228 <inv_q29_mult>
 800dd74:	4602      	mov	r2, r0
    rot[7] =
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	331c      	adds	r3, #28
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800dd7a:	4422      	add	r2, r4
    rot[7] =
 800dd7c:	601a      	str	r2, [r3, #0]
    rot[8] =
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	330c      	adds	r3, #12
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	330c      	adds	r3, #12
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	f7ff fa4b 	bl	800d228 <inv_q29_mult>
 800dd92:	4604      	mov	r4, r0
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4610      	mov	r0, r2
 800dda0:	f7ff fa42 	bl	800d228 <inv_q29_mult>
 800dda4:	4603      	mov	r3, r0
 800dda6:	18e2      	adds	r2, r4, r3
    rot[8] =
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	3320      	adds	r3, #32
                quat[0]) -
 800ddac:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    rot[8] =
 800ddb0:	601a      	str	r2, [r3, #0]
        1073741824L;
}
 800ddb2:	bf00      	nop
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd90      	pop	{r4, r7, pc}

0800ddba <inv_row_2_scale>:

    return hash;
}

static unsigned short inv_row_2_scale(const signed char *row)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f993 3000 	ldrsb.w	r3, [r3]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dd02      	ble.n	800ddd2 <inv_row_2_scale+0x18>
        b = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	81fb      	strh	r3, [r7, #14]
 800ddd0:	e02d      	b.n	800de2e <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f993 3000 	ldrsb.w	r3, [r3]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	da02      	bge.n	800dde2 <inv_row_2_scale+0x28>
        b = 4;
 800dddc:	2304      	movs	r3, #4
 800ddde:	81fb      	strh	r3, [r7, #14]
 800dde0:	e025      	b.n	800de2e <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	3301      	adds	r3, #1
 800dde6:	f993 3000 	ldrsb.w	r3, [r3]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	dd02      	ble.n	800ddf4 <inv_row_2_scale+0x3a>
        b = 1;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	81fb      	strh	r3, [r7, #14]
 800ddf2:	e01c      	b.n	800de2e <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	f993 3000 	ldrsb.w	r3, [r3]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	da02      	bge.n	800de06 <inv_row_2_scale+0x4c>
        b = 5;
 800de00:	2305      	movs	r3, #5
 800de02:	81fb      	strh	r3, [r7, #14]
 800de04:	e013      	b.n	800de2e <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	3302      	adds	r3, #2
 800de0a:	f993 3000 	ldrsb.w	r3, [r3]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	dd02      	ble.n	800de18 <inv_row_2_scale+0x5e>
        b = 2;
 800de12:	2302      	movs	r3, #2
 800de14:	81fb      	strh	r3, [r7, #14]
 800de16:	e00a      	b.n	800de2e <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	3302      	adds	r3, #2
 800de1c:	f993 3000 	ldrsb.w	r3, [r3]
 800de20:	2b00      	cmp	r3, #0
 800de22:	da02      	bge.n	800de2a <inv_row_2_scale+0x70>
        b = 6;
 800de24:	2306      	movs	r3, #6
 800de26:	81fb      	strh	r3, [r7, #14]
 800de28:	e001      	b.n	800de2e <inv_row_2_scale+0x74>
    else
        b = 7;		// error
 800de2a:	2307      	movs	r3, #7
 800de2c:	81fb      	strh	r3, [r7, #14]
    return b;
 800de2e:	89fb      	ldrh	r3, [r7, #14]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	bc80      	pop	{r7}
 800de38:	4770      	bx	lr

0800de3a <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff ffb9 	bl	800ddba <inv_row_2_scale>
 800de48:	4603      	mov	r3, r0
 800de4a:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3303      	adds	r3, #3
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff ffb2 	bl	800ddba <inv_row_2_scale>
 800de56:	4603      	mov	r3, r0
 800de58:	00db      	lsls	r3, r3, #3
 800de5a:	b21a      	sxth	r2, r3
 800de5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de60:	4313      	orrs	r3, r2
 800de62:	b21b      	sxth	r3, r3
 800de64:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3306      	adds	r3, #6
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7ff ffa5 	bl	800ddba <inv_row_2_scale>
 800de70:	4603      	mov	r3, r0
 800de72:	019b      	lsls	r3, r3, #6
 800de74:	b21a      	sxth	r2, r3
 800de76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	b21b      	sxth	r3, r3
 800de7e:	81fb      	strh	r3, [r7, #14]


    return scalar;
 800de80:	89fb      	ldrh	r3, [r7, #14]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
 800de8a:	b590      	push	{r4, r7, lr}
 800de8c:	b085      	sub	sp, #20
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
 800de96:	4603      	mov	r3, r0
 800de98:	81fb      	strh	r3, [r7, #14]
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800de9a:	89fb      	ldrh	r3, [r7, #14]
 800de9c:	f003 0303 	and.w	r3, r3, #3
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	4413      	add	r3, r2
 800dea6:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
 800dea8:	89fb      	ldrh	r3, [r7, #14]
 800deaa:	f003 0304 	and.w	r3, r3, #4
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d002      	beq.n	800deb8 <inv_convert_to_body_with_scale+0x2e>
 800deb2:	f04f 33ff 	mov.w	r3, #4294967295
 800deb6:	e000      	b.n	800deba <inv_convert_to_body_with_scale+0x30>
 800deb8:	2301      	movs	r3, #1
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff f9df 	bl	800d284 <inv_q30_mult>
 800dec6:	4602      	mov	r2, r0
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	601a      	str	r2, [r3, #0]
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	08db      	lsrs	r3, r3, #3
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	f003 0303 	and.w	r3, r3, #3
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	4413      	add	r3, r2
 800dedc:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
 800dede:	89fb      	ldrh	r3, [r7, #14]
 800dee0:	f003 0320 	and.w	r3, r3, #32
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <inv_convert_to_body_with_scale+0x64>
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295
 800deec:	e000      	b.n	800def0 <inv_convert_to_body_with_scale+0x66>
 800deee:	2301      	movs	r3, #1
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800def0:	fb03 f202 	mul.w	r2, r3, r2
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	1d1c      	adds	r4, r3, #4
 800def8:	68b9      	ldr	r1, [r7, #8]
 800defa:	4610      	mov	r0, r2
 800defc:	f7ff f9c2 	bl	800d284 <inv_q30_mult>
 800df00:	4603      	mov	r3, r0
 800df02:	6023      	str	r3, [r4, #0]
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800df04:	89fb      	ldrh	r3, [r7, #14]
 800df06:	099b      	lsrs	r3, r3, #6
 800df08:	b29b      	uxth	r3, r3
 800df0a:	f003 0303 	and.w	r3, r3, #3
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	4413      	add	r3, r2
 800df14:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
 800df16:	89fb      	ldrh	r3, [r7, #14]
 800df18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <inv_convert_to_body_with_scale+0x9c>
 800df20:	f04f 33ff 	mov.w	r3, #4294967295
 800df24:	e000      	b.n	800df28 <inv_convert_to_body_with_scale+0x9e>
 800df26:	2301      	movs	r3, #1
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800df28:	fb03 f202 	mul.w	r2, r3, r2
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	f103 0408 	add.w	r4, r3, #8
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	4610      	mov	r0, r2
 800df36:	f7ff f9a5 	bl	800d284 <inv_q30_mult>
 800df3a:	4603      	mov	r3, r0
 800df3c:	6023      	str	r3, [r4, #0]
}
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}

0800df46 <inv_init_biquad_filter>:
double inv_vector_norm(const float *x)
{
    return sqrt(x[0]*x[0]+x[1]*x[1]+x[2]*x[2]);
}

void inv_init_biquad_filter(inv_biquad_filter_t *pFilter, float *pBiquadCoeff) {
 800df46:	b480      	push	{r7}
 800df48:	b085      	sub	sp, #20
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
    int i;
    // initial state to zero
    pFilter->state[0] = 0;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f04f 0200 	mov.w	r2, #0
 800df56:	601a      	str	r2, [r3, #0]
    pFilter->state[1] = 0;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f04f 0200 	mov.w	r2, #0
 800df5e:	605a      	str	r2, [r3, #4]

    // set up coefficients
    for (i=0; i<5; i++) {
 800df60:	2300      	movs	r3, #0
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	e00c      	b.n	800df80 <inv_init_biquad_filter+0x3a>
        pFilter->c[i] = pBiquadCoeff[i];
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	4413      	add	r3, r2
 800df6e:	6819      	ldr	r1, [r3, #0]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	3204      	adds	r2, #4
 800df76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=0; i<5; i++) {
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	3301      	adds	r3, #1
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2b04      	cmp	r3, #4
 800df84:	ddef      	ble.n	800df66 <inv_init_biquad_filter+0x20>
    }
}
 800df86:	bf00      	nop
 800df88:	bf00      	nop
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bc80      	pop	{r7}
 800df90:	4770      	bx	lr

0800df92 <inv_calc_state_to_match_output>:

void inv_calc_state_to_match_output(inv_biquad_filter_t *pFilter, float input)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b082      	sub	sp, #8
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
    pFilter->input = input;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	625a      	str	r2, [r3, #36]	; 0x24
    pFilter->output = input;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	629a      	str	r2, [r3, #40]	; 0x28
    pFilter->state[0] = input / (1 + pFilter->c[2] + pFilter->c[3]);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7f5 fb97 	bl	80036e4 <__addsf3>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	461a      	mov	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	f7f5 fb8f 	bl	80036e4 <__addsf3>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	4619      	mov	r1, r3
 800dfca:	6838      	ldr	r0, [r7, #0]
 800dfcc:	f7f5 fd46 	bl	8003a5c <__aeabi_fdiv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	601a      	str	r2, [r3, #0]
    pFilter->state[1] = pFilter->state[0];
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	605a      	str	r2, [r3, #4]
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <inv_biquad_filter_process>:

float inv_biquad_filter_process(inv_biquad_filter_t *pFilter, float input)  {
 800dfe8:	b590      	push	{r4, r7, lr}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
    float stateZero;

    pFilter->input = input;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	625a      	str	r2, [r3, #36]	; 0x24
    // calculate the new state;
    stateZero = pFilter->input - pFilter->c[2]*pFilter->state[0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699a      	ldr	r2, [r3, #24]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f7f5 fc74 	bl	80038f4 <__aeabi_fmul>
 800e00c:	4603      	mov	r3, r0
 800e00e:	4619      	mov	r1, r3
 800e010:	4620      	mov	r0, r4
 800e012:	f7f5 fb65 	bl	80036e0 <__aeabi_fsub>
 800e016:	4603      	mov	r3, r0
 800e018:	461c      	mov	r4, r3
                               - pFilter->c[3]*pFilter->state[1];
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	69da      	ldr	r2, [r3, #28]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	4619      	mov	r1, r3
 800e024:	4610      	mov	r0, r2
 800e026:	f7f5 fc65 	bl	80038f4 <__aeabi_fmul>
 800e02a:	4603      	mov	r3, r0
    stateZero = pFilter->input - pFilter->c[2]*pFilter->state[0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	4620      	mov	r0, r4
 800e030:	f7f5 fb56 	bl	80036e0 <__aeabi_fsub>
 800e034:	4603      	mov	r3, r0
 800e036:	60fb      	str	r3, [r7, #12]

    pFilter->output = stateZero + pFilter->c[0]*pFilter->state[0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	691a      	ldr	r2, [r3, #16]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4619      	mov	r1, r3
 800e042:	4610      	mov	r0, r2
 800e044:	f7f5 fc56 	bl	80038f4 <__aeabi_fmul>
 800e048:	4603      	mov	r3, r0
 800e04a:	68f9      	ldr	r1, [r7, #12]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7f5 fb49 	bl	80036e4 <__addsf3>
 800e052:	4603      	mov	r3, r0
 800e054:	461c      	mov	r4, r3
                                + pFilter->c[1]*pFilter->state[1];
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	695a      	ldr	r2, [r3, #20]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	4619      	mov	r1, r3
 800e060:	4610      	mov	r0, r2
 800e062:	f7f5 fc47 	bl	80038f4 <__aeabi_fmul>
 800e066:	4603      	mov	r3, r0
 800e068:	4619      	mov	r1, r3
 800e06a:	4620      	mov	r0, r4
 800e06c:	f7f5 fb3a 	bl	80036e4 <__addsf3>
 800e070:	4603      	mov	r3, r0
 800e072:	461a      	mov	r2, r3
    pFilter->output = stateZero + pFilter->c[0]*pFilter->state[0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	629a      	str	r2, [r3, #40]	; 0x28

    // update the output and state
    pFilter->output = pFilter->output * pFilter->c[4];
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a1b      	ldr	r3, [r3, #32]
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f7f5 fc36 	bl	80038f4 <__aeabi_fmul>
 800e088:	4603      	mov	r3, r0
 800e08a:	461a      	mov	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	629a      	str	r2, [r3, #40]	; 0x28
    pFilter->state[1] = pFilter->state[0];
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	605a      	str	r2, [r3, #4]
    pFilter->state[0] = stateZero;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	68fa      	ldr	r2, [r7, #12]
 800e09c:	601a      	str	r2, [r3, #0]
    return pFilter->output;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd90      	pop	{r4, r7, pc}

0800e0aa <__print_result_location>:
    /* Final implementation of actual writing to a character device */
    int _MLWriteLog(const char *buf, int buflen);
#endif

    static inline void __print_result_location(int result, const char *file, const char *func, int line)
    {
 800e0aa:	b480      	push	{r7}
 800e0ac:	b085      	sub	sp, #20
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	60f8      	str	r0, [r7, #12]
 800e0b2:	60b9      	str	r1, [r7, #8]
 800e0b4:	607a      	str	r2, [r7, #4]
 800e0b6:	603b      	str	r3, [r7, #0]
        MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
    }
 800e0b8:	bf00      	nop
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bc80      	pop	{r7}
 800e0c0:	4770      	bx	lr
	...

0800e0c4 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
    inv_init_storage_manager();
 800e0c8:	f000 faf0 	bl	800e6ac <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
 800e0cc:	f000 fa5e 	bl	800e58c <inv_init_start_manager>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00a      	beq.n	800e0ec <inv_init_mpl+0x28>
 800e0d6:	f000 fa59 	bl	800e58c <inv_init_start_manager>
 800e0da:	2322      	movs	r3, #34	; 0x22
 800e0dc:	4a15      	ldr	r2, [pc, #84]	; (800e134 <inv_init_mpl+0x70>)
 800e0de:	4916      	ldr	r1, [pc, #88]	; (800e138 <inv_init_mpl+0x74>)
 800e0e0:	f7ff ffe3 	bl	800e0aa <__print_result_location>
 800e0e4:	f000 fa52 	bl	800e58c <inv_init_start_manager>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	e020      	b.n	800e12e <inv_init_mpl+0x6a>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
 800e0ec:	f7fd ff98 	bl	800c020 <inv_init_data_builder>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00a      	beq.n	800e10c <inv_init_mpl+0x48>
 800e0f6:	f7fd ff93 	bl	800c020 <inv_init_data_builder>
 800e0fa:	2325      	movs	r3, #37	; 0x25
 800e0fc:	4a0d      	ldr	r2, [pc, #52]	; (800e134 <inv_init_mpl+0x70>)
 800e0fe:	490e      	ldr	r1, [pc, #56]	; (800e138 <inv_init_mpl+0x74>)
 800e100:	f7ff ffd3 	bl	800e0aa <__print_result_location>
 800e104:	f7fd ff8c 	bl	800c020 <inv_init_data_builder>
 800e108:	4603      	mov	r3, r0
 800e10a:	e010      	b.n	800e12e <inv_init_mpl+0x6a>

    INV_ERROR_CHECK(inv_enable_results_holder());
 800e10c:	f000 f9de 	bl	800e4cc <inv_enable_results_holder>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00a      	beq.n	800e12c <inv_init_mpl+0x68>
 800e116:	f000 f9d9 	bl	800e4cc <inv_enable_results_holder>
 800e11a:	2327      	movs	r3, #39	; 0x27
 800e11c:	4a05      	ldr	r2, [pc, #20]	; (800e134 <inv_init_mpl+0x70>)
 800e11e:	4906      	ldr	r1, [pc, #24]	; (800e138 <inv_init_mpl+0x74>)
 800e120:	f7ff ffc3 	bl	800e0aa <__print_result_location>
 800e124:	f000 f9d2 	bl	800e4cc <inv_enable_results_holder>
 800e128:	4603      	mov	r3, r0
 800e12a:	e000      	b.n	800e12e <inv_init_mpl+0x6a>

    return INV_SUCCESS;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	08016544 	.word	0x08016544
 800e138:	080156f4 	.word	0x080156f4

0800e13c <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	af00      	add	r7, sp, #0
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
 800e140:	f000 fa8e 	bl	800e660 <inv_execute_mpl_start_notification>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <inv_start_mpl+0x24>
 800e14a:	f000 fa89 	bl	800e660 <inv_execute_mpl_start_notification>
 800e14e:	2342      	movs	r3, #66	; 0x42
 800e150:	4a05      	ldr	r2, [pc, #20]	; (800e168 <inv_start_mpl+0x2c>)
 800e152:	4906      	ldr	r1, [pc, #24]	; (800e16c <inv_start_mpl+0x30>)
 800e154:	f7ff ffa9 	bl	800e0aa <__print_result_location>
 800e158:	f000 fa82 	bl	800e660 <inv_execute_mpl_start_notification>
 800e15c:	4603      	mov	r3, r0
 800e15e:	e000      	b.n	800e162 <inv_start_mpl+0x26>
    return INV_SUCCESS;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	08016554 	.word	0x08016554
 800e16c:	080156f4 	.word	0x080156f4

0800e170 <inv_store_gaming_quaternion>:
 * Store a quaternion more suitable for gaming. This quaternion is often determined
 * using only gyro and accel.
 * @param[in] quat Length 4, Quaternion scaled by 2^30
 */
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
    rh.status |= INV_6_AXIS_QUAT_SET;
 800e17a:	4b09      	ldr	r3, [pc, #36]	; (800e1a0 <inv_store_gaming_quaternion+0x30>)
 800e17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e17e:	f043 0302 	orr.w	r3, r3, #2
 800e182:	4a07      	ldr	r2, [pc, #28]	; (800e1a0 <inv_store_gaming_quaternion+0x30>)
 800e184:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
 800e186:	2210      	movs	r2, #16
 800e188:	6879      	ldr	r1, [r7, #4]
 800e18a:	4806      	ldr	r0, [pc, #24]	; (800e1a4 <inv_store_gaming_quaternion+0x34>)
 800e18c:	f003 fc6a 	bl	8011a64 <memcpy>
    rh.gam_timestamp = timestamp;
 800e190:	4a03      	ldr	r2, [pc, #12]	; (800e1a0 <inv_store_gaming_quaternion+0x30>)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	6253      	str	r3, [r2, #36]	; 0x24
}
 800e196:	bf00      	nop
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20000c0c 	.word	0x20000c0c
 800e1a4:	20000c1c 	.word	0x20000c1c

0800e1a8 <inv_set_compass_correction>:
 * Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
 * @param[in] data Quaternion Adjustment
 * @param[in] timestamp Timestamp of when this is valid
 */
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
    rh.status |= INV_COMPASS_CORRECTION_SET;
 800e1b2:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <inv_set_compass_correction+0x30>)
 800e1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b6:	f043 0301 	orr.w	r3, r3, #1
 800e1ba:	4a07      	ldr	r2, [pc, #28]	; (800e1d8 <inv_set_compass_correction+0x30>)
 800e1bc:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
 800e1be:	2210      	movs	r2, #16
 800e1c0:	6879      	ldr	r1, [r7, #4]
 800e1c2:	4806      	ldr	r0, [pc, #24]	; (800e1dc <inv_set_compass_correction+0x34>)
 800e1c4:	f003 fc4e 	bl	8011a64 <memcpy>
    rh.nav_timestamp = timestamp;
 800e1c8:	4a03      	ldr	r2, [pc, #12]	; (800e1d8 <inv_set_compass_correction+0x30>)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	6213      	str	r3, [r2, #32]
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20000c0c 	.word	0x20000c0c
 800e1dc:	20000c4c 	.word	0x20000c4c

0800e1e0 <inv_get_compass_correction>:
 * Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
 * @param[out] data Quaternion Adjustment
 * @param[out] timestamp Timestamp of when this is valid
 */
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
 800e1ea:	2210      	movs	r2, #16
 800e1ec:	4905      	ldr	r1, [pc, #20]	; (800e204 <inv_get_compass_correction+0x24>)
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f003 fc38 	bl	8011a64 <memcpy>
    *timestamp = rh.nav_timestamp;
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <inv_get_compass_correction+0x28>)
 800e1f6:	6a1a      	ldr	r2, [r3, #32]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	601a      	str	r2, [r3, #0]
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	20000c4c 	.word	0x20000c4c
 800e208:	20000c0c 	.word	0x20000c0c

0800e20c <inv_get_acc_state>:

/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
 800e20c:	b480      	push	{r7}
 800e20e:	af00      	add	r7, sp, #0
    return rh.acc_state;
 800e210:	4b02      	ldr	r3, [pc, #8]	; (800e21c <inv_get_acc_state+0x10>)
 800e212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800e214:	4618      	mov	r0, r3
 800e216:	46bd      	mov	sp, r7
 800e218:	bc80      	pop	{r7}
 800e21a:	4770      	bx	lr
 800e21c:	20000c0c 	.word	0x20000c0c

0800e220 <inv_get_motion_state>:
/** Returns the motion state
 * @param[out] cntr Number of previous times a no motion event has occured in a row.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
int inv_get_motion_state(unsigned int *cntr)
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
    *cntr = rh.motion_state_counter;
 800e228:	4b05      	ldr	r3, [pc, #20]	; (800e240 <inv_get_motion_state+0x20>)
 800e22a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	601a      	str	r2, [r3, #0]
    return rh.motion_state;
 800e230:	4b03      	ldr	r3, [pc, #12]	; (800e240 <inv_get_motion_state+0x20>)
 800e232:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
}
 800e236:	4618      	mov	r0, r3
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bc80      	pop	{r7}
 800e23e:	4770      	bx	lr
 800e240:	20000c0c 	.word	0x20000c0c

0800e244 <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	4603      	mov	r3, r0
 800e24c:	71fb      	strb	r3, [r7, #7]
    long set;
    if (state == rh.motion_state)
 800e24e:	4b15      	ldr	r3, [pc, #84]	; (800e2a4 <inv_set_motion_state+0x60>)
 800e250:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800e254:	79fa      	ldrb	r2, [r7, #7]
 800e256:	429a      	cmp	r2, r3
 800e258:	d10c      	bne.n	800e274 <inv_set_motion_state+0x30>
    {
        if (state == INV_NO_MOTION)
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d105      	bne.n	800e26c <inv_set_motion_state+0x28>
        {
            rh.motion_state_counter++;
 800e260:	4b10      	ldr	r3, [pc, #64]	; (800e2a4 <inv_set_motion_state+0x60>)
 800e262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e264:	3301      	adds	r3, #1
 800e266:	4a0f      	ldr	r2, [pc, #60]	; (800e2a4 <inv_set_motion_state+0x60>)
 800e268:	6693      	str	r3, [r2, #104]	; 0x68
        }
        else
        {
            rh.motion_state_counter = 0;
        }
        return;
 800e26a:	e017      	b.n	800e29c <inv_set_motion_state+0x58>
            rh.motion_state_counter = 0;
 800e26c:	4b0d      	ldr	r3, [pc, #52]	; (800e2a4 <inv_set_motion_state+0x60>)
 800e26e:	2200      	movs	r2, #0
 800e270:	669a      	str	r2, [r3, #104]	; 0x68
        return;
 800e272:	e013      	b.n	800e29c <inv_set_motion_state+0x58>
    }
    rh.motion_state_counter = 0;
 800e274:	4b0b      	ldr	r3, [pc, #44]	; (800e2a4 <inv_set_motion_state+0x60>)
 800e276:	2200      	movs	r2, #0
 800e278:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
 800e27a:	4a0a      	ldr	r2, [pc, #40]	; (800e2a4 <inv_set_motion_state+0x60>)
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d102      	bne.n	800e28e <inv_set_motion_state+0x4a>
        set = INV_MSG_MOTION_EVENT;
 800e288:	2301      	movs	r3, #1
 800e28a:	60fb      	str	r3, [r7, #12]
 800e28c:	e001      	b.n	800e292 <inv_set_motion_state+0x4e>
    else
        set = INV_MSG_NO_MOTION_EVENT;
 800e28e:	2302      	movs	r3, #2
 800e290:	60fb      	str	r3, [r7, #12]
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
 800e292:	2200      	movs	r2, #0
 800e294:	2103      	movs	r1, #3
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7fe feda 	bl	800d050 <inv_set_message>
}
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20000c0c 	.word	0x20000c0c

0800e2a8 <inv_get_local_field>:
 * @param[out] data Local earth's magnetic field in uT scaled by 2^16.
 *            Length = 3. Y typically points north, Z typically points down in
 *                        northern hemisphere and up in southern hemisphere.
 */
void inv_get_local_field(long *data)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.local_field, sizeof(rh.local_field));
 800e2b0:	220c      	movs	r2, #12
 800e2b2:	4904      	ldr	r1, [pc, #16]	; (800e2c4 <inv_get_local_field+0x1c>)
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f003 fbd5 	bl	8011a64 <memcpy>
}
 800e2ba:	bf00      	nop
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	20000c34 	.word	0x20000c34

0800e2c8 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
    data[0] = inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
 800e2d0:	4b23      	ldr	r3, [pc, #140]	; (800e360 <inv_get_gravity+0x98>)
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	4a22      	ldr	r2, [pc, #136]	; (800e360 <inv_get_gravity+0x98>)
 800e2d6:	68d2      	ldr	r2, [r2, #12]
 800e2d8:	4611      	mov	r1, r2
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe ffa4 	bl	800d228 <inv_q29_mult>
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	4b1f      	ldr	r3, [pc, #124]	; (800e360 <inv_get_gravity+0x98>)
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	4a1e      	ldr	r2, [pc, #120]	; (800e360 <inv_get_gravity+0x98>)
 800e2e8:	6812      	ldr	r2, [r2, #0]
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe ff9b 	bl	800d228 <inv_q29_mult>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	1ae2      	subs	r2, r4, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	601a      	str	r2, [r3, #0]
    data[1] = inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800e2fa:	4b19      	ldr	r3, [pc, #100]	; (800e360 <inv_get_gravity+0x98>)
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	4a18      	ldr	r2, [pc, #96]	; (800e360 <inv_get_gravity+0x98>)
 800e300:	68d2      	ldr	r2, [r2, #12]
 800e302:	4611      	mov	r1, r2
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe ff8f 	bl	800d228 <inv_q29_mult>
 800e30a:	4604      	mov	r4, r0
 800e30c:	4b14      	ldr	r3, [pc, #80]	; (800e360 <inv_get_gravity+0x98>)
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	4a13      	ldr	r2, [pc, #76]	; (800e360 <inv_get_gravity+0x98>)
 800e312:	6812      	ldr	r2, [r2, #0]
 800e314:	4611      	mov	r1, r2
 800e316:	4618      	mov	r0, r3
 800e318:	f7fe ff86 	bl	800d228 <inv_q29_mult>
 800e31c:	4602      	mov	r2, r0
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	3304      	adds	r3, #4
 800e322:	4422      	add	r2, r4
 800e324:	601a      	str	r2, [r3, #0]
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) - 1073741824L;
 800e326:	4b0e      	ldr	r3, [pc, #56]	; (800e360 <inv_get_gravity+0x98>)
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	4a0d      	ldr	r2, [pc, #52]	; (800e360 <inv_get_gravity+0x98>)
 800e32c:	68d2      	ldr	r2, [r2, #12]
 800e32e:	4611      	mov	r1, r2
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe ff79 	bl	800d228 <inv_q29_mult>
 800e336:	4604      	mov	r4, r0
 800e338:	4b09      	ldr	r3, [pc, #36]	; (800e360 <inv_get_gravity+0x98>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a08      	ldr	r2, [pc, #32]	; (800e360 <inv_get_gravity+0x98>)
 800e33e:	6812      	ldr	r2, [r2, #0]
 800e340:	4611      	mov	r1, r2
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe ff70 	bl	800d228 <inv_q29_mult>
 800e348:	4603      	mov	r3, r0
 800e34a:	18e2      	adds	r2, r4, r3
    data[2] =
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3308      	adds	r3, #8
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) - 1073741824L;
 800e350:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    data[2] =
 800e354:	601a      	str	r2, [r3, #0]

    return INV_SUCCESS;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd90      	pop	{r4, r7, pc}
 800e360:	20000c0c 	.word	0x20000c0c

0800e364 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
 800e36c:	2210      	movs	r2, #16
 800e36e:	4904      	ldr	r1, [pc, #16]	; (800e380 <inv_get_6axis_quaternion+0x1c>)
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f003 fb77 	bl	8011a64 <memcpy>
    return INV_SUCCESS;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	20000c1c 	.word	0x20000c1c

0800e384 <inv_get_quaternion>:
/** Returns a quaternion.
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_quaternion(long *data)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET))
 800e38c:	4b0d      	ldr	r3, [pc, #52]	; (800e3c4 <inv_get_quaternion+0x40>)
 800e38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e390:	f003 0303 	and.w	r3, r3, #3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <inv_get_quaternion+0x2a>
    {
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
 800e398:	4a0a      	ldr	r2, [pc, #40]	; (800e3c4 <inv_get_quaternion+0x40>)
 800e39a:	490b      	ldr	r1, [pc, #44]	; (800e3c8 <inv_get_quaternion+0x44>)
 800e39c:	480b      	ldr	r0, [pc, #44]	; (800e3cc <inv_get_quaternion+0x48>)
 800e39e:	f7fe ff9f 	bl	800d2e0 <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
 800e3a2:	4b08      	ldr	r3, [pc, #32]	; (800e3c4 <inv_get_quaternion+0x40>)
 800e3a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a6:	f023 0303 	bic.w	r3, r3, #3
 800e3aa:	4a06      	ldr	r2, [pc, #24]	; (800e3c4 <inv_get_quaternion+0x40>)
 800e3ac:	67d3      	str	r3, [r2, #124]	; 0x7c
    }
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
 800e3ae:	2210      	movs	r2, #16
 800e3b0:	4904      	ldr	r1, [pc, #16]	; (800e3c4 <inv_get_quaternion+0x40>)
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f003 fb56 	bl	8011a64 <memcpy>
    return INV_SUCCESS;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20000c0c 	.word	0x20000c0c
 800e3c8:	20000c1c 	.word	0x20000c1c
 800e3cc:	20000c4c 	.word	0x20000c4c

0800e3d0 <inv_get_quaternion_set>:
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @param[out] accuracy Accuracy of quaternion, 0-3, where 3 is most accurate.
 * @param[out] timestamp Timestamp of this quaternion in nanoseconds
 */
void inv_get_quaternion_set(long *data, int *accuracy, inv_time_t *timestamp)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
    inv_get_quaternion(data);
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7ff ffd1 	bl	800e384 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
 800e3e2:	f7fd fee5 	bl	800c1b0 <inv_get_last_timestamp>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	601a      	str	r2, [r3, #0]
    if (inv_get_compass_on())
 800e3ec:	f7fd feaa 	bl	800c144 <inv_get_compass_on>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d005      	beq.n	800e402 <inv_get_quaternion_set+0x32>
    {
        *accuracy = inv_get_mag_accuracy();
 800e3f6:	f7fe fb91 	bl	800cb1c <inv_get_mag_accuracy>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *accuracy = 0;
    }
}
 800e400:	e018      	b.n	800e434 <inv_get_quaternion_set+0x64>
    else if (inv_get_gyro_on())
 800e402:	f7fd feb1 	bl	800c168 <inv_get_gyro_on>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d005      	beq.n	800e418 <inv_get_quaternion_set+0x48>
        *accuracy = inv_get_gyro_accuracy();
 800e40c:	f7fe fb7c 	bl	800cb08 <inv_get_gyro_accuracy>
 800e410:	4602      	mov	r2, r0
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	601a      	str	r2, [r3, #0]
}
 800e416:	e00d      	b.n	800e434 <inv_get_quaternion_set+0x64>
    else if (inv_get_accel_on())
 800e418:	f7fd feb8 	bl	800c18c <inv_get_accel_on>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d005      	beq.n	800e42e <inv_get_quaternion_set+0x5e>
        *accuracy = inv_get_accel_accuracy();
 800e422:	f7fe fb8f 	bl	800cb44 <inv_get_accel_accuracy>
 800e426:	4602      	mov	r2, r0
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	601a      	str	r2, [r3, #0]
}
 800e42c:	e002      	b.n	800e434 <inv_get_quaternion_set+0x64>
        *accuracy = 0;
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
}
 800e434:	bf00      	nop
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <inv_generate_results>:
 * registered by inv_start_results_holder().
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    rh.sensor = sensor_cal;
 800e444:	4a04      	ldr	r2, [pc, #16]	; (800e458 <inv_generate_results+0x1c>)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    return INV_SUCCESS;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	bc80      	pop	{r7}
 800e456:	4770      	bx	lr
 800e458:	20000c0c 	.word	0x20000c0c

0800e45c <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER, INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
 800e460:	2207      	movs	r2, #7
 800e462:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e466:	4803      	ldr	r0, [pc, #12]	; (800e474 <inv_start_results_holder+0x18>)
 800e468:	f7fe f8d2 	bl	800c610 <inv_register_data_cb>
    return INV_SUCCESS;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	0800e43d 	.word	0x0800e43d

0800e478 <inv_init_results_holder>:
 * enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
 * is typically not needed to be called by outside callers.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_results_holder(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0
    memset(&rh, 0, sizeof(rh));
 800e47c:	2288      	movs	r2, #136	; 0x88
 800e47e:	2100      	movs	r1, #0
 800e480:	4810      	ldr	r0, [pc, #64]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e482:	f003 fb17 	bl	8011ab4 <memset>
    rh.mag_scale[0] = 1L << 30;
 800e486:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e48c:	635a      	str	r2, [r3, #52]	; 0x34
    rh.mag_scale[1] = 1L << 30;
 800e48e:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e494:	639a      	str	r2, [r3, #56]	; 0x38
    rh.mag_scale[2] = 1L << 30;
 800e496:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e49c:	63da      	str	r2, [r3, #60]	; 0x3c
    rh.compass_correction[0] = 1L << 30;
 800e49e:	4b09      	ldr	r3, [pc, #36]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e4a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4a4:	641a      	str	r2, [r3, #64]	; 0x40
    rh.gam_quat[0] = 1L << 30;
 800e4a6:	4b07      	ldr	r3, [pc, #28]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e4a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4ac:	611a      	str	r2, [r3, #16]
    rh.nav_quat[0] = 1L << 30;
 800e4ae:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e4b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4b4:	601a      	str	r2, [r3, #0]
    rh.quat_confidence_interval = (float)M_PI;
 800e4b6:	4b03      	ldr	r3, [pc, #12]	; (800e4c4 <inv_init_results_holder+0x4c>)
 800e4b8:	4a03      	ldr	r2, [pc, #12]	; (800e4c8 <inv_init_results_holder+0x50>)
 800e4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return INV_SUCCESS;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	20000c0c 	.word	0x20000c0c
 800e4c8:	40490fdb 	.word	0x40490fdb

0800e4cc <inv_enable_results_holder>:

/** Turns on storage of results.
 */
inv_error_t inv_enable_results_holder()
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_results_holder();
 800e4d2:	f7ff ffd1 	bl	800e478 <inv_init_results_holder>
 800e4d6:	6078      	str	r0, [r7, #4]
    if (result)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <inv_enable_results_holder+0x16>
    {
        return result;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	e004      	b.n	800e4ec <inv_enable_results_holder+0x20>
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
 800e4e2:	4804      	ldr	r0, [pc, #16]	; (800e4f4 <inv_enable_results_holder+0x28>)
 800e4e4:	f000 f89e 	bl	800e624 <inv_register_mpl_start_notification>
 800e4e8:	6078      	str	r0, [r7, #4]
    return result;
 800e4ea:	687b      	ldr	r3, [r7, #4]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	0800e45d 	.word	0x0800e45d

0800e4f8 <inv_got_compass_bias>:
/** Sets state of if we know the compass bias.
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0
    return rh.got_compass_bias;
 800e4fc:	4b02      	ldr	r3, [pc, #8]	; (800e508 <inv_got_compass_bias+0x10>)
 800e4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 800e500:	4618      	mov	r0, r3
 800e502:	46bd      	mov	sp, r7
 800e504:	bc80      	pop	{r7}
 800e506:	4770      	bx	lr
 800e508:	20000c0c 	.word	0x20000c0c

0800e50c <inv_set_compass_bias_found>:
/** Sets whether we know the compass bias
 * @param[in] state Set to 1 if we know the compass bias.
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
    rh.got_compass_bias = state;
 800e514:	4a03      	ldr	r2, [pc, #12]	; (800e524 <inv_set_compass_bias_found+0x18>)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6713      	str	r3, [r2, #112]	; 0x70
}
 800e51a:	bf00      	nop
 800e51c:	370c      	adds	r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	bc80      	pop	{r7}
 800e522:	4770      	bx	lr
 800e524:	20000c0c 	.word	0x20000c0c

0800e528 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
    long gravity[3];

    if (data != NULL)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d024      	beq.n	800e580 <inv_get_linear_accel+0x58>
    {
        inv_get_accel_set(data, NULL, NULL);
 800e536:	2200      	movs	r2, #0
 800e538:	2100      	movs	r1, #0
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7fe fa5c 	bl	800c9f8 <inv_get_accel_set>
        inv_get_gravity(gravity);
 800e540:	f107 030c 	add.w	r3, r7, #12
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff febf 	bl	800e2c8 <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	139b      	asrs	r3, r3, #14
 800e552:	1ad2      	subs	r2, r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	601a      	str	r2, [r3, #0]
        data[1] -= gravity[1] >> 14;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	3304      	adds	r3, #4
 800e55c:	6819      	ldr	r1, [r3, #0]
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	139a      	asrs	r2, r3, #14
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3304      	adds	r3, #4
 800e566:	1a8a      	subs	r2, r1, r2
 800e568:	601a      	str	r2, [r3, #0]
        data[2] -= gravity[2] >> 14;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3308      	adds	r3, #8
 800e56e:	6819      	ldr	r1, [r3, #0]
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	139a      	asrs	r2, r3, #14
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	3308      	adds	r3, #8
 800e578:	1a8a      	subs	r2, r1, r2
 800e57a:	601a      	str	r2, [r3, #0]
        return INV_SUCCESS;
 800e57c:	2300      	movs	r3, #0
 800e57e:	e000      	b.n	800e582 <inv_get_linear_accel+0x5a>
    }
    else
    {
        return INV_ERROR_INVALID_PARAMETER;
 800e580:	2316      	movs	r3, #22
    }
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
	...

0800e58c <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	af00      	add	r7, sp, #0
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
 800e590:	2254      	movs	r2, #84	; 0x54
 800e592:	2100      	movs	r1, #0
 800e594:	4802      	ldr	r0, [pc, #8]	; (800e5a0 <inv_init_start_manager+0x14>)
 800e596:	f003 fa8d 	bl	8011ab4 <memset>
    return INV_SUCCESS;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000c94 	.word	0x20000c94

0800e5a4 <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	60fb      	str	r3, [r7, #12]
 800e5b0:	e02b      	b.n	800e60a <inv_unregister_mpl_start_notification+0x66>
        if (inv_start_cb.start_cb[kk] == start_cb) {
 800e5b2:	4a1b      	ldr	r2, [pc, #108]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4413      	add	r3, r2
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d120      	bne.n	800e604 <inv_unregister_mpl_start_notification+0x60>
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
 800e5c2:	4b17      	ldr	r3, [pc, #92]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d013      	beq.n	800e5f6 <inv_unregister_mpl_start_notification+0x52>
                memmove(&inv_start_cb.start_cb[kk],
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4a13      	ldr	r2, [pc, #76]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5d4:	4413      	add	r3, r2
 800e5d6:	1d18      	adds	r0, r3, #4
                    &inv_start_cb.start_cb[kk+1],
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4a10      	ldr	r2, [pc, #64]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5e0:	4413      	add	r3, r2
 800e5e2:	1d19      	adds	r1, r3, #4
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	3b01      	subs	r3, #1
                memmove(&inv_start_cb.start_cb[kk],
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	f003 fa45 	bl	8011a80 <memmove>
            }
            inv_start_cb.num_cb--;
 800e5f6:	4b0a      	ldr	r3, [pc, #40]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	4a08      	ldr	r2, [pc, #32]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e5fe:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
 800e600:	2300      	movs	r3, #0
 800e602:	e008      	b.n	800e616 <inv_unregister_mpl_start_notification+0x72>
    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3301      	adds	r3, #1
 800e608:	60fb      	str	r3, [r7, #12]
 800e60a:	4b05      	ldr	r3, [pc, #20]	; (800e620 <inv_unregister_mpl_start_notification+0x7c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	429a      	cmp	r2, r3
 800e612:	dbce      	blt.n	800e5b2 <inv_unregister_mpl_start_notification+0xe>
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
 800e614:	2316      	movs	r3, #22
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	20000c94 	.word	0x20000c94

0800e624 <inv_register_mpl_start_notification>:
* @param[in] start_cb Function callback that will be called when inv_start_mpl() is
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
 800e62c:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <inv_register_mpl_start_notification+0x38>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b13      	cmp	r3, #19
 800e632:	dd01      	ble.n	800e638 <inv_register_mpl_start_notification+0x14>
        return INV_ERROR_INVALID_PARAMETER;
 800e634:	2316      	movs	r3, #22
 800e636:	e00c      	b.n	800e652 <inv_register_mpl_start_notification+0x2e>

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
 800e638:	4b08      	ldr	r3, [pc, #32]	; (800e65c <inv_register_mpl_start_notification+0x38>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a07      	ldr	r2, [pc, #28]	; (800e65c <inv_register_mpl_start_notification+0x38>)
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	4413      	add	r3, r2
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	605a      	str	r2, [r3, #4]
    inv_start_cb.num_cb++;
 800e646:	4b05      	ldr	r3, [pc, #20]	; (800e65c <inv_register_mpl_start_notification+0x38>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3301      	adds	r3, #1
 800e64c:	4a03      	ldr	r2, [pc, #12]	; (800e65c <inv_register_mpl_start_notification+0x38>)
 800e64e:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	370c      	adds	r7, #12
 800e656:	46bd      	mov	sp, r7
 800e658:	bc80      	pop	{r7}
 800e65a:	4770      	bx	lr
 800e65c:	20000c94 	.word	0x20000c94

0800e660 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
 800e666:	2300      	movs	r3, #0
 800e668:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800e66a:	2300      	movs	r3, #0
 800e66c:	60bb      	str	r3, [r7, #8]
 800e66e:	e011      	b.n	800e694 <inv_execute_mpl_start_notification+0x34>
        result = inv_start_cb.start_cb[kk]();
 800e670:	4a0d      	ldr	r2, [pc, #52]	; (800e6a8 <inv_execute_mpl_start_notification+0x48>)
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	4798      	blx	r3
 800e67c:	6078      	str	r0, [r7, #4]
        if (result && (first_error == INV_SUCCESS)) {
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d004      	beq.n	800e68e <inv_execute_mpl_start_notification+0x2e>
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <inv_execute_mpl_start_notification+0x2e>
            first_error = result;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	3301      	adds	r3, #1
 800e692:	60bb      	str	r3, [r7, #8]
 800e694:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <inv_execute_mpl_start_notification+0x48>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	dbe8      	blt.n	800e670 <inv_execute_mpl_start_notification+0x10>
        }
    }
    return first_error;
 800e69e:	68fb      	ldr	r3, [r7, #12]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	20000c94 	.word	0x20000c94

0800e6ac <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
    memset(&ds, 0, sizeof(ds));
 800e6b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4804      	ldr	r0, [pc, #16]	; (800e6c8 <inv_init_storage_manager+0x1c>)
 800e6b8:	f003 f9fc 	bl	8011ab4 <memset>
    ds.total_size = sizeof(struct data_header_t);
 800e6bc:	4b02      	ldr	r3, [pc, #8]	; (800e6c8 <inv_init_storage_manager+0x1c>)
 800e6be:	220c      	movs	r2, #12
 800e6c0:	605a      	str	r2, [r3, #4]
}
 800e6c2:	bf00      	nop
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20000ce8 	.word	0x20000ce8

0800e6cc <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
 800e6d8:	603b      	str	r3, [r7, #0]
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
 800e6da:	2300      	movs	r3, #0
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	e010      	b.n	800e702 <inv_register_load_store+0x36>
        if (key == ds.hd[kk].key) {
 800e6e0:	4928      	ldr	r1, [pc, #160]	; (800e784 <inv_register_load_store+0xb8>)
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	4413      	add	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	440b      	add	r3, r1
 800e6ee:	33b0      	adds	r3, #176	; 0xb0
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d101      	bne.n	800e6fc <inv_register_load_store+0x30>
            return INV_ERROR_INVALID_PARAMETER;
 800e6f8:	2316      	movs	r3, #22
 800e6fa:	e03e      	b.n	800e77a <inv_register_load_store+0xae>
    for (kk=0; kk<ds.num; ++kk) {
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	3301      	adds	r3, #1
 800e700:	617b      	str	r3, [r7, #20]
 800e702:	4b20      	ldr	r3, [pc, #128]	; (800e784 <inv_register_load_store+0xb8>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	697a      	ldr	r2, [r7, #20]
 800e708:	429a      	cmp	r2, r3
 800e70a:	dbe9      	blt.n	800e6e0 <inv_register_load_store+0x14>
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
 800e70c:	4b1d      	ldr	r3, [pc, #116]	; (800e784 <inv_register_load_store+0xb8>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b13      	cmp	r3, #19
 800e712:	dd01      	ble.n	800e718 <inv_register_load_store+0x4c>
        return INV_ERROR_INVALID_PARAMETER;
 800e714:	2316      	movs	r3, #22
 800e716:	e030      	b.n	800e77a <inv_register_load_store+0xae>
    }
    // Add to list
    ds.hd[ds.num].key = key;
 800e718:	4b1a      	ldr	r3, [pc, #104]	; (800e784 <inv_register_load_store+0xb8>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	4919      	ldr	r1, [pc, #100]	; (800e784 <inv_register_load_store+0xb8>)
 800e71e:	4613      	mov	r3, r2
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	4413      	add	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	440b      	add	r3, r1
 800e728:	33b0      	adds	r3, #176	; 0xb0
 800e72a:	683a      	ldr	r2, [r7, #0]
 800e72c:	601a      	str	r2, [r3, #0]
    ds.hd[ds.num].size = size;
 800e72e:	4b15      	ldr	r3, [pc, #84]	; (800e784 <inv_register_load_store+0xb8>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	4813      	ldr	r0, [pc, #76]	; (800e784 <inv_register_load_store+0xb8>)
 800e736:	4613      	mov	r3, r2
 800e738:	005b      	lsls	r3, r3, #1
 800e73a:	4413      	add	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4403      	add	r3, r0
 800e740:	33a8      	adds	r3, #168	; 0xa8
 800e742:	6019      	str	r1, [r3, #0]
    ds.load[ds.num] = load_func;
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <inv_register_load_store+0xb8>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	490e      	ldr	r1, [pc, #56]	; (800e784 <inv_register_load_store+0xb8>)
 800e74a:	3302      	adds	r3, #2
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.save[ds.num] = save_func;
 800e752:	4b0c      	ldr	r3, [pc, #48]	; (800e784 <inv_register_load_store+0xb8>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	490b      	ldr	r1, [pc, #44]	; (800e784 <inv_register_load_store+0xb8>)
 800e758:	3316      	adds	r3, #22
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.total_size += size + sizeof(struct data_header_t);
 800e760:	4b08      	ldr	r3, [pc, #32]	; (800e784 <inv_register_load_store+0xb8>)
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4413      	add	r3, r2
 800e768:	330c      	adds	r3, #12
 800e76a:	4a06      	ldr	r2, [pc, #24]	; (800e784 <inv_register_load_store+0xb8>)
 800e76c:	6053      	str	r3, [r2, #4]
    ds.num++;
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <inv_register_load_store+0xb8>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3301      	adds	r3, #1
 800e774:	4a03      	ldr	r2, [pc, #12]	; (800e784 <inv_register_load_store+0xb8>)
 800e776:	6013      	str	r3, [r2, #0]

    return INV_SUCCESS;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	bc80      	pop	{r7}
 800e782:	4770      	bx	lr
 800e784:	20000ce8 	.word	0x20000ce8

0800e788 <I2Cx_Error>:


#include "STM32F1_porting.h"

static void I2Cx_Error(uint8_t Addr)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	71fb      	strb	r3, [r7, #7]
    /* 恢复I2C寄存器为默认值 */
    HAL_I2C_DeInit(&MPU6050_I2C_Handle);
 800e792:	4804      	ldr	r0, [pc, #16]	; (800e7a4 <I2Cx_Error+0x1c>)
 800e794:	f7f8 f872 	bl	800687c <HAL_I2C_DeInit>
    /* 重新初始化I2C外设 */
    MX_I2C2_Init();
 800e798:	f7f6 fb1c 	bl	8004dd4 <MX_I2C2_Init>
}
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	200006c4 	.word	0x200006c4

0800e7a8 <Sensors_I2C_ReadRegister>:
 *	@param data_ptr:指向要存储数据的指针
 * @retval 正常为0，不正常为非0
 */
int Sensors_I2C_ReadRegister(unsigned char slave_addr, unsigned char reg_addr, unsigned short len,
                             unsigned char *data_ptr)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af04      	add	r7, sp, #16
 800e7ae:	603b      	str	r3, [r7, #0]
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	71fb      	strb	r3, [r7, #7]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	71bb      	strb	r3, [r7, #6]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	80bb      	strh	r3, [r7, #4]

    HAL_StatusTypeDef status = HAL_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	73fb      	strb	r3, [r7, #15]
    slave_addr <<= 1;
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	005b      	lsls	r3, r3, #1
 800e7c4:	71fb      	strb	r3, [r7, #7]
    status = HAL_I2C_Mem_Read(&MPU6050_I2C_Handle, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data_ptr, len,
 800e7c6:	79fb      	ldrb	r3, [r7, #7]
 800e7c8:	b299      	uxth	r1, r3
 800e7ca:	79bb      	ldrb	r3, [r7, #6]
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7d2:	9302      	str	r3, [sp, #8]
 800e7d4:	88bb      	ldrh	r3, [r7, #4]
 800e7d6:	9301      	str	r3, [sp, #4]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	2301      	movs	r3, #1
 800e7de:	4816      	ldr	r0, [pc, #88]	; (800e838 <Sensors_I2C_ReadRegister+0x90>)
 800e7e0:	f7f8 f976 	bl	8006ad0 <HAL_I2C_Mem_Read>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73fb      	strb	r3, [r7, #15]
                              I2Cx_FLAG_TIMEOUT);
    /* 检查通讯状态 */
    if (status != HAL_OK)
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <Sensors_I2C_ReadRegister+0x4e>
    {
        /* 总线出错处理 */
        I2Cx_Error(slave_addr);
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff ffc9 	bl	800e788 <I2Cx_Error>
    }
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800e7f6:	bf00      	nop
 800e7f8:	480f      	ldr	r0, [pc, #60]	; (800e838 <Sensors_I2C_ReadRegister+0x90>)
 800e7fa:	f7f8 fcff 	bl	80071fc <HAL_I2C_GetState>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b20      	cmp	r3, #32
 800e802:	d1f9      	bne.n	800e7f8 <Sensors_I2C_ReadRegister+0x50>
    {
    }
    /* 检查SENSOR是否就绪进行下一次读写操作 */
    while (HAL_I2C_IsDeviceReady(&MPU6050_I2C_Handle, slave_addr, I2Cx_FLAG_TIMEOUT, I2Cx_FLAG_TIMEOUT) == HAL_TIMEOUT)
 800e804:	bf00      	nop
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	b299      	uxth	r1, r3
 800e80a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e80e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e812:	4809      	ldr	r0, [pc, #36]	; (800e838 <Sensors_I2C_ReadRegister+0x90>)
 800e814:	f7f8 fbc4 	bl	8006fa0 <HAL_I2C_IsDeviceReady>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d0f3      	beq.n	800e806 <Sensors_I2C_ReadRegister+0x5e>
        ;
    /* 等待传输结束 */
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800e81e:	bf00      	nop
 800e820:	4805      	ldr	r0, [pc, #20]	; (800e838 <Sensors_I2C_ReadRegister+0x90>)
 800e822:	f7f8 fceb 	bl	80071fc <HAL_I2C_GetState>
 800e826:	4603      	mov	r3, r0
 800e828:	2b20      	cmp	r3, #32
 800e82a:	d1f9      	bne.n	800e820 <Sensors_I2C_ReadRegister+0x78>
    {
    }
    return status;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	200006c4 	.word	0x200006c4

0800e83c <Sensors_I2C_WriteRegister>:
 *	@param data_ptr:指向要写入的数据
 * @retval 正常为0，不正常为非0
 */
int Sensors_I2C_WriteRegister(unsigned char slave_addr, unsigned char reg_addr, unsigned short len,
                              unsigned char *data_ptr)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b088      	sub	sp, #32
 800e840:	af04      	add	r7, sp, #16
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	4603      	mov	r3, r0
 800e846:	71fb      	strb	r3, [r7, #7]
 800e848:	460b      	mov	r3, r1
 800e84a:	71bb      	strb	r3, [r7, #6]
 800e84c:	4613      	mov	r3, r2
 800e84e:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]
    slave_addr <<= 1;
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	005b      	lsls	r3, r3, #1
 800e858:	71fb      	strb	r3, [r7, #7]
    status = HAL_I2C_Mem_Write(&MPU6050_I2C_Handle, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data_ptr, len,
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	b299      	uxth	r1, r3
 800e85e:	79bb      	ldrb	r3, [r7, #6]
 800e860:	b29a      	uxth	r2, r3
 800e862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e866:	9302      	str	r3, [sp, #8]
 800e868:	88bb      	ldrh	r3, [r7, #4]
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	2301      	movs	r3, #1
 800e872:	4816      	ldr	r0, [pc, #88]	; (800e8cc <Sensors_I2C_WriteRegister+0x90>)
 800e874:	f7f8 f832 	bl	80068dc <HAL_I2C_Mem_Write>
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]
                               I2Cx_FLAG_TIMEOUT);
    /* 检查通讯状态 */
    if (status != HAL_OK)
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d003      	beq.n	800e88a <Sensors_I2C_WriteRegister+0x4e>
    {
        /* 总线出错处理 */
        I2Cx_Error(slave_addr);
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	4618      	mov	r0, r3
 800e886:	f7ff ff7f 	bl	800e788 <I2Cx_Error>
    }
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800e88a:	bf00      	nop
 800e88c:	480f      	ldr	r0, [pc, #60]	; (800e8cc <Sensors_I2C_WriteRegister+0x90>)
 800e88e:	f7f8 fcb5 	bl	80071fc <HAL_I2C_GetState>
 800e892:	4603      	mov	r3, r0
 800e894:	2b20      	cmp	r3, #32
 800e896:	d1f9      	bne.n	800e88c <Sensors_I2C_WriteRegister+0x50>
    {
    }
    /* 检查SENSOR是否就绪进行下一次读写操作 */
    while (HAL_I2C_IsDeviceReady(&MPU6050_I2C_Handle, slave_addr, I2Cx_FLAG_TIMEOUT, I2Cx_FLAG_TIMEOUT) == HAL_TIMEOUT)
 800e898:	bf00      	nop
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	b299      	uxth	r1, r3
 800e89e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e8a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e8a6:	4809      	ldr	r0, [pc, #36]	; (800e8cc <Sensors_I2C_WriteRegister+0x90>)
 800e8a8:	f7f8 fb7a 	bl	8006fa0 <HAL_I2C_IsDeviceReady>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d0f3      	beq.n	800e89a <Sensors_I2C_WriteRegister+0x5e>
        ;
    /* 等待传输结束 */
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800e8b2:	bf00      	nop
 800e8b4:	4805      	ldr	r0, [pc, #20]	; (800e8cc <Sensors_I2C_WriteRegister+0x90>)
 800e8b6:	f7f8 fca1 	bl	80071fc <HAL_I2C_GetState>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b20      	cmp	r3, #32
 800e8be:	d1f9      	bne.n	800e8b4 <Sensors_I2C_WriteRegister+0x78>
    {
    }
    return status;
 800e8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	200006c4 	.word	0x200006c4

0800e8d0 <get_ms_user>:

inline void get_ms_user(unsigned long *count) //换壳函数  inline修饰（内联）减少出入栈开销
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
    *count = HAL_GetTick();
 800e8d8:	f7f6 fe48 	bl	800556c <HAL_GetTick>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	601a      	str	r2, [r3, #0]
}
 800e8e2:	bf00      	nop
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
	...

0800e8ec <MPU6050_mpu_init>:
static struct platform_data_s compass_pdata = {.orientation = {-1, 0, 0, 0, -1, 0, 0, 0, 1}};
#define COMPASS_ENABLED 1
#endif

uint8_t MPU6050_mpu_init(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
    inv_error_t result;
    struct int_param_s int_param;
    result = mpu_init(&int_param);
 800e8f2:	1d3b      	adds	r3, r7, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fa fdf9 	bl	80094ec <mpu_init>
 800e8fa:	60f8      	str	r0, [r7, #12]
    if (result)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d005      	beq.n	800e90e <MPU6050_mpu_init+0x22>
    {
#if USE_PRINTF_DEBUG
        printf("Could not initialize gyro.result =  %d\n", result);
 800e902:	68f9      	ldr	r1, [r7, #12]
 800e904:	4806      	ldr	r0, [pc, #24]	; (800e920 <MPU6050_mpu_init+0x34>)
 800e906:	f003 ff71 	bl	80127ec <iprintf>
#endif
        return 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	e004      	b.n	800e918 <MPU6050_mpu_init+0x2c>
    }
    else
    {
#if USE_PRINTF_DEBUG
        printf("Initialize gyro.result =  %d\n succeeded\n", result);
 800e90e:	68f9      	ldr	r1, [r7, #12]
 800e910:	4804      	ldr	r0, [pc, #16]	; (800e924 <MPU6050_mpu_init+0x38>)
 800e912:	f003 ff6b 	bl	80127ec <iprintf>
#endif
        return 1;
 800e916:	2301      	movs	r3, #1
    }
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	08015734 	.word	0x08015734
 800e924:	0801575c 	.word	0x0801575c

0800e928 <MPU6050_mpl_init>:

uint8_t MPU6050_mpl_init(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_mpl();
 800e92e:	f7ff fbc9 	bl	800e0c4 <inv_init_mpl>
 800e932:	6078      	str	r0, [r7, #4]
    if (result)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d004      	beq.n	800e944 <MPU6050_mpl_init+0x1c>
    {
#if USE_PRINTF_DEBUG
        printf("Could not initialize MPL.\n");
 800e93a:	4806      	ldr	r0, [pc, #24]	; (800e954 <MPU6050_mpl_init+0x2c>)
 800e93c:	f003 ffdc 	bl	80128f8 <puts>
#endif
        return 0;
 800e940:	2300      	movs	r3, #0
 800e942:	e003      	b.n	800e94c <MPU6050_mpl_init+0x24>
    }
    else
    {
#if USE_PRINTF_DEBUG
        printf("initialize MPL suceeded.\n");
 800e944:	4804      	ldr	r0, [pc, #16]	; (800e958 <MPU6050_mpl_init+0x30>)
 800e946:	f003 ffd7 	bl	80128f8 <puts>
#endif
        return 1;
 800e94a:	2301      	movs	r3, #1
    }
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	08015788 	.word	0x08015788
 800e958:	080157a4 	.word	0x080157a4

0800e95c <MPU6050_config>:

uint8_t MPU6050_config(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
#ifdef COMPASS_ENABLED
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
#endif
    /* Compute 6-axis and 9-axis quaternions. */
    inv_enable_quaternion();
 800e962:	f7f4 f9b1 	bl	8002cc8 <inv_enable_quaternion>
    inv_enable_9x_sensor_fusion();
 800e966:	f7f2 fe6f 	bl	8001648 <inv_enable_9x_sensor_fusion>
     */

    /* Update gyro biases when not in motion.
     * WARNING: These algorithms are mutually exclusive.
     */
    inv_enable_fast_nomot();
 800e96a:	f7f2 facd 	bl	8000f08 <inv_enable_fast_nomot>
    /* inv_enable_motion_no_motion(); */
    /* inv_set_no_motion_time(1000); */

    /* Update gyro biases when temperature changes. */
    inv_enable_gyro_tc();
 800e96e:	f7f3 f919 	bl	8001ba4 <inv_enable_gyro_tc>
     * detected, so we'll just leave it out to save memory.
     * inv_enable_heading_from_gyro();
     */

    /* Allows use of the MPL APIs in read_from_mpl. */
    inv_enable_eMPL_outputs();
 800e972:	f7fd fb03 	bl	800bf7c <inv_enable_eMPL_outputs>
    result = inv_enable_hal_outputs();
 800e976:	f7fe fb5b 	bl	800d030 <inv_enable_hal_outputs>
 800e97a:	60f8      	str	r0, [r7, #12]
    if (result)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <MPU6050_config+0x2c>
    {
        // MPL_LOGE("Could not start the MPL.\n");
        printf("inv_enable_hal_outputs()\n");
 800e982:	4843      	ldr	r0, [pc, #268]	; (800ea90 <MPU6050_config+0x134>)
 800e984:	f003 ffb8 	bl	80128f8 <puts>
    }
    result = inv_start_mpl();
 800e988:	f7ff fbd8 	bl	800e13c <inv_start_mpl>
 800e98c:	60f8      	str	r0, [r7, #12]
    if (result == INV_ERROR_NOT_AUTHORIZED)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b32      	cmp	r3, #50	; 0x32
 800e992:	d103      	bne.n	800e99c <MPU6050_config+0x40>
    {
        while (1)
        {
            MPL_LOGE("Not authorized.\n");
            printf("Not authorized.\n");
 800e994:	483f      	ldr	r0, [pc, #252]	; (800ea94 <MPU6050_config+0x138>)
 800e996:	f003 ffaf 	bl	80128f8 <puts>
 800e99a:	e7fb      	b.n	800e994 <MPU6050_config+0x38>
        }
    }
    if (result)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <MPU6050_config+0x4c>
    {
        // MPL_LOGE("Could not start the MPL.\n");
        printf("Could not start the MPL.\n");
 800e9a2:	483d      	ldr	r0, [pc, #244]	; (800ea98 <MPU6050_config+0x13c>)
 800e9a4:	f003 ffa8 	bl	80128f8 <puts>
    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
#ifdef COMPASS_ENABLED
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
#else
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 800e9a8:	2078      	movs	r0, #120	; 0x78
 800e9aa:	f7fb fac1 	bl	8009f30 <mpu_set_sensors>
#endif
    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 800e9ae:	2078      	movs	r0, #120	; 0x78
 800e9b0:	f7fb fa6c 	bl	8009e8c <mpu_configure_fifo>
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
 800e9b4:	2014      	movs	r0, #20
 800e9b6:	f7fb f9f3 	bl	8009da0 <mpu_set_sample_rate>
     * Use this function for proper power management.
     */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
#endif
    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
 800e9ba:	f107 0308 	add.w	r3, r7, #8
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fb f9d6 	bl	8009d70 <mpu_get_sample_rate>
    mpu_get_gyro_fsr(&gyro_fsr);
 800e9c4:	1dbb      	adds	r3, r7, #6
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fb f81e 	bl	8009a08 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800e9cc:	f107 030b 	add.w	r3, r7, #11
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fb f8a1 	bl	8009b18 <mpu_get_accel_fsr>
#ifdef COMPASS_ENABLED
    mpu_get_compass_fsr(&compass_fsr);
#endif
    /* Sync driver configuration with MPL. */
    /* Sample rate expected in microseconds. */
    inv_set_gyro_sample_rate(1000000L / gyro_rate);
 800e9d6:	893b      	ldrh	r3, [r7, #8]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	4b30      	ldr	r3, [pc, #192]	; (800ea9c <MPU6050_config+0x140>)
 800e9dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fd fb61 	bl	800c0a8 <inv_set_gyro_sample_rate>
    inv_set_accel_sample_rate(1000000L / gyro_rate);
 800e9e6:	893b      	ldrh	r3, [r7, #8]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4b2c      	ldr	r3, [pc, #176]	; (800ea9c <MPU6050_config+0x140>)
 800e9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fd fb7f 	bl	800c0f4 <inv_set_accel_sample_rate>
    inv_set_compass_sample_rate(COMPASS_READ_MS * 1000L);
#endif
    /* Set chip-to-body orientation matrix.
     * Set hardware units to dps/g's/degrees scaling factor.
     */
    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr << 15);
 800e9f6:	482a      	ldr	r0, [pc, #168]	; (800eaa0 <MPU6050_config+0x144>)
 800e9f8:	f7ff fa1f 	bl	800de3a <inv_orientation_matrix_to_scalar>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461a      	mov	r2, r3
 800ea00:	88fb      	ldrh	r3, [r7, #6]
 800ea02:	03db      	lsls	r3, r3, #15
 800ea04:	4619      	mov	r1, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	f7fd fb3e 	bl	800c088 <inv_set_gyro_orientation_and_scale>
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 800ea0c:	4824      	ldr	r0, [pc, #144]	; (800eaa0 <MPU6050_config+0x144>)
 800ea0e:	f7ff fa14 	bl	800de3a <inv_orientation_matrix_to_scalar>
 800ea12:	4603      	mov	r3, r0
 800ea14:	461a      	mov	r2, r3
                                        (long)accel_fsr << 15);
 800ea16:	7afb      	ldrb	r3, [r7, #11]
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 800ea18:	03db      	lsls	r3, r3, #15
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	f7fd fc0d 	bl	800c23c <inv_set_accel_orientation_and_scale>
#endif
    /* Initialize HAL state variables. */
#ifdef COMPASS_ENABLED
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
#else
    hal.sensors = ACCEL_ON | GYRO_ON;
 800ea22:	4b20      	ldr	r3, [pc, #128]	; (800eaa4 <MPU6050_config+0x148>)
 800ea24:	2203      	movs	r2, #3
 800ea26:	705a      	strb	r2, [r3, #1]
#endif
    hal.dmp_on = 0;
 800ea28:	4b1e      	ldr	r3, [pc, #120]	; (800eaa4 <MPU6050_config+0x148>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	709a      	strb	r2, [r3, #2]
    hal.report = 0;
 800ea2e:	4b1d      	ldr	r3, [pc, #116]	; (800eaa4 <MPU6050_config+0x148>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	619a      	str	r2, [r3, #24]
    hal.rx.cmd = 0;
 800ea34:	4b1b      	ldr	r3, [pc, #108]	; (800eaa4 <MPU6050_config+0x148>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hal.next_pedo_ms = 0;
 800ea3c:	4b19      	ldr	r3, [pc, #100]	; (800eaa4 <MPU6050_config+0x148>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	60da      	str	r2, [r3, #12]
    hal.next_compass_ms = 0;
 800ea42:	4b18      	ldr	r3, [pc, #96]	; (800eaa4 <MPU6050_config+0x148>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	615a      	str	r2, [r3, #20]
    hal.next_temp_ms = 0;
 800ea48:	4b16      	ldr	r3, [pc, #88]	; (800eaa4 <MPU6050_config+0x148>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	611a      	str	r2, [r3, #16]
     * DMP_FEATURE_SEND_RAW_GYRO: Add raw gyro data to the FIFO.
     * DMP_FEATURE_SEND_CAL_GYRO: Add calibrated gyro data to the FIFO. Cannot
     * be used in combination with DMP_FEATURE_SEND_RAW_GYRO.
     */

    dmp_load_motion_driver_firmware();
 800ea4e:	f7fb fe93 	bl	800a778 <dmp_load_motion_driver_firmware>
    dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
 800ea52:	4813      	ldr	r0, [pc, #76]	; (800eaa0 <MPU6050_config+0x144>)
 800ea54:	f7ff f9f1 	bl	800de3a <inv_orientation_matrix_to_scalar>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fb fe9c 	bl	800a798 <dmp_set_orientation>
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
     *
     * DMP sensor fusion works only with gyro at +-2000dps and accel +-2G
     */
    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT |
 800ea60:	4b10      	ldr	r3, [pc, #64]	; (800eaa4 <MPU6050_config+0x148>)
 800ea62:	f240 1273 	movw	r2, #371	; 0x173
 800ea66:	839a      	strh	r2, [r3, #28]
                       DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
 800ea68:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <MPU6050_config+0x148>)
 800ea6a:	8b9b      	ldrh	r3, [r3, #28]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fc fa55 	bl	800af1c <dmp_enable_feature>
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 800ea72:	2014      	movs	r0, #20
 800ea74:	f7fb ff7c 	bl	800a970 <dmp_set_fifo_rate>
    mpu_set_dmp_state(1);
 800ea78:	2001      	movs	r0, #1
 800ea7a:	f7fb fd89 	bl	800a590 <mpu_set_dmp_state>
    hal.dmp_on = 1;
 800ea7e:	4b09      	ldr	r3, [pc, #36]	; (800eaa4 <MPU6050_config+0x148>)
 800ea80:	2201      	movs	r2, #1
 800ea82:	709a      	strb	r2, [r3, #2]
    return 1;
 800ea84:	2301      	movs	r3, #1
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	080157c0 	.word	0x080157c0
 800ea94:	080157dc 	.word	0x080157dc
 800ea98:	080157ec 	.word	0x080157ec
 800ea9c:	000f4240 	.word	0x000f4240
 800eaa0:	20000050 	.word	0x20000050
 800eaa4:	20000e80 	.word	0x20000e80

0800eaa8 <MPU6050_data_ready_cb>:

void MPU6050_data_ready_cb(void) //中断回调函数
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0

    hal.new_gyro = 1;
 800eaac:	4b03      	ldr	r3, [pc, #12]	; (800eabc <MPU6050_data_ready_cb+0x14>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	711a      	strb	r2, [r3, #4]
}
 800eab2:	bf00      	nop
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bc80      	pop	{r7}
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20000e80 	.word	0x20000e80

0800eac0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eac6:	f3ef 8305 	mrs	r3, IPSR
 800eaca:	60bb      	str	r3, [r7, #8]
  return(result);
 800eacc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10f      	bne.n	800eaf2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ead2:	f3ef 8310 	mrs	r3, PRIMASK
 800ead6:	607b      	str	r3, [r7, #4]
  return(result);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d109      	bne.n	800eaf2 <osKernelInitialize+0x32>
 800eade:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <osKernelInitialize+0x60>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	d109      	bne.n	800eafa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eae6:	f3ef 8311 	mrs	r3, BASEPRI
 800eaea:	603b      	str	r3, [r7, #0]
  return(result);
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800eaf2:	f06f 0305 	mvn.w	r3, #5
 800eaf6:	60fb      	str	r3, [r7, #12]
 800eaf8:	e00c      	b.n	800eb14 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <osKernelInitialize+0x60>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d105      	bne.n	800eb0e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800eb02:	4b07      	ldr	r3, [pc, #28]	; (800eb20 <osKernelInitialize+0x60>)
 800eb04:	2201      	movs	r2, #1
 800eb06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	60fb      	str	r3, [r7, #12]
 800eb0c:	e002      	b.n	800eb14 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800eb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eb14:	68fb      	ldr	r3, [r7, #12]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3714      	adds	r7, #20
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bc80      	pop	{r7}
 800eb1e:	4770      	bx	lr
 800eb20:	20000ea4 	.word	0x20000ea4

0800eb24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb2a:	f3ef 8305 	mrs	r3, IPSR
 800eb2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10f      	bne.n	800eb56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb36:	f3ef 8310 	mrs	r3, PRIMASK
 800eb3a:	607b      	str	r3, [r7, #4]
  return(result);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d109      	bne.n	800eb56 <osKernelStart+0x32>
 800eb42:	4b11      	ldr	r3, [pc, #68]	; (800eb88 <osKernelStart+0x64>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d109      	bne.n	800eb5e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb4a:	f3ef 8311 	mrs	r3, BASEPRI
 800eb4e:	603b      	str	r3, [r7, #0]
  return(result);
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <osKernelStart+0x3a>
    stat = osErrorISR;
 800eb56:	f06f 0305 	mvn.w	r3, #5
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	e00e      	b.n	800eb7c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	; (800eb88 <osKernelStart+0x64>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d107      	bne.n	800eb76 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800eb66:	4b08      	ldr	r3, [pc, #32]	; (800eb88 <osKernelStart+0x64>)
 800eb68:	2202      	movs	r2, #2
 800eb6a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800eb6c:	f001 f954 	bl	800fe18 <vTaskStartScheduler>
      stat = osOK;
 800eb70:	2300      	movs	r3, #0
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	e002      	b.n	800eb7c <osKernelStart+0x58>
    } else {
      stat = osError;
 800eb76:	f04f 33ff 	mov.w	r3, #4294967295
 800eb7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20000ea4 	.word	0x20000ea4

0800eb8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b092      	sub	sp, #72	; 0x48
 800eb90:	af04      	add	r7, sp, #16
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb9c:	f3ef 8305 	mrs	r3, IPSR
 800eba0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800eba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f040 8094 	bne.w	800ecd2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ebae:	623b      	str	r3, [r7, #32]
  return(result);
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f040 808d 	bne.w	800ecd2 <osThreadNew+0x146>
 800ebb8:	4b48      	ldr	r3, [pc, #288]	; (800ecdc <osThreadNew+0x150>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d106      	bne.n	800ebce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebc0:	f3ef 8311 	mrs	r3, BASEPRI
 800ebc4:	61fb      	str	r3, [r7, #28]
  return(result);
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f040 8082 	bne.w	800ecd2 <osThreadNew+0x146>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d07e      	beq.n	800ecd2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800ebd4:	2380      	movs	r3, #128	; 0x80
 800ebd6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800ebd8:	2318      	movs	r3, #24
 800ebda:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800ebdc:	2300      	movs	r3, #0
 800ebde:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800ebe0:	f107 031b 	add.w	r3, r7, #27
 800ebe4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800ebe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d045      	beq.n	800ec7e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <osThreadNew+0x74>
        name = attr->name;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	699b      	ldr	r3, [r3, #24]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d008      	beq.n	800ec26 <osThreadNew+0x9a>
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	2b38      	cmp	r3, #56	; 0x38
 800ec18:	d805      	bhi.n	800ec26 <osThreadNew+0x9a>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d001      	beq.n	800ec2a <osThreadNew+0x9e>
        return (NULL);
 800ec26:	2300      	movs	r3, #0
 800ec28:	e054      	b.n	800ecd4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d003      	beq.n	800ec3a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	695b      	ldr	r3, [r3, #20]
 800ec36:	089b      	lsrs	r3, r3, #2
 800ec38:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00e      	beq.n	800ec60 <osThreadNew+0xd4>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	2bbb      	cmp	r3, #187	; 0xbb
 800ec48:	d90a      	bls.n	800ec60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d006      	beq.n	800ec60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	695b      	ldr	r3, [r3, #20]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <osThreadNew+0xd4>
        mem = 1;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec5e:	e010      	b.n	800ec82 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10c      	bne.n	800ec82 <osThreadNew+0xf6>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d108      	bne.n	800ec82 <osThreadNew+0xf6>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	691b      	ldr	r3, [r3, #16]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d104      	bne.n	800ec82 <osThreadNew+0xf6>
          mem = 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec7c:	e001      	b.n	800ec82 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d110      	bne.n	800ecaa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec90:	9202      	str	r2, [sp, #8]
 800ec92:	9301      	str	r3, [sp, #4]
 800ec94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f000 fed6 	bl	800fa50 <xTaskCreateStatic>
 800eca4:	4603      	mov	r3, r0
 800eca6:	617b      	str	r3, [r7, #20]
 800eca8:	e013      	b.n	800ecd2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d110      	bne.n	800ecd2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	f107 0314 	add.w	r3, r7, #20
 800ecb8:	9301      	str	r3, [sp, #4]
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f000 ff20 	bl	800fb08 <xTaskCreate>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d001      	beq.n	800ecd2 <osThreadNew+0x146>
          hTask = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ecd2:	697b      	ldr	r3, [r7, #20]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3738      	adds	r7, #56	; 0x38
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	20000ea4 	.word	0x20000ea4

0800ece0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ece8:	f3ef 8305 	mrs	r3, IPSR
 800ecec:	613b      	str	r3, [r7, #16]
  return(result);
 800ecee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10f      	bne.n	800ed14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecf4:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d109      	bne.n	800ed14 <osDelay+0x34>
 800ed00:	4b0d      	ldr	r3, [pc, #52]	; (800ed38 <osDelay+0x58>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d109      	bne.n	800ed1c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed08:	f3ef 8311 	mrs	r3, BASEPRI
 800ed0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <osDelay+0x3c>
    stat = osErrorISR;
 800ed14:	f06f 0305 	mvn.w	r3, #5
 800ed18:	617b      	str	r3, [r7, #20]
 800ed1a:	e007      	b.n	800ed2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <osDelay+0x4c>
      vTaskDelay(ticks);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f001 f842 	bl	800fdb0 <vTaskDelay>
    }
  }

  return (stat);
 800ed2c:	697b      	ldr	r3, [r7, #20]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3718      	adds	r7, #24
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20000ea4 	.word	0x20000ea4

0800ed3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b08c      	sub	sp, #48	; 0x30
 800ed40:	af02      	add	r7, sp, #8
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed4c:	f3ef 8305 	mrs	r3, IPSR
 800ed50:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d16f      	bne.n	800ee38 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed58:	f3ef 8310 	mrs	r3, PRIMASK
 800ed5c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d169      	bne.n	800ee38 <osMessageQueueNew+0xfc>
 800ed64:	4b37      	ldr	r3, [pc, #220]	; (800ee44 <osMessageQueueNew+0x108>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d105      	bne.n	800ed78 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed6c:	f3ef 8311 	mrs	r3, BASEPRI
 800ed70:	613b      	str	r3, [r7, #16]
  return(result);
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d15f      	bne.n	800ee38 <osMessageQueueNew+0xfc>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d05c      	beq.n	800ee38 <osMessageQueueNew+0xfc>
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d059      	beq.n	800ee38 <osMessageQueueNew+0xfc>
    mem = -1;
 800ed84:	f04f 33ff 	mov.w	r3, #4294967295
 800ed88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d029      	beq.n	800ede4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d012      	beq.n	800edbe <osMessageQueueNew+0x82>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	2b4f      	cmp	r3, #79	; 0x4f
 800ed9e:	d90e      	bls.n	800edbe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00a      	beq.n	800edbe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	695a      	ldr	r2, [r3, #20]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	68b9      	ldr	r1, [r7, #8]
 800edb0:	fb01 f303 	mul.w	r3, r1, r3
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d302      	bcc.n	800edbe <osMessageQueueNew+0x82>
        mem = 1;
 800edb8:	2301      	movs	r3, #1
 800edba:	623b      	str	r3, [r7, #32]
 800edbc:	e014      	b.n	800ede8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d110      	bne.n	800ede8 <osMessageQueueNew+0xac>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10c      	bne.n	800ede8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d108      	bne.n	800ede8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d104      	bne.n	800ede8 <osMessageQueueNew+0xac>
          mem = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	623b      	str	r3, [r7, #32]
 800ede2:	e001      	b.n	800ede8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ede4:	2300      	movs	r3, #0
 800ede6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ede8:	6a3b      	ldr	r3, [r7, #32]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d10b      	bne.n	800ee06 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	691a      	ldr	r2, [r3, #16]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	2100      	movs	r1, #0
 800edf8:	9100      	str	r1, [sp, #0]
 800edfa:	68b9      	ldr	r1, [r7, #8]
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 f96d 	bl	800f0dc <xQueueGenericCreateStatic>
 800ee02:	6278      	str	r0, [r7, #36]	; 0x24
 800ee04:	e008      	b.n	800ee18 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ee06:	6a3b      	ldr	r3, [r7, #32]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d105      	bne.n	800ee18 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 f9da 	bl	800f1ca <xQueueGenericCreate>
 800ee16:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00c      	beq.n	800ee38 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d003      	beq.n	800ee2c <osMessageQueueNew+0xf0>
        name = attr->name;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	61fb      	str	r3, [r7, #28]
 800ee2a:	e001      	b.n	800ee30 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ee30:	69f9      	ldr	r1, [r7, #28]
 800ee32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee34:	f000 fdb0 	bl	800f998 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3728      	adds	r7, #40	; 0x28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	20000ea4 	.word	0x20000ea4

0800ee48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	4a06      	ldr	r2, [pc, #24]	; (800ee70 <vApplicationGetIdleTaskMemory+0x28>)
 800ee58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	4a05      	ldr	r2, [pc, #20]	; (800ee74 <vApplicationGetIdleTaskMemory+0x2c>)
 800ee5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2280      	movs	r2, #128	; 0x80
 800ee64:	601a      	str	r2, [r3, #0]
}
 800ee66:	bf00      	nop
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bc80      	pop	{r7}
 800ee6e:	4770      	bx	lr
 800ee70:	20000ea8 	.word	0x20000ea8
 800ee74:	20000f64 	.word	0x20000f64

0800ee78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	4a07      	ldr	r2, [pc, #28]	; (800eea4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ee88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	4a06      	ldr	r2, [pc, #24]	; (800eea8 <vApplicationGetTimerTaskMemory+0x30>)
 800ee8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee96:	601a      	str	r2, [r3, #0]
}
 800ee98:	bf00      	nop
 800ee9a:	3714      	adds	r7, #20
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bc80      	pop	{r7}
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	20001164 	.word	0x20001164
 800eea8:	20001220 	.word	0x20001220

0800eeac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f103 0208 	add.w	r2, r3, #8
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f04f 32ff 	mov.w	r2, #4294967295
 800eec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f103 0208 	add.w	r2, r3, #8
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f103 0208 	add.w	r2, r3, #8
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eee0:	bf00      	nop
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bc80      	pop	{r7}
 800eee8:	4770      	bx	lr

0800eeea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eef8:	bf00      	nop
 800eefa:	370c      	adds	r7, #12
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bc80      	pop	{r7}
 800ef00:	4770      	bx	lr

0800ef02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef02:	b480      	push	{r7}
 800ef04:	b085      	sub	sp, #20
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	683a      	ldr	r2, [r7, #0]
 800ef2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]
}
 800ef3e:	bf00      	nop
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bc80      	pop	{r7}
 800ef46:	4770      	bx	lr

0800ef48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef5e:	d103      	bne.n	800ef68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	e00c      	b.n	800ef82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3308      	adds	r3, #8
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	e002      	b.n	800ef76 <vListInsert+0x2e>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	60fb      	str	r3, [r7, #12]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d2f6      	bcs.n	800ef70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	683a      	ldr	r2, [r7, #0]
 800ef9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	601a      	str	r2, [r3, #0]
}
 800efae:	bf00      	nop
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bc80      	pop	{r7}
 800efb6:	4770      	bx	lr

0800efb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	6892      	ldr	r2, [r2, #8]
 800efce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	6852      	ldr	r2, [r2, #4]
 800efd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d103      	bne.n	800efec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689a      	ldr	r2, [r3, #8]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	1e5a      	subs	r2, r3, #1
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	bc80      	pop	{r7}
 800f008:	4770      	bx	lr
	...

0800f00c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10a      	bne.n	800f036 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f032:	bf00      	nop
 800f034:	e7fe      	b.n	800f034 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f036:	f002 f831 	bl	801109c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f042:	68f9      	ldr	r1, [r7, #12]
 800f044:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f046:	fb01 f303 	mul.w	r3, r1, r3
 800f04a:	441a      	add	r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f066:	3b01      	subs	r3, #1
 800f068:	68f9      	ldr	r1, [r7, #12]
 800f06a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f06c:	fb01 f303 	mul.w	r3, r1, r3
 800f070:	441a      	add	r2, r3
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	22ff      	movs	r2, #255	; 0xff
 800f07a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	22ff      	movs	r2, #255	; 0xff
 800f082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d114      	bne.n	800f0b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d01a      	beq.n	800f0ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3310      	adds	r3, #16
 800f098:	4618      	mov	r0, r3
 800f09a:	f001 f959 	bl	8010350 <xTaskRemoveFromEventList>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d012      	beq.n	800f0ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f0a4:	4b0c      	ldr	r3, [pc, #48]	; (800f0d8 <xQueueGenericReset+0xcc>)
 800f0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	e009      	b.n	800f0ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3310      	adds	r3, #16
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fef6 	bl	800eeac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	3324      	adds	r3, #36	; 0x24
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7ff fef1 	bl	800eeac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0ca:	f002 f817 	bl	80110fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0ce:	2301      	movs	r3, #1
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	e000ed04 	.word	0xe000ed04

0800f0dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08e      	sub	sp, #56	; 0x38
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10a      	bne.n	800f106 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f102:	bf00      	nop
 800f104:	e7fe      	b.n	800f104 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d10a      	bne.n	800f122 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f11e:	bf00      	nop
 800f120:	e7fe      	b.n	800f120 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <xQueueGenericCreateStatic+0x52>
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d001      	beq.n	800f132 <xQueueGenericCreateStatic+0x56>
 800f12e:	2301      	movs	r3, #1
 800f130:	e000      	b.n	800f134 <xQueueGenericCreateStatic+0x58>
 800f132:	2300      	movs	r3, #0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10a      	bne.n	800f14e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	623b      	str	r3, [r7, #32]
}
 800f14a:	bf00      	nop
 800f14c:	e7fe      	b.n	800f14c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d102      	bne.n	800f15a <xQueueGenericCreateStatic+0x7e>
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d101      	bne.n	800f15e <xQueueGenericCreateStatic+0x82>
 800f15a:	2301      	movs	r3, #1
 800f15c:	e000      	b.n	800f160 <xQueueGenericCreateStatic+0x84>
 800f15e:	2300      	movs	r3, #0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d10a      	bne.n	800f17a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	61fb      	str	r3, [r7, #28]
}
 800f176:	bf00      	nop
 800f178:	e7fe      	b.n	800f178 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f17a:	2350      	movs	r3, #80	; 0x50
 800f17c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	2b50      	cmp	r3, #80	; 0x50
 800f182:	d00a      	beq.n	800f19a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	61bb      	str	r3, [r7, #24]
}
 800f196:	bf00      	nop
 800f198:	e7fe      	b.n	800f198 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00d      	beq.n	800f1c0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	68b9      	ldr	r1, [r7, #8]
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f000 f843 	bl	800f246 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3730      	adds	r7, #48	; 0x30
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b08a      	sub	sp, #40	; 0x28
 800f1ce:	af02      	add	r7, sp, #8
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	60b9      	str	r1, [r7, #8]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10a      	bne.n	800f1f4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	613b      	str	r3, [r7, #16]
}
 800f1f0:	bf00      	nop
 800f1f2:	e7fe      	b.n	800f1f2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d102      	bne.n	800f200 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	61fb      	str	r3, [r7, #28]
 800f1fe:	e004      	b.n	800f20a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	fb02 f303 	mul.w	r3, r2, r3
 800f208:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	3350      	adds	r3, #80	; 0x50
 800f20e:	4618      	mov	r0, r3
 800f210:	f002 f844 	bl	801129c <pvPortMalloc>
 800f214:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00f      	beq.n	800f23c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	3350      	adds	r3, #80	; 0x50
 800f220:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	2200      	movs	r2, #0
 800f226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f22a:	79fa      	ldrb	r2, [r7, #7]
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	4613      	mov	r3, r2
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	68b9      	ldr	r1, [r7, #8]
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f000 f805 	bl	800f246 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f23c:	69bb      	ldr	r3, [r7, #24]
	}
 800f23e:	4618      	mov	r0, r3
 800f240:	3720      	adds	r7, #32
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	60f8      	str	r0, [r7, #12]
 800f24e:	60b9      	str	r1, [r7, #8]
 800f250:	607a      	str	r2, [r7, #4]
 800f252:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d103      	bne.n	800f262 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	69ba      	ldr	r2, [r7, #24]
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	e002      	b.n	800f268 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	68ba      	ldr	r2, [r7, #8]
 800f272:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f274:	2101      	movs	r1, #1
 800f276:	69b8      	ldr	r0, [r7, #24]
 800f278:	f7ff fec8 	bl	800f00c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	78fa      	ldrb	r2, [r7, #3]
 800f280:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f284:	bf00      	nop
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b08e      	sub	sp, #56	; 0x38
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
 800f298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f29a:	2300      	movs	r3, #0
 800f29c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <xQueueGenericSend+0x32>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d103      	bne.n	800f2cc <xQueueGenericSend+0x40>
 800f2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <xQueueGenericSend+0x44>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e000      	b.n	800f2d2 <xQueueGenericSend+0x46>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d10a      	bne.n	800f2ec <xQueueGenericSend+0x60>
	__asm volatile
 800f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2da:	f383 8811 	msr	BASEPRI, r3
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	f3bf 8f4f 	dsb	sy
 800f2e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2e8:	bf00      	nop
 800f2ea:	e7fe      	b.n	800f2ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d103      	bne.n	800f2fa <xQueueGenericSend+0x6e>
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d101      	bne.n	800f2fe <xQueueGenericSend+0x72>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e000      	b.n	800f300 <xQueueGenericSend+0x74>
 800f2fe:	2300      	movs	r3, #0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <xQueueGenericSend+0x8e>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	623b      	str	r3, [r7, #32]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f31a:	f001 f9df 	bl	80106dc <xTaskGetSchedulerState>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d102      	bne.n	800f32a <xQueueGenericSend+0x9e>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <xQueueGenericSend+0xa2>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e000      	b.n	800f330 <xQueueGenericSend+0xa4>
 800f32e:	2300      	movs	r3, #0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10a      	bne.n	800f34a <xQueueGenericSend+0xbe>
	__asm volatile
 800f334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f338:	f383 8811 	msr	BASEPRI, r3
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f3bf 8f4f 	dsb	sy
 800f344:	61fb      	str	r3, [r7, #28]
}
 800f346:	bf00      	nop
 800f348:	e7fe      	b.n	800f348 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f34a:	f001 fea7 	bl	801109c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f356:	429a      	cmp	r2, r3
 800f358:	d302      	bcc.n	800f360 <xQueueGenericSend+0xd4>
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d129      	bne.n	800f3b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	68b9      	ldr	r1, [r7, #8]
 800f364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f366:	f000 fa07 	bl	800f778 <prvCopyDataToQueue>
 800f36a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f370:	2b00      	cmp	r3, #0
 800f372:	d010      	beq.n	800f396 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f376:	3324      	adds	r3, #36	; 0x24
 800f378:	4618      	mov	r0, r3
 800f37a:	f000 ffe9 	bl	8010350 <xTaskRemoveFromEventList>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d013      	beq.n	800f3ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f384:	4b3f      	ldr	r3, [pc, #252]	; (800f484 <xQueueGenericSend+0x1f8>)
 800f386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	e00a      	b.n	800f3ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d007      	beq.n	800f3ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f39c:	4b39      	ldr	r3, [pc, #228]	; (800f484 <xQueueGenericSend+0x1f8>)
 800f39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3a2:	601a      	str	r2, [r3, #0]
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f3ac:	f001 fea6 	bl	80110fc <vPortExitCritical>
				return pdPASS;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e063      	b.n	800f47c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d103      	bne.n	800f3c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f3ba:	f001 fe9f 	bl	80110fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e05c      	b.n	800f47c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d106      	bne.n	800f3d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3c8:	f107 0314 	add.w	r3, r7, #20
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f001 f823 	bl	8010418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3d6:	f001 fe91 	bl	80110fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3da:	f000 fd8d 	bl	800fef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3de:	f001 fe5d 	bl	801109c <vPortEnterCritical>
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3e8:	b25b      	sxtb	r3, r3
 800f3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ee:	d103      	bne.n	800f3f8 <xQueueGenericSend+0x16c>
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3fe:	b25b      	sxtb	r3, r3
 800f400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f404:	d103      	bne.n	800f40e <xQueueGenericSend+0x182>
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f40e:	f001 fe75 	bl	80110fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f412:	1d3a      	adds	r2, r7, #4
 800f414:	f107 0314 	add.w	r3, r7, #20
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f001 f812 	bl	8010444 <xTaskCheckForTimeOut>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d124      	bne.n	800f470 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f428:	f000 fa9e 	bl	800f968 <prvIsQueueFull>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d018      	beq.n	800f464 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f434:	3310      	adds	r3, #16
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	4611      	mov	r1, r2
 800f43a:	4618      	mov	r0, r3
 800f43c:	f000 ff38 	bl	80102b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f442:	f000 fa29 	bl	800f898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f446:	f000 fd65 	bl	800ff14 <xTaskResumeAll>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f47f af7c 	bne.w	800f34a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f452:	4b0c      	ldr	r3, [pc, #48]	; (800f484 <xQueueGenericSend+0x1f8>)
 800f454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	f3bf 8f6f 	isb	sy
 800f462:	e772      	b.n	800f34a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f466:	f000 fa17 	bl	800f898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f46a:	f000 fd53 	bl	800ff14 <xTaskResumeAll>
 800f46e:	e76c      	b.n	800f34a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f472:	f000 fa11 	bl	800f898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f476:	f000 fd4d 	bl	800ff14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f47a:	2300      	movs	r3, #0
		}
	}
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3738      	adds	r7, #56	; 0x38
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	e000ed04 	.word	0xe000ed04

0800f488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b08e      	sub	sp, #56	; 0x38
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
 800f494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10a      	bne.n	800f4b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f4b2:	bf00      	nop
 800f4b4:	e7fe      	b.n	800f4b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d103      	bne.n	800f4c4 <xQueueGenericSendFromISR+0x3c>
 800f4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d101      	bne.n	800f4c8 <xQueueGenericSendFromISR+0x40>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e000      	b.n	800f4ca <xQueueGenericSendFromISR+0x42>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10a      	bne.n	800f4e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	623b      	str	r3, [r7, #32]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d103      	bne.n	800f4f2 <xQueueGenericSendFromISR+0x6a>
 800f4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d101      	bne.n	800f4f6 <xQueueGenericSendFromISR+0x6e>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e000      	b.n	800f4f8 <xQueueGenericSendFromISR+0x70>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10a      	bne.n	800f512 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f500:	f383 8811 	msr	BASEPRI, r3
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	61fb      	str	r3, [r7, #28]
}
 800f50e:	bf00      	nop
 800f510:	e7fe      	b.n	800f510 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f512:	f001 fe85 	bl	8011220 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f516:	f3ef 8211 	mrs	r2, BASEPRI
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	61ba      	str	r2, [r7, #24]
 800f52c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f52e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d302      	bcc.n	800f544 <xQueueGenericSendFromISR+0xbc>
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	2b02      	cmp	r3, #2
 800f542:	d12c      	bne.n	800f59e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f54a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	68b9      	ldr	r1, [r7, #8]
 800f552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f554:	f000 f910 	bl	800f778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f558:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f560:	d112      	bne.n	800f588 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f566:	2b00      	cmp	r3, #0
 800f568:	d016      	beq.n	800f598 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56c:	3324      	adds	r3, #36	; 0x24
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 feee 	bl	8010350 <xTaskRemoveFromEventList>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00e      	beq.n	800f598 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00b      	beq.n	800f598 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	601a      	str	r2, [r3, #0]
 800f586:	e007      	b.n	800f598 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f58c:	3301      	adds	r3, #1
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	b25a      	sxtb	r2, r3
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f598:	2301      	movs	r3, #1
 800f59a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f59c:	e001      	b.n	800f5a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f5ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3738      	adds	r7, #56	; 0x38
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b08c      	sub	sp, #48	; 0x30
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10a      	bne.n	800f5e8 <xQueueReceive+0x30>
	__asm volatile
 800f5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d6:	f383 8811 	msr	BASEPRI, r3
 800f5da:	f3bf 8f6f 	isb	sy
 800f5de:	f3bf 8f4f 	dsb	sy
 800f5e2:	623b      	str	r3, [r7, #32]
}
 800f5e4:	bf00      	nop
 800f5e6:	e7fe      	b.n	800f5e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d103      	bne.n	800f5f6 <xQueueReceive+0x3e>
 800f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <xQueueReceive+0x42>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e000      	b.n	800f5fc <xQueueReceive+0x44>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d10a      	bne.n	800f616 <xQueueReceive+0x5e>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	61fb      	str	r3, [r7, #28]
}
 800f612:	bf00      	nop
 800f614:	e7fe      	b.n	800f614 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f616:	f001 f861 	bl	80106dc <xTaskGetSchedulerState>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d102      	bne.n	800f626 <xQueueReceive+0x6e>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d101      	bne.n	800f62a <xQueueReceive+0x72>
 800f626:	2301      	movs	r3, #1
 800f628:	e000      	b.n	800f62c <xQueueReceive+0x74>
 800f62a:	2300      	movs	r3, #0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10a      	bne.n	800f646 <xQueueReceive+0x8e>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	61bb      	str	r3, [r7, #24]
}
 800f642:	bf00      	nop
 800f644:	e7fe      	b.n	800f644 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f646:	f001 fd29 	bl	801109c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	2b00      	cmp	r3, #0
 800f654:	d01f      	beq.n	800f696 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f656:	68b9      	ldr	r1, [r7, #8]
 800f658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f65a:	f000 f8f7 	bl	800f84c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f660:	1e5a      	subs	r2, r3, #1
 800f662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f664:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00f      	beq.n	800f68e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f670:	3310      	adds	r3, #16
 800f672:	4618      	mov	r0, r3
 800f674:	f000 fe6c 	bl	8010350 <xTaskRemoveFromEventList>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d007      	beq.n	800f68e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f67e:	4b3d      	ldr	r3, [pc, #244]	; (800f774 <xQueueReceive+0x1bc>)
 800f680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f684:	601a      	str	r2, [r3, #0]
 800f686:	f3bf 8f4f 	dsb	sy
 800f68a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f68e:	f001 fd35 	bl	80110fc <vPortExitCritical>
				return pdPASS;
 800f692:	2301      	movs	r3, #1
 800f694:	e069      	b.n	800f76a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f69c:	f001 fd2e 	bl	80110fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	e062      	b.n	800f76a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d106      	bne.n	800f6b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6aa:	f107 0310 	add.w	r3, r7, #16
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 feb2 	bl	8010418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f6b8:	f001 fd20 	bl	80110fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6bc:	f000 fc1c 	bl	800fef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f6c0:	f001 fcec 	bl	801109c <vPortEnterCritical>
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6ca:	b25b      	sxtb	r3, r3
 800f6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d0:	d103      	bne.n	800f6da <xQueueReceive+0x122>
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6e0:	b25b      	sxtb	r3, r3
 800f6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6e6:	d103      	bne.n	800f6f0 <xQueueReceive+0x138>
 800f6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6f0:	f001 fd04 	bl	80110fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6f4:	1d3a      	adds	r2, r7, #4
 800f6f6:	f107 0310 	add.w	r3, r7, #16
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fea1 	bl	8010444 <xTaskCheckForTimeOut>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d123      	bne.n	800f750 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f70a:	f000 f917 	bl	800f93c <prvIsQueueEmpty>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d017      	beq.n	800f744 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	3324      	adds	r3, #36	; 0x24
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	4611      	mov	r1, r2
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 fdc7 	bl	80102b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f724:	f000 f8b8 	bl	800f898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f728:	f000 fbf4 	bl	800ff14 <xTaskResumeAll>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d189      	bne.n	800f646 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f732:	4b10      	ldr	r3, [pc, #64]	; (800f774 <xQueueReceive+0x1bc>)
 800f734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f738:	601a      	str	r2, [r3, #0]
 800f73a:	f3bf 8f4f 	dsb	sy
 800f73e:	f3bf 8f6f 	isb	sy
 800f742:	e780      	b.n	800f646 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f746:	f000 f8a7 	bl	800f898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f74a:	f000 fbe3 	bl	800ff14 <xTaskResumeAll>
 800f74e:	e77a      	b.n	800f646 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f752:	f000 f8a1 	bl	800f898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f756:	f000 fbdd 	bl	800ff14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f75c:	f000 f8ee 	bl	800f93c <prvIsQueueEmpty>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	f43f af6f 	beq.w	800f646 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3730      	adds	r7, #48	; 0x30
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	e000ed04 	.word	0xe000ed04

0800f778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f784:	2300      	movs	r3, #0
 800f786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f78c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10d      	bne.n	800f7b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d14d      	bne.n	800f83a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f000 ffb8 	bl	8010718 <xTaskPriorityDisinherit>
 800f7a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	605a      	str	r2, [r3, #4]
 800f7b0:	e043      	b.n	800f83a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d119      	bne.n	800f7ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6898      	ldr	r0, [r3, #8]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	68b9      	ldr	r1, [r7, #8]
 800f7c4:	f002 f94e 	bl	8011a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	689a      	ldr	r2, [r3, #8]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d0:	441a      	add	r2, r3
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	689a      	ldr	r2, [r3, #8]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d32b      	bcc.n	800f83a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	609a      	str	r2, [r3, #8]
 800f7ea:	e026      	b.n	800f83a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	68d8      	ldr	r0, [r3, #12]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	68b9      	ldr	r1, [r7, #8]
 800f7f8:	f002 f934 	bl	8011a64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	68da      	ldr	r2, [r3, #12]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f804:	425b      	negs	r3, r3
 800f806:	441a      	add	r2, r3
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	68da      	ldr	r2, [r3, #12]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	429a      	cmp	r2, r3
 800f816:	d207      	bcs.n	800f828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f820:	425b      	negs	r3, r3
 800f822:	441a      	add	r2, r3
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b02      	cmp	r3, #2
 800f82c:	d105      	bne.n	800f83a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	3b01      	subs	r3, #1
 800f838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f842:	697b      	ldr	r3, [r7, #20]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d018      	beq.n	800f890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68da      	ldr	r2, [r3, #12]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f866:	441a      	add	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	68da      	ldr	r2, [r3, #12]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	429a      	cmp	r2, r3
 800f876:	d303      	bcc.n	800f880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68d9      	ldr	r1, [r3, #12]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f888:	461a      	mov	r2, r3
 800f88a:	6838      	ldr	r0, [r7, #0]
 800f88c:	f002 f8ea 	bl	8011a64 <memcpy>
	}
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f8a0:	f001 fbfc 	bl	801109c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8ac:	e011      	b.n	800f8d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d012      	beq.n	800f8dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	3324      	adds	r3, #36	; 0x24
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 fd48 	bl	8010350 <xTaskRemoveFromEventList>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8c6:	f000 fe1f 	bl	8010508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	dce9      	bgt.n	800f8ae <prvUnlockQueue+0x16>
 800f8da:	e000      	b.n	800f8de <prvUnlockQueue+0x46>
					break;
 800f8dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	22ff      	movs	r2, #255	; 0xff
 800f8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f8e6:	f001 fc09 	bl	80110fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f8ea:	f001 fbd7 	bl	801109c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8f6:	e011      	b.n	800f91c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d012      	beq.n	800f926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3310      	adds	r3, #16
 800f904:	4618      	mov	r0, r3
 800f906:	f000 fd23 	bl	8010350 <xTaskRemoveFromEventList>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d001      	beq.n	800f914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f910:	f000 fdfa 	bl	8010508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f914:	7bbb      	ldrb	r3, [r7, #14]
 800f916:	3b01      	subs	r3, #1
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f91c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f920:	2b00      	cmp	r3, #0
 800f922:	dce9      	bgt.n	800f8f8 <prvUnlockQueue+0x60>
 800f924:	e000      	b.n	800f928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	22ff      	movs	r2, #255	; 0xff
 800f92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f930:	f001 fbe4 	bl	80110fc <vPortExitCritical>
}
 800f934:	bf00      	nop
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f944:	f001 fbaa 	bl	801109c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d102      	bne.n	800f956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f950:	2301      	movs	r3, #1
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	e001      	b.n	800f95a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f956:	2300      	movs	r3, #0
 800f958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f95a:	f001 fbcf 	bl	80110fc <vPortExitCritical>

	return xReturn;
 800f95e:	68fb      	ldr	r3, [r7, #12]
}
 800f960:	4618      	mov	r0, r3
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f970:	f001 fb94 	bl	801109c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d102      	bne.n	800f986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f980:	2301      	movs	r3, #1
 800f982:	60fb      	str	r3, [r7, #12]
 800f984:	e001      	b.n	800f98a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f98a:	f001 fbb7 	bl	80110fc <vPortExitCritical>

	return xReturn;
 800f98e:	68fb      	ldr	r3, [r7, #12]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f998:	b480      	push	{r7}
 800f99a:	b085      	sub	sp, #20
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	60fb      	str	r3, [r7, #12]
 800f9a6:	e014      	b.n	800f9d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f9a8:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <vQueueAddToRegistry+0x4c>)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d10b      	bne.n	800f9cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f9b4:	490b      	ldr	r1, [pc, #44]	; (800f9e4 <vQueueAddToRegistry+0x4c>)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f9be:	4a09      	ldr	r2, [pc, #36]	; (800f9e4 <vQueueAddToRegistry+0x4c>)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4413      	add	r3, r2
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f9ca:	e006      	b.n	800f9da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	60fb      	str	r3, [r7, #12]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b07      	cmp	r3, #7
 800f9d6:	d9e7      	bls.n	800f9a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f9d8:	bf00      	nop
 800f9da:	bf00      	nop
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bc80      	pop	{r7}
 800f9e2:	4770      	bx	lr
 800f9e4:	20001620 	.word	0x20001620

0800f9e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f9f8:	f001 fb50 	bl	801109c <vPortEnterCritical>
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa02:	b25b      	sxtb	r3, r3
 800fa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa08:	d103      	bne.n	800fa12 <vQueueWaitForMessageRestricted+0x2a>
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa18:	b25b      	sxtb	r3, r3
 800fa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa1e:	d103      	bne.n	800fa28 <vQueueWaitForMessageRestricted+0x40>
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	2200      	movs	r2, #0
 800fa24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa28:	f001 fb68 	bl	80110fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	3324      	adds	r3, #36	; 0x24
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f000 fc5b 	bl	80102f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fa42:	6978      	ldr	r0, [r7, #20]
 800fa44:	f7ff ff28 	bl	800f898 <prvUnlockQueue>
	}
 800fa48:	bf00      	nop
 800fa4a:	3718      	adds	r7, #24
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08e      	sub	sp, #56	; 0x38
 800fa54:	af04      	add	r7, sp, #16
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
 800fa5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10a      	bne.n	800fa7a <xTaskCreateStatic+0x2a>
	__asm volatile
 800fa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	623b      	str	r3, [r7, #32]
}
 800fa76:	bf00      	nop
 800fa78:	e7fe      	b.n	800fa78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d10a      	bne.n	800fa96 <xTaskCreateStatic+0x46>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	61fb      	str	r3, [r7, #28]
}
 800fa92:	bf00      	nop
 800fa94:	e7fe      	b.n	800fa94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa96:	23bc      	movs	r3, #188	; 0xbc
 800fa98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	2bbc      	cmp	r3, #188	; 0xbc
 800fa9e:	d00a      	beq.n	800fab6 <xTaskCreateStatic+0x66>
	__asm volatile
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	61bb      	str	r3, [r7, #24]
}
 800fab2:	bf00      	nop
 800fab4:	e7fe      	b.n	800fab4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d01e      	beq.n	800fafa <xTaskCreateStatic+0xaa>
 800fabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d01b      	beq.n	800fafa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800faca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800face:	2202      	movs	r2, #2
 800fad0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fad4:	2300      	movs	r3, #0
 800fad6:	9303      	str	r3, [sp, #12]
 800fad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fada:	9302      	str	r3, [sp, #8]
 800fadc:	f107 0314 	add.w	r3, r7, #20
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	68b9      	ldr	r1, [r7, #8]
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f000 f851 	bl	800fb94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800faf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faf4:	f000 f8ec 	bl	800fcd0 <prvAddNewTaskToReadyList>
 800faf8:	e001      	b.n	800fafe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fafe:	697b      	ldr	r3, [r7, #20]
	}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3728      	adds	r7, #40	; 0x28
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b08c      	sub	sp, #48	; 0x30
 800fb0c:	af04      	add	r7, sp, #16
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	603b      	str	r3, [r7, #0]
 800fb14:	4613      	mov	r3, r2
 800fb16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb18:	88fb      	ldrh	r3, [r7, #6]
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f001 fbbd 	bl	801129c <pvPortMalloc>
 800fb22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00e      	beq.n	800fb48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800fb2a:	20bc      	movs	r0, #188	; 0xbc
 800fb2c:	f001 fbb6 	bl	801129c <pvPortMalloc>
 800fb30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d003      	beq.n	800fb40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	631a      	str	r2, [r3, #48]	; 0x30
 800fb3e:	e005      	b.n	800fb4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fb40:	6978      	ldr	r0, [r7, #20]
 800fb42:	f001 fc6f 	bl	8011424 <vPortFree>
 800fb46:	e001      	b.n	800fb4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d017      	beq.n	800fb82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb5a:	88fa      	ldrh	r2, [r7, #6]
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	9303      	str	r3, [sp, #12]
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	9302      	str	r3, [sp, #8]
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	9301      	str	r3, [sp, #4]
 800fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	68b9      	ldr	r1, [r7, #8]
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f000 f80f 	bl	800fb94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb76:	69f8      	ldr	r0, [r7, #28]
 800fb78:	f000 f8aa 	bl	800fcd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	61bb      	str	r3, [r7, #24]
 800fb80:	e002      	b.n	800fb88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb82:	f04f 33ff 	mov.w	r3, #4294967295
 800fb86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb88:	69bb      	ldr	r3, [r7, #24]
	}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3720      	adds	r7, #32
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
	...

0800fb94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	461a      	mov	r2, r3
 800fbac:	21a5      	movs	r1, #165	; 0xa5
 800fbae:	f001 ff81 	bl	8011ab4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fbbc:	3b01      	subs	r3, #1
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	4413      	add	r3, r2
 800fbc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	f023 0307 	bic.w	r3, r3, #7
 800fbca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	f003 0307 	and.w	r3, r3, #7
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d00a      	beq.n	800fbec <prvInitialiseNewTask+0x58>
	__asm volatile
 800fbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	617b      	str	r3, [r7, #20]
}
 800fbe8:	bf00      	nop
 800fbea:	e7fe      	b.n	800fbea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbec:	2300      	movs	r3, #0
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e012      	b.n	800fc18 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	7819      	ldrb	r1, [r3, #0]
 800fbfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	4413      	add	r3, r2
 800fc00:	3334      	adds	r3, #52	; 0x34
 800fc02:	460a      	mov	r2, r1
 800fc04:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d006      	beq.n	800fc20 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	3301      	adds	r3, #1
 800fc16:	61fb      	str	r3, [r7, #28]
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	2b0f      	cmp	r3, #15
 800fc1c:	d9e9      	bls.n	800fbf2 <prvInitialiseNewTask+0x5e>
 800fc1e:	e000      	b.n	800fc22 <prvInitialiseNewTask+0x8e>
		{
			break;
 800fc20:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	2200      	movs	r2, #0
 800fc26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2c:	2b37      	cmp	r3, #55	; 0x37
 800fc2e:	d901      	bls.n	800fc34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc30:	2337      	movs	r3, #55	; 0x37
 800fc32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc42:	2200      	movs	r2, #0
 800fc44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc48:	3304      	adds	r3, #4
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff f94d 	bl	800eeea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc52:	3318      	adds	r3, #24
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7ff f948 	bl	800eeea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc72:	2200      	movs	r2, #0
 800fc74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc82:	3354      	adds	r3, #84	; 0x54
 800fc84:	2260      	movs	r2, #96	; 0x60
 800fc86:	2100      	movs	r1, #0
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f001 ff13 	bl	8011ab4 <memset>
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	4a0c      	ldr	r2, [pc, #48]	; (800fcc4 <prvInitialiseNewTask+0x130>)
 800fc92:	659a      	str	r2, [r3, #88]	; 0x58
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc96:	4a0c      	ldr	r2, [pc, #48]	; (800fcc8 <prvInitialiseNewTask+0x134>)
 800fc98:	65da      	str	r2, [r3, #92]	; 0x5c
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	4a0b      	ldr	r2, [pc, #44]	; (800fccc <prvInitialiseNewTask+0x138>)
 800fc9e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	68f9      	ldr	r1, [r7, #12]
 800fca4:	69b8      	ldr	r0, [r7, #24]
 800fca6:	f001 f90b 	bl	8010ec0 <pxPortInitialiseStack>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d002      	beq.n	800fcbc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcbc:	bf00      	nop
 800fcbe:	3720      	adds	r7, #32
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	08016590 	.word	0x08016590
 800fcc8:	080165b0 	.word	0x080165b0
 800fccc:	08016570 	.word	0x08016570

0800fcd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fcd8:	f001 f9e0 	bl	801109c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fcdc:	4b2d      	ldr	r3, [pc, #180]	; (800fd94 <prvAddNewTaskToReadyList+0xc4>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	4a2c      	ldr	r2, [pc, #176]	; (800fd94 <prvAddNewTaskToReadyList+0xc4>)
 800fce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fce6:	4b2c      	ldr	r3, [pc, #176]	; (800fd98 <prvAddNewTaskToReadyList+0xc8>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d109      	bne.n	800fd02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fcee:	4a2a      	ldr	r2, [pc, #168]	; (800fd98 <prvAddNewTaskToReadyList+0xc8>)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fcf4:	4b27      	ldr	r3, [pc, #156]	; (800fd94 <prvAddNewTaskToReadyList+0xc4>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	d110      	bne.n	800fd1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fcfc:	f000 fc28 	bl	8010550 <prvInitialiseTaskLists>
 800fd00:	e00d      	b.n	800fd1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd02:	4b26      	ldr	r3, [pc, #152]	; (800fd9c <prvAddNewTaskToReadyList+0xcc>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d109      	bne.n	800fd1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd0a:	4b23      	ldr	r3, [pc, #140]	; (800fd98 <prvAddNewTaskToReadyList+0xc8>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d802      	bhi.n	800fd1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd18:	4a1f      	ldr	r2, [pc, #124]	; (800fd98 <prvAddNewTaskToReadyList+0xc8>)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd1e:	4b20      	ldr	r3, [pc, #128]	; (800fda0 <prvAddNewTaskToReadyList+0xd0>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3301      	adds	r3, #1
 800fd24:	4a1e      	ldr	r2, [pc, #120]	; (800fda0 <prvAddNewTaskToReadyList+0xd0>)
 800fd26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd28:	4b1d      	ldr	r3, [pc, #116]	; (800fda0 <prvAddNewTaskToReadyList+0xd0>)
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd34:	4b1b      	ldr	r3, [pc, #108]	; (800fda4 <prvAddNewTaskToReadyList+0xd4>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d903      	bls.n	800fd44 <prvAddNewTaskToReadyList+0x74>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd40:	4a18      	ldr	r2, [pc, #96]	; (800fda4 <prvAddNewTaskToReadyList+0xd4>)
 800fd42:	6013      	str	r3, [r2, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd48:	4613      	mov	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	4413      	add	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	4a15      	ldr	r2, [pc, #84]	; (800fda8 <prvAddNewTaskToReadyList+0xd8>)
 800fd52:	441a      	add	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	3304      	adds	r3, #4
 800fd58:	4619      	mov	r1, r3
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	f7ff f8d1 	bl	800ef02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd60:	f001 f9cc 	bl	80110fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd64:	4b0d      	ldr	r3, [pc, #52]	; (800fd9c <prvAddNewTaskToReadyList+0xcc>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00e      	beq.n	800fd8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd6c:	4b0a      	ldr	r3, [pc, #40]	; (800fd98 <prvAddNewTaskToReadyList+0xc8>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d207      	bcs.n	800fd8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd7a:	4b0c      	ldr	r3, [pc, #48]	; (800fdac <prvAddNewTaskToReadyList+0xdc>)
 800fd7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd80:	601a      	str	r2, [r3, #0]
 800fd82:	f3bf 8f4f 	dsb	sy
 800fd86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd8a:	bf00      	nop
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	20001b34 	.word	0x20001b34
 800fd98:	20001660 	.word	0x20001660
 800fd9c:	20001b40 	.word	0x20001b40
 800fda0:	20001b50 	.word	0x20001b50
 800fda4:	20001b3c 	.word	0x20001b3c
 800fda8:	20001664 	.word	0x20001664
 800fdac:	e000ed04 	.word	0xe000ed04

0800fdb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d017      	beq.n	800fdf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fdc2:	4b13      	ldr	r3, [pc, #76]	; (800fe10 <vTaskDelay+0x60>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00a      	beq.n	800fde0 <vTaskDelay+0x30>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	60bb      	str	r3, [r7, #8]
}
 800fddc:	bf00      	nop
 800fdde:	e7fe      	b.n	800fdde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fde0:	f000 f88a 	bl	800fef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fde4:	2100      	movs	r1, #0
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fd04 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fdec:	f000 f892 	bl	800ff14 <xTaskResumeAll>
 800fdf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d107      	bne.n	800fe08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fdf8:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <vTaskDelay+0x64>)
 800fdfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdfe:	601a      	str	r2, [r3, #0]
 800fe00:	f3bf 8f4f 	dsb	sy
 800fe04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe08:	bf00      	nop
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	20001b5c 	.word	0x20001b5c
 800fe14:	e000ed04 	.word	0xe000ed04

0800fe18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b08a      	sub	sp, #40	; 0x28
 800fe1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fe22:	2300      	movs	r3, #0
 800fe24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fe26:	463a      	mov	r2, r7
 800fe28:	1d39      	adds	r1, r7, #4
 800fe2a:	f107 0308 	add.w	r3, r7, #8
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7ff f80a 	bl	800ee48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fe34:	6839      	ldr	r1, [r7, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	9202      	str	r2, [sp, #8]
 800fe3c:	9301      	str	r3, [sp, #4]
 800fe3e:	2300      	movs	r3, #0
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	2300      	movs	r3, #0
 800fe44:	460a      	mov	r2, r1
 800fe46:	4924      	ldr	r1, [pc, #144]	; (800fed8 <vTaskStartScheduler+0xc0>)
 800fe48:	4824      	ldr	r0, [pc, #144]	; (800fedc <vTaskStartScheduler+0xc4>)
 800fe4a:	f7ff fe01 	bl	800fa50 <xTaskCreateStatic>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	4a23      	ldr	r2, [pc, #140]	; (800fee0 <vTaskStartScheduler+0xc8>)
 800fe52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fe54:	4b22      	ldr	r3, [pc, #136]	; (800fee0 <vTaskStartScheduler+0xc8>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	617b      	str	r3, [r7, #20]
 800fe60:	e001      	b.n	800fe66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d102      	bne.n	800fe72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fe6c:	f000 fd16 	bl	801089c <xTimerCreateTimerTask>
 800fe70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d11b      	bne.n	800feb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800fe78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7c:	f383 8811 	msr	BASEPRI, r3
 800fe80:	f3bf 8f6f 	isb	sy
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	613b      	str	r3, [r7, #16]
}
 800fe8a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe8c:	4b15      	ldr	r3, [pc, #84]	; (800fee4 <vTaskStartScheduler+0xcc>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	3354      	adds	r3, #84	; 0x54
 800fe92:	4a15      	ldr	r2, [pc, #84]	; (800fee8 <vTaskStartScheduler+0xd0>)
 800fe94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fe96:	4b15      	ldr	r3, [pc, #84]	; (800feec <vTaskStartScheduler+0xd4>)
 800fe98:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe9e:	4b14      	ldr	r3, [pc, #80]	; (800fef0 <vTaskStartScheduler+0xd8>)
 800fea0:	2201      	movs	r2, #1
 800fea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800fea4:	4b13      	ldr	r3, [pc, #76]	; (800fef4 <vTaskStartScheduler+0xdc>)
 800fea6:	2200      	movs	r2, #0
 800fea8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800feaa:	f001 f885 	bl	8010fb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800feae:	e00e      	b.n	800fece <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb6:	d10a      	bne.n	800fece <vTaskStartScheduler+0xb6>
	__asm volatile
 800feb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febc:	f383 8811 	msr	BASEPRI, r3
 800fec0:	f3bf 8f6f 	isb	sy
 800fec4:	f3bf 8f4f 	dsb	sy
 800fec8:	60fb      	str	r3, [r7, #12]
}
 800feca:	bf00      	nop
 800fecc:	e7fe      	b.n	800fecc <vTaskStartScheduler+0xb4>
}
 800fece:	bf00      	nop
 800fed0:	3718      	adds	r7, #24
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	08015808 	.word	0x08015808
 800fedc:	08010521 	.word	0x08010521
 800fee0:	20001b58 	.word	0x20001b58
 800fee4:	20001660 	.word	0x20001660
 800fee8:	20000060 	.word	0x20000060
 800feec:	20001b54 	.word	0x20001b54
 800fef0:	20001b40 	.word	0x20001b40
 800fef4:	20001b38 	.word	0x20001b38

0800fef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fefc:	4b04      	ldr	r3, [pc, #16]	; (800ff10 <vTaskSuspendAll+0x18>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	3301      	adds	r3, #1
 800ff02:	4a03      	ldr	r2, [pc, #12]	; (800ff10 <vTaskSuspendAll+0x18>)
 800ff04:	6013      	str	r3, [r2, #0]
}
 800ff06:	bf00      	nop
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bc80      	pop	{r7}
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	20001b5c 	.word	0x20001b5c

0800ff14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ff22:	4b42      	ldr	r3, [pc, #264]	; (801002c <xTaskResumeAll+0x118>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d10a      	bne.n	800ff40 <xTaskResumeAll+0x2c>
	__asm volatile
 800ff2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2e:	f383 8811 	msr	BASEPRI, r3
 800ff32:	f3bf 8f6f 	isb	sy
 800ff36:	f3bf 8f4f 	dsb	sy
 800ff3a:	603b      	str	r3, [r7, #0]
}
 800ff3c:	bf00      	nop
 800ff3e:	e7fe      	b.n	800ff3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ff40:	f001 f8ac 	bl	801109c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ff44:	4b39      	ldr	r3, [pc, #228]	; (801002c <xTaskResumeAll+0x118>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	4a38      	ldr	r2, [pc, #224]	; (801002c <xTaskResumeAll+0x118>)
 800ff4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff4e:	4b37      	ldr	r3, [pc, #220]	; (801002c <xTaskResumeAll+0x118>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d162      	bne.n	801001c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff56:	4b36      	ldr	r3, [pc, #216]	; (8010030 <xTaskResumeAll+0x11c>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d05e      	beq.n	801001c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff5e:	e02f      	b.n	800ffc0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ff60:	4b34      	ldr	r3, [pc, #208]	; (8010034 <xTaskResumeAll+0x120>)
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	3318      	adds	r3, #24
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff f823 	bl	800efb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7ff f81e 	bl	800efb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff80:	4b2d      	ldr	r3, [pc, #180]	; (8010038 <xTaskResumeAll+0x124>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d903      	bls.n	800ff90 <xTaskResumeAll+0x7c>
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8c:	4a2a      	ldr	r2, [pc, #168]	; (8010038 <xTaskResumeAll+0x124>)
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff94:	4613      	mov	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	4413      	add	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4a27      	ldr	r2, [pc, #156]	; (801003c <xTaskResumeAll+0x128>)
 800ff9e:	441a      	add	r2, r3
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	f7fe ffab 	bl	800ef02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb0:	4b23      	ldr	r3, [pc, #140]	; (8010040 <xTaskResumeAll+0x12c>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d302      	bcc.n	800ffc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ffba:	4b22      	ldr	r3, [pc, #136]	; (8010044 <xTaskResumeAll+0x130>)
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffc0:	4b1c      	ldr	r3, [pc, #112]	; (8010034 <xTaskResumeAll+0x120>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1cb      	bne.n	800ff60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ffce:	f000 fb61 	bl	8010694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ffd2:	4b1d      	ldr	r3, [pc, #116]	; (8010048 <xTaskResumeAll+0x134>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d010      	beq.n	8010000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ffde:	f000 f845 	bl	801006c <xTaskIncrementTick>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ffe8:	4b16      	ldr	r3, [pc, #88]	; (8010044 <xTaskResumeAll+0x130>)
 800ffea:	2201      	movs	r2, #1
 800ffec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	3b01      	subs	r3, #1
 800fff2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d1f1      	bne.n	800ffde <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800fffa:	4b13      	ldr	r3, [pc, #76]	; (8010048 <xTaskResumeAll+0x134>)
 800fffc:	2200      	movs	r2, #0
 800fffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010000:	4b10      	ldr	r3, [pc, #64]	; (8010044 <xTaskResumeAll+0x130>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d009      	beq.n	801001c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010008:	2301      	movs	r3, #1
 801000a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801000c:	4b0f      	ldr	r3, [pc, #60]	; (801004c <xTaskResumeAll+0x138>)
 801000e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	f3bf 8f4f 	dsb	sy
 8010018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801001c:	f001 f86e 	bl	80110fc <vPortExitCritical>

	return xAlreadyYielded;
 8010020:	68bb      	ldr	r3, [r7, #8]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20001b5c 	.word	0x20001b5c
 8010030:	20001b34 	.word	0x20001b34
 8010034:	20001af4 	.word	0x20001af4
 8010038:	20001b3c 	.word	0x20001b3c
 801003c:	20001664 	.word	0x20001664
 8010040:	20001660 	.word	0x20001660
 8010044:	20001b48 	.word	0x20001b48
 8010048:	20001b44 	.word	0x20001b44
 801004c:	e000ed04 	.word	0xe000ed04

08010050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010056:	4b04      	ldr	r3, [pc, #16]	; (8010068 <xTaskGetTickCount+0x18>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801005c:	687b      	ldr	r3, [r7, #4]
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	bc80      	pop	{r7}
 8010066:	4770      	bx	lr
 8010068:	20001b38 	.word	0x20001b38

0801006c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b086      	sub	sp, #24
 8010070:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010072:	2300      	movs	r3, #0
 8010074:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010076:	4b51      	ldr	r3, [pc, #324]	; (80101bc <xTaskIncrementTick+0x150>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	f040 808e 	bne.w	801019c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010080:	4b4f      	ldr	r3, [pc, #316]	; (80101c0 <xTaskIncrementTick+0x154>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3301      	adds	r3, #1
 8010086:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010088:	4a4d      	ldr	r2, [pc, #308]	; (80101c0 <xTaskIncrementTick+0x154>)
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d120      	bne.n	80100d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010094:	4b4b      	ldr	r3, [pc, #300]	; (80101c4 <xTaskIncrementTick+0x158>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00a      	beq.n	80100b4 <xTaskIncrementTick+0x48>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	603b      	str	r3, [r7, #0]
}
 80100b0:	bf00      	nop
 80100b2:	e7fe      	b.n	80100b2 <xTaskIncrementTick+0x46>
 80100b4:	4b43      	ldr	r3, [pc, #268]	; (80101c4 <xTaskIncrementTick+0x158>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	60fb      	str	r3, [r7, #12]
 80100ba:	4b43      	ldr	r3, [pc, #268]	; (80101c8 <xTaskIncrementTick+0x15c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a41      	ldr	r2, [pc, #260]	; (80101c4 <xTaskIncrementTick+0x158>)
 80100c0:	6013      	str	r3, [r2, #0]
 80100c2:	4a41      	ldr	r2, [pc, #260]	; (80101c8 <xTaskIncrementTick+0x15c>)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6013      	str	r3, [r2, #0]
 80100c8:	4b40      	ldr	r3, [pc, #256]	; (80101cc <xTaskIncrementTick+0x160>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	3301      	adds	r3, #1
 80100ce:	4a3f      	ldr	r2, [pc, #252]	; (80101cc <xTaskIncrementTick+0x160>)
 80100d0:	6013      	str	r3, [r2, #0]
 80100d2:	f000 fadf 	bl	8010694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80100d6:	4b3e      	ldr	r3, [pc, #248]	; (80101d0 <xTaskIncrementTick+0x164>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	693a      	ldr	r2, [r7, #16]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d34e      	bcc.n	801017e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100e0:	4b38      	ldr	r3, [pc, #224]	; (80101c4 <xTaskIncrementTick+0x158>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d101      	bne.n	80100ee <xTaskIncrementTick+0x82>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e000      	b.n	80100f0 <xTaskIncrementTick+0x84>
 80100ee:	2300      	movs	r3, #0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d004      	beq.n	80100fe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100f4:	4b36      	ldr	r3, [pc, #216]	; (80101d0 <xTaskIncrementTick+0x164>)
 80100f6:	f04f 32ff 	mov.w	r2, #4294967295
 80100fa:	601a      	str	r2, [r3, #0]
					break;
 80100fc:	e03f      	b.n	801017e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80100fe:	4b31      	ldr	r3, [pc, #196]	; (80101c4 <xTaskIncrementTick+0x158>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	429a      	cmp	r2, r3
 8010114:	d203      	bcs.n	801011e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010116:	4a2e      	ldr	r2, [pc, #184]	; (80101d0 <xTaskIncrementTick+0x164>)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6013      	str	r3, [r2, #0]
						break;
 801011c:	e02f      	b.n	801017e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	3304      	adds	r3, #4
 8010122:	4618      	mov	r0, r3
 8010124:	f7fe ff48 	bl	800efb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012c:	2b00      	cmp	r3, #0
 801012e:	d004      	beq.n	801013a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	3318      	adds	r3, #24
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe ff3f 	bl	800efb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801013e:	4b25      	ldr	r3, [pc, #148]	; (80101d4 <xTaskIncrementTick+0x168>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	429a      	cmp	r2, r3
 8010144:	d903      	bls.n	801014e <xTaskIncrementTick+0xe2>
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801014a:	4a22      	ldr	r2, [pc, #136]	; (80101d4 <xTaskIncrementTick+0x168>)
 801014c:	6013      	str	r3, [r2, #0]
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010152:	4613      	mov	r3, r2
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	4413      	add	r3, r2
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	4a1f      	ldr	r2, [pc, #124]	; (80101d8 <xTaskIncrementTick+0x16c>)
 801015c:	441a      	add	r2, r3
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	3304      	adds	r3, #4
 8010162:	4619      	mov	r1, r3
 8010164:	4610      	mov	r0, r2
 8010166:	f7fe fecc 	bl	800ef02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801016e:	4b1b      	ldr	r3, [pc, #108]	; (80101dc <xTaskIncrementTick+0x170>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010174:	429a      	cmp	r2, r3
 8010176:	d3b3      	bcc.n	80100e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010178:	2301      	movs	r3, #1
 801017a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801017c:	e7b0      	b.n	80100e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801017e:	4b17      	ldr	r3, [pc, #92]	; (80101dc <xTaskIncrementTick+0x170>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010184:	4914      	ldr	r1, [pc, #80]	; (80101d8 <xTaskIncrementTick+0x16c>)
 8010186:	4613      	mov	r3, r2
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	4413      	add	r3, r2
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	440b      	add	r3, r1
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2b01      	cmp	r3, #1
 8010194:	d907      	bls.n	80101a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010196:	2301      	movs	r3, #1
 8010198:	617b      	str	r3, [r7, #20]
 801019a:	e004      	b.n	80101a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801019c:	4b10      	ldr	r3, [pc, #64]	; (80101e0 <xTaskIncrementTick+0x174>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3301      	adds	r3, #1
 80101a2:	4a0f      	ldr	r2, [pc, #60]	; (80101e0 <xTaskIncrementTick+0x174>)
 80101a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80101a6:	4b0f      	ldr	r3, [pc, #60]	; (80101e4 <xTaskIncrementTick+0x178>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d001      	beq.n	80101b2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80101ae:	2301      	movs	r3, #1
 80101b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80101b2:	697b      	ldr	r3, [r7, #20]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3718      	adds	r7, #24
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	20001b5c 	.word	0x20001b5c
 80101c0:	20001b38 	.word	0x20001b38
 80101c4:	20001aec 	.word	0x20001aec
 80101c8:	20001af0 	.word	0x20001af0
 80101cc:	20001b4c 	.word	0x20001b4c
 80101d0:	20001b54 	.word	0x20001b54
 80101d4:	20001b3c 	.word	0x20001b3c
 80101d8:	20001664 	.word	0x20001664
 80101dc:	20001660 	.word	0x20001660
 80101e0:	20001b44 	.word	0x20001b44
 80101e4:	20001b48 	.word	0x20001b48

080101e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101ee:	4b2a      	ldr	r3, [pc, #168]	; (8010298 <vTaskSwitchContext+0xb0>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d003      	beq.n	80101fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101f6:	4b29      	ldr	r3, [pc, #164]	; (801029c <vTaskSwitchContext+0xb4>)
 80101f8:	2201      	movs	r2, #1
 80101fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101fc:	e046      	b.n	801028c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80101fe:	4b27      	ldr	r3, [pc, #156]	; (801029c <vTaskSwitchContext+0xb4>)
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010204:	4b26      	ldr	r3, [pc, #152]	; (80102a0 <vTaskSwitchContext+0xb8>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	60fb      	str	r3, [r7, #12]
 801020a:	e010      	b.n	801022e <vTaskSwitchContext+0x46>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d10a      	bne.n	8010228 <vTaskSwitchContext+0x40>
	__asm volatile
 8010212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010216:	f383 8811 	msr	BASEPRI, r3
 801021a:	f3bf 8f6f 	isb	sy
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	607b      	str	r3, [r7, #4]
}
 8010224:	bf00      	nop
 8010226:	e7fe      	b.n	8010226 <vTaskSwitchContext+0x3e>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	3b01      	subs	r3, #1
 801022c:	60fb      	str	r3, [r7, #12]
 801022e:	491d      	ldr	r1, [pc, #116]	; (80102a4 <vTaskSwitchContext+0xbc>)
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	4613      	mov	r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4413      	add	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	440b      	add	r3, r1
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d0e4      	beq.n	801020c <vTaskSwitchContext+0x24>
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	4613      	mov	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	4413      	add	r3, r2
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4a15      	ldr	r2, [pc, #84]	; (80102a4 <vTaskSwitchContext+0xbc>)
 801024e:	4413      	add	r3, r2
 8010250:	60bb      	str	r3, [r7, #8]
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	685a      	ldr	r2, [r3, #4]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	605a      	str	r2, [r3, #4]
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	3308      	adds	r3, #8
 8010264:	429a      	cmp	r2, r3
 8010266:	d104      	bne.n	8010272 <vTaskSwitchContext+0x8a>
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	605a      	str	r2, [r3, #4]
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	4a0b      	ldr	r2, [pc, #44]	; (80102a8 <vTaskSwitchContext+0xc0>)
 801027a:	6013      	str	r3, [r2, #0]
 801027c:	4a08      	ldr	r2, [pc, #32]	; (80102a0 <vTaskSwitchContext+0xb8>)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010282:	4b09      	ldr	r3, [pc, #36]	; (80102a8 <vTaskSwitchContext+0xc0>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	3354      	adds	r3, #84	; 0x54
 8010288:	4a08      	ldr	r2, [pc, #32]	; (80102ac <vTaskSwitchContext+0xc4>)
 801028a:	6013      	str	r3, [r2, #0]
}
 801028c:	bf00      	nop
 801028e:	3714      	adds	r7, #20
 8010290:	46bd      	mov	sp, r7
 8010292:	bc80      	pop	{r7}
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	20001b5c 	.word	0x20001b5c
 801029c:	20001b48 	.word	0x20001b48
 80102a0:	20001b3c 	.word	0x20001b3c
 80102a4:	20001664 	.word	0x20001664
 80102a8:	20001660 	.word	0x20001660
 80102ac:	20000060 	.word	0x20000060

080102b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10a      	bne.n	80102d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80102c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c4:	f383 8811 	msr	BASEPRI, r3
 80102c8:	f3bf 8f6f 	isb	sy
 80102cc:	f3bf 8f4f 	dsb	sy
 80102d0:	60fb      	str	r3, [r7, #12]
}
 80102d2:	bf00      	nop
 80102d4:	e7fe      	b.n	80102d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102d6:	4b07      	ldr	r3, [pc, #28]	; (80102f4 <vTaskPlaceOnEventList+0x44>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3318      	adds	r3, #24
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7fe fe32 	bl	800ef48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80102e4:	2101      	movs	r1, #1
 80102e6:	6838      	ldr	r0, [r7, #0]
 80102e8:	f000 fa84 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
}
 80102ec:	bf00      	nop
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20001660 	.word	0x20001660

080102f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d10a      	bne.n	8010320 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801030a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030e:	f383 8811 	msr	BASEPRI, r3
 8010312:	f3bf 8f6f 	isb	sy
 8010316:	f3bf 8f4f 	dsb	sy
 801031a:	617b      	str	r3, [r7, #20]
}
 801031c:	bf00      	nop
 801031e:	e7fe      	b.n	801031e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010320:	4b0a      	ldr	r3, [pc, #40]	; (801034c <vTaskPlaceOnEventListRestricted+0x54>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3318      	adds	r3, #24
 8010326:	4619      	mov	r1, r3
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f7fe fdea 	bl	800ef02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010334:	f04f 33ff 	mov.w	r3, #4294967295
 8010338:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	68b8      	ldr	r0, [r7, #8]
 801033e:	f000 fa59 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
	}
 8010342:	bf00      	nop
 8010344:	3718      	adds	r7, #24
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	20001660 	.word	0x20001660

08010350 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d10a      	bne.n	801037c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	60fb      	str	r3, [r7, #12]
}
 8010378:	bf00      	nop
 801037a:	e7fe      	b.n	801037a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	3318      	adds	r3, #24
 8010380:	4618      	mov	r0, r3
 8010382:	f7fe fe19 	bl	800efb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010386:	4b1e      	ldr	r3, [pc, #120]	; (8010400 <xTaskRemoveFromEventList+0xb0>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d11d      	bne.n	80103ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	3304      	adds	r3, #4
 8010392:	4618      	mov	r0, r3
 8010394:	f7fe fe10 	bl	800efb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801039c:	4b19      	ldr	r3, [pc, #100]	; (8010404 <xTaskRemoveFromEventList+0xb4>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d903      	bls.n	80103ac <xTaskRemoveFromEventList+0x5c>
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a8:	4a16      	ldr	r2, [pc, #88]	; (8010404 <xTaskRemoveFromEventList+0xb4>)
 80103aa:	6013      	str	r3, [r2, #0]
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b0:	4613      	mov	r3, r2
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4a13      	ldr	r2, [pc, #76]	; (8010408 <xTaskRemoveFromEventList+0xb8>)
 80103ba:	441a      	add	r2, r3
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	3304      	adds	r3, #4
 80103c0:	4619      	mov	r1, r3
 80103c2:	4610      	mov	r0, r2
 80103c4:	f7fe fd9d 	bl	800ef02 <vListInsertEnd>
 80103c8:	e005      	b.n	80103d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	3318      	adds	r3, #24
 80103ce:	4619      	mov	r1, r3
 80103d0:	480e      	ldr	r0, [pc, #56]	; (801040c <xTaskRemoveFromEventList+0xbc>)
 80103d2:	f7fe fd96 	bl	800ef02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103da:	4b0d      	ldr	r3, [pc, #52]	; (8010410 <xTaskRemoveFromEventList+0xc0>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d905      	bls.n	80103f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80103e4:	2301      	movs	r3, #1
 80103e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80103e8:	4b0a      	ldr	r3, [pc, #40]	; (8010414 <xTaskRemoveFromEventList+0xc4>)
 80103ea:	2201      	movs	r2, #1
 80103ec:	601a      	str	r2, [r3, #0]
 80103ee:	e001      	b.n	80103f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80103f0:	2300      	movs	r3, #0
 80103f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80103f4:	697b      	ldr	r3, [r7, #20]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3718      	adds	r7, #24
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	20001b5c 	.word	0x20001b5c
 8010404:	20001b3c 	.word	0x20001b3c
 8010408:	20001664 	.word	0x20001664
 801040c:	20001af4 	.word	0x20001af4
 8010410:	20001660 	.word	0x20001660
 8010414:	20001b48 	.word	0x20001b48

08010418 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010420:	4b06      	ldr	r3, [pc, #24]	; (801043c <vTaskInternalSetTimeOutState+0x24>)
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010428:	4b05      	ldr	r3, [pc, #20]	; (8010440 <vTaskInternalSetTimeOutState+0x28>)
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	605a      	str	r2, [r3, #4]
}
 8010430:	bf00      	nop
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	bc80      	pop	{r7}
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	20001b4c 	.word	0x20001b4c
 8010440:	20001b38 	.word	0x20001b38

08010444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10a      	bne.n	801046a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	f383 8811 	msr	BASEPRI, r3
 801045c:	f3bf 8f6f 	isb	sy
 8010460:	f3bf 8f4f 	dsb	sy
 8010464:	613b      	str	r3, [r7, #16]
}
 8010466:	bf00      	nop
 8010468:	e7fe      	b.n	8010468 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d10a      	bne.n	8010486 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010474:	f383 8811 	msr	BASEPRI, r3
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	f3bf 8f4f 	dsb	sy
 8010480:	60fb      	str	r3, [r7, #12]
}
 8010482:	bf00      	nop
 8010484:	e7fe      	b.n	8010484 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010486:	f000 fe09 	bl	801109c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801048a:	4b1d      	ldr	r3, [pc, #116]	; (8010500 <xTaskCheckForTimeOut+0xbc>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a2:	d102      	bne.n	80104aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80104a4:	2300      	movs	r3, #0
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	e023      	b.n	80104f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	4b15      	ldr	r3, [pc, #84]	; (8010504 <xTaskCheckForTimeOut+0xc0>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d007      	beq.n	80104c6 <xTaskCheckForTimeOut+0x82>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	69ba      	ldr	r2, [r7, #24]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d302      	bcc.n	80104c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80104c0:	2301      	movs	r3, #1
 80104c2:	61fb      	str	r3, [r7, #28]
 80104c4:	e015      	b.n	80104f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d20b      	bcs.n	80104e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	1ad2      	subs	r2, r2, r3
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7ff ff9b 	bl	8010418 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80104e2:	2300      	movs	r3, #0
 80104e4:	61fb      	str	r3, [r7, #28]
 80104e6:	e004      	b.n	80104f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	2200      	movs	r2, #0
 80104ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80104ee:	2301      	movs	r3, #1
 80104f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80104f2:	f000 fe03 	bl	80110fc <vPortExitCritical>

	return xReturn;
 80104f6:	69fb      	ldr	r3, [r7, #28]
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3720      	adds	r7, #32
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	20001b38 	.word	0x20001b38
 8010504:	20001b4c 	.word	0x20001b4c

08010508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010508:	b480      	push	{r7}
 801050a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801050c:	4b03      	ldr	r3, [pc, #12]	; (801051c <vTaskMissedYield+0x14>)
 801050e:	2201      	movs	r2, #1
 8010510:	601a      	str	r2, [r3, #0]
}
 8010512:	bf00      	nop
 8010514:	46bd      	mov	sp, r7
 8010516:	bc80      	pop	{r7}
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop
 801051c:	20001b48 	.word	0x20001b48

08010520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010528:	f000 f852 	bl	80105d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801052c:	4b06      	ldr	r3, [pc, #24]	; (8010548 <prvIdleTask+0x28>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b01      	cmp	r3, #1
 8010532:	d9f9      	bls.n	8010528 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010534:	4b05      	ldr	r3, [pc, #20]	; (801054c <prvIdleTask+0x2c>)
 8010536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801053a:	601a      	str	r2, [r3, #0]
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010544:	e7f0      	b.n	8010528 <prvIdleTask+0x8>
 8010546:	bf00      	nop
 8010548:	20001664 	.word	0x20001664
 801054c:	e000ed04 	.word	0xe000ed04

08010550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010556:	2300      	movs	r3, #0
 8010558:	607b      	str	r3, [r7, #4]
 801055a:	e00c      	b.n	8010576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	4613      	mov	r3, r2
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	4413      	add	r3, r2
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	4a12      	ldr	r2, [pc, #72]	; (80105b0 <prvInitialiseTaskLists+0x60>)
 8010568:	4413      	add	r3, r2
 801056a:	4618      	mov	r0, r3
 801056c:	f7fe fc9e 	bl	800eeac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	3301      	adds	r3, #1
 8010574:	607b      	str	r3, [r7, #4]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b37      	cmp	r3, #55	; 0x37
 801057a:	d9ef      	bls.n	801055c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801057c:	480d      	ldr	r0, [pc, #52]	; (80105b4 <prvInitialiseTaskLists+0x64>)
 801057e:	f7fe fc95 	bl	800eeac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010582:	480d      	ldr	r0, [pc, #52]	; (80105b8 <prvInitialiseTaskLists+0x68>)
 8010584:	f7fe fc92 	bl	800eeac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010588:	480c      	ldr	r0, [pc, #48]	; (80105bc <prvInitialiseTaskLists+0x6c>)
 801058a:	f7fe fc8f 	bl	800eeac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801058e:	480c      	ldr	r0, [pc, #48]	; (80105c0 <prvInitialiseTaskLists+0x70>)
 8010590:	f7fe fc8c 	bl	800eeac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010594:	480b      	ldr	r0, [pc, #44]	; (80105c4 <prvInitialiseTaskLists+0x74>)
 8010596:	f7fe fc89 	bl	800eeac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801059a:	4b0b      	ldr	r3, [pc, #44]	; (80105c8 <prvInitialiseTaskLists+0x78>)
 801059c:	4a05      	ldr	r2, [pc, #20]	; (80105b4 <prvInitialiseTaskLists+0x64>)
 801059e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80105a0:	4b0a      	ldr	r3, [pc, #40]	; (80105cc <prvInitialiseTaskLists+0x7c>)
 80105a2:	4a05      	ldr	r2, [pc, #20]	; (80105b8 <prvInitialiseTaskLists+0x68>)
 80105a4:	601a      	str	r2, [r3, #0]
}
 80105a6:	bf00      	nop
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	20001664 	.word	0x20001664
 80105b4:	20001ac4 	.word	0x20001ac4
 80105b8:	20001ad8 	.word	0x20001ad8
 80105bc:	20001af4 	.word	0x20001af4
 80105c0:	20001b08 	.word	0x20001b08
 80105c4:	20001b20 	.word	0x20001b20
 80105c8:	20001aec 	.word	0x20001aec
 80105cc:	20001af0 	.word	0x20001af0

080105d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105d6:	e019      	b.n	801060c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80105d8:	f000 fd60 	bl	801109c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80105dc:	4b10      	ldr	r3, [pc, #64]	; (8010620 <prvCheckTasksWaitingTermination+0x50>)
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	3304      	adds	r3, #4
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe fce5 	bl	800efb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80105ee:	4b0d      	ldr	r3, [pc, #52]	; (8010624 <prvCheckTasksWaitingTermination+0x54>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	3b01      	subs	r3, #1
 80105f4:	4a0b      	ldr	r2, [pc, #44]	; (8010624 <prvCheckTasksWaitingTermination+0x54>)
 80105f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80105f8:	4b0b      	ldr	r3, [pc, #44]	; (8010628 <prvCheckTasksWaitingTermination+0x58>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3b01      	subs	r3, #1
 80105fe:	4a0a      	ldr	r2, [pc, #40]	; (8010628 <prvCheckTasksWaitingTermination+0x58>)
 8010600:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010602:	f000 fd7b 	bl	80110fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 f810 	bl	801062c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801060c:	4b06      	ldr	r3, [pc, #24]	; (8010628 <prvCheckTasksWaitingTermination+0x58>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e1      	bne.n	80105d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010614:	bf00      	nop
 8010616:	bf00      	nop
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	20001b08 	.word	0x20001b08
 8010624:	20001b34 	.word	0x20001b34
 8010628:	20001b1c 	.word	0x20001b1c

0801062c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	3354      	adds	r3, #84	; 0x54
 8010638:	4618      	mov	r0, r3
 801063a:	f002 f973 	bl	8012924 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010644:	2b00      	cmp	r3, #0
 8010646:	d108      	bne.n	801065a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801064c:	4618      	mov	r0, r3
 801064e:	f000 fee9 	bl	8011424 <vPortFree>
				vPortFree( pxTCB );
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 fee6 	bl	8011424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010658:	e018      	b.n	801068c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010660:	2b01      	cmp	r3, #1
 8010662:	d103      	bne.n	801066c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 fedd 	bl	8011424 <vPortFree>
	}
 801066a:	e00f      	b.n	801068c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010672:	2b02      	cmp	r3, #2
 8010674:	d00a      	beq.n	801068c <prvDeleteTCB+0x60>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	60fb      	str	r3, [r7, #12]
}
 8010688:	bf00      	nop
 801068a:	e7fe      	b.n	801068a <prvDeleteTCB+0x5e>
	}
 801068c:	bf00      	nop
 801068e:	3710      	adds	r7, #16
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801069a:	4b0e      	ldr	r3, [pc, #56]	; (80106d4 <prvResetNextTaskUnblockTime+0x40>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d101      	bne.n	80106a8 <prvResetNextTaskUnblockTime+0x14>
 80106a4:	2301      	movs	r3, #1
 80106a6:	e000      	b.n	80106aa <prvResetNextTaskUnblockTime+0x16>
 80106a8:	2300      	movs	r3, #0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d004      	beq.n	80106b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80106ae:	4b0a      	ldr	r3, [pc, #40]	; (80106d8 <prvResetNextTaskUnblockTime+0x44>)
 80106b0:	f04f 32ff 	mov.w	r2, #4294967295
 80106b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80106b6:	e008      	b.n	80106ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80106b8:	4b06      	ldr	r3, [pc, #24]	; (80106d4 <prvResetNextTaskUnblockTime+0x40>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	4a04      	ldr	r2, [pc, #16]	; (80106d8 <prvResetNextTaskUnblockTime+0x44>)
 80106c8:	6013      	str	r3, [r2, #0]
}
 80106ca:	bf00      	nop
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bc80      	pop	{r7}
 80106d2:	4770      	bx	lr
 80106d4:	20001aec 	.word	0x20001aec
 80106d8:	20001b54 	.word	0x20001b54

080106dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80106e2:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <xTaskGetSchedulerState+0x34>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d102      	bne.n	80106f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80106ea:	2301      	movs	r3, #1
 80106ec:	607b      	str	r3, [r7, #4]
 80106ee:	e008      	b.n	8010702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106f0:	4b08      	ldr	r3, [pc, #32]	; (8010714 <xTaskGetSchedulerState+0x38>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d102      	bne.n	80106fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80106f8:	2302      	movs	r3, #2
 80106fa:	607b      	str	r3, [r7, #4]
 80106fc:	e001      	b.n	8010702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80106fe:	2300      	movs	r3, #0
 8010700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010702:	687b      	ldr	r3, [r7, #4]
	}
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	bc80      	pop	{r7}
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	20001b40 	.word	0x20001b40
 8010714:	20001b5c 	.word	0x20001b5c

08010718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010724:	2300      	movs	r3, #0
 8010726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d056      	beq.n	80107dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801072e:	4b2e      	ldr	r3, [pc, #184]	; (80107e8 <xTaskPriorityDisinherit+0xd0>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	693a      	ldr	r2, [r7, #16]
 8010734:	429a      	cmp	r2, r3
 8010736:	d00a      	beq.n	801074e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	60fb      	str	r3, [r7, #12]
}
 801074a:	bf00      	nop
 801074c:	e7fe      	b.n	801074c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010752:	2b00      	cmp	r3, #0
 8010754:	d10a      	bne.n	801076c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	60bb      	str	r3, [r7, #8]
}
 8010768:	bf00      	nop
 801076a:	e7fe      	b.n	801076a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010770:	1e5a      	subs	r2, r3, #1
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801077e:	429a      	cmp	r2, r3
 8010780:	d02c      	beq.n	80107dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010786:	2b00      	cmp	r3, #0
 8010788:	d128      	bne.n	80107dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	3304      	adds	r3, #4
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fc12 	bl	800efb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ac:	4b0f      	ldr	r3, [pc, #60]	; (80107ec <xTaskPriorityDisinherit+0xd4>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d903      	bls.n	80107bc <xTaskPriorityDisinherit+0xa4>
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b8:	4a0c      	ldr	r2, [pc, #48]	; (80107ec <xTaskPriorityDisinherit+0xd4>)
 80107ba:	6013      	str	r3, [r2, #0]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c0:	4613      	mov	r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	4a09      	ldr	r2, [pc, #36]	; (80107f0 <xTaskPriorityDisinherit+0xd8>)
 80107ca:	441a      	add	r2, r3
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	3304      	adds	r3, #4
 80107d0:	4619      	mov	r1, r3
 80107d2:	4610      	mov	r0, r2
 80107d4:	f7fe fb95 	bl	800ef02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80107d8:	2301      	movs	r3, #1
 80107da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107dc:	697b      	ldr	r3, [r7, #20]
	}
 80107de:	4618      	mov	r0, r3
 80107e0:	3718      	adds	r7, #24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	20001660 	.word	0x20001660
 80107ec:	20001b3c 	.word	0x20001b3c
 80107f0:	20001664 	.word	0x20001664

080107f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107fe:	4b21      	ldr	r3, [pc, #132]	; (8010884 <prvAddCurrentTaskToDelayedList+0x90>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010804:	4b20      	ldr	r3, [pc, #128]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	3304      	adds	r3, #4
 801080a:	4618      	mov	r0, r3
 801080c:	f7fe fbd4 	bl	800efb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010816:	d10a      	bne.n	801082e <prvAddCurrentTaskToDelayedList+0x3a>
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d007      	beq.n	801082e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801081e:	4b1a      	ldr	r3, [pc, #104]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	3304      	adds	r3, #4
 8010824:	4619      	mov	r1, r3
 8010826:	4819      	ldr	r0, [pc, #100]	; (801088c <prvAddCurrentTaskToDelayedList+0x98>)
 8010828:	f7fe fb6b 	bl	800ef02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801082c:	e026      	b.n	801087c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4413      	add	r3, r2
 8010834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010836:	4b14      	ldr	r3, [pc, #80]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801083e:	68ba      	ldr	r2, [r7, #8]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	429a      	cmp	r2, r3
 8010844:	d209      	bcs.n	801085a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010846:	4b12      	ldr	r3, [pc, #72]	; (8010890 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	3304      	adds	r3, #4
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7fe fb78 	bl	800ef48 <vListInsert>
}
 8010858:	e010      	b.n	801087c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801085a:	4b0e      	ldr	r3, [pc, #56]	; (8010894 <prvAddCurrentTaskToDelayedList+0xa0>)
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3304      	adds	r3, #4
 8010864:	4619      	mov	r1, r3
 8010866:	4610      	mov	r0, r2
 8010868:	f7fe fb6e 	bl	800ef48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801086c:	4b0a      	ldr	r3, [pc, #40]	; (8010898 <prvAddCurrentTaskToDelayedList+0xa4>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	429a      	cmp	r2, r3
 8010874:	d202      	bcs.n	801087c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010876:	4a08      	ldr	r2, [pc, #32]	; (8010898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	6013      	str	r3, [r2, #0]
}
 801087c:	bf00      	nop
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	20001b38 	.word	0x20001b38
 8010888:	20001660 	.word	0x20001660
 801088c:	20001b20 	.word	0x20001b20
 8010890:	20001af0 	.word	0x20001af0
 8010894:	20001aec 	.word	0x20001aec
 8010898:	20001b54 	.word	0x20001b54

0801089c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b08a      	sub	sp, #40	; 0x28
 80108a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80108a2:	2300      	movs	r3, #0
 80108a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80108a6:	f000 facb 	bl	8010e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80108aa:	4b1c      	ldr	r3, [pc, #112]	; (801091c <xTimerCreateTimerTask+0x80>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d021      	beq.n	80108f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80108b6:	2300      	movs	r3, #0
 80108b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80108ba:	1d3a      	adds	r2, r7, #4
 80108bc:	f107 0108 	add.w	r1, r7, #8
 80108c0:	f107 030c 	add.w	r3, r7, #12
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fe fad7 	bl	800ee78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80108ca:	6879      	ldr	r1, [r7, #4]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	9202      	str	r2, [sp, #8]
 80108d2:	9301      	str	r3, [sp, #4]
 80108d4:	2302      	movs	r3, #2
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	2300      	movs	r3, #0
 80108da:	460a      	mov	r2, r1
 80108dc:	4910      	ldr	r1, [pc, #64]	; (8010920 <xTimerCreateTimerTask+0x84>)
 80108de:	4811      	ldr	r0, [pc, #68]	; (8010924 <xTimerCreateTimerTask+0x88>)
 80108e0:	f7ff f8b6 	bl	800fa50 <xTaskCreateStatic>
 80108e4:	4603      	mov	r3, r0
 80108e6:	4a10      	ldr	r2, [pc, #64]	; (8010928 <xTimerCreateTimerTask+0x8c>)
 80108e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80108ea:	4b0f      	ldr	r3, [pc, #60]	; (8010928 <xTimerCreateTimerTask+0x8c>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d001      	beq.n	80108f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80108f2:	2301      	movs	r3, #1
 80108f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10a      	bne.n	8010912 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	613b      	str	r3, [r7, #16]
}
 801090e:	bf00      	nop
 8010910:	e7fe      	b.n	8010910 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010912:	697b      	ldr	r3, [r7, #20]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3718      	adds	r7, #24
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	20001b90 	.word	0x20001b90
 8010920:	08015810 	.word	0x08015810
 8010924:	08010a49 	.word	0x08010a49
 8010928:	20001b94 	.word	0x20001b94

0801092c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08a      	sub	sp, #40	; 0x28
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801093a:	2300      	movs	r3, #0
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10a      	bne.n	801095a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	623b      	str	r3, [r7, #32]
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801095a:	4b1a      	ldr	r3, [pc, #104]	; (80109c4 <xTimerGenericCommand+0x98>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d02a      	beq.n	80109b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	2b05      	cmp	r3, #5
 8010972:	dc18      	bgt.n	80109a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010974:	f7ff feb2 	bl	80106dc <xTaskGetSchedulerState>
 8010978:	4603      	mov	r3, r0
 801097a:	2b02      	cmp	r3, #2
 801097c:	d109      	bne.n	8010992 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801097e:	4b11      	ldr	r3, [pc, #68]	; (80109c4 <xTimerGenericCommand+0x98>)
 8010980:	6818      	ldr	r0, [r3, #0]
 8010982:	f107 0110 	add.w	r1, r7, #16
 8010986:	2300      	movs	r3, #0
 8010988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801098a:	f7fe fc7f 	bl	800f28c <xQueueGenericSend>
 801098e:	6278      	str	r0, [r7, #36]	; 0x24
 8010990:	e012      	b.n	80109b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010992:	4b0c      	ldr	r3, [pc, #48]	; (80109c4 <xTimerGenericCommand+0x98>)
 8010994:	6818      	ldr	r0, [r3, #0]
 8010996:	f107 0110 	add.w	r1, r7, #16
 801099a:	2300      	movs	r3, #0
 801099c:	2200      	movs	r2, #0
 801099e:	f7fe fc75 	bl	800f28c <xQueueGenericSend>
 80109a2:	6278      	str	r0, [r7, #36]	; 0x24
 80109a4:	e008      	b.n	80109b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80109a6:	4b07      	ldr	r3, [pc, #28]	; (80109c4 <xTimerGenericCommand+0x98>)
 80109a8:	6818      	ldr	r0, [r3, #0]
 80109aa:	f107 0110 	add.w	r1, r7, #16
 80109ae:	2300      	movs	r3, #0
 80109b0:	683a      	ldr	r2, [r7, #0]
 80109b2:	f7fe fd69 	bl	800f488 <xQueueGenericSendFromISR>
 80109b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80109b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3728      	adds	r7, #40	; 0x28
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20001b90 	.word	0x20001b90

080109c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b088      	sub	sp, #32
 80109cc:	af02      	add	r7, sp, #8
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109d2:	4b1c      	ldr	r3, [pc, #112]	; (8010a44 <prvProcessExpiredTimer+0x7c>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	3304      	adds	r3, #4
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fe fae9 	bl	800efb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	69db      	ldr	r3, [r3, #28]
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d122      	bne.n	8010a34 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	699a      	ldr	r2, [r3, #24]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	18d1      	adds	r1, r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	683a      	ldr	r2, [r7, #0]
 80109fa:	6978      	ldr	r0, [r7, #20]
 80109fc:	f000 f8c8 	bl	8010b90 <prvInsertTimerInActiveList>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d016      	beq.n	8010a34 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a06:	2300      	movs	r3, #0
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	2100      	movs	r1, #0
 8010a10:	6978      	ldr	r0, [r7, #20]
 8010a12:	f7ff ff8b 	bl	801092c <xTimerGenericCommand>
 8010a16:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d10a      	bne.n	8010a34 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8010a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a22:	f383 8811 	msr	BASEPRI, r3
 8010a26:	f3bf 8f6f 	isb	sy
 8010a2a:	f3bf 8f4f 	dsb	sy
 8010a2e:	60fb      	str	r3, [r7, #12]
}
 8010a30:	bf00      	nop
 8010a32:	e7fe      	b.n	8010a32 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a38:	6978      	ldr	r0, [r7, #20]
 8010a3a:	4798      	blx	r3
}
 8010a3c:	bf00      	nop
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	20001b88 	.word	0x20001b88

08010a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a50:	f107 0308 	add.w	r3, r7, #8
 8010a54:	4618      	mov	r0, r3
 8010a56:	f000 f857 	bl	8010b08 <prvGetNextExpireTime>
 8010a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	68f8      	ldr	r0, [r7, #12]
 8010a62:	f000 f803 	bl	8010a6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a66:	f000 f8d5 	bl	8010c14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a6a:	e7f1      	b.n	8010a50 <prvTimerTask+0x8>

08010a6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a76:	f7ff fa3f 	bl	800fef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a7a:	f107 0308 	add.w	r3, r7, #8
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 f866 	bl	8010b50 <prvSampleTimeNow>
 8010a84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d130      	bne.n	8010aee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d10a      	bne.n	8010aa8 <prvProcessTimerOrBlockTask+0x3c>
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d806      	bhi.n	8010aa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a9a:	f7ff fa3b 	bl	800ff14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a9e:	68f9      	ldr	r1, [r7, #12]
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff ff91 	bl	80109c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010aa6:	e024      	b.n	8010af2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d008      	beq.n	8010ac0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010aae:	4b13      	ldr	r3, [pc, #76]	; (8010afc <prvProcessTimerOrBlockTask+0x90>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	bf0c      	ite	eq
 8010ab8:	2301      	moveq	r3, #1
 8010aba:	2300      	movne	r3, #0
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010ac0:	4b0f      	ldr	r3, [pc, #60]	; (8010b00 <prvProcessTimerOrBlockTask+0x94>)
 8010ac2:	6818      	ldr	r0, [r3, #0]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	4619      	mov	r1, r3
 8010ace:	f7fe ff8b 	bl	800f9e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010ad2:	f7ff fa1f 	bl	800ff14 <xTaskResumeAll>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10a      	bne.n	8010af2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010adc:	4b09      	ldr	r3, [pc, #36]	; (8010b04 <prvProcessTimerOrBlockTask+0x98>)
 8010ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	f3bf 8f4f 	dsb	sy
 8010ae8:	f3bf 8f6f 	isb	sy
}
 8010aec:	e001      	b.n	8010af2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010aee:	f7ff fa11 	bl	800ff14 <xTaskResumeAll>
}
 8010af2:	bf00      	nop
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	20001b8c 	.word	0x20001b8c
 8010b00:	20001b90 	.word	0x20001b90
 8010b04:	e000ed04 	.word	0xe000ed04

08010b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010b10:	4b0e      	ldr	r3, [pc, #56]	; (8010b4c <prvGetNextExpireTime+0x44>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	bf0c      	ite	eq
 8010b1a:	2301      	moveq	r3, #1
 8010b1c:	2300      	movne	r3, #0
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	461a      	mov	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d105      	bne.n	8010b3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b2e:	4b07      	ldr	r3, [pc, #28]	; (8010b4c <prvGetNextExpireTime+0x44>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	60fb      	str	r3, [r7, #12]
 8010b38:	e001      	b.n	8010b3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bc80      	pop	{r7}
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop
 8010b4c:	20001b88 	.word	0x20001b88

08010b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b58:	f7ff fa7a 	bl	8010050 <xTaskGetTickCount>
 8010b5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b5e:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <prvSampleTimeNow+0x3c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d205      	bcs.n	8010b74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b68:	f000 f908 	bl	8010d7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	e002      	b.n	8010b7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b7a:	4a04      	ldr	r2, [pc, #16]	; (8010b8c <prvSampleTimeNow+0x3c>)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b80:	68fb      	ldr	r3, [r7, #12]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	20001b98 	.word	0x20001b98

08010b90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	607a      	str	r2, [r7, #4]
 8010b9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d812      	bhi.n	8010bdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	1ad2      	subs	r2, r2, r3
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	699b      	ldr	r3, [r3, #24]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d302      	bcc.n	8010bca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	617b      	str	r3, [r7, #20]
 8010bc8:	e01b      	b.n	8010c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010bca:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <prvInsertTimerInActiveList+0x7c>)
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3304      	adds	r3, #4
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	f7fe f9b7 	bl	800ef48 <vListInsert>
 8010bda:	e012      	b.n	8010c02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d206      	bcs.n	8010bf2 <prvInsertTimerInActiveList+0x62>
 8010be4:	68ba      	ldr	r2, [r7, #8]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d302      	bcc.n	8010bf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010bec:	2301      	movs	r3, #1
 8010bee:	617b      	str	r3, [r7, #20]
 8010bf0:	e007      	b.n	8010c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bf2:	4b07      	ldr	r3, [pc, #28]	; (8010c10 <prvInsertTimerInActiveList+0x80>)
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	4610      	mov	r0, r2
 8010bfe:	f7fe f9a3 	bl	800ef48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010c02:	697b      	ldr	r3, [r7, #20]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3718      	adds	r7, #24
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	20001b8c 	.word	0x20001b8c
 8010c10:	20001b88 	.word	0x20001b88

08010c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08e      	sub	sp, #56	; 0x38
 8010c18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c1a:	e09d      	b.n	8010d58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	da18      	bge.n	8010c54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010c22:	1d3b      	adds	r3, r7, #4
 8010c24:	3304      	adds	r3, #4
 8010c26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d10a      	bne.n	8010c44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c32:	f383 8811 	msr	BASEPRI, r3
 8010c36:	f3bf 8f6f 	isb	sy
 8010c3a:	f3bf 8f4f 	dsb	sy
 8010c3e:	61fb      	str	r3, [r7, #28]
}
 8010c40:	bf00      	nop
 8010c42:	e7fe      	b.n	8010c42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c4a:	6850      	ldr	r0, [r2, #4]
 8010c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c4e:	6892      	ldr	r2, [r2, #8]
 8010c50:	4611      	mov	r1, r2
 8010c52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	db7d      	blt.n	8010d56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	695b      	ldr	r3, [r3, #20]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d004      	beq.n	8010c70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c68:	3304      	adds	r3, #4
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fe f9a4 	bl	800efb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c70:	463b      	mov	r3, r7
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff ff6c 	bl	8010b50 <prvSampleTimeNow>
 8010c78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2b09      	cmp	r3, #9
 8010c7e:	d86b      	bhi.n	8010d58 <prvProcessReceivedCommands+0x144>
 8010c80:	a201      	add	r2, pc, #4	; (adr r2, 8010c88 <prvProcessReceivedCommands+0x74>)
 8010c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c86:	bf00      	nop
 8010c88:	08010cb1 	.word	0x08010cb1
 8010c8c:	08010cb1 	.word	0x08010cb1
 8010c90:	08010cb1 	.word	0x08010cb1
 8010c94:	08010d59 	.word	0x08010d59
 8010c98:	08010d0d 	.word	0x08010d0d
 8010c9c:	08010d45 	.word	0x08010d45
 8010ca0:	08010cb1 	.word	0x08010cb1
 8010ca4:	08010cb1 	.word	0x08010cb1
 8010ca8:	08010d59 	.word	0x08010d59
 8010cac:	08010d0d 	.word	0x08010d0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010cb0:	68ba      	ldr	r2, [r7, #8]
 8010cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb4:	699b      	ldr	r3, [r3, #24]
 8010cb6:	18d1      	adds	r1, r2, r3
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cbe:	f7ff ff67 	bl	8010b90 <prvInsertTimerInActiveList>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d047      	beq.n	8010d58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	69db      	ldr	r3, [r3, #28]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d13f      	bne.n	8010d58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cdc:	699b      	ldr	r3, [r3, #24]
 8010cde:	441a      	add	r2, r3
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cea:	f7ff fe1f 	bl	801092c <xTimerGenericCommand>
 8010cee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010cf0:	6a3b      	ldr	r3, [r7, #32]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d130      	bne.n	8010d58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8010cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfa:	f383 8811 	msr	BASEPRI, r3
 8010cfe:	f3bf 8f6f 	isb	sy
 8010d02:	f3bf 8f4f 	dsb	sy
 8010d06:	61bb      	str	r3, [r7, #24]
}
 8010d08:	bf00      	nop
 8010d0a:	e7fe      	b.n	8010d0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010d0c:	68ba      	ldr	r2, [r7, #8]
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	699b      	ldr	r3, [r3, #24]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10a      	bne.n	8010d30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8010d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	617b      	str	r3, [r7, #20]
}
 8010d2c:	bf00      	nop
 8010d2e:	e7fe      	b.n	8010d2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	699a      	ldr	r2, [r3, #24]
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	18d1      	adds	r1, r2, r3
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d3e:	f7ff ff27 	bl	8010b90 <prvInsertTimerInActiveList>
					break;
 8010d42:	e009      	b.n	8010d58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d104      	bne.n	8010d58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8010d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d50:	f000 fb68 	bl	8011424 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d54:	e000      	b.n	8010d58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <prvProcessReceivedCommands+0x164>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	1d39      	adds	r1, r7, #4
 8010d5e:	2200      	movs	r2, #0
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7fe fc29 	bl	800f5b8 <xQueueReceive>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f47f af57 	bne.w	8010c1c <prvProcessReceivedCommands+0x8>
	}
}
 8010d6e:	bf00      	nop
 8010d70:	bf00      	nop
 8010d72:	3730      	adds	r7, #48	; 0x30
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	20001b90 	.word	0x20001b90

08010d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b088      	sub	sp, #32
 8010d80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d82:	e045      	b.n	8010e10 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d84:	4b2c      	ldr	r3, [pc, #176]	; (8010e38 <prvSwitchTimerLists+0xbc>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d8e:	4b2a      	ldr	r3, [pc, #168]	; (8010e38 <prvSwitchTimerLists+0xbc>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe f90b 	bl	800efb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	69db      	ldr	r3, [r3, #28]
 8010dae:	2b01      	cmp	r3, #1
 8010db0:	d12e      	bne.n	8010e10 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	693a      	ldr	r2, [r7, #16]
 8010db8:	4413      	add	r3, r2
 8010dba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d90e      	bls.n	8010de2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	68fa      	ldr	r2, [r7, #12]
 8010dce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dd0:	4b19      	ldr	r3, [pc, #100]	; (8010e38 <prvSwitchTimerLists+0xbc>)
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	4619      	mov	r1, r3
 8010dda:	4610      	mov	r0, r2
 8010ddc:	f7fe f8b4 	bl	800ef48 <vListInsert>
 8010de0:	e016      	b.n	8010e10 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010de2:	2300      	movs	r3, #0
 8010de4:	9300      	str	r3, [sp, #0]
 8010de6:	2300      	movs	r3, #0
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	2100      	movs	r1, #0
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7ff fd9d 	bl	801092c <xTimerGenericCommand>
 8010df2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d10a      	bne.n	8010e10 <prvSwitchTimerLists+0x94>
	__asm volatile
 8010dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfe:	f383 8811 	msr	BASEPRI, r3
 8010e02:	f3bf 8f6f 	isb	sy
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	603b      	str	r3, [r7, #0]
}
 8010e0c:	bf00      	nop
 8010e0e:	e7fe      	b.n	8010e0e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e10:	4b09      	ldr	r3, [pc, #36]	; (8010e38 <prvSwitchTimerLists+0xbc>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1b4      	bne.n	8010d84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e1a:	4b07      	ldr	r3, [pc, #28]	; (8010e38 <prvSwitchTimerLists+0xbc>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e20:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <prvSwitchTimerLists+0xc0>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4a04      	ldr	r2, [pc, #16]	; (8010e38 <prvSwitchTimerLists+0xbc>)
 8010e26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e28:	4a04      	ldr	r2, [pc, #16]	; (8010e3c <prvSwitchTimerLists+0xc0>)
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	6013      	str	r3, [r2, #0]
}
 8010e2e:	bf00      	nop
 8010e30:	3718      	adds	r7, #24
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	20001b88 	.word	0x20001b88
 8010e3c:	20001b8c 	.word	0x20001b8c

08010e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e46:	f000 f929 	bl	801109c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e4a:	4b15      	ldr	r3, [pc, #84]	; (8010ea0 <prvCheckForValidListAndQueue+0x60>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d120      	bne.n	8010e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e52:	4814      	ldr	r0, [pc, #80]	; (8010ea4 <prvCheckForValidListAndQueue+0x64>)
 8010e54:	f7fe f82a 	bl	800eeac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e58:	4813      	ldr	r0, [pc, #76]	; (8010ea8 <prvCheckForValidListAndQueue+0x68>)
 8010e5a:	f7fe f827 	bl	800eeac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e5e:	4b13      	ldr	r3, [pc, #76]	; (8010eac <prvCheckForValidListAndQueue+0x6c>)
 8010e60:	4a10      	ldr	r2, [pc, #64]	; (8010ea4 <prvCheckForValidListAndQueue+0x64>)
 8010e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e64:	4b12      	ldr	r3, [pc, #72]	; (8010eb0 <prvCheckForValidListAndQueue+0x70>)
 8010e66:	4a10      	ldr	r2, [pc, #64]	; (8010ea8 <prvCheckForValidListAndQueue+0x68>)
 8010e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	4b11      	ldr	r3, [pc, #68]	; (8010eb4 <prvCheckForValidListAndQueue+0x74>)
 8010e70:	4a11      	ldr	r2, [pc, #68]	; (8010eb8 <prvCheckForValidListAndQueue+0x78>)
 8010e72:	2110      	movs	r1, #16
 8010e74:	200a      	movs	r0, #10
 8010e76:	f7fe f931 	bl	800f0dc <xQueueGenericCreateStatic>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	4a08      	ldr	r2, [pc, #32]	; (8010ea0 <prvCheckForValidListAndQueue+0x60>)
 8010e7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e80:	4b07      	ldr	r3, [pc, #28]	; (8010ea0 <prvCheckForValidListAndQueue+0x60>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d005      	beq.n	8010e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e88:	4b05      	ldr	r3, [pc, #20]	; (8010ea0 <prvCheckForValidListAndQueue+0x60>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	490b      	ldr	r1, [pc, #44]	; (8010ebc <prvCheckForValidListAndQueue+0x7c>)
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fe fd82 	bl	800f998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e94:	f000 f932 	bl	80110fc <vPortExitCritical>
}
 8010e98:	bf00      	nop
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	20001b90 	.word	0x20001b90
 8010ea4:	20001b60 	.word	0x20001b60
 8010ea8:	20001b74 	.word	0x20001b74
 8010eac:	20001b88 	.word	0x20001b88
 8010eb0:	20001b8c 	.word	0x20001b8c
 8010eb4:	20001c3c 	.word	0x20001c3c
 8010eb8:	20001b9c 	.word	0x20001b9c
 8010ebc:	08015818 	.word	0x08015818

08010ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	3b04      	subs	r3, #4
 8010ed0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	3b04      	subs	r3, #4
 8010ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	f023 0201 	bic.w	r2, r3, #1
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	3b04      	subs	r3, #4
 8010eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ef0:	4a08      	ldr	r2, [pc, #32]	; (8010f14 <pxPortInitialiseStack+0x54>)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	3b14      	subs	r3, #20
 8010efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	3b20      	subs	r3, #32
 8010f06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f08:	68fb      	ldr	r3, [r7, #12]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bc80      	pop	{r7}
 8010f12:	4770      	bx	lr
 8010f14:	08010f19 	.word	0x08010f19

08010f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f22:	4b12      	ldr	r3, [pc, #72]	; (8010f6c <prvTaskExitError+0x54>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2a:	d00a      	beq.n	8010f42 <prvTaskExitError+0x2a>
	__asm volatile
 8010f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f30:	f383 8811 	msr	BASEPRI, r3
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	60fb      	str	r3, [r7, #12]
}
 8010f3e:	bf00      	nop
 8010f40:	e7fe      	b.n	8010f40 <prvTaskExitError+0x28>
	__asm volatile
 8010f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f46:	f383 8811 	msr	BASEPRI, r3
 8010f4a:	f3bf 8f6f 	isb	sy
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	60bb      	str	r3, [r7, #8]
}
 8010f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f56:	bf00      	nop
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d0fc      	beq.n	8010f58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010f5e:	bf00      	nop
 8010f60:	bf00      	nop
 8010f62:	3714      	adds	r7, #20
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bc80      	pop	{r7}
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	2000005c 	.word	0x2000005c

08010f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010f70:	4b07      	ldr	r3, [pc, #28]	; (8010f90 <pxCurrentTCBConst2>)
 8010f72:	6819      	ldr	r1, [r3, #0]
 8010f74:	6808      	ldr	r0, [r1, #0]
 8010f76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010f7a:	f380 8809 	msr	PSP, r0
 8010f7e:	f3bf 8f6f 	isb	sy
 8010f82:	f04f 0000 	mov.w	r0, #0
 8010f86:	f380 8811 	msr	BASEPRI, r0
 8010f8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8010f8e:	4770      	bx	lr

08010f90 <pxCurrentTCBConst2>:
 8010f90:	20001660 	.word	0x20001660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010f94:	bf00      	nop
 8010f96:	bf00      	nop

08010f98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010f98:	4806      	ldr	r0, [pc, #24]	; (8010fb4 <prvPortStartFirstTask+0x1c>)
 8010f9a:	6800      	ldr	r0, [r0, #0]
 8010f9c:	6800      	ldr	r0, [r0, #0]
 8010f9e:	f380 8808 	msr	MSP, r0
 8010fa2:	b662      	cpsie	i
 8010fa4:	b661      	cpsie	f
 8010fa6:	f3bf 8f4f 	dsb	sy
 8010faa:	f3bf 8f6f 	isb	sy
 8010fae:	df00      	svc	0
 8010fb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010fb2:	bf00      	nop
 8010fb4:	e000ed08 	.word	0xe000ed08

08010fb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010fbe:	4b32      	ldr	r3, [pc, #200]	; (8011088 <xPortStartScheduler+0xd0>)
 8010fc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	22ff      	movs	r2, #255	; 0xff
 8010fce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010fd8:	78fb      	ldrb	r3, [r7, #3]
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	4b2a      	ldr	r3, [pc, #168]	; (801108c <xPortStartScheduler+0xd4>)
 8010fe4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010fe6:	4b2a      	ldr	r3, [pc, #168]	; (8011090 <xPortStartScheduler+0xd8>)
 8010fe8:	2207      	movs	r2, #7
 8010fea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010fec:	e009      	b.n	8011002 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010fee:	4b28      	ldr	r3, [pc, #160]	; (8011090 <xPortStartScheduler+0xd8>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	4a26      	ldr	r2, [pc, #152]	; (8011090 <xPortStartScheduler+0xd8>)
 8010ff6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ff8:	78fb      	ldrb	r3, [r7, #3]
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011002:	78fb      	ldrb	r3, [r7, #3]
 8011004:	b2db      	uxtb	r3, r3
 8011006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801100a:	2b80      	cmp	r3, #128	; 0x80
 801100c:	d0ef      	beq.n	8010fee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801100e:	4b20      	ldr	r3, [pc, #128]	; (8011090 <xPortStartScheduler+0xd8>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f1c3 0307 	rsb	r3, r3, #7
 8011016:	2b04      	cmp	r3, #4
 8011018:	d00a      	beq.n	8011030 <xPortStartScheduler+0x78>
	__asm volatile
 801101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	60bb      	str	r3, [r7, #8]
}
 801102c:	bf00      	nop
 801102e:	e7fe      	b.n	801102e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011030:	4b17      	ldr	r3, [pc, #92]	; (8011090 <xPortStartScheduler+0xd8>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	021b      	lsls	r3, r3, #8
 8011036:	4a16      	ldr	r2, [pc, #88]	; (8011090 <xPortStartScheduler+0xd8>)
 8011038:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801103a:	4b15      	ldr	r3, [pc, #84]	; (8011090 <xPortStartScheduler+0xd8>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011042:	4a13      	ldr	r2, [pc, #76]	; (8011090 <xPortStartScheduler+0xd8>)
 8011044:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	b2da      	uxtb	r2, r3
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801104e:	4b11      	ldr	r3, [pc, #68]	; (8011094 <xPortStartScheduler+0xdc>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	4a10      	ldr	r2, [pc, #64]	; (8011094 <xPortStartScheduler+0xdc>)
 8011054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801105a:	4b0e      	ldr	r3, [pc, #56]	; (8011094 <xPortStartScheduler+0xdc>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4a0d      	ldr	r2, [pc, #52]	; (8011094 <xPortStartScheduler+0xdc>)
 8011060:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011064:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011066:	f000 f8b9 	bl	80111dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801106a:	4b0b      	ldr	r3, [pc, #44]	; (8011098 <xPortStartScheduler+0xe0>)
 801106c:	2200      	movs	r2, #0
 801106e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011070:	f7ff ff92 	bl	8010f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011074:	f7ff f8b8 	bl	80101e8 <vTaskSwitchContext>
	prvTaskExitError();
 8011078:	f7ff ff4e 	bl	8010f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801107c:	2300      	movs	r3, #0
}
 801107e:	4618      	mov	r0, r3
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	e000e400 	.word	0xe000e400
 801108c:	20001c8c 	.word	0x20001c8c
 8011090:	20001c90 	.word	0x20001c90
 8011094:	e000ed20 	.word	0xe000ed20
 8011098:	2000005c 	.word	0x2000005c

0801109c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a6:	f383 8811 	msr	BASEPRI, r3
 80110aa:	f3bf 8f6f 	isb	sy
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	607b      	str	r3, [r7, #4]
}
 80110b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80110b6:	4b0f      	ldr	r3, [pc, #60]	; (80110f4 <vPortEnterCritical+0x58>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	3301      	adds	r3, #1
 80110bc:	4a0d      	ldr	r2, [pc, #52]	; (80110f4 <vPortEnterCritical+0x58>)
 80110be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80110c0:	4b0c      	ldr	r3, [pc, #48]	; (80110f4 <vPortEnterCritical+0x58>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	d10f      	bne.n	80110e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80110c8:	4b0b      	ldr	r3, [pc, #44]	; (80110f8 <vPortEnterCritical+0x5c>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00a      	beq.n	80110e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80110d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d6:	f383 8811 	msr	BASEPRI, r3
 80110da:	f3bf 8f6f 	isb	sy
 80110de:	f3bf 8f4f 	dsb	sy
 80110e2:	603b      	str	r3, [r7, #0]
}
 80110e4:	bf00      	nop
 80110e6:	e7fe      	b.n	80110e6 <vPortEnterCritical+0x4a>
	}
}
 80110e8:	bf00      	nop
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bc80      	pop	{r7}
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop
 80110f4:	2000005c 	.word	0x2000005c
 80110f8:	e000ed04 	.word	0xe000ed04

080110fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011102:	4b11      	ldr	r3, [pc, #68]	; (8011148 <vPortExitCritical+0x4c>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10a      	bne.n	8011120 <vPortExitCritical+0x24>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	f383 8811 	msr	BASEPRI, r3
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	f3bf 8f4f 	dsb	sy
 801111a:	607b      	str	r3, [r7, #4]
}
 801111c:	bf00      	nop
 801111e:	e7fe      	b.n	801111e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011120:	4b09      	ldr	r3, [pc, #36]	; (8011148 <vPortExitCritical+0x4c>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	3b01      	subs	r3, #1
 8011126:	4a08      	ldr	r2, [pc, #32]	; (8011148 <vPortExitCritical+0x4c>)
 8011128:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801112a:	4b07      	ldr	r3, [pc, #28]	; (8011148 <vPortExitCritical+0x4c>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d105      	bne.n	801113e <vPortExitCritical+0x42>
 8011132:	2300      	movs	r3, #0
 8011134:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	f383 8811 	msr	BASEPRI, r3
}
 801113c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801113e:	bf00      	nop
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	bc80      	pop	{r7}
 8011146:	4770      	bx	lr
 8011148:	2000005c 	.word	0x2000005c
 801114c:	00000000 	.word	0x00000000

08011150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011150:	f3ef 8009 	mrs	r0, PSP
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	4b0d      	ldr	r3, [pc, #52]	; (8011190 <pxCurrentTCBConst>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011160:	6010      	str	r0, [r2, #0]
 8011162:	e92d 4008 	stmdb	sp!, {r3, lr}
 8011166:	f04f 0050 	mov.w	r0, #80	; 0x50
 801116a:	f380 8811 	msr	BASEPRI, r0
 801116e:	f7ff f83b 	bl	80101e8 <vTaskSwitchContext>
 8011172:	f04f 0000 	mov.w	r0, #0
 8011176:	f380 8811 	msr	BASEPRI, r0
 801117a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801117e:	6819      	ldr	r1, [r3, #0]
 8011180:	6808      	ldr	r0, [r1, #0]
 8011182:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011186:	f380 8809 	msr	PSP, r0
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	4770      	bx	lr

08011190 <pxCurrentTCBConst>:
 8011190:	20001660 	.word	0x20001660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011194:	bf00      	nop
 8011196:	bf00      	nop

08011198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
	__asm volatile
 801119e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	607b      	str	r3, [r7, #4]
}
 80111b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80111b2:	f7fe ff5b 	bl	801006c <xTaskIncrementTick>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d003      	beq.n	80111c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80111bc:	4b06      	ldr	r3, [pc, #24]	; (80111d8 <SysTick_Handler+0x40>)
 80111be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	2300      	movs	r3, #0
 80111c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	f383 8811 	msr	BASEPRI, r3
}
 80111ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80111d0:	bf00      	nop
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	e000ed04 	.word	0xe000ed04

080111dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80111dc:	b480      	push	{r7}
 80111de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80111e0:	4b0a      	ldr	r3, [pc, #40]	; (801120c <vPortSetupTimerInterrupt+0x30>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80111e6:	4b0a      	ldr	r3, [pc, #40]	; (8011210 <vPortSetupTimerInterrupt+0x34>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80111ec:	4b09      	ldr	r3, [pc, #36]	; (8011214 <vPortSetupTimerInterrupt+0x38>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4a09      	ldr	r2, [pc, #36]	; (8011218 <vPortSetupTimerInterrupt+0x3c>)
 80111f2:	fba2 2303 	umull	r2, r3, r2, r3
 80111f6:	099b      	lsrs	r3, r3, #6
 80111f8:	4a08      	ldr	r2, [pc, #32]	; (801121c <vPortSetupTimerInterrupt+0x40>)
 80111fa:	3b01      	subs	r3, #1
 80111fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80111fe:	4b03      	ldr	r3, [pc, #12]	; (801120c <vPortSetupTimerInterrupt+0x30>)
 8011200:	2207      	movs	r2, #7
 8011202:	601a      	str	r2, [r3, #0]
}
 8011204:	bf00      	nop
 8011206:	46bd      	mov	sp, r7
 8011208:	bc80      	pop	{r7}
 801120a:	4770      	bx	lr
 801120c:	e000e010 	.word	0xe000e010
 8011210:	e000e018 	.word	0xe000e018
 8011214:	20000000 	.word	0x20000000
 8011218:	10624dd3 	.word	0x10624dd3
 801121c:	e000e014 	.word	0xe000e014

08011220 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011220:	b480      	push	{r7}
 8011222:	b085      	sub	sp, #20
 8011224:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011226:	f3ef 8305 	mrs	r3, IPSR
 801122a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2b0f      	cmp	r3, #15
 8011230:	d914      	bls.n	801125c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011232:	4a16      	ldr	r2, [pc, #88]	; (801128c <vPortValidateInterruptPriority+0x6c>)
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	4413      	add	r3, r2
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801123c:	4b14      	ldr	r3, [pc, #80]	; (8011290 <vPortValidateInterruptPriority+0x70>)
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	7afa      	ldrb	r2, [r7, #11]
 8011242:	429a      	cmp	r2, r3
 8011244:	d20a      	bcs.n	801125c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	607b      	str	r3, [r7, #4]
}
 8011258:	bf00      	nop
 801125a:	e7fe      	b.n	801125a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801125c:	4b0d      	ldr	r3, [pc, #52]	; (8011294 <vPortValidateInterruptPriority+0x74>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011264:	4b0c      	ldr	r3, [pc, #48]	; (8011298 <vPortValidateInterruptPriority+0x78>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	429a      	cmp	r2, r3
 801126a:	d90a      	bls.n	8011282 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011270:	f383 8811 	msr	BASEPRI, r3
 8011274:	f3bf 8f6f 	isb	sy
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	603b      	str	r3, [r7, #0]
}
 801127e:	bf00      	nop
 8011280:	e7fe      	b.n	8011280 <vPortValidateInterruptPriority+0x60>
	}
 8011282:	bf00      	nop
 8011284:	3714      	adds	r7, #20
 8011286:	46bd      	mov	sp, r7
 8011288:	bc80      	pop	{r7}
 801128a:	4770      	bx	lr
 801128c:	e000e3f0 	.word	0xe000e3f0
 8011290:	20001c8c 	.word	0x20001c8c
 8011294:	e000ed0c 	.word	0xe000ed0c
 8011298:	20001c90 	.word	0x20001c90

0801129c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b08a      	sub	sp, #40	; 0x28
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80112a4:	2300      	movs	r3, #0
 80112a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80112a8:	f7fe fe26 	bl	800fef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80112ac:	4b58      	ldr	r3, [pc, #352]	; (8011410 <pvPortMalloc+0x174>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d101      	bne.n	80112b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80112b4:	f000 f910 	bl	80114d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80112b8:	4b56      	ldr	r3, [pc, #344]	; (8011414 <pvPortMalloc+0x178>)
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4013      	ands	r3, r2
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f040 808e 	bne.w	80113e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d01d      	beq.n	8011308 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80112cc:	2208      	movs	r2, #8
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4413      	add	r3, r2
 80112d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f003 0307 	and.w	r3, r3, #7
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d014      	beq.n	8011308 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f023 0307 	bic.w	r3, r3, #7
 80112e4:	3308      	adds	r3, #8
 80112e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f003 0307 	and.w	r3, r3, #7
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00a      	beq.n	8011308 <pvPortMalloc+0x6c>
	__asm volatile
 80112f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f6:	f383 8811 	msr	BASEPRI, r3
 80112fa:	f3bf 8f6f 	isb	sy
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	617b      	str	r3, [r7, #20]
}
 8011304:	bf00      	nop
 8011306:	e7fe      	b.n	8011306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d069      	beq.n	80113e2 <pvPortMalloc+0x146>
 801130e:	4b42      	ldr	r3, [pc, #264]	; (8011418 <pvPortMalloc+0x17c>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	429a      	cmp	r2, r3
 8011316:	d864      	bhi.n	80113e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011318:	4b40      	ldr	r3, [pc, #256]	; (801141c <pvPortMalloc+0x180>)
 801131a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801131c:	4b3f      	ldr	r3, [pc, #252]	; (801141c <pvPortMalloc+0x180>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011322:	e004      	b.n	801132e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011326:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	429a      	cmp	r2, r3
 8011336:	d903      	bls.n	8011340 <pvPortMalloc+0xa4>
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1f1      	bne.n	8011324 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011340:	4b33      	ldr	r3, [pc, #204]	; (8011410 <pvPortMalloc+0x174>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011346:	429a      	cmp	r2, r3
 8011348:	d04b      	beq.n	80113e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2208      	movs	r2, #8
 8011350:	4413      	add	r3, r2
 8011352:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	6a3b      	ldr	r3, [r7, #32]
 801135a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	685a      	ldr	r2, [r3, #4]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	1ad2      	subs	r2, r2, r3
 8011364:	2308      	movs	r3, #8
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	429a      	cmp	r2, r3
 801136a:	d91f      	bls.n	80113ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4413      	add	r3, r2
 8011372:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011374:	69bb      	ldr	r3, [r7, #24]
 8011376:	f003 0307 	and.w	r3, r3, #7
 801137a:	2b00      	cmp	r3, #0
 801137c:	d00a      	beq.n	8011394 <pvPortMalloc+0xf8>
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	613b      	str	r3, [r7, #16]
}
 8011390:	bf00      	nop
 8011392:	e7fe      	b.n	8011392 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011396:	685a      	ldr	r2, [r3, #4]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	1ad2      	subs	r2, r2, r3
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80113a6:	69b8      	ldr	r0, [r7, #24]
 80113a8:	f000 f8f8 	bl	801159c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80113ac:	4b1a      	ldr	r3, [pc, #104]	; (8011418 <pvPortMalloc+0x17c>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	4a18      	ldr	r2, [pc, #96]	; (8011418 <pvPortMalloc+0x17c>)
 80113b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80113ba:	4b17      	ldr	r3, [pc, #92]	; (8011418 <pvPortMalloc+0x17c>)
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	4b18      	ldr	r3, [pc, #96]	; (8011420 <pvPortMalloc+0x184>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d203      	bcs.n	80113ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80113c6:	4b14      	ldr	r3, [pc, #80]	; (8011418 <pvPortMalloc+0x17c>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4a15      	ldr	r2, [pc, #84]	; (8011420 <pvPortMalloc+0x184>)
 80113cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	685a      	ldr	r2, [r3, #4]
 80113d2:	4b10      	ldr	r3, [pc, #64]	; (8011414 <pvPortMalloc+0x178>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	431a      	orrs	r2, r3
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	2200      	movs	r2, #0
 80113e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80113e2:	f7fe fd97 	bl	800ff14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	f003 0307 	and.w	r3, r3, #7
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00a      	beq.n	8011406 <pvPortMalloc+0x16a>
	__asm volatile
 80113f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f4:	f383 8811 	msr	BASEPRI, r3
 80113f8:	f3bf 8f6f 	isb	sy
 80113fc:	f3bf 8f4f 	dsb	sy
 8011400:	60fb      	str	r3, [r7, #12]
}
 8011402:	bf00      	nop
 8011404:	e7fe      	b.n	8011404 <pvPortMalloc+0x168>
	return pvReturn;
 8011406:	69fb      	ldr	r3, [r7, #28]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3728      	adds	r7, #40	; 0x28
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	2000289c 	.word	0x2000289c
 8011414:	200028a8 	.word	0x200028a8
 8011418:	200028a0 	.word	0x200028a0
 801141c:	20002894 	.word	0x20002894
 8011420:	200028a4 	.word	0x200028a4

08011424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d048      	beq.n	80114c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011436:	2308      	movs	r3, #8
 8011438:	425b      	negs	r3, r3
 801143a:	697a      	ldr	r2, [r7, #20]
 801143c:	4413      	add	r3, r2
 801143e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	685a      	ldr	r2, [r3, #4]
 8011448:	4b21      	ldr	r3, [pc, #132]	; (80114d0 <vPortFree+0xac>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4013      	ands	r3, r2
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10a      	bne.n	8011468 <vPortFree+0x44>
	__asm volatile
 8011452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011456:	f383 8811 	msr	BASEPRI, r3
 801145a:	f3bf 8f6f 	isb	sy
 801145e:	f3bf 8f4f 	dsb	sy
 8011462:	60fb      	str	r3, [r7, #12]
}
 8011464:	bf00      	nop
 8011466:	e7fe      	b.n	8011466 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00a      	beq.n	8011486 <vPortFree+0x62>
	__asm volatile
 8011470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	60bb      	str	r3, [r7, #8]
}
 8011482:	bf00      	nop
 8011484:	e7fe      	b.n	8011484 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	4b11      	ldr	r3, [pc, #68]	; (80114d0 <vPortFree+0xac>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	4013      	ands	r3, r2
 8011490:	2b00      	cmp	r3, #0
 8011492:	d019      	beq.n	80114c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d115      	bne.n	80114c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	685a      	ldr	r2, [r3, #4]
 80114a0:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <vPortFree+0xac>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	43db      	mvns	r3, r3
 80114a6:	401a      	ands	r2, r3
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80114ac:	f7fe fd24 	bl	800fef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	685a      	ldr	r2, [r3, #4]
 80114b4:	4b07      	ldr	r3, [pc, #28]	; (80114d4 <vPortFree+0xb0>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4413      	add	r3, r2
 80114ba:	4a06      	ldr	r2, [pc, #24]	; (80114d4 <vPortFree+0xb0>)
 80114bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80114be:	6938      	ldr	r0, [r7, #16]
 80114c0:	f000 f86c 	bl	801159c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80114c4:	f7fe fd26 	bl	800ff14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80114c8:	bf00      	nop
 80114ca:	3718      	adds	r7, #24
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	200028a8 	.word	0x200028a8
 80114d4:	200028a0 	.word	0x200028a0

080114d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80114de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80114e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80114e4:	4b27      	ldr	r3, [pc, #156]	; (8011584 <prvHeapInit+0xac>)
 80114e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f003 0307 	and.w	r3, r3, #7
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d00c      	beq.n	801150c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	3307      	adds	r3, #7
 80114f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f023 0307 	bic.w	r3, r3, #7
 80114fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	1ad3      	subs	r3, r2, r3
 8011506:	4a1f      	ldr	r2, [pc, #124]	; (8011584 <prvHeapInit+0xac>)
 8011508:	4413      	add	r3, r2
 801150a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011510:	4a1d      	ldr	r2, [pc, #116]	; (8011588 <prvHeapInit+0xb0>)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011516:	4b1c      	ldr	r3, [pc, #112]	; (8011588 <prvHeapInit+0xb0>)
 8011518:	2200      	movs	r2, #0
 801151a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	4413      	add	r3, r2
 8011522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011524:	2208      	movs	r2, #8
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	1a9b      	subs	r3, r3, r2
 801152a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f023 0307 	bic.w	r3, r3, #7
 8011532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	4a15      	ldr	r2, [pc, #84]	; (801158c <prvHeapInit+0xb4>)
 8011538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801153a:	4b14      	ldr	r3, [pc, #80]	; (801158c <prvHeapInit+0xb4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2200      	movs	r2, #0
 8011540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011542:	4b12      	ldr	r3, [pc, #72]	; (801158c <prvHeapInit+0xb4>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	2200      	movs	r2, #0
 8011548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	1ad2      	subs	r2, r2, r3
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011558:	4b0c      	ldr	r3, [pc, #48]	; (801158c <prvHeapInit+0xb4>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	4a0a      	ldr	r2, [pc, #40]	; (8011590 <prvHeapInit+0xb8>)
 8011566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	685b      	ldr	r3, [r3, #4]
 801156c:	4a09      	ldr	r2, [pc, #36]	; (8011594 <prvHeapInit+0xbc>)
 801156e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011570:	4b09      	ldr	r3, [pc, #36]	; (8011598 <prvHeapInit+0xc0>)
 8011572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011576:	601a      	str	r2, [r3, #0]
}
 8011578:	bf00      	nop
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	bc80      	pop	{r7}
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop
 8011584:	20001c94 	.word	0x20001c94
 8011588:	20002894 	.word	0x20002894
 801158c:	2000289c 	.word	0x2000289c
 8011590:	200028a4 	.word	0x200028a4
 8011594:	200028a0 	.word	0x200028a0
 8011598:	200028a8 	.word	0x200028a8

0801159c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80115a4:	4b27      	ldr	r3, [pc, #156]	; (8011644 <prvInsertBlockIntoFreeList+0xa8>)
 80115a6:	60fb      	str	r3, [r7, #12]
 80115a8:	e002      	b.n	80115b0 <prvInsertBlockIntoFreeList+0x14>
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	60fb      	str	r3, [r7, #12]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d8f7      	bhi.n	80115aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	68ba      	ldr	r2, [r7, #8]
 80115c4:	4413      	add	r3, r2
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d108      	bne.n	80115de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	685a      	ldr	r2, [r3, #4]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	441a      	add	r2, r3
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	68ba      	ldr	r2, [r7, #8]
 80115e8:	441a      	add	r2, r3
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d118      	bne.n	8011624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	4b14      	ldr	r3, [pc, #80]	; (8011648 <prvInsertBlockIntoFreeList+0xac>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d00d      	beq.n	801161a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	685a      	ldr	r2, [r3, #4]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	441a      	add	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	601a      	str	r2, [r3, #0]
 8011618:	e008      	b.n	801162c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801161a:	4b0b      	ldr	r3, [pc, #44]	; (8011648 <prvInsertBlockIntoFreeList+0xac>)
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	e003      	b.n	801162c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	429a      	cmp	r2, r3
 8011632:	d002      	beq.n	801163a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801163a:	bf00      	nop
 801163c:	3714      	adds	r7, #20
 801163e:	46bd      	mov	sp, r7
 8011640:	bc80      	pop	{r7}
 8011642:	4770      	bx	lr
 8011644:	20002894 	.word	0x20002894
 8011648:	2000289c 	.word	0x2000289c

0801164c <__errno>:
 801164c:	4b01      	ldr	r3, [pc, #4]	; (8011654 <__errno+0x8>)
 801164e:	6818      	ldr	r0, [r3, #0]
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	20000060 	.word	0x20000060

08011658 <__sflush_r>:
 8011658:	898a      	ldrh	r2, [r1, #12]
 801165a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165c:	4605      	mov	r5, r0
 801165e:	0710      	lsls	r0, r2, #28
 8011660:	460c      	mov	r4, r1
 8011662:	d457      	bmi.n	8011714 <__sflush_r+0xbc>
 8011664:	684b      	ldr	r3, [r1, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	dc04      	bgt.n	8011674 <__sflush_r+0x1c>
 801166a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801166c:	2b00      	cmp	r3, #0
 801166e:	dc01      	bgt.n	8011674 <__sflush_r+0x1c>
 8011670:	2000      	movs	r0, #0
 8011672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011676:	2e00      	cmp	r6, #0
 8011678:	d0fa      	beq.n	8011670 <__sflush_r+0x18>
 801167a:	2300      	movs	r3, #0
 801167c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011680:	682f      	ldr	r7, [r5, #0]
 8011682:	602b      	str	r3, [r5, #0]
 8011684:	d032      	beq.n	80116ec <__sflush_r+0x94>
 8011686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011688:	89a3      	ldrh	r3, [r4, #12]
 801168a:	075a      	lsls	r2, r3, #29
 801168c:	d505      	bpl.n	801169a <__sflush_r+0x42>
 801168e:	6863      	ldr	r3, [r4, #4]
 8011690:	1ac0      	subs	r0, r0, r3
 8011692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011694:	b10b      	cbz	r3, 801169a <__sflush_r+0x42>
 8011696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011698:	1ac0      	subs	r0, r0, r3
 801169a:	2300      	movs	r3, #0
 801169c:	4602      	mov	r2, r0
 801169e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116a0:	4628      	mov	r0, r5
 80116a2:	6a21      	ldr	r1, [r4, #32]
 80116a4:	47b0      	blx	r6
 80116a6:	1c43      	adds	r3, r0, #1
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	d106      	bne.n	80116ba <__sflush_r+0x62>
 80116ac:	6829      	ldr	r1, [r5, #0]
 80116ae:	291d      	cmp	r1, #29
 80116b0:	d82c      	bhi.n	801170c <__sflush_r+0xb4>
 80116b2:	4a29      	ldr	r2, [pc, #164]	; (8011758 <__sflush_r+0x100>)
 80116b4:	40ca      	lsrs	r2, r1
 80116b6:	07d6      	lsls	r6, r2, #31
 80116b8:	d528      	bpl.n	801170c <__sflush_r+0xb4>
 80116ba:	2200      	movs	r2, #0
 80116bc:	6062      	str	r2, [r4, #4]
 80116be:	6922      	ldr	r2, [r4, #16]
 80116c0:	04d9      	lsls	r1, r3, #19
 80116c2:	6022      	str	r2, [r4, #0]
 80116c4:	d504      	bpl.n	80116d0 <__sflush_r+0x78>
 80116c6:	1c42      	adds	r2, r0, #1
 80116c8:	d101      	bne.n	80116ce <__sflush_r+0x76>
 80116ca:	682b      	ldr	r3, [r5, #0]
 80116cc:	b903      	cbnz	r3, 80116d0 <__sflush_r+0x78>
 80116ce:	6560      	str	r0, [r4, #84]	; 0x54
 80116d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116d2:	602f      	str	r7, [r5, #0]
 80116d4:	2900      	cmp	r1, #0
 80116d6:	d0cb      	beq.n	8011670 <__sflush_r+0x18>
 80116d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116dc:	4299      	cmp	r1, r3
 80116de:	d002      	beq.n	80116e6 <__sflush_r+0x8e>
 80116e0:	4628      	mov	r0, r5
 80116e2:	f000 f9ef 	bl	8011ac4 <_free_r>
 80116e6:	2000      	movs	r0, #0
 80116e8:	6360      	str	r0, [r4, #52]	; 0x34
 80116ea:	e7c2      	b.n	8011672 <__sflush_r+0x1a>
 80116ec:	6a21      	ldr	r1, [r4, #32]
 80116ee:	2301      	movs	r3, #1
 80116f0:	4628      	mov	r0, r5
 80116f2:	47b0      	blx	r6
 80116f4:	1c41      	adds	r1, r0, #1
 80116f6:	d1c7      	bne.n	8011688 <__sflush_r+0x30>
 80116f8:	682b      	ldr	r3, [r5, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d0c4      	beq.n	8011688 <__sflush_r+0x30>
 80116fe:	2b1d      	cmp	r3, #29
 8011700:	d001      	beq.n	8011706 <__sflush_r+0xae>
 8011702:	2b16      	cmp	r3, #22
 8011704:	d101      	bne.n	801170a <__sflush_r+0xb2>
 8011706:	602f      	str	r7, [r5, #0]
 8011708:	e7b2      	b.n	8011670 <__sflush_r+0x18>
 801170a:	89a3      	ldrh	r3, [r4, #12]
 801170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011710:	81a3      	strh	r3, [r4, #12]
 8011712:	e7ae      	b.n	8011672 <__sflush_r+0x1a>
 8011714:	690f      	ldr	r7, [r1, #16]
 8011716:	2f00      	cmp	r7, #0
 8011718:	d0aa      	beq.n	8011670 <__sflush_r+0x18>
 801171a:	0793      	lsls	r3, r2, #30
 801171c:	bf18      	it	ne
 801171e:	2300      	movne	r3, #0
 8011720:	680e      	ldr	r6, [r1, #0]
 8011722:	bf08      	it	eq
 8011724:	694b      	ldreq	r3, [r1, #20]
 8011726:	1bf6      	subs	r6, r6, r7
 8011728:	600f      	str	r7, [r1, #0]
 801172a:	608b      	str	r3, [r1, #8]
 801172c:	2e00      	cmp	r6, #0
 801172e:	dd9f      	ble.n	8011670 <__sflush_r+0x18>
 8011730:	4633      	mov	r3, r6
 8011732:	463a      	mov	r2, r7
 8011734:	4628      	mov	r0, r5
 8011736:	6a21      	ldr	r1, [r4, #32]
 8011738:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801173c:	47e0      	blx	ip
 801173e:	2800      	cmp	r0, #0
 8011740:	dc06      	bgt.n	8011750 <__sflush_r+0xf8>
 8011742:	89a3      	ldrh	r3, [r4, #12]
 8011744:	f04f 30ff 	mov.w	r0, #4294967295
 8011748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801174c:	81a3      	strh	r3, [r4, #12]
 801174e:	e790      	b.n	8011672 <__sflush_r+0x1a>
 8011750:	4407      	add	r7, r0
 8011752:	1a36      	subs	r6, r6, r0
 8011754:	e7ea      	b.n	801172c <__sflush_r+0xd4>
 8011756:	bf00      	nop
 8011758:	20400001 	.word	0x20400001

0801175c <_fflush_r>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	690b      	ldr	r3, [r1, #16]
 8011760:	4605      	mov	r5, r0
 8011762:	460c      	mov	r4, r1
 8011764:	b913      	cbnz	r3, 801176c <_fflush_r+0x10>
 8011766:	2500      	movs	r5, #0
 8011768:	4628      	mov	r0, r5
 801176a:	bd38      	pop	{r3, r4, r5, pc}
 801176c:	b118      	cbz	r0, 8011776 <_fflush_r+0x1a>
 801176e:	6983      	ldr	r3, [r0, #24]
 8011770:	b90b      	cbnz	r3, 8011776 <_fflush_r+0x1a>
 8011772:	f000 f887 	bl	8011884 <__sinit>
 8011776:	4b14      	ldr	r3, [pc, #80]	; (80117c8 <_fflush_r+0x6c>)
 8011778:	429c      	cmp	r4, r3
 801177a:	d11b      	bne.n	80117b4 <_fflush_r+0x58>
 801177c:	686c      	ldr	r4, [r5, #4]
 801177e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d0ef      	beq.n	8011766 <_fflush_r+0xa>
 8011786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011788:	07d0      	lsls	r0, r2, #31
 801178a:	d404      	bmi.n	8011796 <_fflush_r+0x3a>
 801178c:	0599      	lsls	r1, r3, #22
 801178e:	d402      	bmi.n	8011796 <_fflush_r+0x3a>
 8011790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011792:	f000 f94c 	bl	8011a2e <__retarget_lock_acquire_recursive>
 8011796:	4628      	mov	r0, r5
 8011798:	4621      	mov	r1, r4
 801179a:	f7ff ff5d 	bl	8011658 <__sflush_r>
 801179e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117a0:	4605      	mov	r5, r0
 80117a2:	07da      	lsls	r2, r3, #31
 80117a4:	d4e0      	bmi.n	8011768 <_fflush_r+0xc>
 80117a6:	89a3      	ldrh	r3, [r4, #12]
 80117a8:	059b      	lsls	r3, r3, #22
 80117aa:	d4dd      	bmi.n	8011768 <_fflush_r+0xc>
 80117ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117ae:	f000 f93f 	bl	8011a30 <__retarget_lock_release_recursive>
 80117b2:	e7d9      	b.n	8011768 <_fflush_r+0xc>
 80117b4:	4b05      	ldr	r3, [pc, #20]	; (80117cc <_fflush_r+0x70>)
 80117b6:	429c      	cmp	r4, r3
 80117b8:	d101      	bne.n	80117be <_fflush_r+0x62>
 80117ba:	68ac      	ldr	r4, [r5, #8]
 80117bc:	e7df      	b.n	801177e <_fflush_r+0x22>
 80117be:	4b04      	ldr	r3, [pc, #16]	; (80117d0 <_fflush_r+0x74>)
 80117c0:	429c      	cmp	r4, r3
 80117c2:	bf08      	it	eq
 80117c4:	68ec      	ldreq	r4, [r5, #12]
 80117c6:	e7da      	b.n	801177e <_fflush_r+0x22>
 80117c8:	08016590 	.word	0x08016590
 80117cc:	080165b0 	.word	0x080165b0
 80117d0:	08016570 	.word	0x08016570

080117d4 <std>:
 80117d4:	2300      	movs	r3, #0
 80117d6:	b510      	push	{r4, lr}
 80117d8:	4604      	mov	r4, r0
 80117da:	e9c0 3300 	strd	r3, r3, [r0]
 80117de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117e2:	6083      	str	r3, [r0, #8]
 80117e4:	8181      	strh	r1, [r0, #12]
 80117e6:	6643      	str	r3, [r0, #100]	; 0x64
 80117e8:	81c2      	strh	r2, [r0, #14]
 80117ea:	6183      	str	r3, [r0, #24]
 80117ec:	4619      	mov	r1, r3
 80117ee:	2208      	movs	r2, #8
 80117f0:	305c      	adds	r0, #92	; 0x5c
 80117f2:	f000 f95f 	bl	8011ab4 <memset>
 80117f6:	4b05      	ldr	r3, [pc, #20]	; (801180c <std+0x38>)
 80117f8:	6224      	str	r4, [r4, #32]
 80117fa:	6263      	str	r3, [r4, #36]	; 0x24
 80117fc:	4b04      	ldr	r3, [pc, #16]	; (8011810 <std+0x3c>)
 80117fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8011800:	4b04      	ldr	r3, [pc, #16]	; (8011814 <std+0x40>)
 8011802:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011804:	4b04      	ldr	r3, [pc, #16]	; (8011818 <std+0x44>)
 8011806:	6323      	str	r3, [r4, #48]	; 0x30
 8011808:	bd10      	pop	{r4, pc}
 801180a:	bf00      	nop
 801180c:	080129fd 	.word	0x080129fd
 8011810:	08012a1f 	.word	0x08012a1f
 8011814:	08012a57 	.word	0x08012a57
 8011818:	08012a7b 	.word	0x08012a7b

0801181c <_cleanup_r>:
 801181c:	4901      	ldr	r1, [pc, #4]	; (8011824 <_cleanup_r+0x8>)
 801181e:	f000 b8c1 	b.w	80119a4 <_fwalk_reent>
 8011822:	bf00      	nop
 8011824:	0801175d 	.word	0x0801175d

08011828 <__sfmoreglue>:
 8011828:	2268      	movs	r2, #104	; 0x68
 801182a:	b570      	push	{r4, r5, r6, lr}
 801182c:	1e4d      	subs	r5, r1, #1
 801182e:	4355      	muls	r5, r2
 8011830:	460e      	mov	r6, r1
 8011832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011836:	f000 f9ad 	bl	8011b94 <_malloc_r>
 801183a:	4604      	mov	r4, r0
 801183c:	b140      	cbz	r0, 8011850 <__sfmoreglue+0x28>
 801183e:	2100      	movs	r1, #0
 8011840:	e9c0 1600 	strd	r1, r6, [r0]
 8011844:	300c      	adds	r0, #12
 8011846:	60a0      	str	r0, [r4, #8]
 8011848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801184c:	f000 f932 	bl	8011ab4 <memset>
 8011850:	4620      	mov	r0, r4
 8011852:	bd70      	pop	{r4, r5, r6, pc}

08011854 <__sfp_lock_acquire>:
 8011854:	4801      	ldr	r0, [pc, #4]	; (801185c <__sfp_lock_acquire+0x8>)
 8011856:	f000 b8ea 	b.w	8011a2e <__retarget_lock_acquire_recursive>
 801185a:	bf00      	nop
 801185c:	200028ad 	.word	0x200028ad

08011860 <__sfp_lock_release>:
 8011860:	4801      	ldr	r0, [pc, #4]	; (8011868 <__sfp_lock_release+0x8>)
 8011862:	f000 b8e5 	b.w	8011a30 <__retarget_lock_release_recursive>
 8011866:	bf00      	nop
 8011868:	200028ad 	.word	0x200028ad

0801186c <__sinit_lock_acquire>:
 801186c:	4801      	ldr	r0, [pc, #4]	; (8011874 <__sinit_lock_acquire+0x8>)
 801186e:	f000 b8de 	b.w	8011a2e <__retarget_lock_acquire_recursive>
 8011872:	bf00      	nop
 8011874:	200028ae 	.word	0x200028ae

08011878 <__sinit_lock_release>:
 8011878:	4801      	ldr	r0, [pc, #4]	; (8011880 <__sinit_lock_release+0x8>)
 801187a:	f000 b8d9 	b.w	8011a30 <__retarget_lock_release_recursive>
 801187e:	bf00      	nop
 8011880:	200028ae 	.word	0x200028ae

08011884 <__sinit>:
 8011884:	b510      	push	{r4, lr}
 8011886:	4604      	mov	r4, r0
 8011888:	f7ff fff0 	bl	801186c <__sinit_lock_acquire>
 801188c:	69a3      	ldr	r3, [r4, #24]
 801188e:	b11b      	cbz	r3, 8011898 <__sinit+0x14>
 8011890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011894:	f7ff bff0 	b.w	8011878 <__sinit_lock_release>
 8011898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801189c:	6523      	str	r3, [r4, #80]	; 0x50
 801189e:	4b13      	ldr	r3, [pc, #76]	; (80118ec <__sinit+0x68>)
 80118a0:	4a13      	ldr	r2, [pc, #76]	; (80118f0 <__sinit+0x6c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80118a6:	42a3      	cmp	r3, r4
 80118a8:	bf08      	it	eq
 80118aa:	2301      	moveq	r3, #1
 80118ac:	4620      	mov	r0, r4
 80118ae:	bf08      	it	eq
 80118b0:	61a3      	streq	r3, [r4, #24]
 80118b2:	f000 f81f 	bl	80118f4 <__sfp>
 80118b6:	6060      	str	r0, [r4, #4]
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 f81b 	bl	80118f4 <__sfp>
 80118be:	60a0      	str	r0, [r4, #8]
 80118c0:	4620      	mov	r0, r4
 80118c2:	f000 f817 	bl	80118f4 <__sfp>
 80118c6:	2200      	movs	r2, #0
 80118c8:	2104      	movs	r1, #4
 80118ca:	60e0      	str	r0, [r4, #12]
 80118cc:	6860      	ldr	r0, [r4, #4]
 80118ce:	f7ff ff81 	bl	80117d4 <std>
 80118d2:	2201      	movs	r2, #1
 80118d4:	2109      	movs	r1, #9
 80118d6:	68a0      	ldr	r0, [r4, #8]
 80118d8:	f7ff ff7c 	bl	80117d4 <std>
 80118dc:	2202      	movs	r2, #2
 80118de:	2112      	movs	r1, #18
 80118e0:	68e0      	ldr	r0, [r4, #12]
 80118e2:	f7ff ff77 	bl	80117d4 <std>
 80118e6:	2301      	movs	r3, #1
 80118e8:	61a3      	str	r3, [r4, #24]
 80118ea:	e7d1      	b.n	8011890 <__sinit+0xc>
 80118ec:	080165d0 	.word	0x080165d0
 80118f0:	0801181d 	.word	0x0801181d

080118f4 <__sfp>:
 80118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f6:	4607      	mov	r7, r0
 80118f8:	f7ff ffac 	bl	8011854 <__sfp_lock_acquire>
 80118fc:	4b1e      	ldr	r3, [pc, #120]	; (8011978 <__sfp+0x84>)
 80118fe:	681e      	ldr	r6, [r3, #0]
 8011900:	69b3      	ldr	r3, [r6, #24]
 8011902:	b913      	cbnz	r3, 801190a <__sfp+0x16>
 8011904:	4630      	mov	r0, r6
 8011906:	f7ff ffbd 	bl	8011884 <__sinit>
 801190a:	3648      	adds	r6, #72	; 0x48
 801190c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011910:	3b01      	subs	r3, #1
 8011912:	d503      	bpl.n	801191c <__sfp+0x28>
 8011914:	6833      	ldr	r3, [r6, #0]
 8011916:	b30b      	cbz	r3, 801195c <__sfp+0x68>
 8011918:	6836      	ldr	r6, [r6, #0]
 801191a:	e7f7      	b.n	801190c <__sfp+0x18>
 801191c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011920:	b9d5      	cbnz	r5, 8011958 <__sfp+0x64>
 8011922:	4b16      	ldr	r3, [pc, #88]	; (801197c <__sfp+0x88>)
 8011924:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011928:	60e3      	str	r3, [r4, #12]
 801192a:	6665      	str	r5, [r4, #100]	; 0x64
 801192c:	f000 f87e 	bl	8011a2c <__retarget_lock_init_recursive>
 8011930:	f7ff ff96 	bl	8011860 <__sfp_lock_release>
 8011934:	2208      	movs	r2, #8
 8011936:	4629      	mov	r1, r5
 8011938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801193c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011940:	6025      	str	r5, [r4, #0]
 8011942:	61a5      	str	r5, [r4, #24]
 8011944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011948:	f000 f8b4 	bl	8011ab4 <memset>
 801194c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011954:	4620      	mov	r0, r4
 8011956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011958:	3468      	adds	r4, #104	; 0x68
 801195a:	e7d9      	b.n	8011910 <__sfp+0x1c>
 801195c:	2104      	movs	r1, #4
 801195e:	4638      	mov	r0, r7
 8011960:	f7ff ff62 	bl	8011828 <__sfmoreglue>
 8011964:	4604      	mov	r4, r0
 8011966:	6030      	str	r0, [r6, #0]
 8011968:	2800      	cmp	r0, #0
 801196a:	d1d5      	bne.n	8011918 <__sfp+0x24>
 801196c:	f7ff ff78 	bl	8011860 <__sfp_lock_release>
 8011970:	230c      	movs	r3, #12
 8011972:	603b      	str	r3, [r7, #0]
 8011974:	e7ee      	b.n	8011954 <__sfp+0x60>
 8011976:	bf00      	nop
 8011978:	080165d0 	.word	0x080165d0
 801197c:	ffff0001 	.word	0xffff0001

08011980 <fiprintf>:
 8011980:	b40e      	push	{r1, r2, r3}
 8011982:	b503      	push	{r0, r1, lr}
 8011984:	4601      	mov	r1, r0
 8011986:	ab03      	add	r3, sp, #12
 8011988:	4805      	ldr	r0, [pc, #20]	; (80119a0 <fiprintf+0x20>)
 801198a:	f853 2b04 	ldr.w	r2, [r3], #4
 801198e:	6800      	ldr	r0, [r0, #0]
 8011990:	9301      	str	r3, [sp, #4]
 8011992:	f000 f99b 	bl	8011ccc <_vfiprintf_r>
 8011996:	b002      	add	sp, #8
 8011998:	f85d eb04 	ldr.w	lr, [sp], #4
 801199c:	b003      	add	sp, #12
 801199e:	4770      	bx	lr
 80119a0:	20000060 	.word	0x20000060

080119a4 <_fwalk_reent>:
 80119a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119a8:	4606      	mov	r6, r0
 80119aa:	4688      	mov	r8, r1
 80119ac:	2700      	movs	r7, #0
 80119ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119b6:	f1b9 0901 	subs.w	r9, r9, #1
 80119ba:	d505      	bpl.n	80119c8 <_fwalk_reent+0x24>
 80119bc:	6824      	ldr	r4, [r4, #0]
 80119be:	2c00      	cmp	r4, #0
 80119c0:	d1f7      	bne.n	80119b2 <_fwalk_reent+0xe>
 80119c2:	4638      	mov	r0, r7
 80119c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119c8:	89ab      	ldrh	r3, [r5, #12]
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d907      	bls.n	80119de <_fwalk_reent+0x3a>
 80119ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119d2:	3301      	adds	r3, #1
 80119d4:	d003      	beq.n	80119de <_fwalk_reent+0x3a>
 80119d6:	4629      	mov	r1, r5
 80119d8:	4630      	mov	r0, r6
 80119da:	47c0      	blx	r8
 80119dc:	4307      	orrs	r7, r0
 80119de:	3568      	adds	r5, #104	; 0x68
 80119e0:	e7e9      	b.n	80119b6 <_fwalk_reent+0x12>
	...

080119e4 <__libc_init_array>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	2600      	movs	r6, #0
 80119e8:	4d0c      	ldr	r5, [pc, #48]	; (8011a1c <__libc_init_array+0x38>)
 80119ea:	4c0d      	ldr	r4, [pc, #52]	; (8011a20 <__libc_init_array+0x3c>)
 80119ec:	1b64      	subs	r4, r4, r5
 80119ee:	10a4      	asrs	r4, r4, #2
 80119f0:	42a6      	cmp	r6, r4
 80119f2:	d109      	bne.n	8011a08 <__libc_init_array+0x24>
 80119f4:	f003 fe1e 	bl	8015634 <_init>
 80119f8:	2600      	movs	r6, #0
 80119fa:	4d0a      	ldr	r5, [pc, #40]	; (8011a24 <__libc_init_array+0x40>)
 80119fc:	4c0a      	ldr	r4, [pc, #40]	; (8011a28 <__libc_init_array+0x44>)
 80119fe:	1b64      	subs	r4, r4, r5
 8011a00:	10a4      	asrs	r4, r4, #2
 8011a02:	42a6      	cmp	r6, r4
 8011a04:	d105      	bne.n	8011a12 <__libc_init_array+0x2e>
 8011a06:	bd70      	pop	{r4, r5, r6, pc}
 8011a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a0c:	4798      	blx	r3
 8011a0e:	3601      	adds	r6, #1
 8011a10:	e7ee      	b.n	80119f0 <__libc_init_array+0xc>
 8011a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a16:	4798      	blx	r3
 8011a18:	3601      	adds	r6, #1
 8011a1a:	e7f2      	b.n	8011a02 <__libc_init_array+0x1e>
 8011a1c:	08016d60 	.word	0x08016d60
 8011a20:	08016d60 	.word	0x08016d60
 8011a24:	08016d60 	.word	0x08016d60
 8011a28:	08016d64 	.word	0x08016d64

08011a2c <__retarget_lock_init_recursive>:
 8011a2c:	4770      	bx	lr

08011a2e <__retarget_lock_acquire_recursive>:
 8011a2e:	4770      	bx	lr

08011a30 <__retarget_lock_release_recursive>:
 8011a30:	4770      	bx	lr
	...

08011a34 <malloc>:
 8011a34:	4b02      	ldr	r3, [pc, #8]	; (8011a40 <malloc+0xc>)
 8011a36:	4601      	mov	r1, r0
 8011a38:	6818      	ldr	r0, [r3, #0]
 8011a3a:	f000 b8ab 	b.w	8011b94 <_malloc_r>
 8011a3e:	bf00      	nop
 8011a40:	20000060 	.word	0x20000060

08011a44 <memcmp>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	3901      	subs	r1, #1
 8011a48:	4402      	add	r2, r0
 8011a4a:	4290      	cmp	r0, r2
 8011a4c:	d101      	bne.n	8011a52 <memcmp+0xe>
 8011a4e:	2000      	movs	r0, #0
 8011a50:	e005      	b.n	8011a5e <memcmp+0x1a>
 8011a52:	7803      	ldrb	r3, [r0, #0]
 8011a54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a58:	42a3      	cmp	r3, r4
 8011a5a:	d001      	beq.n	8011a60 <memcmp+0x1c>
 8011a5c:	1b18      	subs	r0, r3, r4
 8011a5e:	bd10      	pop	{r4, pc}
 8011a60:	3001      	adds	r0, #1
 8011a62:	e7f2      	b.n	8011a4a <memcmp+0x6>

08011a64 <memcpy>:
 8011a64:	440a      	add	r2, r1
 8011a66:	4291      	cmp	r1, r2
 8011a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a6c:	d100      	bne.n	8011a70 <memcpy+0xc>
 8011a6e:	4770      	bx	lr
 8011a70:	b510      	push	{r4, lr}
 8011a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a76:	4291      	cmp	r1, r2
 8011a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a7c:	d1f9      	bne.n	8011a72 <memcpy+0xe>
 8011a7e:	bd10      	pop	{r4, pc}

08011a80 <memmove>:
 8011a80:	4288      	cmp	r0, r1
 8011a82:	b510      	push	{r4, lr}
 8011a84:	eb01 0402 	add.w	r4, r1, r2
 8011a88:	d902      	bls.n	8011a90 <memmove+0x10>
 8011a8a:	4284      	cmp	r4, r0
 8011a8c:	4623      	mov	r3, r4
 8011a8e:	d807      	bhi.n	8011aa0 <memmove+0x20>
 8011a90:	1e43      	subs	r3, r0, #1
 8011a92:	42a1      	cmp	r1, r4
 8011a94:	d008      	beq.n	8011aa8 <memmove+0x28>
 8011a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a9e:	e7f8      	b.n	8011a92 <memmove+0x12>
 8011aa0:	4601      	mov	r1, r0
 8011aa2:	4402      	add	r2, r0
 8011aa4:	428a      	cmp	r2, r1
 8011aa6:	d100      	bne.n	8011aaa <memmove+0x2a>
 8011aa8:	bd10      	pop	{r4, pc}
 8011aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ab2:	e7f7      	b.n	8011aa4 <memmove+0x24>

08011ab4 <memset>:
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	4402      	add	r2, r0
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d100      	bne.n	8011abe <memset+0xa>
 8011abc:	4770      	bx	lr
 8011abe:	f803 1b01 	strb.w	r1, [r3], #1
 8011ac2:	e7f9      	b.n	8011ab8 <memset+0x4>

08011ac4 <_free_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4605      	mov	r5, r0
 8011ac8:	2900      	cmp	r1, #0
 8011aca:	d040      	beq.n	8011b4e <_free_r+0x8a>
 8011acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ad0:	1f0c      	subs	r4, r1, #4
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bfb8      	it	lt
 8011ad6:	18e4      	addlt	r4, r4, r3
 8011ad8:	f001 ffda 	bl	8013a90 <__malloc_lock>
 8011adc:	4a1c      	ldr	r2, [pc, #112]	; (8011b50 <_free_r+0x8c>)
 8011ade:	6813      	ldr	r3, [r2, #0]
 8011ae0:	b933      	cbnz	r3, 8011af0 <_free_r+0x2c>
 8011ae2:	6063      	str	r3, [r4, #4]
 8011ae4:	6014      	str	r4, [r2, #0]
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aec:	f001 bfd6 	b.w	8013a9c <__malloc_unlock>
 8011af0:	42a3      	cmp	r3, r4
 8011af2:	d908      	bls.n	8011b06 <_free_r+0x42>
 8011af4:	6820      	ldr	r0, [r4, #0]
 8011af6:	1821      	adds	r1, r4, r0
 8011af8:	428b      	cmp	r3, r1
 8011afa:	bf01      	itttt	eq
 8011afc:	6819      	ldreq	r1, [r3, #0]
 8011afe:	685b      	ldreq	r3, [r3, #4]
 8011b00:	1809      	addeq	r1, r1, r0
 8011b02:	6021      	streq	r1, [r4, #0]
 8011b04:	e7ed      	b.n	8011ae2 <_free_r+0x1e>
 8011b06:	461a      	mov	r2, r3
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	b10b      	cbz	r3, 8011b10 <_free_r+0x4c>
 8011b0c:	42a3      	cmp	r3, r4
 8011b0e:	d9fa      	bls.n	8011b06 <_free_r+0x42>
 8011b10:	6811      	ldr	r1, [r2, #0]
 8011b12:	1850      	adds	r0, r2, r1
 8011b14:	42a0      	cmp	r0, r4
 8011b16:	d10b      	bne.n	8011b30 <_free_r+0x6c>
 8011b18:	6820      	ldr	r0, [r4, #0]
 8011b1a:	4401      	add	r1, r0
 8011b1c:	1850      	adds	r0, r2, r1
 8011b1e:	4283      	cmp	r3, r0
 8011b20:	6011      	str	r1, [r2, #0]
 8011b22:	d1e0      	bne.n	8011ae6 <_free_r+0x22>
 8011b24:	6818      	ldr	r0, [r3, #0]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	4401      	add	r1, r0
 8011b2a:	6011      	str	r1, [r2, #0]
 8011b2c:	6053      	str	r3, [r2, #4]
 8011b2e:	e7da      	b.n	8011ae6 <_free_r+0x22>
 8011b30:	d902      	bls.n	8011b38 <_free_r+0x74>
 8011b32:	230c      	movs	r3, #12
 8011b34:	602b      	str	r3, [r5, #0]
 8011b36:	e7d6      	b.n	8011ae6 <_free_r+0x22>
 8011b38:	6820      	ldr	r0, [r4, #0]
 8011b3a:	1821      	adds	r1, r4, r0
 8011b3c:	428b      	cmp	r3, r1
 8011b3e:	bf01      	itttt	eq
 8011b40:	6819      	ldreq	r1, [r3, #0]
 8011b42:	685b      	ldreq	r3, [r3, #4]
 8011b44:	1809      	addeq	r1, r1, r0
 8011b46:	6021      	streq	r1, [r4, #0]
 8011b48:	6063      	str	r3, [r4, #4]
 8011b4a:	6054      	str	r4, [r2, #4]
 8011b4c:	e7cb      	b.n	8011ae6 <_free_r+0x22>
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	200028b0 	.word	0x200028b0

08011b54 <sbrk_aligned>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	4e0e      	ldr	r6, [pc, #56]	; (8011b90 <sbrk_aligned+0x3c>)
 8011b58:	460c      	mov	r4, r1
 8011b5a:	6831      	ldr	r1, [r6, #0]
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	b911      	cbnz	r1, 8011b66 <sbrk_aligned+0x12>
 8011b60:	f000 ff3c 	bl	80129dc <_sbrk_r>
 8011b64:	6030      	str	r0, [r6, #0]
 8011b66:	4621      	mov	r1, r4
 8011b68:	4628      	mov	r0, r5
 8011b6a:	f000 ff37 	bl	80129dc <_sbrk_r>
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	d00a      	beq.n	8011b88 <sbrk_aligned+0x34>
 8011b72:	1cc4      	adds	r4, r0, #3
 8011b74:	f024 0403 	bic.w	r4, r4, #3
 8011b78:	42a0      	cmp	r0, r4
 8011b7a:	d007      	beq.n	8011b8c <sbrk_aligned+0x38>
 8011b7c:	1a21      	subs	r1, r4, r0
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f000 ff2c 	bl	80129dc <_sbrk_r>
 8011b84:	3001      	adds	r0, #1
 8011b86:	d101      	bne.n	8011b8c <sbrk_aligned+0x38>
 8011b88:	f04f 34ff 	mov.w	r4, #4294967295
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}
 8011b90:	200028b4 	.word	0x200028b4

08011b94 <_malloc_r>:
 8011b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b98:	1ccd      	adds	r5, r1, #3
 8011b9a:	f025 0503 	bic.w	r5, r5, #3
 8011b9e:	3508      	adds	r5, #8
 8011ba0:	2d0c      	cmp	r5, #12
 8011ba2:	bf38      	it	cc
 8011ba4:	250c      	movcc	r5, #12
 8011ba6:	2d00      	cmp	r5, #0
 8011ba8:	4607      	mov	r7, r0
 8011baa:	db01      	blt.n	8011bb0 <_malloc_r+0x1c>
 8011bac:	42a9      	cmp	r1, r5
 8011bae:	d905      	bls.n	8011bbc <_malloc_r+0x28>
 8011bb0:	230c      	movs	r3, #12
 8011bb2:	2600      	movs	r6, #0
 8011bb4:	603b      	str	r3, [r7, #0]
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbc:	4e2e      	ldr	r6, [pc, #184]	; (8011c78 <_malloc_r+0xe4>)
 8011bbe:	f001 ff67 	bl	8013a90 <__malloc_lock>
 8011bc2:	6833      	ldr	r3, [r6, #0]
 8011bc4:	461c      	mov	r4, r3
 8011bc6:	bb34      	cbnz	r4, 8011c16 <_malloc_r+0x82>
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4638      	mov	r0, r7
 8011bcc:	f7ff ffc2 	bl	8011b54 <sbrk_aligned>
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	d14d      	bne.n	8011c72 <_malloc_r+0xde>
 8011bd6:	6834      	ldr	r4, [r6, #0]
 8011bd8:	4626      	mov	r6, r4
 8011bda:	2e00      	cmp	r6, #0
 8011bdc:	d140      	bne.n	8011c60 <_malloc_r+0xcc>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4631      	mov	r1, r6
 8011be2:	4638      	mov	r0, r7
 8011be4:	eb04 0803 	add.w	r8, r4, r3
 8011be8:	f000 fef8 	bl	80129dc <_sbrk_r>
 8011bec:	4580      	cmp	r8, r0
 8011bee:	d13a      	bne.n	8011c66 <_malloc_r+0xd2>
 8011bf0:	6821      	ldr	r1, [r4, #0]
 8011bf2:	3503      	adds	r5, #3
 8011bf4:	1a6d      	subs	r5, r5, r1
 8011bf6:	f025 0503 	bic.w	r5, r5, #3
 8011bfa:	3508      	adds	r5, #8
 8011bfc:	2d0c      	cmp	r5, #12
 8011bfe:	bf38      	it	cc
 8011c00:	250c      	movcc	r5, #12
 8011c02:	4638      	mov	r0, r7
 8011c04:	4629      	mov	r1, r5
 8011c06:	f7ff ffa5 	bl	8011b54 <sbrk_aligned>
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	d02b      	beq.n	8011c66 <_malloc_r+0xd2>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	442b      	add	r3, r5
 8011c12:	6023      	str	r3, [r4, #0]
 8011c14:	e00e      	b.n	8011c34 <_malloc_r+0xa0>
 8011c16:	6822      	ldr	r2, [r4, #0]
 8011c18:	1b52      	subs	r2, r2, r5
 8011c1a:	d41e      	bmi.n	8011c5a <_malloc_r+0xc6>
 8011c1c:	2a0b      	cmp	r2, #11
 8011c1e:	d916      	bls.n	8011c4e <_malloc_r+0xba>
 8011c20:	1961      	adds	r1, r4, r5
 8011c22:	42a3      	cmp	r3, r4
 8011c24:	6025      	str	r5, [r4, #0]
 8011c26:	bf18      	it	ne
 8011c28:	6059      	strne	r1, [r3, #4]
 8011c2a:	6863      	ldr	r3, [r4, #4]
 8011c2c:	bf08      	it	eq
 8011c2e:	6031      	streq	r1, [r6, #0]
 8011c30:	5162      	str	r2, [r4, r5]
 8011c32:	604b      	str	r3, [r1, #4]
 8011c34:	4638      	mov	r0, r7
 8011c36:	f104 060b 	add.w	r6, r4, #11
 8011c3a:	f001 ff2f 	bl	8013a9c <__malloc_unlock>
 8011c3e:	f026 0607 	bic.w	r6, r6, #7
 8011c42:	1d23      	adds	r3, r4, #4
 8011c44:	1af2      	subs	r2, r6, r3
 8011c46:	d0b6      	beq.n	8011bb6 <_malloc_r+0x22>
 8011c48:	1b9b      	subs	r3, r3, r6
 8011c4a:	50a3      	str	r3, [r4, r2]
 8011c4c:	e7b3      	b.n	8011bb6 <_malloc_r+0x22>
 8011c4e:	6862      	ldr	r2, [r4, #4]
 8011c50:	42a3      	cmp	r3, r4
 8011c52:	bf0c      	ite	eq
 8011c54:	6032      	streq	r2, [r6, #0]
 8011c56:	605a      	strne	r2, [r3, #4]
 8011c58:	e7ec      	b.n	8011c34 <_malloc_r+0xa0>
 8011c5a:	4623      	mov	r3, r4
 8011c5c:	6864      	ldr	r4, [r4, #4]
 8011c5e:	e7b2      	b.n	8011bc6 <_malloc_r+0x32>
 8011c60:	4634      	mov	r4, r6
 8011c62:	6876      	ldr	r6, [r6, #4]
 8011c64:	e7b9      	b.n	8011bda <_malloc_r+0x46>
 8011c66:	230c      	movs	r3, #12
 8011c68:	4638      	mov	r0, r7
 8011c6a:	603b      	str	r3, [r7, #0]
 8011c6c:	f001 ff16 	bl	8013a9c <__malloc_unlock>
 8011c70:	e7a1      	b.n	8011bb6 <_malloc_r+0x22>
 8011c72:	6025      	str	r5, [r4, #0]
 8011c74:	e7de      	b.n	8011c34 <_malloc_r+0xa0>
 8011c76:	bf00      	nop
 8011c78:	200028b0 	.word	0x200028b0

08011c7c <__sfputc_r>:
 8011c7c:	6893      	ldr	r3, [r2, #8]
 8011c7e:	b410      	push	{r4}
 8011c80:	3b01      	subs	r3, #1
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	6093      	str	r3, [r2, #8]
 8011c86:	da07      	bge.n	8011c98 <__sfputc_r+0x1c>
 8011c88:	6994      	ldr	r4, [r2, #24]
 8011c8a:	42a3      	cmp	r3, r4
 8011c8c:	db01      	blt.n	8011c92 <__sfputc_r+0x16>
 8011c8e:	290a      	cmp	r1, #10
 8011c90:	d102      	bne.n	8011c98 <__sfputc_r+0x1c>
 8011c92:	bc10      	pop	{r4}
 8011c94:	f000 bef6 	b.w	8012a84 <__swbuf_r>
 8011c98:	6813      	ldr	r3, [r2, #0]
 8011c9a:	1c58      	adds	r0, r3, #1
 8011c9c:	6010      	str	r0, [r2, #0]
 8011c9e:	7019      	strb	r1, [r3, #0]
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	bc10      	pop	{r4}
 8011ca4:	4770      	bx	lr

08011ca6 <__sfputs_r>:
 8011ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ca8:	4606      	mov	r6, r0
 8011caa:	460f      	mov	r7, r1
 8011cac:	4614      	mov	r4, r2
 8011cae:	18d5      	adds	r5, r2, r3
 8011cb0:	42ac      	cmp	r4, r5
 8011cb2:	d101      	bne.n	8011cb8 <__sfputs_r+0x12>
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	e007      	b.n	8011cc8 <__sfputs_r+0x22>
 8011cb8:	463a      	mov	r2, r7
 8011cba:	4630      	mov	r0, r6
 8011cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cc0:	f7ff ffdc 	bl	8011c7c <__sfputc_r>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d1f3      	bne.n	8011cb0 <__sfputs_r+0xa>
 8011cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ccc <_vfiprintf_r>:
 8011ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd0:	460d      	mov	r5, r1
 8011cd2:	4614      	mov	r4, r2
 8011cd4:	4698      	mov	r8, r3
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	b09d      	sub	sp, #116	; 0x74
 8011cda:	b118      	cbz	r0, 8011ce4 <_vfiprintf_r+0x18>
 8011cdc:	6983      	ldr	r3, [r0, #24]
 8011cde:	b90b      	cbnz	r3, 8011ce4 <_vfiprintf_r+0x18>
 8011ce0:	f7ff fdd0 	bl	8011884 <__sinit>
 8011ce4:	4b89      	ldr	r3, [pc, #548]	; (8011f0c <_vfiprintf_r+0x240>)
 8011ce6:	429d      	cmp	r5, r3
 8011ce8:	d11b      	bne.n	8011d22 <_vfiprintf_r+0x56>
 8011cea:	6875      	ldr	r5, [r6, #4]
 8011cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cee:	07d9      	lsls	r1, r3, #31
 8011cf0:	d405      	bmi.n	8011cfe <_vfiprintf_r+0x32>
 8011cf2:	89ab      	ldrh	r3, [r5, #12]
 8011cf4:	059a      	lsls	r2, r3, #22
 8011cf6:	d402      	bmi.n	8011cfe <_vfiprintf_r+0x32>
 8011cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cfa:	f7ff fe98 	bl	8011a2e <__retarget_lock_acquire_recursive>
 8011cfe:	89ab      	ldrh	r3, [r5, #12]
 8011d00:	071b      	lsls	r3, r3, #28
 8011d02:	d501      	bpl.n	8011d08 <_vfiprintf_r+0x3c>
 8011d04:	692b      	ldr	r3, [r5, #16]
 8011d06:	b9eb      	cbnz	r3, 8011d44 <_vfiprintf_r+0x78>
 8011d08:	4629      	mov	r1, r5
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f000 ff1e 	bl	8012b4c <__swsetup_r>
 8011d10:	b1c0      	cbz	r0, 8011d44 <_vfiprintf_r+0x78>
 8011d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d14:	07dc      	lsls	r4, r3, #31
 8011d16:	d50e      	bpl.n	8011d36 <_vfiprintf_r+0x6a>
 8011d18:	f04f 30ff 	mov.w	r0, #4294967295
 8011d1c:	b01d      	add	sp, #116	; 0x74
 8011d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d22:	4b7b      	ldr	r3, [pc, #492]	; (8011f10 <_vfiprintf_r+0x244>)
 8011d24:	429d      	cmp	r5, r3
 8011d26:	d101      	bne.n	8011d2c <_vfiprintf_r+0x60>
 8011d28:	68b5      	ldr	r5, [r6, #8]
 8011d2a:	e7df      	b.n	8011cec <_vfiprintf_r+0x20>
 8011d2c:	4b79      	ldr	r3, [pc, #484]	; (8011f14 <_vfiprintf_r+0x248>)
 8011d2e:	429d      	cmp	r5, r3
 8011d30:	bf08      	it	eq
 8011d32:	68f5      	ldreq	r5, [r6, #12]
 8011d34:	e7da      	b.n	8011cec <_vfiprintf_r+0x20>
 8011d36:	89ab      	ldrh	r3, [r5, #12]
 8011d38:	0598      	lsls	r0, r3, #22
 8011d3a:	d4ed      	bmi.n	8011d18 <_vfiprintf_r+0x4c>
 8011d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d3e:	f7ff fe77 	bl	8011a30 <__retarget_lock_release_recursive>
 8011d42:	e7e9      	b.n	8011d18 <_vfiprintf_r+0x4c>
 8011d44:	2300      	movs	r3, #0
 8011d46:	9309      	str	r3, [sp, #36]	; 0x24
 8011d48:	2320      	movs	r3, #32
 8011d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d4e:	2330      	movs	r3, #48	; 0x30
 8011d50:	f04f 0901 	mov.w	r9, #1
 8011d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011f18 <_vfiprintf_r+0x24c>
 8011d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d60:	4623      	mov	r3, r4
 8011d62:	469a      	mov	sl, r3
 8011d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d68:	b10a      	cbz	r2, 8011d6e <_vfiprintf_r+0xa2>
 8011d6a:	2a25      	cmp	r2, #37	; 0x25
 8011d6c:	d1f9      	bne.n	8011d62 <_vfiprintf_r+0x96>
 8011d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8011d72:	d00b      	beq.n	8011d8c <_vfiprintf_r+0xc0>
 8011d74:	465b      	mov	r3, fp
 8011d76:	4622      	mov	r2, r4
 8011d78:	4629      	mov	r1, r5
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	f7ff ff93 	bl	8011ca6 <__sfputs_r>
 8011d80:	3001      	adds	r0, #1
 8011d82:	f000 80aa 	beq.w	8011eda <_vfiprintf_r+0x20e>
 8011d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d88:	445a      	add	r2, fp
 8011d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8011d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f000 80a2 	beq.w	8011eda <_vfiprintf_r+0x20e>
 8011d96:	2300      	movs	r3, #0
 8011d98:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011da0:	f10a 0a01 	add.w	sl, sl, #1
 8011da4:	9304      	str	r3, [sp, #16]
 8011da6:	9307      	str	r3, [sp, #28]
 8011da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dac:	931a      	str	r3, [sp, #104]	; 0x68
 8011dae:	4654      	mov	r4, sl
 8011db0:	2205      	movs	r2, #5
 8011db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011db6:	4858      	ldr	r0, [pc, #352]	; (8011f18 <_vfiprintf_r+0x24c>)
 8011db8:	f001 fe5c 	bl	8013a74 <memchr>
 8011dbc:	9a04      	ldr	r2, [sp, #16]
 8011dbe:	b9d8      	cbnz	r0, 8011df8 <_vfiprintf_r+0x12c>
 8011dc0:	06d1      	lsls	r1, r2, #27
 8011dc2:	bf44      	itt	mi
 8011dc4:	2320      	movmi	r3, #32
 8011dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dca:	0713      	lsls	r3, r2, #28
 8011dcc:	bf44      	itt	mi
 8011dce:	232b      	movmi	r3, #43	; 0x2b
 8011dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8011dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dda:	d015      	beq.n	8011e08 <_vfiprintf_r+0x13c>
 8011ddc:	4654      	mov	r4, sl
 8011dde:	2000      	movs	r0, #0
 8011de0:	f04f 0c0a 	mov.w	ip, #10
 8011de4:	9a07      	ldr	r2, [sp, #28]
 8011de6:	4621      	mov	r1, r4
 8011de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dec:	3b30      	subs	r3, #48	; 0x30
 8011dee:	2b09      	cmp	r3, #9
 8011df0:	d94e      	bls.n	8011e90 <_vfiprintf_r+0x1c4>
 8011df2:	b1b0      	cbz	r0, 8011e22 <_vfiprintf_r+0x156>
 8011df4:	9207      	str	r2, [sp, #28]
 8011df6:	e014      	b.n	8011e22 <_vfiprintf_r+0x156>
 8011df8:	eba0 0308 	sub.w	r3, r0, r8
 8011dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8011e00:	4313      	orrs	r3, r2
 8011e02:	46a2      	mov	sl, r4
 8011e04:	9304      	str	r3, [sp, #16]
 8011e06:	e7d2      	b.n	8011dae <_vfiprintf_r+0xe2>
 8011e08:	9b03      	ldr	r3, [sp, #12]
 8011e0a:	1d19      	adds	r1, r3, #4
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	9103      	str	r1, [sp, #12]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	bfbb      	ittet	lt
 8011e14:	425b      	neglt	r3, r3
 8011e16:	f042 0202 	orrlt.w	r2, r2, #2
 8011e1a:	9307      	strge	r3, [sp, #28]
 8011e1c:	9307      	strlt	r3, [sp, #28]
 8011e1e:	bfb8      	it	lt
 8011e20:	9204      	strlt	r2, [sp, #16]
 8011e22:	7823      	ldrb	r3, [r4, #0]
 8011e24:	2b2e      	cmp	r3, #46	; 0x2e
 8011e26:	d10c      	bne.n	8011e42 <_vfiprintf_r+0x176>
 8011e28:	7863      	ldrb	r3, [r4, #1]
 8011e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e2c:	d135      	bne.n	8011e9a <_vfiprintf_r+0x1ce>
 8011e2e:	9b03      	ldr	r3, [sp, #12]
 8011e30:	3402      	adds	r4, #2
 8011e32:	1d1a      	adds	r2, r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	9203      	str	r2, [sp, #12]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bfb8      	it	lt
 8011e3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e40:	9305      	str	r3, [sp, #20]
 8011e42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8011f1c <_vfiprintf_r+0x250>
 8011e46:	2203      	movs	r2, #3
 8011e48:	4650      	mov	r0, sl
 8011e4a:	7821      	ldrb	r1, [r4, #0]
 8011e4c:	f001 fe12 	bl	8013a74 <memchr>
 8011e50:	b140      	cbz	r0, 8011e64 <_vfiprintf_r+0x198>
 8011e52:	2340      	movs	r3, #64	; 0x40
 8011e54:	eba0 000a 	sub.w	r0, r0, sl
 8011e58:	fa03 f000 	lsl.w	r0, r3, r0
 8011e5c:	9b04      	ldr	r3, [sp, #16]
 8011e5e:	3401      	adds	r4, #1
 8011e60:	4303      	orrs	r3, r0
 8011e62:	9304      	str	r3, [sp, #16]
 8011e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e68:	2206      	movs	r2, #6
 8011e6a:	482d      	ldr	r0, [pc, #180]	; (8011f20 <_vfiprintf_r+0x254>)
 8011e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e70:	f001 fe00 	bl	8013a74 <memchr>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d03f      	beq.n	8011ef8 <_vfiprintf_r+0x22c>
 8011e78:	4b2a      	ldr	r3, [pc, #168]	; (8011f24 <_vfiprintf_r+0x258>)
 8011e7a:	bb1b      	cbnz	r3, 8011ec4 <_vfiprintf_r+0x1f8>
 8011e7c:	9b03      	ldr	r3, [sp, #12]
 8011e7e:	3307      	adds	r3, #7
 8011e80:	f023 0307 	bic.w	r3, r3, #7
 8011e84:	3308      	adds	r3, #8
 8011e86:	9303      	str	r3, [sp, #12]
 8011e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e8a:	443b      	add	r3, r7
 8011e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e8e:	e767      	b.n	8011d60 <_vfiprintf_r+0x94>
 8011e90:	460c      	mov	r4, r1
 8011e92:	2001      	movs	r0, #1
 8011e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e98:	e7a5      	b.n	8011de6 <_vfiprintf_r+0x11a>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	f04f 0c0a 	mov.w	ip, #10
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	3401      	adds	r4, #1
 8011ea4:	9305      	str	r3, [sp, #20]
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eac:	3a30      	subs	r2, #48	; 0x30
 8011eae:	2a09      	cmp	r2, #9
 8011eb0:	d903      	bls.n	8011eba <_vfiprintf_r+0x1ee>
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d0c5      	beq.n	8011e42 <_vfiprintf_r+0x176>
 8011eb6:	9105      	str	r1, [sp, #20]
 8011eb8:	e7c3      	b.n	8011e42 <_vfiprintf_r+0x176>
 8011eba:	4604      	mov	r4, r0
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ec2:	e7f0      	b.n	8011ea6 <_vfiprintf_r+0x1da>
 8011ec4:	ab03      	add	r3, sp, #12
 8011ec6:	9300      	str	r3, [sp, #0]
 8011ec8:	462a      	mov	r2, r5
 8011eca:	4630      	mov	r0, r6
 8011ecc:	4b16      	ldr	r3, [pc, #88]	; (8011f28 <_vfiprintf_r+0x25c>)
 8011ece:	a904      	add	r1, sp, #16
 8011ed0:	f000 f8ca 	bl	8012068 <_printf_float>
 8011ed4:	4607      	mov	r7, r0
 8011ed6:	1c78      	adds	r0, r7, #1
 8011ed8:	d1d6      	bne.n	8011e88 <_vfiprintf_r+0x1bc>
 8011eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011edc:	07d9      	lsls	r1, r3, #31
 8011ede:	d405      	bmi.n	8011eec <_vfiprintf_r+0x220>
 8011ee0:	89ab      	ldrh	r3, [r5, #12]
 8011ee2:	059a      	lsls	r2, r3, #22
 8011ee4:	d402      	bmi.n	8011eec <_vfiprintf_r+0x220>
 8011ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ee8:	f7ff fda2 	bl	8011a30 <__retarget_lock_release_recursive>
 8011eec:	89ab      	ldrh	r3, [r5, #12]
 8011eee:	065b      	lsls	r3, r3, #25
 8011ef0:	f53f af12 	bmi.w	8011d18 <_vfiprintf_r+0x4c>
 8011ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ef6:	e711      	b.n	8011d1c <_vfiprintf_r+0x50>
 8011ef8:	ab03      	add	r3, sp, #12
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	462a      	mov	r2, r5
 8011efe:	4630      	mov	r0, r6
 8011f00:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <_vfiprintf_r+0x25c>)
 8011f02:	a904      	add	r1, sp, #16
 8011f04:	f000 fb4c 	bl	80125a0 <_printf_i>
 8011f08:	e7e4      	b.n	8011ed4 <_vfiprintf_r+0x208>
 8011f0a:	bf00      	nop
 8011f0c:	08016590 	.word	0x08016590
 8011f10:	080165b0 	.word	0x080165b0
 8011f14:	08016570 	.word	0x08016570
 8011f18:	080165d4 	.word	0x080165d4
 8011f1c:	080165da 	.word	0x080165da
 8011f20:	080165de 	.word	0x080165de
 8011f24:	08012069 	.word	0x08012069
 8011f28:	08011ca7 	.word	0x08011ca7

08011f2c <__cvt>:
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f32:	461f      	mov	r7, r3
 8011f34:	bfbb      	ittet	lt
 8011f36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011f3a:	461f      	movlt	r7, r3
 8011f3c:	2300      	movge	r3, #0
 8011f3e:	232d      	movlt	r3, #45	; 0x2d
 8011f40:	b088      	sub	sp, #32
 8011f42:	4614      	mov	r4, r2
 8011f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011f46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f48:	7013      	strb	r3, [r2, #0]
 8011f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011f50:	f023 0820 	bic.w	r8, r3, #32
 8011f54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f58:	d005      	beq.n	8011f66 <__cvt+0x3a>
 8011f5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011f5e:	d100      	bne.n	8011f62 <__cvt+0x36>
 8011f60:	3501      	adds	r5, #1
 8011f62:	2302      	movs	r3, #2
 8011f64:	e000      	b.n	8011f68 <__cvt+0x3c>
 8011f66:	2303      	movs	r3, #3
 8011f68:	aa07      	add	r2, sp, #28
 8011f6a:	9204      	str	r2, [sp, #16]
 8011f6c:	aa06      	add	r2, sp, #24
 8011f6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011f72:	e9cd 3500 	strd	r3, r5, [sp]
 8011f76:	4622      	mov	r2, r4
 8011f78:	463b      	mov	r3, r7
 8011f7a:	f000 ff11 	bl	8012da0 <_dtoa_r>
 8011f7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f82:	4606      	mov	r6, r0
 8011f84:	d102      	bne.n	8011f8c <__cvt+0x60>
 8011f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f88:	07db      	lsls	r3, r3, #31
 8011f8a:	d522      	bpl.n	8011fd2 <__cvt+0xa6>
 8011f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f90:	eb06 0905 	add.w	r9, r6, r5
 8011f94:	d110      	bne.n	8011fb8 <__cvt+0x8c>
 8011f96:	7833      	ldrb	r3, [r6, #0]
 8011f98:	2b30      	cmp	r3, #48	; 0x30
 8011f9a:	d10a      	bne.n	8011fb2 <__cvt+0x86>
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	4639      	mov	r1, r7
 8011fa4:	f7f1 fad8 	bl	8003558 <__aeabi_dcmpeq>
 8011fa8:	b918      	cbnz	r0, 8011fb2 <__cvt+0x86>
 8011faa:	f1c5 0501 	rsb	r5, r5, #1
 8011fae:	f8ca 5000 	str.w	r5, [sl]
 8011fb2:	f8da 3000 	ldr.w	r3, [sl]
 8011fb6:	4499      	add	r9, r3
 8011fb8:	2200      	movs	r2, #0
 8011fba:	2300      	movs	r3, #0
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	4639      	mov	r1, r7
 8011fc0:	f7f1 faca 	bl	8003558 <__aeabi_dcmpeq>
 8011fc4:	b108      	cbz	r0, 8011fca <__cvt+0x9e>
 8011fc6:	f8cd 901c 	str.w	r9, [sp, #28]
 8011fca:	2230      	movs	r2, #48	; 0x30
 8011fcc:	9b07      	ldr	r3, [sp, #28]
 8011fce:	454b      	cmp	r3, r9
 8011fd0:	d307      	bcc.n	8011fe2 <__cvt+0xb6>
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	9b07      	ldr	r3, [sp, #28]
 8011fd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fd8:	1b9b      	subs	r3, r3, r6
 8011fda:	6013      	str	r3, [r2, #0]
 8011fdc:	b008      	add	sp, #32
 8011fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fe2:	1c59      	adds	r1, r3, #1
 8011fe4:	9107      	str	r1, [sp, #28]
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	e7f0      	b.n	8011fcc <__cvt+0xa0>

08011fea <__exponent>:
 8011fea:	4603      	mov	r3, r0
 8011fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fee:	2900      	cmp	r1, #0
 8011ff0:	f803 2b02 	strb.w	r2, [r3], #2
 8011ff4:	bfb6      	itet	lt
 8011ff6:	222d      	movlt	r2, #45	; 0x2d
 8011ff8:	222b      	movge	r2, #43	; 0x2b
 8011ffa:	4249      	neglt	r1, r1
 8011ffc:	2909      	cmp	r1, #9
 8011ffe:	7042      	strb	r2, [r0, #1]
 8012000:	dd2b      	ble.n	801205a <__exponent+0x70>
 8012002:	f10d 0407 	add.w	r4, sp, #7
 8012006:	46a4      	mov	ip, r4
 8012008:	270a      	movs	r7, #10
 801200a:	fb91 f6f7 	sdiv	r6, r1, r7
 801200e:	460a      	mov	r2, r1
 8012010:	46a6      	mov	lr, r4
 8012012:	fb07 1516 	mls	r5, r7, r6, r1
 8012016:	2a63      	cmp	r2, #99	; 0x63
 8012018:	f105 0530 	add.w	r5, r5, #48	; 0x30
 801201c:	4631      	mov	r1, r6
 801201e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012022:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012026:	dcf0      	bgt.n	801200a <__exponent+0x20>
 8012028:	3130      	adds	r1, #48	; 0x30
 801202a:	f1ae 0502 	sub.w	r5, lr, #2
 801202e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012032:	4629      	mov	r1, r5
 8012034:	1c44      	adds	r4, r0, #1
 8012036:	4561      	cmp	r1, ip
 8012038:	d30a      	bcc.n	8012050 <__exponent+0x66>
 801203a:	f10d 0209 	add.w	r2, sp, #9
 801203e:	eba2 020e 	sub.w	r2, r2, lr
 8012042:	4565      	cmp	r5, ip
 8012044:	bf88      	it	hi
 8012046:	2200      	movhi	r2, #0
 8012048:	4413      	add	r3, r2
 801204a:	1a18      	subs	r0, r3, r0
 801204c:	b003      	add	sp, #12
 801204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012050:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012054:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012058:	e7ed      	b.n	8012036 <__exponent+0x4c>
 801205a:	2330      	movs	r3, #48	; 0x30
 801205c:	3130      	adds	r1, #48	; 0x30
 801205e:	7083      	strb	r3, [r0, #2]
 8012060:	70c1      	strb	r1, [r0, #3]
 8012062:	1d03      	adds	r3, r0, #4
 8012064:	e7f1      	b.n	801204a <__exponent+0x60>
	...

08012068 <_printf_float>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	b091      	sub	sp, #68	; 0x44
 801206e:	460c      	mov	r4, r1
 8012070:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012074:	4616      	mov	r6, r2
 8012076:	461f      	mov	r7, r3
 8012078:	4605      	mov	r5, r0
 801207a:	f001 fc7f 	bl	801397c <_localeconv_r>
 801207e:	6803      	ldr	r3, [r0, #0]
 8012080:	4618      	mov	r0, r3
 8012082:	9309      	str	r3, [sp, #36]	; 0x24
 8012084:	f7f0 fe3c 	bl	8002d00 <strlen>
 8012088:	2300      	movs	r3, #0
 801208a:	930e      	str	r3, [sp, #56]	; 0x38
 801208c:	f8d8 3000 	ldr.w	r3, [r8]
 8012090:	900a      	str	r0, [sp, #40]	; 0x28
 8012092:	3307      	adds	r3, #7
 8012094:	f023 0307 	bic.w	r3, r3, #7
 8012098:	f103 0208 	add.w	r2, r3, #8
 801209c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80120a0:	f8d4 b000 	ldr.w	fp, [r4]
 80120a4:	f8c8 2000 	str.w	r2, [r8]
 80120a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80120b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80120b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80120b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80120ba:	f04f 32ff 	mov.w	r2, #4294967295
 80120be:	4640      	mov	r0, r8
 80120c0:	4b9c      	ldr	r3, [pc, #624]	; (8012334 <_printf_float+0x2cc>)
 80120c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80120c4:	f7f1 fa7a 	bl	80035bc <__aeabi_dcmpun>
 80120c8:	bb70      	cbnz	r0, 8012128 <_printf_float+0xc0>
 80120ca:	f04f 32ff 	mov.w	r2, #4294967295
 80120ce:	4640      	mov	r0, r8
 80120d0:	4b98      	ldr	r3, [pc, #608]	; (8012334 <_printf_float+0x2cc>)
 80120d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80120d4:	f7f1 fa54 	bl	8003580 <__aeabi_dcmple>
 80120d8:	bb30      	cbnz	r0, 8012128 <_printf_float+0xc0>
 80120da:	2200      	movs	r2, #0
 80120dc:	2300      	movs	r3, #0
 80120de:	4640      	mov	r0, r8
 80120e0:	4651      	mov	r1, sl
 80120e2:	f7f1 fa43 	bl	800356c <__aeabi_dcmplt>
 80120e6:	b110      	cbz	r0, 80120ee <_printf_float+0x86>
 80120e8:	232d      	movs	r3, #45	; 0x2d
 80120ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120ee:	4b92      	ldr	r3, [pc, #584]	; (8012338 <_printf_float+0x2d0>)
 80120f0:	4892      	ldr	r0, [pc, #584]	; (801233c <_printf_float+0x2d4>)
 80120f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80120f6:	bf94      	ite	ls
 80120f8:	4698      	movls	r8, r3
 80120fa:	4680      	movhi	r8, r0
 80120fc:	2303      	movs	r3, #3
 80120fe:	f04f 0a00 	mov.w	sl, #0
 8012102:	6123      	str	r3, [r4, #16]
 8012104:	f02b 0304 	bic.w	r3, fp, #4
 8012108:	6023      	str	r3, [r4, #0]
 801210a:	4633      	mov	r3, r6
 801210c:	4621      	mov	r1, r4
 801210e:	4628      	mov	r0, r5
 8012110:	9700      	str	r7, [sp, #0]
 8012112:	aa0f      	add	r2, sp, #60	; 0x3c
 8012114:	f000 f9d4 	bl	80124c0 <_printf_common>
 8012118:	3001      	adds	r0, #1
 801211a:	f040 8090 	bne.w	801223e <_printf_float+0x1d6>
 801211e:	f04f 30ff 	mov.w	r0, #4294967295
 8012122:	b011      	add	sp, #68	; 0x44
 8012124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012128:	4642      	mov	r2, r8
 801212a:	4653      	mov	r3, sl
 801212c:	4640      	mov	r0, r8
 801212e:	4651      	mov	r1, sl
 8012130:	f7f1 fa44 	bl	80035bc <__aeabi_dcmpun>
 8012134:	b148      	cbz	r0, 801214a <_printf_float+0xe2>
 8012136:	f1ba 0f00 	cmp.w	sl, #0
 801213a:	bfb8      	it	lt
 801213c:	232d      	movlt	r3, #45	; 0x2d
 801213e:	4880      	ldr	r0, [pc, #512]	; (8012340 <_printf_float+0x2d8>)
 8012140:	bfb8      	it	lt
 8012142:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012146:	4b7f      	ldr	r3, [pc, #508]	; (8012344 <_printf_float+0x2dc>)
 8012148:	e7d3      	b.n	80120f2 <_printf_float+0x8a>
 801214a:	6863      	ldr	r3, [r4, #4]
 801214c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012150:	1c5a      	adds	r2, r3, #1
 8012152:	d142      	bne.n	80121da <_printf_float+0x172>
 8012154:	2306      	movs	r3, #6
 8012156:	6063      	str	r3, [r4, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	9206      	str	r2, [sp, #24]
 801215c:	aa0e      	add	r2, sp, #56	; 0x38
 801215e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8012162:	aa0d      	add	r2, sp, #52	; 0x34
 8012164:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8012168:	9203      	str	r2, [sp, #12]
 801216a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801216e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012172:	6023      	str	r3, [r4, #0]
 8012174:	6863      	ldr	r3, [r4, #4]
 8012176:	4642      	mov	r2, r8
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	4628      	mov	r0, r5
 801217c:	4653      	mov	r3, sl
 801217e:	910b      	str	r1, [sp, #44]	; 0x2c
 8012180:	f7ff fed4 	bl	8011f2c <__cvt>
 8012184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012186:	4680      	mov	r8, r0
 8012188:	2947      	cmp	r1, #71	; 0x47
 801218a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801218c:	d108      	bne.n	80121a0 <_printf_float+0x138>
 801218e:	1cc8      	adds	r0, r1, #3
 8012190:	db02      	blt.n	8012198 <_printf_float+0x130>
 8012192:	6863      	ldr	r3, [r4, #4]
 8012194:	4299      	cmp	r1, r3
 8012196:	dd40      	ble.n	801221a <_printf_float+0x1b2>
 8012198:	f1a9 0902 	sub.w	r9, r9, #2
 801219c:	fa5f f989 	uxtb.w	r9, r9
 80121a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80121a4:	d81f      	bhi.n	80121e6 <_printf_float+0x17e>
 80121a6:	464a      	mov	r2, r9
 80121a8:	3901      	subs	r1, #1
 80121aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121ae:	910d      	str	r1, [sp, #52]	; 0x34
 80121b0:	f7ff ff1b 	bl	8011fea <__exponent>
 80121b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121b6:	4682      	mov	sl, r0
 80121b8:	1813      	adds	r3, r2, r0
 80121ba:	2a01      	cmp	r2, #1
 80121bc:	6123      	str	r3, [r4, #16]
 80121be:	dc02      	bgt.n	80121c6 <_printf_float+0x15e>
 80121c0:	6822      	ldr	r2, [r4, #0]
 80121c2:	07d2      	lsls	r2, r2, #31
 80121c4:	d501      	bpl.n	80121ca <_printf_float+0x162>
 80121c6:	3301      	adds	r3, #1
 80121c8:	6123      	str	r3, [r4, #16]
 80121ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d09b      	beq.n	801210a <_printf_float+0xa2>
 80121d2:	232d      	movs	r3, #45	; 0x2d
 80121d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121d8:	e797      	b.n	801210a <_printf_float+0xa2>
 80121da:	2947      	cmp	r1, #71	; 0x47
 80121dc:	d1bc      	bne.n	8012158 <_printf_float+0xf0>
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1ba      	bne.n	8012158 <_printf_float+0xf0>
 80121e2:	2301      	movs	r3, #1
 80121e4:	e7b7      	b.n	8012156 <_printf_float+0xee>
 80121e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80121ea:	d118      	bne.n	801221e <_printf_float+0x1b6>
 80121ec:	2900      	cmp	r1, #0
 80121ee:	6863      	ldr	r3, [r4, #4]
 80121f0:	dd0b      	ble.n	801220a <_printf_float+0x1a2>
 80121f2:	6121      	str	r1, [r4, #16]
 80121f4:	b913      	cbnz	r3, 80121fc <_printf_float+0x194>
 80121f6:	6822      	ldr	r2, [r4, #0]
 80121f8:	07d0      	lsls	r0, r2, #31
 80121fa:	d502      	bpl.n	8012202 <_printf_float+0x19a>
 80121fc:	3301      	adds	r3, #1
 80121fe:	440b      	add	r3, r1
 8012200:	6123      	str	r3, [r4, #16]
 8012202:	f04f 0a00 	mov.w	sl, #0
 8012206:	65a1      	str	r1, [r4, #88]	; 0x58
 8012208:	e7df      	b.n	80121ca <_printf_float+0x162>
 801220a:	b913      	cbnz	r3, 8012212 <_printf_float+0x1aa>
 801220c:	6822      	ldr	r2, [r4, #0]
 801220e:	07d2      	lsls	r2, r2, #31
 8012210:	d501      	bpl.n	8012216 <_printf_float+0x1ae>
 8012212:	3302      	adds	r3, #2
 8012214:	e7f4      	b.n	8012200 <_printf_float+0x198>
 8012216:	2301      	movs	r3, #1
 8012218:	e7f2      	b.n	8012200 <_printf_float+0x198>
 801221a:	f04f 0967 	mov.w	r9, #103	; 0x67
 801221e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012220:	4299      	cmp	r1, r3
 8012222:	db05      	blt.n	8012230 <_printf_float+0x1c8>
 8012224:	6823      	ldr	r3, [r4, #0]
 8012226:	6121      	str	r1, [r4, #16]
 8012228:	07d8      	lsls	r0, r3, #31
 801222a:	d5ea      	bpl.n	8012202 <_printf_float+0x19a>
 801222c:	1c4b      	adds	r3, r1, #1
 801222e:	e7e7      	b.n	8012200 <_printf_float+0x198>
 8012230:	2900      	cmp	r1, #0
 8012232:	bfcc      	ite	gt
 8012234:	2201      	movgt	r2, #1
 8012236:	f1c1 0202 	rsble	r2, r1, #2
 801223a:	4413      	add	r3, r2
 801223c:	e7e0      	b.n	8012200 <_printf_float+0x198>
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	055a      	lsls	r2, r3, #21
 8012242:	d407      	bmi.n	8012254 <_printf_float+0x1ec>
 8012244:	6923      	ldr	r3, [r4, #16]
 8012246:	4642      	mov	r2, r8
 8012248:	4631      	mov	r1, r6
 801224a:	4628      	mov	r0, r5
 801224c:	47b8      	blx	r7
 801224e:	3001      	adds	r0, #1
 8012250:	d12b      	bne.n	80122aa <_printf_float+0x242>
 8012252:	e764      	b.n	801211e <_printf_float+0xb6>
 8012254:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012258:	f240 80dd 	bls.w	8012416 <_printf_float+0x3ae>
 801225c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012260:	2200      	movs	r2, #0
 8012262:	2300      	movs	r3, #0
 8012264:	f7f1 f978 	bl	8003558 <__aeabi_dcmpeq>
 8012268:	2800      	cmp	r0, #0
 801226a:	d033      	beq.n	80122d4 <_printf_float+0x26c>
 801226c:	2301      	movs	r3, #1
 801226e:	4631      	mov	r1, r6
 8012270:	4628      	mov	r0, r5
 8012272:	4a35      	ldr	r2, [pc, #212]	; (8012348 <_printf_float+0x2e0>)
 8012274:	47b8      	blx	r7
 8012276:	3001      	adds	r0, #1
 8012278:	f43f af51 	beq.w	801211e <_printf_float+0xb6>
 801227c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012280:	429a      	cmp	r2, r3
 8012282:	db02      	blt.n	801228a <_printf_float+0x222>
 8012284:	6823      	ldr	r3, [r4, #0]
 8012286:	07d8      	lsls	r0, r3, #31
 8012288:	d50f      	bpl.n	80122aa <_printf_float+0x242>
 801228a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801228e:	4631      	mov	r1, r6
 8012290:	4628      	mov	r0, r5
 8012292:	47b8      	blx	r7
 8012294:	3001      	adds	r0, #1
 8012296:	f43f af42 	beq.w	801211e <_printf_float+0xb6>
 801229a:	f04f 0800 	mov.w	r8, #0
 801229e:	f104 091a 	add.w	r9, r4, #26
 80122a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122a4:	3b01      	subs	r3, #1
 80122a6:	4543      	cmp	r3, r8
 80122a8:	dc09      	bgt.n	80122be <_printf_float+0x256>
 80122aa:	6823      	ldr	r3, [r4, #0]
 80122ac:	079b      	lsls	r3, r3, #30
 80122ae:	f100 8102 	bmi.w	80124b6 <_printf_float+0x44e>
 80122b2:	68e0      	ldr	r0, [r4, #12]
 80122b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122b6:	4298      	cmp	r0, r3
 80122b8:	bfb8      	it	lt
 80122ba:	4618      	movlt	r0, r3
 80122bc:	e731      	b.n	8012122 <_printf_float+0xba>
 80122be:	2301      	movs	r3, #1
 80122c0:	464a      	mov	r2, r9
 80122c2:	4631      	mov	r1, r6
 80122c4:	4628      	mov	r0, r5
 80122c6:	47b8      	blx	r7
 80122c8:	3001      	adds	r0, #1
 80122ca:	f43f af28 	beq.w	801211e <_printf_float+0xb6>
 80122ce:	f108 0801 	add.w	r8, r8, #1
 80122d2:	e7e6      	b.n	80122a2 <_printf_float+0x23a>
 80122d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	dc38      	bgt.n	801234c <_printf_float+0x2e4>
 80122da:	2301      	movs	r3, #1
 80122dc:	4631      	mov	r1, r6
 80122de:	4628      	mov	r0, r5
 80122e0:	4a19      	ldr	r2, [pc, #100]	; (8012348 <_printf_float+0x2e0>)
 80122e2:	47b8      	blx	r7
 80122e4:	3001      	adds	r0, #1
 80122e6:	f43f af1a 	beq.w	801211e <_printf_float+0xb6>
 80122ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80122ee:	4313      	orrs	r3, r2
 80122f0:	d102      	bne.n	80122f8 <_printf_float+0x290>
 80122f2:	6823      	ldr	r3, [r4, #0]
 80122f4:	07d9      	lsls	r1, r3, #31
 80122f6:	d5d8      	bpl.n	80122aa <_printf_float+0x242>
 80122f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122fc:	4631      	mov	r1, r6
 80122fe:	4628      	mov	r0, r5
 8012300:	47b8      	blx	r7
 8012302:	3001      	adds	r0, #1
 8012304:	f43f af0b 	beq.w	801211e <_printf_float+0xb6>
 8012308:	f04f 0900 	mov.w	r9, #0
 801230c:	f104 0a1a 	add.w	sl, r4, #26
 8012310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012312:	425b      	negs	r3, r3
 8012314:	454b      	cmp	r3, r9
 8012316:	dc01      	bgt.n	801231c <_printf_float+0x2b4>
 8012318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801231a:	e794      	b.n	8012246 <_printf_float+0x1de>
 801231c:	2301      	movs	r3, #1
 801231e:	4652      	mov	r2, sl
 8012320:	4631      	mov	r1, r6
 8012322:	4628      	mov	r0, r5
 8012324:	47b8      	blx	r7
 8012326:	3001      	adds	r0, #1
 8012328:	f43f aef9 	beq.w	801211e <_printf_float+0xb6>
 801232c:	f109 0901 	add.w	r9, r9, #1
 8012330:	e7ee      	b.n	8012310 <_printf_float+0x2a8>
 8012332:	bf00      	nop
 8012334:	7fefffff 	.word	0x7fefffff
 8012338:	080165e5 	.word	0x080165e5
 801233c:	080165e9 	.word	0x080165e9
 8012340:	080165f1 	.word	0x080165f1
 8012344:	080165ed 	.word	0x080165ed
 8012348:	080165f5 	.word	0x080165f5
 801234c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801234e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012350:	429a      	cmp	r2, r3
 8012352:	bfa8      	it	ge
 8012354:	461a      	movge	r2, r3
 8012356:	2a00      	cmp	r2, #0
 8012358:	4691      	mov	r9, r2
 801235a:	dc37      	bgt.n	80123cc <_printf_float+0x364>
 801235c:	f04f 0b00 	mov.w	fp, #0
 8012360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012364:	f104 021a 	add.w	r2, r4, #26
 8012368:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801236c:	ebaa 0309 	sub.w	r3, sl, r9
 8012370:	455b      	cmp	r3, fp
 8012372:	dc33      	bgt.n	80123dc <_printf_float+0x374>
 8012374:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012378:	429a      	cmp	r2, r3
 801237a:	db3b      	blt.n	80123f4 <_printf_float+0x38c>
 801237c:	6823      	ldr	r3, [r4, #0]
 801237e:	07da      	lsls	r2, r3, #31
 8012380:	d438      	bmi.n	80123f4 <_printf_float+0x38c>
 8012382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012384:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012386:	eba3 020a 	sub.w	r2, r3, sl
 801238a:	eba3 0901 	sub.w	r9, r3, r1
 801238e:	4591      	cmp	r9, r2
 8012390:	bfa8      	it	ge
 8012392:	4691      	movge	r9, r2
 8012394:	f1b9 0f00 	cmp.w	r9, #0
 8012398:	dc34      	bgt.n	8012404 <_printf_float+0x39c>
 801239a:	f04f 0800 	mov.w	r8, #0
 801239e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123a2:	f104 0a1a 	add.w	sl, r4, #26
 80123a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80123aa:	1a9b      	subs	r3, r3, r2
 80123ac:	eba3 0309 	sub.w	r3, r3, r9
 80123b0:	4543      	cmp	r3, r8
 80123b2:	f77f af7a 	ble.w	80122aa <_printf_float+0x242>
 80123b6:	2301      	movs	r3, #1
 80123b8:	4652      	mov	r2, sl
 80123ba:	4631      	mov	r1, r6
 80123bc:	4628      	mov	r0, r5
 80123be:	47b8      	blx	r7
 80123c0:	3001      	adds	r0, #1
 80123c2:	f43f aeac 	beq.w	801211e <_printf_float+0xb6>
 80123c6:	f108 0801 	add.w	r8, r8, #1
 80123ca:	e7ec      	b.n	80123a6 <_printf_float+0x33e>
 80123cc:	4613      	mov	r3, r2
 80123ce:	4631      	mov	r1, r6
 80123d0:	4642      	mov	r2, r8
 80123d2:	4628      	mov	r0, r5
 80123d4:	47b8      	blx	r7
 80123d6:	3001      	adds	r0, #1
 80123d8:	d1c0      	bne.n	801235c <_printf_float+0x2f4>
 80123da:	e6a0      	b.n	801211e <_printf_float+0xb6>
 80123dc:	2301      	movs	r3, #1
 80123de:	4631      	mov	r1, r6
 80123e0:	4628      	mov	r0, r5
 80123e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80123e4:	47b8      	blx	r7
 80123e6:	3001      	adds	r0, #1
 80123e8:	f43f ae99 	beq.w	801211e <_printf_float+0xb6>
 80123ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80123ee:	f10b 0b01 	add.w	fp, fp, #1
 80123f2:	e7b9      	b.n	8012368 <_printf_float+0x300>
 80123f4:	4631      	mov	r1, r6
 80123f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123fa:	4628      	mov	r0, r5
 80123fc:	47b8      	blx	r7
 80123fe:	3001      	adds	r0, #1
 8012400:	d1bf      	bne.n	8012382 <_printf_float+0x31a>
 8012402:	e68c      	b.n	801211e <_printf_float+0xb6>
 8012404:	464b      	mov	r3, r9
 8012406:	4631      	mov	r1, r6
 8012408:	4628      	mov	r0, r5
 801240a:	eb08 020a 	add.w	r2, r8, sl
 801240e:	47b8      	blx	r7
 8012410:	3001      	adds	r0, #1
 8012412:	d1c2      	bne.n	801239a <_printf_float+0x332>
 8012414:	e683      	b.n	801211e <_printf_float+0xb6>
 8012416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012418:	2a01      	cmp	r2, #1
 801241a:	dc01      	bgt.n	8012420 <_printf_float+0x3b8>
 801241c:	07db      	lsls	r3, r3, #31
 801241e:	d537      	bpl.n	8012490 <_printf_float+0x428>
 8012420:	2301      	movs	r3, #1
 8012422:	4642      	mov	r2, r8
 8012424:	4631      	mov	r1, r6
 8012426:	4628      	mov	r0, r5
 8012428:	47b8      	blx	r7
 801242a:	3001      	adds	r0, #1
 801242c:	f43f ae77 	beq.w	801211e <_printf_float+0xb6>
 8012430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012434:	4631      	mov	r1, r6
 8012436:	4628      	mov	r0, r5
 8012438:	47b8      	blx	r7
 801243a:	3001      	adds	r0, #1
 801243c:	f43f ae6f 	beq.w	801211e <_printf_float+0xb6>
 8012440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012444:	2200      	movs	r2, #0
 8012446:	2300      	movs	r3, #0
 8012448:	f7f1 f886 	bl	8003558 <__aeabi_dcmpeq>
 801244c:	b9d8      	cbnz	r0, 8012486 <_printf_float+0x41e>
 801244e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012450:	f108 0201 	add.w	r2, r8, #1
 8012454:	3b01      	subs	r3, #1
 8012456:	4631      	mov	r1, r6
 8012458:	4628      	mov	r0, r5
 801245a:	47b8      	blx	r7
 801245c:	3001      	adds	r0, #1
 801245e:	d10e      	bne.n	801247e <_printf_float+0x416>
 8012460:	e65d      	b.n	801211e <_printf_float+0xb6>
 8012462:	2301      	movs	r3, #1
 8012464:	464a      	mov	r2, r9
 8012466:	4631      	mov	r1, r6
 8012468:	4628      	mov	r0, r5
 801246a:	47b8      	blx	r7
 801246c:	3001      	adds	r0, #1
 801246e:	f43f ae56 	beq.w	801211e <_printf_float+0xb6>
 8012472:	f108 0801 	add.w	r8, r8, #1
 8012476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012478:	3b01      	subs	r3, #1
 801247a:	4543      	cmp	r3, r8
 801247c:	dcf1      	bgt.n	8012462 <_printf_float+0x3fa>
 801247e:	4653      	mov	r3, sl
 8012480:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012484:	e6e0      	b.n	8012248 <_printf_float+0x1e0>
 8012486:	f04f 0800 	mov.w	r8, #0
 801248a:	f104 091a 	add.w	r9, r4, #26
 801248e:	e7f2      	b.n	8012476 <_printf_float+0x40e>
 8012490:	2301      	movs	r3, #1
 8012492:	4642      	mov	r2, r8
 8012494:	e7df      	b.n	8012456 <_printf_float+0x3ee>
 8012496:	2301      	movs	r3, #1
 8012498:	464a      	mov	r2, r9
 801249a:	4631      	mov	r1, r6
 801249c:	4628      	mov	r0, r5
 801249e:	47b8      	blx	r7
 80124a0:	3001      	adds	r0, #1
 80124a2:	f43f ae3c 	beq.w	801211e <_printf_float+0xb6>
 80124a6:	f108 0801 	add.w	r8, r8, #1
 80124aa:	68e3      	ldr	r3, [r4, #12]
 80124ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80124ae:	1a5b      	subs	r3, r3, r1
 80124b0:	4543      	cmp	r3, r8
 80124b2:	dcf0      	bgt.n	8012496 <_printf_float+0x42e>
 80124b4:	e6fd      	b.n	80122b2 <_printf_float+0x24a>
 80124b6:	f04f 0800 	mov.w	r8, #0
 80124ba:	f104 0919 	add.w	r9, r4, #25
 80124be:	e7f4      	b.n	80124aa <_printf_float+0x442>

080124c0 <_printf_common>:
 80124c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124c4:	4616      	mov	r6, r2
 80124c6:	4699      	mov	r9, r3
 80124c8:	688a      	ldr	r2, [r1, #8]
 80124ca:	690b      	ldr	r3, [r1, #16]
 80124cc:	4607      	mov	r7, r0
 80124ce:	4293      	cmp	r3, r2
 80124d0:	bfb8      	it	lt
 80124d2:	4613      	movlt	r3, r2
 80124d4:	6033      	str	r3, [r6, #0]
 80124d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124da:	460c      	mov	r4, r1
 80124dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124e0:	b10a      	cbz	r2, 80124e6 <_printf_common+0x26>
 80124e2:	3301      	adds	r3, #1
 80124e4:	6033      	str	r3, [r6, #0]
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	0699      	lsls	r1, r3, #26
 80124ea:	bf42      	ittt	mi
 80124ec:	6833      	ldrmi	r3, [r6, #0]
 80124ee:	3302      	addmi	r3, #2
 80124f0:	6033      	strmi	r3, [r6, #0]
 80124f2:	6825      	ldr	r5, [r4, #0]
 80124f4:	f015 0506 	ands.w	r5, r5, #6
 80124f8:	d106      	bne.n	8012508 <_printf_common+0x48>
 80124fa:	f104 0a19 	add.w	sl, r4, #25
 80124fe:	68e3      	ldr	r3, [r4, #12]
 8012500:	6832      	ldr	r2, [r6, #0]
 8012502:	1a9b      	subs	r3, r3, r2
 8012504:	42ab      	cmp	r3, r5
 8012506:	dc28      	bgt.n	801255a <_printf_common+0x9a>
 8012508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801250c:	1e13      	subs	r3, r2, #0
 801250e:	6822      	ldr	r2, [r4, #0]
 8012510:	bf18      	it	ne
 8012512:	2301      	movne	r3, #1
 8012514:	0692      	lsls	r2, r2, #26
 8012516:	d42d      	bmi.n	8012574 <_printf_common+0xb4>
 8012518:	4649      	mov	r1, r9
 801251a:	4638      	mov	r0, r7
 801251c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012520:	47c0      	blx	r8
 8012522:	3001      	adds	r0, #1
 8012524:	d020      	beq.n	8012568 <_printf_common+0xa8>
 8012526:	6823      	ldr	r3, [r4, #0]
 8012528:	68e5      	ldr	r5, [r4, #12]
 801252a:	f003 0306 	and.w	r3, r3, #6
 801252e:	2b04      	cmp	r3, #4
 8012530:	bf18      	it	ne
 8012532:	2500      	movne	r5, #0
 8012534:	6832      	ldr	r2, [r6, #0]
 8012536:	f04f 0600 	mov.w	r6, #0
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	bf08      	it	eq
 801253e:	1aad      	subeq	r5, r5, r2
 8012540:	6922      	ldr	r2, [r4, #16]
 8012542:	bf08      	it	eq
 8012544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012548:	4293      	cmp	r3, r2
 801254a:	bfc4      	itt	gt
 801254c:	1a9b      	subgt	r3, r3, r2
 801254e:	18ed      	addgt	r5, r5, r3
 8012550:	341a      	adds	r4, #26
 8012552:	42b5      	cmp	r5, r6
 8012554:	d11a      	bne.n	801258c <_printf_common+0xcc>
 8012556:	2000      	movs	r0, #0
 8012558:	e008      	b.n	801256c <_printf_common+0xac>
 801255a:	2301      	movs	r3, #1
 801255c:	4652      	mov	r2, sl
 801255e:	4649      	mov	r1, r9
 8012560:	4638      	mov	r0, r7
 8012562:	47c0      	blx	r8
 8012564:	3001      	adds	r0, #1
 8012566:	d103      	bne.n	8012570 <_printf_common+0xb0>
 8012568:	f04f 30ff 	mov.w	r0, #4294967295
 801256c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012570:	3501      	adds	r5, #1
 8012572:	e7c4      	b.n	80124fe <_printf_common+0x3e>
 8012574:	2030      	movs	r0, #48	; 0x30
 8012576:	18e1      	adds	r1, r4, r3
 8012578:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801257c:	1c5a      	adds	r2, r3, #1
 801257e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012582:	4422      	add	r2, r4
 8012584:	3302      	adds	r3, #2
 8012586:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801258a:	e7c5      	b.n	8012518 <_printf_common+0x58>
 801258c:	2301      	movs	r3, #1
 801258e:	4622      	mov	r2, r4
 8012590:	4649      	mov	r1, r9
 8012592:	4638      	mov	r0, r7
 8012594:	47c0      	blx	r8
 8012596:	3001      	adds	r0, #1
 8012598:	d0e6      	beq.n	8012568 <_printf_common+0xa8>
 801259a:	3601      	adds	r6, #1
 801259c:	e7d9      	b.n	8012552 <_printf_common+0x92>
	...

080125a0 <_printf_i>:
 80125a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125a4:	7e0f      	ldrb	r7, [r1, #24]
 80125a6:	4691      	mov	r9, r2
 80125a8:	2f78      	cmp	r7, #120	; 0x78
 80125aa:	4680      	mov	r8, r0
 80125ac:	460c      	mov	r4, r1
 80125ae:	469a      	mov	sl, r3
 80125b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80125b6:	d807      	bhi.n	80125c8 <_printf_i+0x28>
 80125b8:	2f62      	cmp	r7, #98	; 0x62
 80125ba:	d80a      	bhi.n	80125d2 <_printf_i+0x32>
 80125bc:	2f00      	cmp	r7, #0
 80125be:	f000 80d9 	beq.w	8012774 <_printf_i+0x1d4>
 80125c2:	2f58      	cmp	r7, #88	; 0x58
 80125c4:	f000 80a4 	beq.w	8012710 <_printf_i+0x170>
 80125c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125d0:	e03a      	b.n	8012648 <_printf_i+0xa8>
 80125d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125d6:	2b15      	cmp	r3, #21
 80125d8:	d8f6      	bhi.n	80125c8 <_printf_i+0x28>
 80125da:	a101      	add	r1, pc, #4	; (adr r1, 80125e0 <_printf_i+0x40>)
 80125dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125e0:	08012639 	.word	0x08012639
 80125e4:	0801264d 	.word	0x0801264d
 80125e8:	080125c9 	.word	0x080125c9
 80125ec:	080125c9 	.word	0x080125c9
 80125f0:	080125c9 	.word	0x080125c9
 80125f4:	080125c9 	.word	0x080125c9
 80125f8:	0801264d 	.word	0x0801264d
 80125fc:	080125c9 	.word	0x080125c9
 8012600:	080125c9 	.word	0x080125c9
 8012604:	080125c9 	.word	0x080125c9
 8012608:	080125c9 	.word	0x080125c9
 801260c:	0801275b 	.word	0x0801275b
 8012610:	0801267d 	.word	0x0801267d
 8012614:	0801273d 	.word	0x0801273d
 8012618:	080125c9 	.word	0x080125c9
 801261c:	080125c9 	.word	0x080125c9
 8012620:	0801277d 	.word	0x0801277d
 8012624:	080125c9 	.word	0x080125c9
 8012628:	0801267d 	.word	0x0801267d
 801262c:	080125c9 	.word	0x080125c9
 8012630:	080125c9 	.word	0x080125c9
 8012634:	08012745 	.word	0x08012745
 8012638:	682b      	ldr	r3, [r5, #0]
 801263a:	1d1a      	adds	r2, r3, #4
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	602a      	str	r2, [r5, #0]
 8012640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012648:	2301      	movs	r3, #1
 801264a:	e0a4      	b.n	8012796 <_printf_i+0x1f6>
 801264c:	6820      	ldr	r0, [r4, #0]
 801264e:	6829      	ldr	r1, [r5, #0]
 8012650:	0606      	lsls	r6, r0, #24
 8012652:	f101 0304 	add.w	r3, r1, #4
 8012656:	d50a      	bpl.n	801266e <_printf_i+0xce>
 8012658:	680e      	ldr	r6, [r1, #0]
 801265a:	602b      	str	r3, [r5, #0]
 801265c:	2e00      	cmp	r6, #0
 801265e:	da03      	bge.n	8012668 <_printf_i+0xc8>
 8012660:	232d      	movs	r3, #45	; 0x2d
 8012662:	4276      	negs	r6, r6
 8012664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012668:	230a      	movs	r3, #10
 801266a:	485e      	ldr	r0, [pc, #376]	; (80127e4 <_printf_i+0x244>)
 801266c:	e019      	b.n	80126a2 <_printf_i+0x102>
 801266e:	680e      	ldr	r6, [r1, #0]
 8012670:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012674:	602b      	str	r3, [r5, #0]
 8012676:	bf18      	it	ne
 8012678:	b236      	sxthne	r6, r6
 801267a:	e7ef      	b.n	801265c <_printf_i+0xbc>
 801267c:	682b      	ldr	r3, [r5, #0]
 801267e:	6820      	ldr	r0, [r4, #0]
 8012680:	1d19      	adds	r1, r3, #4
 8012682:	6029      	str	r1, [r5, #0]
 8012684:	0601      	lsls	r1, r0, #24
 8012686:	d501      	bpl.n	801268c <_printf_i+0xec>
 8012688:	681e      	ldr	r6, [r3, #0]
 801268a:	e002      	b.n	8012692 <_printf_i+0xf2>
 801268c:	0646      	lsls	r6, r0, #25
 801268e:	d5fb      	bpl.n	8012688 <_printf_i+0xe8>
 8012690:	881e      	ldrh	r6, [r3, #0]
 8012692:	2f6f      	cmp	r7, #111	; 0x6f
 8012694:	bf0c      	ite	eq
 8012696:	2308      	moveq	r3, #8
 8012698:	230a      	movne	r3, #10
 801269a:	4852      	ldr	r0, [pc, #328]	; (80127e4 <_printf_i+0x244>)
 801269c:	2100      	movs	r1, #0
 801269e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126a2:	6865      	ldr	r5, [r4, #4]
 80126a4:	2d00      	cmp	r5, #0
 80126a6:	bfa8      	it	ge
 80126a8:	6821      	ldrge	r1, [r4, #0]
 80126aa:	60a5      	str	r5, [r4, #8]
 80126ac:	bfa4      	itt	ge
 80126ae:	f021 0104 	bicge.w	r1, r1, #4
 80126b2:	6021      	strge	r1, [r4, #0]
 80126b4:	b90e      	cbnz	r6, 80126ba <_printf_i+0x11a>
 80126b6:	2d00      	cmp	r5, #0
 80126b8:	d04d      	beq.n	8012756 <_printf_i+0x1b6>
 80126ba:	4615      	mov	r5, r2
 80126bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80126c0:	fb03 6711 	mls	r7, r3, r1, r6
 80126c4:	5dc7      	ldrb	r7, [r0, r7]
 80126c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80126ca:	4637      	mov	r7, r6
 80126cc:	42bb      	cmp	r3, r7
 80126ce:	460e      	mov	r6, r1
 80126d0:	d9f4      	bls.n	80126bc <_printf_i+0x11c>
 80126d2:	2b08      	cmp	r3, #8
 80126d4:	d10b      	bne.n	80126ee <_printf_i+0x14e>
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	07de      	lsls	r6, r3, #31
 80126da:	d508      	bpl.n	80126ee <_printf_i+0x14e>
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	6861      	ldr	r1, [r4, #4]
 80126e0:	4299      	cmp	r1, r3
 80126e2:	bfde      	ittt	le
 80126e4:	2330      	movle	r3, #48	; 0x30
 80126e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80126ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80126ee:	1b52      	subs	r2, r2, r5
 80126f0:	6122      	str	r2, [r4, #16]
 80126f2:	464b      	mov	r3, r9
 80126f4:	4621      	mov	r1, r4
 80126f6:	4640      	mov	r0, r8
 80126f8:	f8cd a000 	str.w	sl, [sp]
 80126fc:	aa03      	add	r2, sp, #12
 80126fe:	f7ff fedf 	bl	80124c0 <_printf_common>
 8012702:	3001      	adds	r0, #1
 8012704:	d14c      	bne.n	80127a0 <_printf_i+0x200>
 8012706:	f04f 30ff 	mov.w	r0, #4294967295
 801270a:	b004      	add	sp, #16
 801270c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012710:	4834      	ldr	r0, [pc, #208]	; (80127e4 <_printf_i+0x244>)
 8012712:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012716:	6829      	ldr	r1, [r5, #0]
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	f851 6b04 	ldr.w	r6, [r1], #4
 801271e:	6029      	str	r1, [r5, #0]
 8012720:	061d      	lsls	r5, r3, #24
 8012722:	d514      	bpl.n	801274e <_printf_i+0x1ae>
 8012724:	07df      	lsls	r7, r3, #31
 8012726:	bf44      	itt	mi
 8012728:	f043 0320 	orrmi.w	r3, r3, #32
 801272c:	6023      	strmi	r3, [r4, #0]
 801272e:	b91e      	cbnz	r6, 8012738 <_printf_i+0x198>
 8012730:	6823      	ldr	r3, [r4, #0]
 8012732:	f023 0320 	bic.w	r3, r3, #32
 8012736:	6023      	str	r3, [r4, #0]
 8012738:	2310      	movs	r3, #16
 801273a:	e7af      	b.n	801269c <_printf_i+0xfc>
 801273c:	6823      	ldr	r3, [r4, #0]
 801273e:	f043 0320 	orr.w	r3, r3, #32
 8012742:	6023      	str	r3, [r4, #0]
 8012744:	2378      	movs	r3, #120	; 0x78
 8012746:	4828      	ldr	r0, [pc, #160]	; (80127e8 <_printf_i+0x248>)
 8012748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801274c:	e7e3      	b.n	8012716 <_printf_i+0x176>
 801274e:	0659      	lsls	r1, r3, #25
 8012750:	bf48      	it	mi
 8012752:	b2b6      	uxthmi	r6, r6
 8012754:	e7e6      	b.n	8012724 <_printf_i+0x184>
 8012756:	4615      	mov	r5, r2
 8012758:	e7bb      	b.n	80126d2 <_printf_i+0x132>
 801275a:	682b      	ldr	r3, [r5, #0]
 801275c:	6826      	ldr	r6, [r4, #0]
 801275e:	1d18      	adds	r0, r3, #4
 8012760:	6961      	ldr	r1, [r4, #20]
 8012762:	6028      	str	r0, [r5, #0]
 8012764:	0635      	lsls	r5, r6, #24
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	d501      	bpl.n	801276e <_printf_i+0x1ce>
 801276a:	6019      	str	r1, [r3, #0]
 801276c:	e002      	b.n	8012774 <_printf_i+0x1d4>
 801276e:	0670      	lsls	r0, r6, #25
 8012770:	d5fb      	bpl.n	801276a <_printf_i+0x1ca>
 8012772:	8019      	strh	r1, [r3, #0]
 8012774:	2300      	movs	r3, #0
 8012776:	4615      	mov	r5, r2
 8012778:	6123      	str	r3, [r4, #16]
 801277a:	e7ba      	b.n	80126f2 <_printf_i+0x152>
 801277c:	682b      	ldr	r3, [r5, #0]
 801277e:	2100      	movs	r1, #0
 8012780:	1d1a      	adds	r2, r3, #4
 8012782:	602a      	str	r2, [r5, #0]
 8012784:	681d      	ldr	r5, [r3, #0]
 8012786:	6862      	ldr	r2, [r4, #4]
 8012788:	4628      	mov	r0, r5
 801278a:	f001 f973 	bl	8013a74 <memchr>
 801278e:	b108      	cbz	r0, 8012794 <_printf_i+0x1f4>
 8012790:	1b40      	subs	r0, r0, r5
 8012792:	6060      	str	r0, [r4, #4]
 8012794:	6863      	ldr	r3, [r4, #4]
 8012796:	6123      	str	r3, [r4, #16]
 8012798:	2300      	movs	r3, #0
 801279a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801279e:	e7a8      	b.n	80126f2 <_printf_i+0x152>
 80127a0:	462a      	mov	r2, r5
 80127a2:	4649      	mov	r1, r9
 80127a4:	4640      	mov	r0, r8
 80127a6:	6923      	ldr	r3, [r4, #16]
 80127a8:	47d0      	blx	sl
 80127aa:	3001      	adds	r0, #1
 80127ac:	d0ab      	beq.n	8012706 <_printf_i+0x166>
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	079b      	lsls	r3, r3, #30
 80127b2:	d413      	bmi.n	80127dc <_printf_i+0x23c>
 80127b4:	68e0      	ldr	r0, [r4, #12]
 80127b6:	9b03      	ldr	r3, [sp, #12]
 80127b8:	4298      	cmp	r0, r3
 80127ba:	bfb8      	it	lt
 80127bc:	4618      	movlt	r0, r3
 80127be:	e7a4      	b.n	801270a <_printf_i+0x16a>
 80127c0:	2301      	movs	r3, #1
 80127c2:	4632      	mov	r2, r6
 80127c4:	4649      	mov	r1, r9
 80127c6:	4640      	mov	r0, r8
 80127c8:	47d0      	blx	sl
 80127ca:	3001      	adds	r0, #1
 80127cc:	d09b      	beq.n	8012706 <_printf_i+0x166>
 80127ce:	3501      	adds	r5, #1
 80127d0:	68e3      	ldr	r3, [r4, #12]
 80127d2:	9903      	ldr	r1, [sp, #12]
 80127d4:	1a5b      	subs	r3, r3, r1
 80127d6:	42ab      	cmp	r3, r5
 80127d8:	dcf2      	bgt.n	80127c0 <_printf_i+0x220>
 80127da:	e7eb      	b.n	80127b4 <_printf_i+0x214>
 80127dc:	2500      	movs	r5, #0
 80127de:	f104 0619 	add.w	r6, r4, #25
 80127e2:	e7f5      	b.n	80127d0 <_printf_i+0x230>
 80127e4:	080165f7 	.word	0x080165f7
 80127e8:	08016608 	.word	0x08016608

080127ec <iprintf>:
 80127ec:	b40f      	push	{r0, r1, r2, r3}
 80127ee:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <iprintf+0x2c>)
 80127f0:	b513      	push	{r0, r1, r4, lr}
 80127f2:	681c      	ldr	r4, [r3, #0]
 80127f4:	b124      	cbz	r4, 8012800 <iprintf+0x14>
 80127f6:	69a3      	ldr	r3, [r4, #24]
 80127f8:	b913      	cbnz	r3, 8012800 <iprintf+0x14>
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7ff f842 	bl	8011884 <__sinit>
 8012800:	ab05      	add	r3, sp, #20
 8012802:	4620      	mov	r0, r4
 8012804:	9a04      	ldr	r2, [sp, #16]
 8012806:	68a1      	ldr	r1, [r4, #8]
 8012808:	9301      	str	r3, [sp, #4]
 801280a:	f7ff fa5f 	bl	8011ccc <_vfiprintf_r>
 801280e:	b002      	add	sp, #8
 8012810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012814:	b004      	add	sp, #16
 8012816:	4770      	bx	lr
 8012818:	20000060 	.word	0x20000060

0801281c <_puts_r>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	460e      	mov	r6, r1
 8012820:	4605      	mov	r5, r0
 8012822:	b118      	cbz	r0, 801282c <_puts_r+0x10>
 8012824:	6983      	ldr	r3, [r0, #24]
 8012826:	b90b      	cbnz	r3, 801282c <_puts_r+0x10>
 8012828:	f7ff f82c 	bl	8011884 <__sinit>
 801282c:	69ab      	ldr	r3, [r5, #24]
 801282e:	68ac      	ldr	r4, [r5, #8]
 8012830:	b913      	cbnz	r3, 8012838 <_puts_r+0x1c>
 8012832:	4628      	mov	r0, r5
 8012834:	f7ff f826 	bl	8011884 <__sinit>
 8012838:	4b2c      	ldr	r3, [pc, #176]	; (80128ec <_puts_r+0xd0>)
 801283a:	429c      	cmp	r4, r3
 801283c:	d120      	bne.n	8012880 <_puts_r+0x64>
 801283e:	686c      	ldr	r4, [r5, #4]
 8012840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012842:	07db      	lsls	r3, r3, #31
 8012844:	d405      	bmi.n	8012852 <_puts_r+0x36>
 8012846:	89a3      	ldrh	r3, [r4, #12]
 8012848:	0598      	lsls	r0, r3, #22
 801284a:	d402      	bmi.n	8012852 <_puts_r+0x36>
 801284c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801284e:	f7ff f8ee 	bl	8011a2e <__retarget_lock_acquire_recursive>
 8012852:	89a3      	ldrh	r3, [r4, #12]
 8012854:	0719      	lsls	r1, r3, #28
 8012856:	d51d      	bpl.n	8012894 <_puts_r+0x78>
 8012858:	6923      	ldr	r3, [r4, #16]
 801285a:	b1db      	cbz	r3, 8012894 <_puts_r+0x78>
 801285c:	3e01      	subs	r6, #1
 801285e:	68a3      	ldr	r3, [r4, #8]
 8012860:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012864:	3b01      	subs	r3, #1
 8012866:	60a3      	str	r3, [r4, #8]
 8012868:	bb39      	cbnz	r1, 80128ba <_puts_r+0x9e>
 801286a:	2b00      	cmp	r3, #0
 801286c:	da38      	bge.n	80128e0 <_puts_r+0xc4>
 801286e:	4622      	mov	r2, r4
 8012870:	210a      	movs	r1, #10
 8012872:	4628      	mov	r0, r5
 8012874:	f000 f906 	bl	8012a84 <__swbuf_r>
 8012878:	3001      	adds	r0, #1
 801287a:	d011      	beq.n	80128a0 <_puts_r+0x84>
 801287c:	250a      	movs	r5, #10
 801287e:	e011      	b.n	80128a4 <_puts_r+0x88>
 8012880:	4b1b      	ldr	r3, [pc, #108]	; (80128f0 <_puts_r+0xd4>)
 8012882:	429c      	cmp	r4, r3
 8012884:	d101      	bne.n	801288a <_puts_r+0x6e>
 8012886:	68ac      	ldr	r4, [r5, #8]
 8012888:	e7da      	b.n	8012840 <_puts_r+0x24>
 801288a:	4b1a      	ldr	r3, [pc, #104]	; (80128f4 <_puts_r+0xd8>)
 801288c:	429c      	cmp	r4, r3
 801288e:	bf08      	it	eq
 8012890:	68ec      	ldreq	r4, [r5, #12]
 8012892:	e7d5      	b.n	8012840 <_puts_r+0x24>
 8012894:	4621      	mov	r1, r4
 8012896:	4628      	mov	r0, r5
 8012898:	f000 f958 	bl	8012b4c <__swsetup_r>
 801289c:	2800      	cmp	r0, #0
 801289e:	d0dd      	beq.n	801285c <_puts_r+0x40>
 80128a0:	f04f 35ff 	mov.w	r5, #4294967295
 80128a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128a6:	07da      	lsls	r2, r3, #31
 80128a8:	d405      	bmi.n	80128b6 <_puts_r+0x9a>
 80128aa:	89a3      	ldrh	r3, [r4, #12]
 80128ac:	059b      	lsls	r3, r3, #22
 80128ae:	d402      	bmi.n	80128b6 <_puts_r+0x9a>
 80128b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128b2:	f7ff f8bd 	bl	8011a30 <__retarget_lock_release_recursive>
 80128b6:	4628      	mov	r0, r5
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	da04      	bge.n	80128c8 <_puts_r+0xac>
 80128be:	69a2      	ldr	r2, [r4, #24]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	dc06      	bgt.n	80128d2 <_puts_r+0xb6>
 80128c4:	290a      	cmp	r1, #10
 80128c6:	d004      	beq.n	80128d2 <_puts_r+0xb6>
 80128c8:	6823      	ldr	r3, [r4, #0]
 80128ca:	1c5a      	adds	r2, r3, #1
 80128cc:	6022      	str	r2, [r4, #0]
 80128ce:	7019      	strb	r1, [r3, #0]
 80128d0:	e7c5      	b.n	801285e <_puts_r+0x42>
 80128d2:	4622      	mov	r2, r4
 80128d4:	4628      	mov	r0, r5
 80128d6:	f000 f8d5 	bl	8012a84 <__swbuf_r>
 80128da:	3001      	adds	r0, #1
 80128dc:	d1bf      	bne.n	801285e <_puts_r+0x42>
 80128de:	e7df      	b.n	80128a0 <_puts_r+0x84>
 80128e0:	250a      	movs	r5, #10
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	1c5a      	adds	r2, r3, #1
 80128e6:	6022      	str	r2, [r4, #0]
 80128e8:	701d      	strb	r5, [r3, #0]
 80128ea:	e7db      	b.n	80128a4 <_puts_r+0x88>
 80128ec:	08016590 	.word	0x08016590
 80128f0:	080165b0 	.word	0x080165b0
 80128f4:	08016570 	.word	0x08016570

080128f8 <puts>:
 80128f8:	4b02      	ldr	r3, [pc, #8]	; (8012904 <puts+0xc>)
 80128fa:	4601      	mov	r1, r0
 80128fc:	6818      	ldr	r0, [r3, #0]
 80128fe:	f7ff bf8d 	b.w	801281c <_puts_r>
 8012902:	bf00      	nop
 8012904:	20000060 	.word	0x20000060

08012908 <cleanup_glue>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	460c      	mov	r4, r1
 801290c:	6809      	ldr	r1, [r1, #0]
 801290e:	4605      	mov	r5, r0
 8012910:	b109      	cbz	r1, 8012916 <cleanup_glue+0xe>
 8012912:	f7ff fff9 	bl	8012908 <cleanup_glue>
 8012916:	4621      	mov	r1, r4
 8012918:	4628      	mov	r0, r5
 801291a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801291e:	f7ff b8d1 	b.w	8011ac4 <_free_r>
	...

08012924 <_reclaim_reent>:
 8012924:	4b2c      	ldr	r3, [pc, #176]	; (80129d8 <_reclaim_reent+0xb4>)
 8012926:	b570      	push	{r4, r5, r6, lr}
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4604      	mov	r4, r0
 801292c:	4283      	cmp	r3, r0
 801292e:	d051      	beq.n	80129d4 <_reclaim_reent+0xb0>
 8012930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012932:	b143      	cbz	r3, 8012946 <_reclaim_reent+0x22>
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d14a      	bne.n	80129d0 <_reclaim_reent+0xac>
 801293a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801293c:	6819      	ldr	r1, [r3, #0]
 801293e:	b111      	cbz	r1, 8012946 <_reclaim_reent+0x22>
 8012940:	4620      	mov	r0, r4
 8012942:	f7ff f8bf 	bl	8011ac4 <_free_r>
 8012946:	6961      	ldr	r1, [r4, #20]
 8012948:	b111      	cbz	r1, 8012950 <_reclaim_reent+0x2c>
 801294a:	4620      	mov	r0, r4
 801294c:	f7ff f8ba 	bl	8011ac4 <_free_r>
 8012950:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012952:	b111      	cbz	r1, 801295a <_reclaim_reent+0x36>
 8012954:	4620      	mov	r0, r4
 8012956:	f7ff f8b5 	bl	8011ac4 <_free_r>
 801295a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801295c:	b111      	cbz	r1, 8012964 <_reclaim_reent+0x40>
 801295e:	4620      	mov	r0, r4
 8012960:	f7ff f8b0 	bl	8011ac4 <_free_r>
 8012964:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012966:	b111      	cbz	r1, 801296e <_reclaim_reent+0x4a>
 8012968:	4620      	mov	r0, r4
 801296a:	f7ff f8ab 	bl	8011ac4 <_free_r>
 801296e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012970:	b111      	cbz	r1, 8012978 <_reclaim_reent+0x54>
 8012972:	4620      	mov	r0, r4
 8012974:	f7ff f8a6 	bl	8011ac4 <_free_r>
 8012978:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801297a:	b111      	cbz	r1, 8012982 <_reclaim_reent+0x5e>
 801297c:	4620      	mov	r0, r4
 801297e:	f7ff f8a1 	bl	8011ac4 <_free_r>
 8012982:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012984:	b111      	cbz	r1, 801298c <_reclaim_reent+0x68>
 8012986:	4620      	mov	r0, r4
 8012988:	f7ff f89c 	bl	8011ac4 <_free_r>
 801298c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801298e:	b111      	cbz	r1, 8012996 <_reclaim_reent+0x72>
 8012990:	4620      	mov	r0, r4
 8012992:	f7ff f897 	bl	8011ac4 <_free_r>
 8012996:	69a3      	ldr	r3, [r4, #24]
 8012998:	b1e3      	cbz	r3, 80129d4 <_reclaim_reent+0xb0>
 801299a:	4620      	mov	r0, r4
 801299c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801299e:	4798      	blx	r3
 80129a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80129a2:	b1b9      	cbz	r1, 80129d4 <_reclaim_reent+0xb0>
 80129a4:	4620      	mov	r0, r4
 80129a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129aa:	f7ff bfad 	b.w	8012908 <cleanup_glue>
 80129ae:	5949      	ldr	r1, [r1, r5]
 80129b0:	b941      	cbnz	r1, 80129c4 <_reclaim_reent+0xa0>
 80129b2:	3504      	adds	r5, #4
 80129b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129b6:	2d80      	cmp	r5, #128	; 0x80
 80129b8:	68d9      	ldr	r1, [r3, #12]
 80129ba:	d1f8      	bne.n	80129ae <_reclaim_reent+0x8a>
 80129bc:	4620      	mov	r0, r4
 80129be:	f7ff f881 	bl	8011ac4 <_free_r>
 80129c2:	e7ba      	b.n	801293a <_reclaim_reent+0x16>
 80129c4:	680e      	ldr	r6, [r1, #0]
 80129c6:	4620      	mov	r0, r4
 80129c8:	f7ff f87c 	bl	8011ac4 <_free_r>
 80129cc:	4631      	mov	r1, r6
 80129ce:	e7ef      	b.n	80129b0 <_reclaim_reent+0x8c>
 80129d0:	2500      	movs	r5, #0
 80129d2:	e7ef      	b.n	80129b4 <_reclaim_reent+0x90>
 80129d4:	bd70      	pop	{r4, r5, r6, pc}
 80129d6:	bf00      	nop
 80129d8:	20000060 	.word	0x20000060

080129dc <_sbrk_r>:
 80129dc:	b538      	push	{r3, r4, r5, lr}
 80129de:	2300      	movs	r3, #0
 80129e0:	4d05      	ldr	r5, [pc, #20]	; (80129f8 <_sbrk_r+0x1c>)
 80129e2:	4604      	mov	r4, r0
 80129e4:	4608      	mov	r0, r1
 80129e6:	602b      	str	r3, [r5, #0]
 80129e8:	f7f2 fc62 	bl	80052b0 <_sbrk>
 80129ec:	1c43      	adds	r3, r0, #1
 80129ee:	d102      	bne.n	80129f6 <_sbrk_r+0x1a>
 80129f0:	682b      	ldr	r3, [r5, #0]
 80129f2:	b103      	cbz	r3, 80129f6 <_sbrk_r+0x1a>
 80129f4:	6023      	str	r3, [r4, #0]
 80129f6:	bd38      	pop	{r3, r4, r5, pc}
 80129f8:	200028b8 	.word	0x200028b8

080129fc <__sread>:
 80129fc:	b510      	push	{r4, lr}
 80129fe:	460c      	mov	r4, r1
 8012a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a04:	f001 fbe6 	bl	80141d4 <_read_r>
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	bfab      	itete	ge
 8012a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a10:	181b      	addge	r3, r3, r0
 8012a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a16:	bfac      	ite	ge
 8012a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a1a:	81a3      	strhlt	r3, [r4, #12]
 8012a1c:	bd10      	pop	{r4, pc}

08012a1e <__swrite>:
 8012a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a22:	461f      	mov	r7, r3
 8012a24:	898b      	ldrh	r3, [r1, #12]
 8012a26:	4605      	mov	r5, r0
 8012a28:	05db      	lsls	r3, r3, #23
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	4616      	mov	r6, r2
 8012a2e:	d505      	bpl.n	8012a3c <__swrite+0x1e>
 8012a30:	2302      	movs	r3, #2
 8012a32:	2200      	movs	r2, #0
 8012a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a38:	f000 ffa4 	bl	8013984 <_lseek_r>
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	4632      	mov	r2, r6
 8012a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a44:	81a3      	strh	r3, [r4, #12]
 8012a46:	4628      	mov	r0, r5
 8012a48:	463b      	mov	r3, r7
 8012a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a52:	f000 b869 	b.w	8012b28 <_write_r>

08012a56 <__sseek>:
 8012a56:	b510      	push	{r4, lr}
 8012a58:	460c      	mov	r4, r1
 8012a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a5e:	f000 ff91 	bl	8013984 <_lseek_r>
 8012a62:	1c43      	adds	r3, r0, #1
 8012a64:	89a3      	ldrh	r3, [r4, #12]
 8012a66:	bf15      	itete	ne
 8012a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a72:	81a3      	strheq	r3, [r4, #12]
 8012a74:	bf18      	it	ne
 8012a76:	81a3      	strhne	r3, [r4, #12]
 8012a78:	bd10      	pop	{r4, pc}

08012a7a <__sclose>:
 8012a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a7e:	f000 b8f1 	b.w	8012c64 <_close_r>
	...

08012a84 <__swbuf_r>:
 8012a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a86:	460e      	mov	r6, r1
 8012a88:	4614      	mov	r4, r2
 8012a8a:	4605      	mov	r5, r0
 8012a8c:	b118      	cbz	r0, 8012a96 <__swbuf_r+0x12>
 8012a8e:	6983      	ldr	r3, [r0, #24]
 8012a90:	b90b      	cbnz	r3, 8012a96 <__swbuf_r+0x12>
 8012a92:	f7fe fef7 	bl	8011884 <__sinit>
 8012a96:	4b21      	ldr	r3, [pc, #132]	; (8012b1c <__swbuf_r+0x98>)
 8012a98:	429c      	cmp	r4, r3
 8012a9a:	d12b      	bne.n	8012af4 <__swbuf_r+0x70>
 8012a9c:	686c      	ldr	r4, [r5, #4]
 8012a9e:	69a3      	ldr	r3, [r4, #24]
 8012aa0:	60a3      	str	r3, [r4, #8]
 8012aa2:	89a3      	ldrh	r3, [r4, #12]
 8012aa4:	071a      	lsls	r2, r3, #28
 8012aa6:	d52f      	bpl.n	8012b08 <__swbuf_r+0x84>
 8012aa8:	6923      	ldr	r3, [r4, #16]
 8012aaa:	b36b      	cbz	r3, 8012b08 <__swbuf_r+0x84>
 8012aac:	6923      	ldr	r3, [r4, #16]
 8012aae:	6820      	ldr	r0, [r4, #0]
 8012ab0:	b2f6      	uxtb	r6, r6
 8012ab2:	1ac0      	subs	r0, r0, r3
 8012ab4:	6963      	ldr	r3, [r4, #20]
 8012ab6:	4637      	mov	r7, r6
 8012ab8:	4283      	cmp	r3, r0
 8012aba:	dc04      	bgt.n	8012ac6 <__swbuf_r+0x42>
 8012abc:	4621      	mov	r1, r4
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f7fe fe4c 	bl	801175c <_fflush_r>
 8012ac4:	bb30      	cbnz	r0, 8012b14 <__swbuf_r+0x90>
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	3001      	adds	r0, #1
 8012aca:	3b01      	subs	r3, #1
 8012acc:	60a3      	str	r3, [r4, #8]
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	1c5a      	adds	r2, r3, #1
 8012ad2:	6022      	str	r2, [r4, #0]
 8012ad4:	701e      	strb	r6, [r3, #0]
 8012ad6:	6963      	ldr	r3, [r4, #20]
 8012ad8:	4283      	cmp	r3, r0
 8012ada:	d004      	beq.n	8012ae6 <__swbuf_r+0x62>
 8012adc:	89a3      	ldrh	r3, [r4, #12]
 8012ade:	07db      	lsls	r3, r3, #31
 8012ae0:	d506      	bpl.n	8012af0 <__swbuf_r+0x6c>
 8012ae2:	2e0a      	cmp	r6, #10
 8012ae4:	d104      	bne.n	8012af0 <__swbuf_r+0x6c>
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4628      	mov	r0, r5
 8012aea:	f7fe fe37 	bl	801175c <_fflush_r>
 8012aee:	b988      	cbnz	r0, 8012b14 <__swbuf_r+0x90>
 8012af0:	4638      	mov	r0, r7
 8012af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af4:	4b0a      	ldr	r3, [pc, #40]	; (8012b20 <__swbuf_r+0x9c>)
 8012af6:	429c      	cmp	r4, r3
 8012af8:	d101      	bne.n	8012afe <__swbuf_r+0x7a>
 8012afa:	68ac      	ldr	r4, [r5, #8]
 8012afc:	e7cf      	b.n	8012a9e <__swbuf_r+0x1a>
 8012afe:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <__swbuf_r+0xa0>)
 8012b00:	429c      	cmp	r4, r3
 8012b02:	bf08      	it	eq
 8012b04:	68ec      	ldreq	r4, [r5, #12]
 8012b06:	e7ca      	b.n	8012a9e <__swbuf_r+0x1a>
 8012b08:	4621      	mov	r1, r4
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f000 f81e 	bl	8012b4c <__swsetup_r>
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d0cb      	beq.n	8012aac <__swbuf_r+0x28>
 8012b14:	f04f 37ff 	mov.w	r7, #4294967295
 8012b18:	e7ea      	b.n	8012af0 <__swbuf_r+0x6c>
 8012b1a:	bf00      	nop
 8012b1c:	08016590 	.word	0x08016590
 8012b20:	080165b0 	.word	0x080165b0
 8012b24:	08016570 	.word	0x08016570

08012b28 <_write_r>:
 8012b28:	b538      	push	{r3, r4, r5, lr}
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	4608      	mov	r0, r1
 8012b2e:	4611      	mov	r1, r2
 8012b30:	2200      	movs	r2, #0
 8012b32:	4d05      	ldr	r5, [pc, #20]	; (8012b48 <_write_r+0x20>)
 8012b34:	602a      	str	r2, [r5, #0]
 8012b36:	461a      	mov	r2, r3
 8012b38:	f7f2 f810 	bl	8004b5c <_write>
 8012b3c:	1c43      	adds	r3, r0, #1
 8012b3e:	d102      	bne.n	8012b46 <_write_r+0x1e>
 8012b40:	682b      	ldr	r3, [r5, #0]
 8012b42:	b103      	cbz	r3, 8012b46 <_write_r+0x1e>
 8012b44:	6023      	str	r3, [r4, #0]
 8012b46:	bd38      	pop	{r3, r4, r5, pc}
 8012b48:	200028b8 	.word	0x200028b8

08012b4c <__swsetup_r>:
 8012b4c:	4b32      	ldr	r3, [pc, #200]	; (8012c18 <__swsetup_r+0xcc>)
 8012b4e:	b570      	push	{r4, r5, r6, lr}
 8012b50:	681d      	ldr	r5, [r3, #0]
 8012b52:	4606      	mov	r6, r0
 8012b54:	460c      	mov	r4, r1
 8012b56:	b125      	cbz	r5, 8012b62 <__swsetup_r+0x16>
 8012b58:	69ab      	ldr	r3, [r5, #24]
 8012b5a:	b913      	cbnz	r3, 8012b62 <__swsetup_r+0x16>
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	f7fe fe91 	bl	8011884 <__sinit>
 8012b62:	4b2e      	ldr	r3, [pc, #184]	; (8012c1c <__swsetup_r+0xd0>)
 8012b64:	429c      	cmp	r4, r3
 8012b66:	d10f      	bne.n	8012b88 <__swsetup_r+0x3c>
 8012b68:	686c      	ldr	r4, [r5, #4]
 8012b6a:	89a3      	ldrh	r3, [r4, #12]
 8012b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b70:	0719      	lsls	r1, r3, #28
 8012b72:	d42c      	bmi.n	8012bce <__swsetup_r+0x82>
 8012b74:	06dd      	lsls	r5, r3, #27
 8012b76:	d411      	bmi.n	8012b9c <__swsetup_r+0x50>
 8012b78:	2309      	movs	r3, #9
 8012b7a:	6033      	str	r3, [r6, #0]
 8012b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b80:	f04f 30ff 	mov.w	r0, #4294967295
 8012b84:	81a3      	strh	r3, [r4, #12]
 8012b86:	e03e      	b.n	8012c06 <__swsetup_r+0xba>
 8012b88:	4b25      	ldr	r3, [pc, #148]	; (8012c20 <__swsetup_r+0xd4>)
 8012b8a:	429c      	cmp	r4, r3
 8012b8c:	d101      	bne.n	8012b92 <__swsetup_r+0x46>
 8012b8e:	68ac      	ldr	r4, [r5, #8]
 8012b90:	e7eb      	b.n	8012b6a <__swsetup_r+0x1e>
 8012b92:	4b24      	ldr	r3, [pc, #144]	; (8012c24 <__swsetup_r+0xd8>)
 8012b94:	429c      	cmp	r4, r3
 8012b96:	bf08      	it	eq
 8012b98:	68ec      	ldreq	r4, [r5, #12]
 8012b9a:	e7e6      	b.n	8012b6a <__swsetup_r+0x1e>
 8012b9c:	0758      	lsls	r0, r3, #29
 8012b9e:	d512      	bpl.n	8012bc6 <__swsetup_r+0x7a>
 8012ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ba2:	b141      	cbz	r1, 8012bb6 <__swsetup_r+0x6a>
 8012ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ba8:	4299      	cmp	r1, r3
 8012baa:	d002      	beq.n	8012bb2 <__swsetup_r+0x66>
 8012bac:	4630      	mov	r0, r6
 8012bae:	f7fe ff89 	bl	8011ac4 <_free_r>
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8012bb6:	89a3      	ldrh	r3, [r4, #12]
 8012bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012bbc:	81a3      	strh	r3, [r4, #12]
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	6063      	str	r3, [r4, #4]
 8012bc2:	6923      	ldr	r3, [r4, #16]
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	f043 0308 	orr.w	r3, r3, #8
 8012bcc:	81a3      	strh	r3, [r4, #12]
 8012bce:	6923      	ldr	r3, [r4, #16]
 8012bd0:	b94b      	cbnz	r3, 8012be6 <__swsetup_r+0x9a>
 8012bd2:	89a3      	ldrh	r3, [r4, #12]
 8012bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bdc:	d003      	beq.n	8012be6 <__swsetup_r+0x9a>
 8012bde:	4621      	mov	r1, r4
 8012be0:	4630      	mov	r0, r6
 8012be2:	f000 ff07 	bl	80139f4 <__smakebuf_r>
 8012be6:	89a0      	ldrh	r0, [r4, #12]
 8012be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bec:	f010 0301 	ands.w	r3, r0, #1
 8012bf0:	d00a      	beq.n	8012c08 <__swsetup_r+0xbc>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	60a3      	str	r3, [r4, #8]
 8012bf6:	6963      	ldr	r3, [r4, #20]
 8012bf8:	425b      	negs	r3, r3
 8012bfa:	61a3      	str	r3, [r4, #24]
 8012bfc:	6923      	ldr	r3, [r4, #16]
 8012bfe:	b943      	cbnz	r3, 8012c12 <__swsetup_r+0xc6>
 8012c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c04:	d1ba      	bne.n	8012b7c <__swsetup_r+0x30>
 8012c06:	bd70      	pop	{r4, r5, r6, pc}
 8012c08:	0781      	lsls	r1, r0, #30
 8012c0a:	bf58      	it	pl
 8012c0c:	6963      	ldrpl	r3, [r4, #20]
 8012c0e:	60a3      	str	r3, [r4, #8]
 8012c10:	e7f4      	b.n	8012bfc <__swsetup_r+0xb0>
 8012c12:	2000      	movs	r0, #0
 8012c14:	e7f7      	b.n	8012c06 <__swsetup_r+0xba>
 8012c16:	bf00      	nop
 8012c18:	20000060 	.word	0x20000060
 8012c1c:	08016590 	.word	0x08016590
 8012c20:	080165b0 	.word	0x080165b0
 8012c24:	08016570 	.word	0x08016570

08012c28 <__assert_func>:
 8012c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c2a:	4614      	mov	r4, r2
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	4b09      	ldr	r3, [pc, #36]	; (8012c54 <__assert_func+0x2c>)
 8012c30:	4605      	mov	r5, r0
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	68d8      	ldr	r0, [r3, #12]
 8012c36:	b14c      	cbz	r4, 8012c4c <__assert_func+0x24>
 8012c38:	4b07      	ldr	r3, [pc, #28]	; (8012c58 <__assert_func+0x30>)
 8012c3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c3e:	9100      	str	r1, [sp, #0]
 8012c40:	462b      	mov	r3, r5
 8012c42:	4906      	ldr	r1, [pc, #24]	; (8012c5c <__assert_func+0x34>)
 8012c44:	f7fe fe9c 	bl	8011980 <fiprintf>
 8012c48:	f001 fad6 	bl	80141f8 <abort>
 8012c4c:	4b04      	ldr	r3, [pc, #16]	; (8012c60 <__assert_func+0x38>)
 8012c4e:	461c      	mov	r4, r3
 8012c50:	e7f3      	b.n	8012c3a <__assert_func+0x12>
 8012c52:	bf00      	nop
 8012c54:	20000060 	.word	0x20000060
 8012c58:	08016619 	.word	0x08016619
 8012c5c:	08016626 	.word	0x08016626
 8012c60:	08016654 	.word	0x08016654

08012c64 <_close_r>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	2300      	movs	r3, #0
 8012c68:	4d05      	ldr	r5, [pc, #20]	; (8012c80 <_close_r+0x1c>)
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	4608      	mov	r0, r1
 8012c6e:	602b      	str	r3, [r5, #0]
 8012c70:	f7f2 faee 	bl	8005250 <_close>
 8012c74:	1c43      	adds	r3, r0, #1
 8012c76:	d102      	bne.n	8012c7e <_close_r+0x1a>
 8012c78:	682b      	ldr	r3, [r5, #0]
 8012c7a:	b103      	cbz	r3, 8012c7e <_close_r+0x1a>
 8012c7c:	6023      	str	r3, [r4, #0]
 8012c7e:	bd38      	pop	{r3, r4, r5, pc}
 8012c80:	200028b8 	.word	0x200028b8

08012c84 <quorem>:
 8012c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c88:	6903      	ldr	r3, [r0, #16]
 8012c8a:	690c      	ldr	r4, [r1, #16]
 8012c8c:	4607      	mov	r7, r0
 8012c8e:	42a3      	cmp	r3, r4
 8012c90:	f2c0 8082 	blt.w	8012d98 <quorem+0x114>
 8012c94:	3c01      	subs	r4, #1
 8012c96:	f100 0514 	add.w	r5, r0, #20
 8012c9a:	f101 0814 	add.w	r8, r1, #20
 8012c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ca2:	9301      	str	r3, [sp, #4]
 8012ca4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ca8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cac:	3301      	adds	r3, #1
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012cb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012cb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012cbc:	d331      	bcc.n	8012d22 <quorem+0x9e>
 8012cbe:	f04f 0e00 	mov.w	lr, #0
 8012cc2:	4640      	mov	r0, r8
 8012cc4:	46ac      	mov	ip, r5
 8012cc6:	46f2      	mov	sl, lr
 8012cc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ccc:	b293      	uxth	r3, r2
 8012cce:	fb06 e303 	mla	r3, r6, r3, lr
 8012cd2:	0c12      	lsrs	r2, r2, #16
 8012cd4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	fb06 e202 	mla	r2, r6, r2, lr
 8012cde:	ebaa 0303 	sub.w	r3, sl, r3
 8012ce2:	f8dc a000 	ldr.w	sl, [ip]
 8012ce6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012cea:	fa1f fa8a 	uxth.w	sl, sl
 8012cee:	4453      	add	r3, sl
 8012cf0:	f8dc a000 	ldr.w	sl, [ip]
 8012cf4:	b292      	uxth	r2, r2
 8012cf6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012cfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d04:	4581      	cmp	r9, r0
 8012d06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012d0a:	f84c 3b04 	str.w	r3, [ip], #4
 8012d0e:	d2db      	bcs.n	8012cc8 <quorem+0x44>
 8012d10:	f855 300b 	ldr.w	r3, [r5, fp]
 8012d14:	b92b      	cbnz	r3, 8012d22 <quorem+0x9e>
 8012d16:	9b01      	ldr	r3, [sp, #4]
 8012d18:	3b04      	subs	r3, #4
 8012d1a:	429d      	cmp	r5, r3
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	d32f      	bcc.n	8012d80 <quorem+0xfc>
 8012d20:	613c      	str	r4, [r7, #16]
 8012d22:	4638      	mov	r0, r7
 8012d24:	f001 f93e 	bl	8013fa4 <__mcmp>
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	db25      	blt.n	8012d78 <quorem+0xf4>
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f04f 0c00 	mov.w	ip, #0
 8012d32:	3601      	adds	r6, #1
 8012d34:	f858 1b04 	ldr.w	r1, [r8], #4
 8012d38:	f8d0 e000 	ldr.w	lr, [r0]
 8012d3c:	b28b      	uxth	r3, r1
 8012d3e:	ebac 0303 	sub.w	r3, ip, r3
 8012d42:	fa1f f28e 	uxth.w	r2, lr
 8012d46:	4413      	add	r3, r2
 8012d48:	0c0a      	lsrs	r2, r1, #16
 8012d4a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d58:	45c1      	cmp	r9, r8
 8012d5a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d5e:	f840 3b04 	str.w	r3, [r0], #4
 8012d62:	d2e7      	bcs.n	8012d34 <quorem+0xb0>
 8012d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d6c:	b922      	cbnz	r2, 8012d78 <quorem+0xf4>
 8012d6e:	3b04      	subs	r3, #4
 8012d70:	429d      	cmp	r5, r3
 8012d72:	461a      	mov	r2, r3
 8012d74:	d30a      	bcc.n	8012d8c <quorem+0x108>
 8012d76:	613c      	str	r4, [r7, #16]
 8012d78:	4630      	mov	r0, r6
 8012d7a:	b003      	add	sp, #12
 8012d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d80:	6812      	ldr	r2, [r2, #0]
 8012d82:	3b04      	subs	r3, #4
 8012d84:	2a00      	cmp	r2, #0
 8012d86:	d1cb      	bne.n	8012d20 <quorem+0x9c>
 8012d88:	3c01      	subs	r4, #1
 8012d8a:	e7c6      	b.n	8012d1a <quorem+0x96>
 8012d8c:	6812      	ldr	r2, [r2, #0]
 8012d8e:	3b04      	subs	r3, #4
 8012d90:	2a00      	cmp	r2, #0
 8012d92:	d1f0      	bne.n	8012d76 <quorem+0xf2>
 8012d94:	3c01      	subs	r4, #1
 8012d96:	e7eb      	b.n	8012d70 <quorem+0xec>
 8012d98:	2000      	movs	r0, #0
 8012d9a:	e7ee      	b.n	8012d7a <quorem+0xf6>
 8012d9c:	0000      	movs	r0, r0
	...

08012da0 <_dtoa_r>:
 8012da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da4:	4616      	mov	r6, r2
 8012da6:	461f      	mov	r7, r3
 8012da8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012daa:	b099      	sub	sp, #100	; 0x64
 8012dac:	4605      	mov	r5, r0
 8012dae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012db2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8012db6:	b974      	cbnz	r4, 8012dd6 <_dtoa_r+0x36>
 8012db8:	2010      	movs	r0, #16
 8012dba:	f7fe fe3b 	bl	8011a34 <malloc>
 8012dbe:	4602      	mov	r2, r0
 8012dc0:	6268      	str	r0, [r5, #36]	; 0x24
 8012dc2:	b920      	cbnz	r0, 8012dce <_dtoa_r+0x2e>
 8012dc4:	21ea      	movs	r1, #234	; 0xea
 8012dc6:	4ba8      	ldr	r3, [pc, #672]	; (8013068 <_dtoa_r+0x2c8>)
 8012dc8:	48a8      	ldr	r0, [pc, #672]	; (801306c <_dtoa_r+0x2cc>)
 8012dca:	f7ff ff2d 	bl	8012c28 <__assert_func>
 8012dce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012dd2:	6004      	str	r4, [r0, #0]
 8012dd4:	60c4      	str	r4, [r0, #12]
 8012dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012dd8:	6819      	ldr	r1, [r3, #0]
 8012dda:	b151      	cbz	r1, 8012df2 <_dtoa_r+0x52>
 8012ddc:	685a      	ldr	r2, [r3, #4]
 8012dde:	2301      	movs	r3, #1
 8012de0:	4093      	lsls	r3, r2
 8012de2:	604a      	str	r2, [r1, #4]
 8012de4:	608b      	str	r3, [r1, #8]
 8012de6:	4628      	mov	r0, r5
 8012de8:	f000 fe9e 	bl	8013b28 <_Bfree>
 8012dec:	2200      	movs	r2, #0
 8012dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	1e3b      	subs	r3, r7, #0
 8012df4:	bfaf      	iteee	ge
 8012df6:	2300      	movge	r3, #0
 8012df8:	2201      	movlt	r2, #1
 8012dfa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012dfe:	9305      	strlt	r3, [sp, #20]
 8012e00:	bfa8      	it	ge
 8012e02:	f8c8 3000 	strge.w	r3, [r8]
 8012e06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012e0a:	4b99      	ldr	r3, [pc, #612]	; (8013070 <_dtoa_r+0x2d0>)
 8012e0c:	bfb8      	it	lt
 8012e0e:	f8c8 2000 	strlt.w	r2, [r8]
 8012e12:	ea33 0309 	bics.w	r3, r3, r9
 8012e16:	d119      	bne.n	8012e4c <_dtoa_r+0xac>
 8012e18:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012e1e:	6013      	str	r3, [r2, #0]
 8012e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e24:	4333      	orrs	r3, r6
 8012e26:	f000 857f 	beq.w	8013928 <_dtoa_r+0xb88>
 8012e2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012e2c:	b953      	cbnz	r3, 8012e44 <_dtoa_r+0xa4>
 8012e2e:	4b91      	ldr	r3, [pc, #580]	; (8013074 <_dtoa_r+0x2d4>)
 8012e30:	e022      	b.n	8012e78 <_dtoa_r+0xd8>
 8012e32:	4b91      	ldr	r3, [pc, #580]	; (8013078 <_dtoa_r+0x2d8>)
 8012e34:	9303      	str	r3, [sp, #12]
 8012e36:	3308      	adds	r3, #8
 8012e38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012e3a:	6013      	str	r3, [r2, #0]
 8012e3c:	9803      	ldr	r0, [sp, #12]
 8012e3e:	b019      	add	sp, #100	; 0x64
 8012e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e44:	4b8b      	ldr	r3, [pc, #556]	; (8013074 <_dtoa_r+0x2d4>)
 8012e46:	9303      	str	r3, [sp, #12]
 8012e48:	3303      	adds	r3, #3
 8012e4a:	e7f5      	b.n	8012e38 <_dtoa_r+0x98>
 8012e4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012e50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8012e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e58:	2200      	movs	r2, #0
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	f7f0 fb7c 	bl	8003558 <__aeabi_dcmpeq>
 8012e60:	4680      	mov	r8, r0
 8012e62:	b158      	cbz	r0, 8012e7c <_dtoa_r+0xdc>
 8012e64:	2301      	movs	r3, #1
 8012e66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012e68:	6013      	str	r3, [r2, #0]
 8012e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f000 8558 	beq.w	8013922 <_dtoa_r+0xb82>
 8012e72:	4882      	ldr	r0, [pc, #520]	; (801307c <_dtoa_r+0x2dc>)
 8012e74:	6018      	str	r0, [r3, #0]
 8012e76:	1e43      	subs	r3, r0, #1
 8012e78:	9303      	str	r3, [sp, #12]
 8012e7a:	e7df      	b.n	8012e3c <_dtoa_r+0x9c>
 8012e7c:	ab16      	add	r3, sp, #88	; 0x58
 8012e7e:	9301      	str	r3, [sp, #4]
 8012e80:	ab17      	add	r3, sp, #92	; 0x5c
 8012e82:	9300      	str	r3, [sp, #0]
 8012e84:	4628      	mov	r0, r5
 8012e86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012e8a:	f001 f933 	bl	80140f4 <__d2b>
 8012e8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012e92:	4683      	mov	fp, r0
 8012e94:	2c00      	cmp	r4, #0
 8012e96:	d07f      	beq.n	8012f98 <_dtoa_r+0x1f8>
 8012e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ea6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012eaa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012eae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	4b72      	ldr	r3, [pc, #456]	; (8013080 <_dtoa_r+0x2e0>)
 8012eb6:	f7ef ff2f 	bl	8002d18 <__aeabi_dsub>
 8012eba:	a365      	add	r3, pc, #404	; (adr r3, 8013050 <_dtoa_r+0x2b0>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7f0 f8e2 	bl	8003088 <__aeabi_dmul>
 8012ec4:	a364      	add	r3, pc, #400	; (adr r3, 8013058 <_dtoa_r+0x2b8>)
 8012ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eca:	f7ef ff27 	bl	8002d1c <__adddf3>
 8012ece:	4606      	mov	r6, r0
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	460f      	mov	r7, r1
 8012ed4:	f7f0 f86e 	bl	8002fb4 <__aeabi_i2d>
 8012ed8:	a361      	add	r3, pc, #388	; (adr r3, 8013060 <_dtoa_r+0x2c0>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	f7f0 f8d3 	bl	8003088 <__aeabi_dmul>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	4639      	mov	r1, r7
 8012eea:	f7ef ff17 	bl	8002d1c <__adddf3>
 8012eee:	4606      	mov	r6, r0
 8012ef0:	460f      	mov	r7, r1
 8012ef2:	f7f0 fb79 	bl	80035e8 <__aeabi_d2iz>
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	4682      	mov	sl, r0
 8012efa:	2300      	movs	r3, #0
 8012efc:	4630      	mov	r0, r6
 8012efe:	4639      	mov	r1, r7
 8012f00:	f7f0 fb34 	bl	800356c <__aeabi_dcmplt>
 8012f04:	b148      	cbz	r0, 8012f1a <_dtoa_r+0x17a>
 8012f06:	4650      	mov	r0, sl
 8012f08:	f7f0 f854 	bl	8002fb4 <__aeabi_i2d>
 8012f0c:	4632      	mov	r2, r6
 8012f0e:	463b      	mov	r3, r7
 8012f10:	f7f0 fb22 	bl	8003558 <__aeabi_dcmpeq>
 8012f14:	b908      	cbnz	r0, 8012f1a <_dtoa_r+0x17a>
 8012f16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f1a:	f1ba 0f16 	cmp.w	sl, #22
 8012f1e:	d858      	bhi.n	8012fd2 <_dtoa_r+0x232>
 8012f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f24:	4b57      	ldr	r3, [pc, #348]	; (8013084 <_dtoa_r+0x2e4>)
 8012f26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2e:	f7f0 fb1d 	bl	800356c <__aeabi_dcmplt>
 8012f32:	2800      	cmp	r0, #0
 8012f34:	d04f      	beq.n	8012fd6 <_dtoa_r+0x236>
 8012f36:	2300      	movs	r3, #0
 8012f38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012f40:	1b1c      	subs	r4, r3, r4
 8012f42:	1e63      	subs	r3, r4, #1
 8012f44:	9309      	str	r3, [sp, #36]	; 0x24
 8012f46:	bf49      	itett	mi
 8012f48:	f1c4 0301 	rsbmi	r3, r4, #1
 8012f4c:	2300      	movpl	r3, #0
 8012f4e:	9306      	strmi	r3, [sp, #24]
 8012f50:	2300      	movmi	r3, #0
 8012f52:	bf54      	ite	pl
 8012f54:	9306      	strpl	r3, [sp, #24]
 8012f56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012f58:	f1ba 0f00 	cmp.w	sl, #0
 8012f5c:	db3d      	blt.n	8012fda <_dtoa_r+0x23a>
 8012f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f60:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012f64:	4453      	add	r3, sl
 8012f66:	9309      	str	r3, [sp, #36]	; 0x24
 8012f68:	2300      	movs	r3, #0
 8012f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f6e:	2b09      	cmp	r3, #9
 8012f70:	f200 808c 	bhi.w	801308c <_dtoa_r+0x2ec>
 8012f74:	2b05      	cmp	r3, #5
 8012f76:	bfc4      	itt	gt
 8012f78:	3b04      	subgt	r3, #4
 8012f7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8012f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f7e:	bfc8      	it	gt
 8012f80:	2400      	movgt	r4, #0
 8012f82:	f1a3 0302 	sub.w	r3, r3, #2
 8012f86:	bfd8      	it	le
 8012f88:	2401      	movle	r4, #1
 8012f8a:	2b03      	cmp	r3, #3
 8012f8c:	f200 808a 	bhi.w	80130a4 <_dtoa_r+0x304>
 8012f90:	e8df f003 	tbb	[pc, r3]
 8012f94:	5b4d4f2d 	.word	0x5b4d4f2d
 8012f98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8012f9c:	441c      	add	r4, r3
 8012f9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8012fa2:	2b20      	cmp	r3, #32
 8012fa4:	bfc3      	ittte	gt
 8012fa6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012faa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8012fae:	fa09 f303 	lslgt.w	r3, r9, r3
 8012fb2:	f1c3 0320 	rsble	r3, r3, #32
 8012fb6:	bfc6      	itte	gt
 8012fb8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012fbc:	4318      	orrgt	r0, r3
 8012fbe:	fa06 f003 	lslle.w	r0, r6, r3
 8012fc2:	f7ef ffe7 	bl	8002f94 <__aeabi_ui2d>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012fcc:	3c01      	subs	r4, #1
 8012fce:	9313      	str	r3, [sp, #76]	; 0x4c
 8012fd0:	e76f      	b.n	8012eb2 <_dtoa_r+0x112>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	e7b2      	b.n	8012f3c <_dtoa_r+0x19c>
 8012fd6:	900f      	str	r0, [sp, #60]	; 0x3c
 8012fd8:	e7b1      	b.n	8012f3e <_dtoa_r+0x19e>
 8012fda:	9b06      	ldr	r3, [sp, #24]
 8012fdc:	eba3 030a 	sub.w	r3, r3, sl
 8012fe0:	9306      	str	r3, [sp, #24]
 8012fe2:	f1ca 0300 	rsb	r3, sl, #0
 8012fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8012fe8:	2300      	movs	r3, #0
 8012fea:	930e      	str	r3, [sp, #56]	; 0x38
 8012fec:	e7be      	b.n	8012f6c <_dtoa_r+0x1cc>
 8012fee:	2300      	movs	r3, #0
 8012ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	dc58      	bgt.n	80130aa <_dtoa_r+0x30a>
 8012ff8:	f04f 0901 	mov.w	r9, #1
 8012ffc:	464b      	mov	r3, r9
 8012ffe:	f8cd 9020 	str.w	r9, [sp, #32]
 8013002:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8013006:	2200      	movs	r2, #0
 8013008:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801300a:	6042      	str	r2, [r0, #4]
 801300c:	2204      	movs	r2, #4
 801300e:	f102 0614 	add.w	r6, r2, #20
 8013012:	429e      	cmp	r6, r3
 8013014:	6841      	ldr	r1, [r0, #4]
 8013016:	d94e      	bls.n	80130b6 <_dtoa_r+0x316>
 8013018:	4628      	mov	r0, r5
 801301a:	f000 fd45 	bl	8013aa8 <_Balloc>
 801301e:	9003      	str	r0, [sp, #12]
 8013020:	2800      	cmp	r0, #0
 8013022:	d14c      	bne.n	80130be <_dtoa_r+0x31e>
 8013024:	4602      	mov	r2, r0
 8013026:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801302a:	4b17      	ldr	r3, [pc, #92]	; (8013088 <_dtoa_r+0x2e8>)
 801302c:	e6cc      	b.n	8012dc8 <_dtoa_r+0x28>
 801302e:	2301      	movs	r3, #1
 8013030:	e7de      	b.n	8012ff0 <_dtoa_r+0x250>
 8013032:	2300      	movs	r3, #0
 8013034:	930b      	str	r3, [sp, #44]	; 0x2c
 8013036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013038:	eb0a 0903 	add.w	r9, sl, r3
 801303c:	f109 0301 	add.w	r3, r9, #1
 8013040:	2b01      	cmp	r3, #1
 8013042:	9308      	str	r3, [sp, #32]
 8013044:	bfb8      	it	lt
 8013046:	2301      	movlt	r3, #1
 8013048:	e7dd      	b.n	8013006 <_dtoa_r+0x266>
 801304a:	2301      	movs	r3, #1
 801304c:	e7f2      	b.n	8013034 <_dtoa_r+0x294>
 801304e:	bf00      	nop
 8013050:	636f4361 	.word	0x636f4361
 8013054:	3fd287a7 	.word	0x3fd287a7
 8013058:	8b60c8b3 	.word	0x8b60c8b3
 801305c:	3fc68a28 	.word	0x3fc68a28
 8013060:	509f79fb 	.word	0x509f79fb
 8013064:	3fd34413 	.word	0x3fd34413
 8013068:	08016763 	.word	0x08016763
 801306c:	0801677a 	.word	0x0801677a
 8013070:	7ff00000 	.word	0x7ff00000
 8013074:	0801675f 	.word	0x0801675f
 8013078:	08016756 	.word	0x08016756
 801307c:	080165f6 	.word	0x080165f6
 8013080:	3ff80000 	.word	0x3ff80000
 8013084:	08016870 	.word	0x08016870
 8013088:	080167d5 	.word	0x080167d5
 801308c:	2401      	movs	r4, #1
 801308e:	2300      	movs	r3, #0
 8013090:	940b      	str	r4, [sp, #44]	; 0x2c
 8013092:	9322      	str	r3, [sp, #136]	; 0x88
 8013094:	f04f 39ff 	mov.w	r9, #4294967295
 8013098:	2200      	movs	r2, #0
 801309a:	2312      	movs	r3, #18
 801309c:	f8cd 9020 	str.w	r9, [sp, #32]
 80130a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80130a2:	e7b0      	b.n	8013006 <_dtoa_r+0x266>
 80130a4:	2301      	movs	r3, #1
 80130a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80130a8:	e7f4      	b.n	8013094 <_dtoa_r+0x2f4>
 80130aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80130ae:	464b      	mov	r3, r9
 80130b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80130b4:	e7a7      	b.n	8013006 <_dtoa_r+0x266>
 80130b6:	3101      	adds	r1, #1
 80130b8:	6041      	str	r1, [r0, #4]
 80130ba:	0052      	lsls	r2, r2, #1
 80130bc:	e7a7      	b.n	801300e <_dtoa_r+0x26e>
 80130be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80130c0:	9a03      	ldr	r2, [sp, #12]
 80130c2:	601a      	str	r2, [r3, #0]
 80130c4:	9b08      	ldr	r3, [sp, #32]
 80130c6:	2b0e      	cmp	r3, #14
 80130c8:	f200 80a8 	bhi.w	801321c <_dtoa_r+0x47c>
 80130cc:	2c00      	cmp	r4, #0
 80130ce:	f000 80a5 	beq.w	801321c <_dtoa_r+0x47c>
 80130d2:	f1ba 0f00 	cmp.w	sl, #0
 80130d6:	dd34      	ble.n	8013142 <_dtoa_r+0x3a2>
 80130d8:	4a9a      	ldr	r2, [pc, #616]	; (8013344 <_dtoa_r+0x5a4>)
 80130da:	f00a 030f 	and.w	r3, sl, #15
 80130de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80130e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80130ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80130ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80130f2:	d016      	beq.n	8013122 <_dtoa_r+0x382>
 80130f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80130f8:	4b93      	ldr	r3, [pc, #588]	; (8013348 <_dtoa_r+0x5a8>)
 80130fa:	2703      	movs	r7, #3
 80130fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013100:	f7f0 f8ec 	bl	80032dc <__aeabi_ddiv>
 8013104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013108:	f004 040f 	and.w	r4, r4, #15
 801310c:	4e8e      	ldr	r6, [pc, #568]	; (8013348 <_dtoa_r+0x5a8>)
 801310e:	b954      	cbnz	r4, 8013126 <_dtoa_r+0x386>
 8013110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013118:	f7f0 f8e0 	bl	80032dc <__aeabi_ddiv>
 801311c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013120:	e029      	b.n	8013176 <_dtoa_r+0x3d6>
 8013122:	2702      	movs	r7, #2
 8013124:	e7f2      	b.n	801310c <_dtoa_r+0x36c>
 8013126:	07e1      	lsls	r1, r4, #31
 8013128:	d508      	bpl.n	801313c <_dtoa_r+0x39c>
 801312a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801312e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013132:	f7ef ffa9 	bl	8003088 <__aeabi_dmul>
 8013136:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801313a:	3701      	adds	r7, #1
 801313c:	1064      	asrs	r4, r4, #1
 801313e:	3608      	adds	r6, #8
 8013140:	e7e5      	b.n	801310e <_dtoa_r+0x36e>
 8013142:	f000 80a5 	beq.w	8013290 <_dtoa_r+0x4f0>
 8013146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801314a:	f1ca 0400 	rsb	r4, sl, #0
 801314e:	4b7d      	ldr	r3, [pc, #500]	; (8013344 <_dtoa_r+0x5a4>)
 8013150:	f004 020f 	and.w	r2, r4, #15
 8013154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315c:	f7ef ff94 	bl	8003088 <__aeabi_dmul>
 8013160:	2702      	movs	r7, #2
 8013162:	2300      	movs	r3, #0
 8013164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013168:	4e77      	ldr	r6, [pc, #476]	; (8013348 <_dtoa_r+0x5a8>)
 801316a:	1124      	asrs	r4, r4, #4
 801316c:	2c00      	cmp	r4, #0
 801316e:	f040 8084 	bne.w	801327a <_dtoa_r+0x4da>
 8013172:	2b00      	cmp	r3, #0
 8013174:	d1d2      	bne.n	801311c <_dtoa_r+0x37c>
 8013176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013178:	2b00      	cmp	r3, #0
 801317a:	f000 808b 	beq.w	8013294 <_dtoa_r+0x4f4>
 801317e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013182:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013186:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801318a:	2200      	movs	r2, #0
 801318c:	4b6f      	ldr	r3, [pc, #444]	; (801334c <_dtoa_r+0x5ac>)
 801318e:	f7f0 f9ed 	bl	800356c <__aeabi_dcmplt>
 8013192:	2800      	cmp	r0, #0
 8013194:	d07e      	beq.n	8013294 <_dtoa_r+0x4f4>
 8013196:	9b08      	ldr	r3, [sp, #32]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d07b      	beq.n	8013294 <_dtoa_r+0x4f4>
 801319c:	f1b9 0f00 	cmp.w	r9, #0
 80131a0:	dd38      	ble.n	8013214 <_dtoa_r+0x474>
 80131a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80131a6:	2200      	movs	r2, #0
 80131a8:	4b69      	ldr	r3, [pc, #420]	; (8013350 <_dtoa_r+0x5b0>)
 80131aa:	f7ef ff6d 	bl	8003088 <__aeabi_dmul>
 80131ae:	464c      	mov	r4, r9
 80131b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80131b8:	3701      	adds	r7, #1
 80131ba:	4638      	mov	r0, r7
 80131bc:	f7ef fefa 	bl	8002fb4 <__aeabi_i2d>
 80131c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131c4:	f7ef ff60 	bl	8003088 <__aeabi_dmul>
 80131c8:	2200      	movs	r2, #0
 80131ca:	4b62      	ldr	r3, [pc, #392]	; (8013354 <_dtoa_r+0x5b4>)
 80131cc:	f7ef fda6 	bl	8002d1c <__adddf3>
 80131d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80131d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80131d8:	9611      	str	r6, [sp, #68]	; 0x44
 80131da:	2c00      	cmp	r4, #0
 80131dc:	d15d      	bne.n	801329a <_dtoa_r+0x4fa>
 80131de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80131e2:	2200      	movs	r2, #0
 80131e4:	4b5c      	ldr	r3, [pc, #368]	; (8013358 <_dtoa_r+0x5b8>)
 80131e6:	f7ef fd97 	bl	8002d18 <__aeabi_dsub>
 80131ea:	4602      	mov	r2, r0
 80131ec:	460b      	mov	r3, r1
 80131ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80131f2:	4633      	mov	r3, r6
 80131f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80131f6:	f7f0 f9d7 	bl	80035a8 <__aeabi_dcmpgt>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	f040 829c 	bne.w	8013738 <_dtoa_r+0x998>
 8013200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013206:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801320a:	f7f0 f9af 	bl	800356c <__aeabi_dcmplt>
 801320e:	2800      	cmp	r0, #0
 8013210:	f040 8290 	bne.w	8013734 <_dtoa_r+0x994>
 8013214:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013218:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801321c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801321e:	2b00      	cmp	r3, #0
 8013220:	f2c0 8152 	blt.w	80134c8 <_dtoa_r+0x728>
 8013224:	f1ba 0f0e 	cmp.w	sl, #14
 8013228:	f300 814e 	bgt.w	80134c8 <_dtoa_r+0x728>
 801322c:	4b45      	ldr	r3, [pc, #276]	; (8013344 <_dtoa_r+0x5a4>)
 801322e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013232:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013236:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801323a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801323c:	2b00      	cmp	r3, #0
 801323e:	f280 80db 	bge.w	80133f8 <_dtoa_r+0x658>
 8013242:	9b08      	ldr	r3, [sp, #32]
 8013244:	2b00      	cmp	r3, #0
 8013246:	f300 80d7 	bgt.w	80133f8 <_dtoa_r+0x658>
 801324a:	f040 8272 	bne.w	8013732 <_dtoa_r+0x992>
 801324e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013252:	2200      	movs	r2, #0
 8013254:	4b40      	ldr	r3, [pc, #256]	; (8013358 <_dtoa_r+0x5b8>)
 8013256:	f7ef ff17 	bl	8003088 <__aeabi_dmul>
 801325a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801325e:	f7f0 f999 	bl	8003594 <__aeabi_dcmpge>
 8013262:	9c08      	ldr	r4, [sp, #32]
 8013264:	4626      	mov	r6, r4
 8013266:	2800      	cmp	r0, #0
 8013268:	f040 8248 	bne.w	80136fc <_dtoa_r+0x95c>
 801326c:	2331      	movs	r3, #49	; 0x31
 801326e:	9f03      	ldr	r7, [sp, #12]
 8013270:	f10a 0a01 	add.w	sl, sl, #1
 8013274:	f807 3b01 	strb.w	r3, [r7], #1
 8013278:	e244      	b.n	8013704 <_dtoa_r+0x964>
 801327a:	07e2      	lsls	r2, r4, #31
 801327c:	d505      	bpl.n	801328a <_dtoa_r+0x4ea>
 801327e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013282:	f7ef ff01 	bl	8003088 <__aeabi_dmul>
 8013286:	2301      	movs	r3, #1
 8013288:	3701      	adds	r7, #1
 801328a:	1064      	asrs	r4, r4, #1
 801328c:	3608      	adds	r6, #8
 801328e:	e76d      	b.n	801316c <_dtoa_r+0x3cc>
 8013290:	2702      	movs	r7, #2
 8013292:	e770      	b.n	8013176 <_dtoa_r+0x3d6>
 8013294:	46d0      	mov	r8, sl
 8013296:	9c08      	ldr	r4, [sp, #32]
 8013298:	e78f      	b.n	80131ba <_dtoa_r+0x41a>
 801329a:	9903      	ldr	r1, [sp, #12]
 801329c:	4b29      	ldr	r3, [pc, #164]	; (8013344 <_dtoa_r+0x5a4>)
 801329e:	4421      	add	r1, r4
 80132a0:	9112      	str	r1, [sp, #72]	; 0x48
 80132a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80132a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80132ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80132b0:	2900      	cmp	r1, #0
 80132b2:	d055      	beq.n	8013360 <_dtoa_r+0x5c0>
 80132b4:	2000      	movs	r0, #0
 80132b6:	4929      	ldr	r1, [pc, #164]	; (801335c <_dtoa_r+0x5bc>)
 80132b8:	f7f0 f810 	bl	80032dc <__aeabi_ddiv>
 80132bc:	463b      	mov	r3, r7
 80132be:	4632      	mov	r2, r6
 80132c0:	f7ef fd2a 	bl	8002d18 <__aeabi_dsub>
 80132c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80132c8:	9f03      	ldr	r7, [sp, #12]
 80132ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80132ce:	f7f0 f98b 	bl	80035e8 <__aeabi_d2iz>
 80132d2:	4604      	mov	r4, r0
 80132d4:	f7ef fe6e 	bl	8002fb4 <__aeabi_i2d>
 80132d8:	4602      	mov	r2, r0
 80132da:	460b      	mov	r3, r1
 80132dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80132e0:	f7ef fd1a 	bl	8002d18 <__aeabi_dsub>
 80132e4:	4602      	mov	r2, r0
 80132e6:	460b      	mov	r3, r1
 80132e8:	3430      	adds	r4, #48	; 0x30
 80132ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80132ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80132f2:	f807 4b01 	strb.w	r4, [r7], #1
 80132f6:	f7f0 f939 	bl	800356c <__aeabi_dcmplt>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	d174      	bne.n	80133e8 <_dtoa_r+0x648>
 80132fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013302:	2000      	movs	r0, #0
 8013304:	4911      	ldr	r1, [pc, #68]	; (801334c <_dtoa_r+0x5ac>)
 8013306:	f7ef fd07 	bl	8002d18 <__aeabi_dsub>
 801330a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801330e:	f7f0 f92d 	bl	800356c <__aeabi_dcmplt>
 8013312:	2800      	cmp	r0, #0
 8013314:	f040 80b7 	bne.w	8013486 <_dtoa_r+0x6e6>
 8013318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801331a:	429f      	cmp	r7, r3
 801331c:	f43f af7a 	beq.w	8013214 <_dtoa_r+0x474>
 8013320:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013324:	2200      	movs	r2, #0
 8013326:	4b0a      	ldr	r3, [pc, #40]	; (8013350 <_dtoa_r+0x5b0>)
 8013328:	f7ef feae 	bl	8003088 <__aeabi_dmul>
 801332c:	2200      	movs	r2, #0
 801332e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013336:	4b06      	ldr	r3, [pc, #24]	; (8013350 <_dtoa_r+0x5b0>)
 8013338:	f7ef fea6 	bl	8003088 <__aeabi_dmul>
 801333c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013340:	e7c3      	b.n	80132ca <_dtoa_r+0x52a>
 8013342:	bf00      	nop
 8013344:	08016870 	.word	0x08016870
 8013348:	08016848 	.word	0x08016848
 801334c:	3ff00000 	.word	0x3ff00000
 8013350:	40240000 	.word	0x40240000
 8013354:	401c0000 	.word	0x401c0000
 8013358:	40140000 	.word	0x40140000
 801335c:	3fe00000 	.word	0x3fe00000
 8013360:	4630      	mov	r0, r6
 8013362:	4639      	mov	r1, r7
 8013364:	f7ef fe90 	bl	8003088 <__aeabi_dmul>
 8013368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801336a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801336e:	9c03      	ldr	r4, [sp, #12]
 8013370:	9314      	str	r3, [sp, #80]	; 0x50
 8013372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013376:	f7f0 f937 	bl	80035e8 <__aeabi_d2iz>
 801337a:	9015      	str	r0, [sp, #84]	; 0x54
 801337c:	f7ef fe1a 	bl	8002fb4 <__aeabi_i2d>
 8013380:	4602      	mov	r2, r0
 8013382:	460b      	mov	r3, r1
 8013384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013388:	f7ef fcc6 	bl	8002d18 <__aeabi_dsub>
 801338c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801338e:	4606      	mov	r6, r0
 8013390:	3330      	adds	r3, #48	; 0x30
 8013392:	f804 3b01 	strb.w	r3, [r4], #1
 8013396:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013398:	460f      	mov	r7, r1
 801339a:	429c      	cmp	r4, r3
 801339c:	f04f 0200 	mov.w	r2, #0
 80133a0:	d124      	bne.n	80133ec <_dtoa_r+0x64c>
 80133a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80133a6:	4bb0      	ldr	r3, [pc, #704]	; (8013668 <_dtoa_r+0x8c8>)
 80133a8:	f7ef fcb8 	bl	8002d1c <__adddf3>
 80133ac:	4602      	mov	r2, r0
 80133ae:	460b      	mov	r3, r1
 80133b0:	4630      	mov	r0, r6
 80133b2:	4639      	mov	r1, r7
 80133b4:	f7f0 f8f8 	bl	80035a8 <__aeabi_dcmpgt>
 80133b8:	2800      	cmp	r0, #0
 80133ba:	d163      	bne.n	8013484 <_dtoa_r+0x6e4>
 80133bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80133c0:	2000      	movs	r0, #0
 80133c2:	49a9      	ldr	r1, [pc, #676]	; (8013668 <_dtoa_r+0x8c8>)
 80133c4:	f7ef fca8 	bl	8002d18 <__aeabi_dsub>
 80133c8:	4602      	mov	r2, r0
 80133ca:	460b      	mov	r3, r1
 80133cc:	4630      	mov	r0, r6
 80133ce:	4639      	mov	r1, r7
 80133d0:	f7f0 f8cc 	bl	800356c <__aeabi_dcmplt>
 80133d4:	2800      	cmp	r0, #0
 80133d6:	f43f af1d 	beq.w	8013214 <_dtoa_r+0x474>
 80133da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80133dc:	1e7b      	subs	r3, r7, #1
 80133de:	9314      	str	r3, [sp, #80]	; 0x50
 80133e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80133e4:	2b30      	cmp	r3, #48	; 0x30
 80133e6:	d0f8      	beq.n	80133da <_dtoa_r+0x63a>
 80133e8:	46c2      	mov	sl, r8
 80133ea:	e03b      	b.n	8013464 <_dtoa_r+0x6c4>
 80133ec:	4b9f      	ldr	r3, [pc, #636]	; (801366c <_dtoa_r+0x8cc>)
 80133ee:	f7ef fe4b 	bl	8003088 <__aeabi_dmul>
 80133f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80133f6:	e7bc      	b.n	8013372 <_dtoa_r+0x5d2>
 80133f8:	9f03      	ldr	r7, [sp, #12]
 80133fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80133fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013402:	4640      	mov	r0, r8
 8013404:	4649      	mov	r1, r9
 8013406:	f7ef ff69 	bl	80032dc <__aeabi_ddiv>
 801340a:	f7f0 f8ed 	bl	80035e8 <__aeabi_d2iz>
 801340e:	4604      	mov	r4, r0
 8013410:	f7ef fdd0 	bl	8002fb4 <__aeabi_i2d>
 8013414:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013418:	f7ef fe36 	bl	8003088 <__aeabi_dmul>
 801341c:	4602      	mov	r2, r0
 801341e:	460b      	mov	r3, r1
 8013420:	4640      	mov	r0, r8
 8013422:	4649      	mov	r1, r9
 8013424:	f7ef fc78 	bl	8002d18 <__aeabi_dsub>
 8013428:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801342c:	f807 6b01 	strb.w	r6, [r7], #1
 8013430:	9e03      	ldr	r6, [sp, #12]
 8013432:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013436:	1bbe      	subs	r6, r7, r6
 8013438:	45b4      	cmp	ip, r6
 801343a:	4602      	mov	r2, r0
 801343c:	460b      	mov	r3, r1
 801343e:	d136      	bne.n	80134ae <_dtoa_r+0x70e>
 8013440:	f7ef fc6c 	bl	8002d1c <__adddf3>
 8013444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013448:	4680      	mov	r8, r0
 801344a:	4689      	mov	r9, r1
 801344c:	f7f0 f8ac 	bl	80035a8 <__aeabi_dcmpgt>
 8013450:	bb58      	cbnz	r0, 80134aa <_dtoa_r+0x70a>
 8013452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013456:	4640      	mov	r0, r8
 8013458:	4649      	mov	r1, r9
 801345a:	f7f0 f87d 	bl	8003558 <__aeabi_dcmpeq>
 801345e:	b108      	cbz	r0, 8013464 <_dtoa_r+0x6c4>
 8013460:	07e1      	lsls	r1, r4, #31
 8013462:	d422      	bmi.n	80134aa <_dtoa_r+0x70a>
 8013464:	4628      	mov	r0, r5
 8013466:	4659      	mov	r1, fp
 8013468:	f000 fb5e 	bl	8013b28 <_Bfree>
 801346c:	2300      	movs	r3, #0
 801346e:	703b      	strb	r3, [r7, #0]
 8013470:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013472:	f10a 0001 	add.w	r0, sl, #1
 8013476:	6018      	str	r0, [r3, #0]
 8013478:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801347a:	2b00      	cmp	r3, #0
 801347c:	f43f acde 	beq.w	8012e3c <_dtoa_r+0x9c>
 8013480:	601f      	str	r7, [r3, #0]
 8013482:	e4db      	b.n	8012e3c <_dtoa_r+0x9c>
 8013484:	4627      	mov	r7, r4
 8013486:	463b      	mov	r3, r7
 8013488:	461f      	mov	r7, r3
 801348a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801348e:	2a39      	cmp	r2, #57	; 0x39
 8013490:	d107      	bne.n	80134a2 <_dtoa_r+0x702>
 8013492:	9a03      	ldr	r2, [sp, #12]
 8013494:	429a      	cmp	r2, r3
 8013496:	d1f7      	bne.n	8013488 <_dtoa_r+0x6e8>
 8013498:	2230      	movs	r2, #48	; 0x30
 801349a:	9903      	ldr	r1, [sp, #12]
 801349c:	f108 0801 	add.w	r8, r8, #1
 80134a0:	700a      	strb	r2, [r1, #0]
 80134a2:	781a      	ldrb	r2, [r3, #0]
 80134a4:	3201      	adds	r2, #1
 80134a6:	701a      	strb	r2, [r3, #0]
 80134a8:	e79e      	b.n	80133e8 <_dtoa_r+0x648>
 80134aa:	46d0      	mov	r8, sl
 80134ac:	e7eb      	b.n	8013486 <_dtoa_r+0x6e6>
 80134ae:	2200      	movs	r2, #0
 80134b0:	4b6e      	ldr	r3, [pc, #440]	; (801366c <_dtoa_r+0x8cc>)
 80134b2:	f7ef fde9 	bl	8003088 <__aeabi_dmul>
 80134b6:	2200      	movs	r2, #0
 80134b8:	2300      	movs	r3, #0
 80134ba:	4680      	mov	r8, r0
 80134bc:	4689      	mov	r9, r1
 80134be:	f7f0 f84b 	bl	8003558 <__aeabi_dcmpeq>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d09b      	beq.n	80133fe <_dtoa_r+0x65e>
 80134c6:	e7cd      	b.n	8013464 <_dtoa_r+0x6c4>
 80134c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80134ca:	2a00      	cmp	r2, #0
 80134cc:	f000 80d0 	beq.w	8013670 <_dtoa_r+0x8d0>
 80134d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80134d2:	2a01      	cmp	r2, #1
 80134d4:	f300 80ae 	bgt.w	8013634 <_dtoa_r+0x894>
 80134d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80134da:	2a00      	cmp	r2, #0
 80134dc:	f000 80a6 	beq.w	801362c <_dtoa_r+0x88c>
 80134e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80134e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80134e6:	9f06      	ldr	r7, [sp, #24]
 80134e8:	9a06      	ldr	r2, [sp, #24]
 80134ea:	2101      	movs	r1, #1
 80134ec:	441a      	add	r2, r3
 80134ee:	9206      	str	r2, [sp, #24]
 80134f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134f2:	4628      	mov	r0, r5
 80134f4:	441a      	add	r2, r3
 80134f6:	9209      	str	r2, [sp, #36]	; 0x24
 80134f8:	f000 fbcc 	bl	8013c94 <__i2b>
 80134fc:	4606      	mov	r6, r0
 80134fe:	2f00      	cmp	r7, #0
 8013500:	dd0c      	ble.n	801351c <_dtoa_r+0x77c>
 8013502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013504:	2b00      	cmp	r3, #0
 8013506:	dd09      	ble.n	801351c <_dtoa_r+0x77c>
 8013508:	42bb      	cmp	r3, r7
 801350a:	bfa8      	it	ge
 801350c:	463b      	movge	r3, r7
 801350e:	9a06      	ldr	r2, [sp, #24]
 8013510:	1aff      	subs	r7, r7, r3
 8013512:	1ad2      	subs	r2, r2, r3
 8013514:	9206      	str	r2, [sp, #24]
 8013516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	9309      	str	r3, [sp, #36]	; 0x24
 801351c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801351e:	b1f3      	cbz	r3, 801355e <_dtoa_r+0x7be>
 8013520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013522:	2b00      	cmp	r3, #0
 8013524:	f000 80a8 	beq.w	8013678 <_dtoa_r+0x8d8>
 8013528:	2c00      	cmp	r4, #0
 801352a:	dd10      	ble.n	801354e <_dtoa_r+0x7ae>
 801352c:	4631      	mov	r1, r6
 801352e:	4622      	mov	r2, r4
 8013530:	4628      	mov	r0, r5
 8013532:	f000 fc6d 	bl	8013e10 <__pow5mult>
 8013536:	465a      	mov	r2, fp
 8013538:	4601      	mov	r1, r0
 801353a:	4606      	mov	r6, r0
 801353c:	4628      	mov	r0, r5
 801353e:	f000 fbbf 	bl	8013cc0 <__multiply>
 8013542:	4680      	mov	r8, r0
 8013544:	4659      	mov	r1, fp
 8013546:	4628      	mov	r0, r5
 8013548:	f000 faee 	bl	8013b28 <_Bfree>
 801354c:	46c3      	mov	fp, r8
 801354e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013550:	1b1a      	subs	r2, r3, r4
 8013552:	d004      	beq.n	801355e <_dtoa_r+0x7be>
 8013554:	4659      	mov	r1, fp
 8013556:	4628      	mov	r0, r5
 8013558:	f000 fc5a 	bl	8013e10 <__pow5mult>
 801355c:	4683      	mov	fp, r0
 801355e:	2101      	movs	r1, #1
 8013560:	4628      	mov	r0, r5
 8013562:	f000 fb97 	bl	8013c94 <__i2b>
 8013566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013568:	4604      	mov	r4, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	f340 8086 	ble.w	801367c <_dtoa_r+0x8dc>
 8013570:	461a      	mov	r2, r3
 8013572:	4601      	mov	r1, r0
 8013574:	4628      	mov	r0, r5
 8013576:	f000 fc4b 	bl	8013e10 <__pow5mult>
 801357a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801357c:	4604      	mov	r4, r0
 801357e:	2b01      	cmp	r3, #1
 8013580:	dd7f      	ble.n	8013682 <_dtoa_r+0x8e2>
 8013582:	f04f 0800 	mov.w	r8, #0
 8013586:	6923      	ldr	r3, [r4, #16]
 8013588:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801358c:	6918      	ldr	r0, [r3, #16]
 801358e:	f000 fb33 	bl	8013bf8 <__hi0bits>
 8013592:	f1c0 0020 	rsb	r0, r0, #32
 8013596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013598:	4418      	add	r0, r3
 801359a:	f010 001f 	ands.w	r0, r0, #31
 801359e:	f000 8092 	beq.w	80136c6 <_dtoa_r+0x926>
 80135a2:	f1c0 0320 	rsb	r3, r0, #32
 80135a6:	2b04      	cmp	r3, #4
 80135a8:	f340 808a 	ble.w	80136c0 <_dtoa_r+0x920>
 80135ac:	f1c0 001c 	rsb	r0, r0, #28
 80135b0:	9b06      	ldr	r3, [sp, #24]
 80135b2:	4407      	add	r7, r0
 80135b4:	4403      	add	r3, r0
 80135b6:	9306      	str	r3, [sp, #24]
 80135b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135ba:	4403      	add	r3, r0
 80135bc:	9309      	str	r3, [sp, #36]	; 0x24
 80135be:	9b06      	ldr	r3, [sp, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	dd05      	ble.n	80135d0 <_dtoa_r+0x830>
 80135c4:	4659      	mov	r1, fp
 80135c6:	461a      	mov	r2, r3
 80135c8:	4628      	mov	r0, r5
 80135ca:	f000 fc7b 	bl	8013ec4 <__lshift>
 80135ce:	4683      	mov	fp, r0
 80135d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	dd05      	ble.n	80135e2 <_dtoa_r+0x842>
 80135d6:	4621      	mov	r1, r4
 80135d8:	461a      	mov	r2, r3
 80135da:	4628      	mov	r0, r5
 80135dc:	f000 fc72 	bl	8013ec4 <__lshift>
 80135e0:	4604      	mov	r4, r0
 80135e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d070      	beq.n	80136ca <_dtoa_r+0x92a>
 80135e8:	4621      	mov	r1, r4
 80135ea:	4658      	mov	r0, fp
 80135ec:	f000 fcda 	bl	8013fa4 <__mcmp>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	da6a      	bge.n	80136ca <_dtoa_r+0x92a>
 80135f4:	2300      	movs	r3, #0
 80135f6:	4659      	mov	r1, fp
 80135f8:	220a      	movs	r2, #10
 80135fa:	4628      	mov	r0, r5
 80135fc:	f000 fab6 	bl	8013b6c <__multadd>
 8013600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013602:	4683      	mov	fp, r0
 8013604:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 8194 	beq.w	8013936 <_dtoa_r+0xb96>
 801360e:	4631      	mov	r1, r6
 8013610:	2300      	movs	r3, #0
 8013612:	220a      	movs	r2, #10
 8013614:	4628      	mov	r0, r5
 8013616:	f000 faa9 	bl	8013b6c <__multadd>
 801361a:	f1b9 0f00 	cmp.w	r9, #0
 801361e:	4606      	mov	r6, r0
 8013620:	f300 8093 	bgt.w	801374a <_dtoa_r+0x9aa>
 8013624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013626:	2b02      	cmp	r3, #2
 8013628:	dc57      	bgt.n	80136da <_dtoa_r+0x93a>
 801362a:	e08e      	b.n	801374a <_dtoa_r+0x9aa>
 801362c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801362e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013632:	e757      	b.n	80134e4 <_dtoa_r+0x744>
 8013634:	9b08      	ldr	r3, [sp, #32]
 8013636:	1e5c      	subs	r4, r3, #1
 8013638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801363a:	42a3      	cmp	r3, r4
 801363c:	bfb7      	itett	lt
 801363e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013640:	1b1c      	subge	r4, r3, r4
 8013642:	1ae2      	sublt	r2, r4, r3
 8013644:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013646:	bfbe      	ittt	lt
 8013648:	940a      	strlt	r4, [sp, #40]	; 0x28
 801364a:	189b      	addlt	r3, r3, r2
 801364c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801364e:	9b08      	ldr	r3, [sp, #32]
 8013650:	bfb8      	it	lt
 8013652:	2400      	movlt	r4, #0
 8013654:	2b00      	cmp	r3, #0
 8013656:	bfbb      	ittet	lt
 8013658:	9b06      	ldrlt	r3, [sp, #24]
 801365a:	9a08      	ldrlt	r2, [sp, #32]
 801365c:	9f06      	ldrge	r7, [sp, #24]
 801365e:	1a9f      	sublt	r7, r3, r2
 8013660:	bfac      	ite	ge
 8013662:	9b08      	ldrge	r3, [sp, #32]
 8013664:	2300      	movlt	r3, #0
 8013666:	e73f      	b.n	80134e8 <_dtoa_r+0x748>
 8013668:	3fe00000 	.word	0x3fe00000
 801366c:	40240000 	.word	0x40240000
 8013670:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013672:	9f06      	ldr	r7, [sp, #24]
 8013674:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013676:	e742      	b.n	80134fe <_dtoa_r+0x75e>
 8013678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801367a:	e76b      	b.n	8013554 <_dtoa_r+0x7b4>
 801367c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801367e:	2b01      	cmp	r3, #1
 8013680:	dc19      	bgt.n	80136b6 <_dtoa_r+0x916>
 8013682:	9b04      	ldr	r3, [sp, #16]
 8013684:	b9bb      	cbnz	r3, 80136b6 <_dtoa_r+0x916>
 8013686:	9b05      	ldr	r3, [sp, #20]
 8013688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801368c:	b99b      	cbnz	r3, 80136b6 <_dtoa_r+0x916>
 801368e:	9b05      	ldr	r3, [sp, #20]
 8013690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013694:	0d1b      	lsrs	r3, r3, #20
 8013696:	051b      	lsls	r3, r3, #20
 8013698:	b183      	cbz	r3, 80136bc <_dtoa_r+0x91c>
 801369a:	f04f 0801 	mov.w	r8, #1
 801369e:	9b06      	ldr	r3, [sp, #24]
 80136a0:	3301      	adds	r3, #1
 80136a2:	9306      	str	r3, [sp, #24]
 80136a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136a6:	3301      	adds	r3, #1
 80136a8:	9309      	str	r3, [sp, #36]	; 0x24
 80136aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f47f af6a 	bne.w	8013586 <_dtoa_r+0x7e6>
 80136b2:	2001      	movs	r0, #1
 80136b4:	e76f      	b.n	8013596 <_dtoa_r+0x7f6>
 80136b6:	f04f 0800 	mov.w	r8, #0
 80136ba:	e7f6      	b.n	80136aa <_dtoa_r+0x90a>
 80136bc:	4698      	mov	r8, r3
 80136be:	e7f4      	b.n	80136aa <_dtoa_r+0x90a>
 80136c0:	f43f af7d 	beq.w	80135be <_dtoa_r+0x81e>
 80136c4:	4618      	mov	r0, r3
 80136c6:	301c      	adds	r0, #28
 80136c8:	e772      	b.n	80135b0 <_dtoa_r+0x810>
 80136ca:	9b08      	ldr	r3, [sp, #32]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	dc36      	bgt.n	801373e <_dtoa_r+0x99e>
 80136d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80136d2:	2b02      	cmp	r3, #2
 80136d4:	dd33      	ble.n	801373e <_dtoa_r+0x99e>
 80136d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80136da:	f1b9 0f00 	cmp.w	r9, #0
 80136de:	d10d      	bne.n	80136fc <_dtoa_r+0x95c>
 80136e0:	4621      	mov	r1, r4
 80136e2:	464b      	mov	r3, r9
 80136e4:	2205      	movs	r2, #5
 80136e6:	4628      	mov	r0, r5
 80136e8:	f000 fa40 	bl	8013b6c <__multadd>
 80136ec:	4601      	mov	r1, r0
 80136ee:	4604      	mov	r4, r0
 80136f0:	4658      	mov	r0, fp
 80136f2:	f000 fc57 	bl	8013fa4 <__mcmp>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f73f adb8 	bgt.w	801326c <_dtoa_r+0x4cc>
 80136fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80136fe:	9f03      	ldr	r7, [sp, #12]
 8013700:	ea6f 0a03 	mvn.w	sl, r3
 8013704:	f04f 0800 	mov.w	r8, #0
 8013708:	4621      	mov	r1, r4
 801370a:	4628      	mov	r0, r5
 801370c:	f000 fa0c 	bl	8013b28 <_Bfree>
 8013710:	2e00      	cmp	r6, #0
 8013712:	f43f aea7 	beq.w	8013464 <_dtoa_r+0x6c4>
 8013716:	f1b8 0f00 	cmp.w	r8, #0
 801371a:	d005      	beq.n	8013728 <_dtoa_r+0x988>
 801371c:	45b0      	cmp	r8, r6
 801371e:	d003      	beq.n	8013728 <_dtoa_r+0x988>
 8013720:	4641      	mov	r1, r8
 8013722:	4628      	mov	r0, r5
 8013724:	f000 fa00 	bl	8013b28 <_Bfree>
 8013728:	4631      	mov	r1, r6
 801372a:	4628      	mov	r0, r5
 801372c:	f000 f9fc 	bl	8013b28 <_Bfree>
 8013730:	e698      	b.n	8013464 <_dtoa_r+0x6c4>
 8013732:	2400      	movs	r4, #0
 8013734:	4626      	mov	r6, r4
 8013736:	e7e1      	b.n	80136fc <_dtoa_r+0x95c>
 8013738:	46c2      	mov	sl, r8
 801373a:	4626      	mov	r6, r4
 801373c:	e596      	b.n	801326c <_dtoa_r+0x4cc>
 801373e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013744:	2b00      	cmp	r3, #0
 8013746:	f000 80fd 	beq.w	8013944 <_dtoa_r+0xba4>
 801374a:	2f00      	cmp	r7, #0
 801374c:	dd05      	ble.n	801375a <_dtoa_r+0x9ba>
 801374e:	4631      	mov	r1, r6
 8013750:	463a      	mov	r2, r7
 8013752:	4628      	mov	r0, r5
 8013754:	f000 fbb6 	bl	8013ec4 <__lshift>
 8013758:	4606      	mov	r6, r0
 801375a:	f1b8 0f00 	cmp.w	r8, #0
 801375e:	d05c      	beq.n	801381a <_dtoa_r+0xa7a>
 8013760:	4628      	mov	r0, r5
 8013762:	6871      	ldr	r1, [r6, #4]
 8013764:	f000 f9a0 	bl	8013aa8 <_Balloc>
 8013768:	4607      	mov	r7, r0
 801376a:	b928      	cbnz	r0, 8013778 <_dtoa_r+0x9d8>
 801376c:	4602      	mov	r2, r0
 801376e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013772:	4b7f      	ldr	r3, [pc, #508]	; (8013970 <_dtoa_r+0xbd0>)
 8013774:	f7ff bb28 	b.w	8012dc8 <_dtoa_r+0x28>
 8013778:	6932      	ldr	r2, [r6, #16]
 801377a:	f106 010c 	add.w	r1, r6, #12
 801377e:	3202      	adds	r2, #2
 8013780:	0092      	lsls	r2, r2, #2
 8013782:	300c      	adds	r0, #12
 8013784:	f7fe f96e 	bl	8011a64 <memcpy>
 8013788:	2201      	movs	r2, #1
 801378a:	4639      	mov	r1, r7
 801378c:	4628      	mov	r0, r5
 801378e:	f000 fb99 	bl	8013ec4 <__lshift>
 8013792:	46b0      	mov	r8, r6
 8013794:	4606      	mov	r6, r0
 8013796:	9b03      	ldr	r3, [sp, #12]
 8013798:	3301      	adds	r3, #1
 801379a:	9308      	str	r3, [sp, #32]
 801379c:	9b03      	ldr	r3, [sp, #12]
 801379e:	444b      	add	r3, r9
 80137a0:	930a      	str	r3, [sp, #40]	; 0x28
 80137a2:	9b04      	ldr	r3, [sp, #16]
 80137a4:	f003 0301 	and.w	r3, r3, #1
 80137a8:	9309      	str	r3, [sp, #36]	; 0x24
 80137aa:	9b08      	ldr	r3, [sp, #32]
 80137ac:	4621      	mov	r1, r4
 80137ae:	3b01      	subs	r3, #1
 80137b0:	4658      	mov	r0, fp
 80137b2:	9304      	str	r3, [sp, #16]
 80137b4:	f7ff fa66 	bl	8012c84 <quorem>
 80137b8:	4603      	mov	r3, r0
 80137ba:	4641      	mov	r1, r8
 80137bc:	3330      	adds	r3, #48	; 0x30
 80137be:	9006      	str	r0, [sp, #24]
 80137c0:	4658      	mov	r0, fp
 80137c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80137c4:	f000 fbee 	bl	8013fa4 <__mcmp>
 80137c8:	4632      	mov	r2, r6
 80137ca:	4681      	mov	r9, r0
 80137cc:	4621      	mov	r1, r4
 80137ce:	4628      	mov	r0, r5
 80137d0:	f000 fc04 	bl	8013fdc <__mdiff>
 80137d4:	68c2      	ldr	r2, [r0, #12]
 80137d6:	4607      	mov	r7, r0
 80137d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137da:	bb02      	cbnz	r2, 801381e <_dtoa_r+0xa7e>
 80137dc:	4601      	mov	r1, r0
 80137de:	4658      	mov	r0, fp
 80137e0:	f000 fbe0 	bl	8013fa4 <__mcmp>
 80137e4:	4602      	mov	r2, r0
 80137e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137e8:	4639      	mov	r1, r7
 80137ea:	4628      	mov	r0, r5
 80137ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80137f0:	f000 f99a 	bl	8013b28 <_Bfree>
 80137f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80137f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137f8:	9f08      	ldr	r7, [sp, #32]
 80137fa:	ea43 0102 	orr.w	r1, r3, r2
 80137fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013800:	430b      	orrs	r3, r1
 8013802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013804:	d10d      	bne.n	8013822 <_dtoa_r+0xa82>
 8013806:	2b39      	cmp	r3, #57	; 0x39
 8013808:	d029      	beq.n	801385e <_dtoa_r+0xabe>
 801380a:	f1b9 0f00 	cmp.w	r9, #0
 801380e:	dd01      	ble.n	8013814 <_dtoa_r+0xa74>
 8013810:	9b06      	ldr	r3, [sp, #24]
 8013812:	3331      	adds	r3, #49	; 0x31
 8013814:	9a04      	ldr	r2, [sp, #16]
 8013816:	7013      	strb	r3, [r2, #0]
 8013818:	e776      	b.n	8013708 <_dtoa_r+0x968>
 801381a:	4630      	mov	r0, r6
 801381c:	e7b9      	b.n	8013792 <_dtoa_r+0x9f2>
 801381e:	2201      	movs	r2, #1
 8013820:	e7e2      	b.n	80137e8 <_dtoa_r+0xa48>
 8013822:	f1b9 0f00 	cmp.w	r9, #0
 8013826:	db06      	blt.n	8013836 <_dtoa_r+0xa96>
 8013828:	9922      	ldr	r1, [sp, #136]	; 0x88
 801382a:	ea41 0909 	orr.w	r9, r1, r9
 801382e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013830:	ea59 0101 	orrs.w	r1, r9, r1
 8013834:	d120      	bne.n	8013878 <_dtoa_r+0xad8>
 8013836:	2a00      	cmp	r2, #0
 8013838:	ddec      	ble.n	8013814 <_dtoa_r+0xa74>
 801383a:	4659      	mov	r1, fp
 801383c:	2201      	movs	r2, #1
 801383e:	4628      	mov	r0, r5
 8013840:	9308      	str	r3, [sp, #32]
 8013842:	f000 fb3f 	bl	8013ec4 <__lshift>
 8013846:	4621      	mov	r1, r4
 8013848:	4683      	mov	fp, r0
 801384a:	f000 fbab 	bl	8013fa4 <__mcmp>
 801384e:	2800      	cmp	r0, #0
 8013850:	9b08      	ldr	r3, [sp, #32]
 8013852:	dc02      	bgt.n	801385a <_dtoa_r+0xaba>
 8013854:	d1de      	bne.n	8013814 <_dtoa_r+0xa74>
 8013856:	07da      	lsls	r2, r3, #31
 8013858:	d5dc      	bpl.n	8013814 <_dtoa_r+0xa74>
 801385a:	2b39      	cmp	r3, #57	; 0x39
 801385c:	d1d8      	bne.n	8013810 <_dtoa_r+0xa70>
 801385e:	2339      	movs	r3, #57	; 0x39
 8013860:	9a04      	ldr	r2, [sp, #16]
 8013862:	7013      	strb	r3, [r2, #0]
 8013864:	463b      	mov	r3, r7
 8013866:	461f      	mov	r7, r3
 8013868:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801386c:	3b01      	subs	r3, #1
 801386e:	2a39      	cmp	r2, #57	; 0x39
 8013870:	d050      	beq.n	8013914 <_dtoa_r+0xb74>
 8013872:	3201      	adds	r2, #1
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	e747      	b.n	8013708 <_dtoa_r+0x968>
 8013878:	2a00      	cmp	r2, #0
 801387a:	dd03      	ble.n	8013884 <_dtoa_r+0xae4>
 801387c:	2b39      	cmp	r3, #57	; 0x39
 801387e:	d0ee      	beq.n	801385e <_dtoa_r+0xabe>
 8013880:	3301      	adds	r3, #1
 8013882:	e7c7      	b.n	8013814 <_dtoa_r+0xa74>
 8013884:	9a08      	ldr	r2, [sp, #32]
 8013886:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013888:	f802 3c01 	strb.w	r3, [r2, #-1]
 801388c:	428a      	cmp	r2, r1
 801388e:	d02a      	beq.n	80138e6 <_dtoa_r+0xb46>
 8013890:	4659      	mov	r1, fp
 8013892:	2300      	movs	r3, #0
 8013894:	220a      	movs	r2, #10
 8013896:	4628      	mov	r0, r5
 8013898:	f000 f968 	bl	8013b6c <__multadd>
 801389c:	45b0      	cmp	r8, r6
 801389e:	4683      	mov	fp, r0
 80138a0:	f04f 0300 	mov.w	r3, #0
 80138a4:	f04f 020a 	mov.w	r2, #10
 80138a8:	4641      	mov	r1, r8
 80138aa:	4628      	mov	r0, r5
 80138ac:	d107      	bne.n	80138be <_dtoa_r+0xb1e>
 80138ae:	f000 f95d 	bl	8013b6c <__multadd>
 80138b2:	4680      	mov	r8, r0
 80138b4:	4606      	mov	r6, r0
 80138b6:	9b08      	ldr	r3, [sp, #32]
 80138b8:	3301      	adds	r3, #1
 80138ba:	9308      	str	r3, [sp, #32]
 80138bc:	e775      	b.n	80137aa <_dtoa_r+0xa0a>
 80138be:	f000 f955 	bl	8013b6c <__multadd>
 80138c2:	4631      	mov	r1, r6
 80138c4:	4680      	mov	r8, r0
 80138c6:	2300      	movs	r3, #0
 80138c8:	220a      	movs	r2, #10
 80138ca:	4628      	mov	r0, r5
 80138cc:	f000 f94e 	bl	8013b6c <__multadd>
 80138d0:	4606      	mov	r6, r0
 80138d2:	e7f0      	b.n	80138b6 <_dtoa_r+0xb16>
 80138d4:	f1b9 0f00 	cmp.w	r9, #0
 80138d8:	bfcc      	ite	gt
 80138da:	464f      	movgt	r7, r9
 80138dc:	2701      	movle	r7, #1
 80138de:	f04f 0800 	mov.w	r8, #0
 80138e2:	9a03      	ldr	r2, [sp, #12]
 80138e4:	4417      	add	r7, r2
 80138e6:	4659      	mov	r1, fp
 80138e8:	2201      	movs	r2, #1
 80138ea:	4628      	mov	r0, r5
 80138ec:	9308      	str	r3, [sp, #32]
 80138ee:	f000 fae9 	bl	8013ec4 <__lshift>
 80138f2:	4621      	mov	r1, r4
 80138f4:	4683      	mov	fp, r0
 80138f6:	f000 fb55 	bl	8013fa4 <__mcmp>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	dcb2      	bgt.n	8013864 <_dtoa_r+0xac4>
 80138fe:	d102      	bne.n	8013906 <_dtoa_r+0xb66>
 8013900:	9b08      	ldr	r3, [sp, #32]
 8013902:	07db      	lsls	r3, r3, #31
 8013904:	d4ae      	bmi.n	8013864 <_dtoa_r+0xac4>
 8013906:	463b      	mov	r3, r7
 8013908:	461f      	mov	r7, r3
 801390a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801390e:	2a30      	cmp	r2, #48	; 0x30
 8013910:	d0fa      	beq.n	8013908 <_dtoa_r+0xb68>
 8013912:	e6f9      	b.n	8013708 <_dtoa_r+0x968>
 8013914:	9a03      	ldr	r2, [sp, #12]
 8013916:	429a      	cmp	r2, r3
 8013918:	d1a5      	bne.n	8013866 <_dtoa_r+0xac6>
 801391a:	2331      	movs	r3, #49	; 0x31
 801391c:	f10a 0a01 	add.w	sl, sl, #1
 8013920:	e779      	b.n	8013816 <_dtoa_r+0xa76>
 8013922:	4b14      	ldr	r3, [pc, #80]	; (8013974 <_dtoa_r+0xbd4>)
 8013924:	f7ff baa8 	b.w	8012e78 <_dtoa_r+0xd8>
 8013928:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801392a:	2b00      	cmp	r3, #0
 801392c:	f47f aa81 	bne.w	8012e32 <_dtoa_r+0x92>
 8013930:	4b11      	ldr	r3, [pc, #68]	; (8013978 <_dtoa_r+0xbd8>)
 8013932:	f7ff baa1 	b.w	8012e78 <_dtoa_r+0xd8>
 8013936:	f1b9 0f00 	cmp.w	r9, #0
 801393a:	dc03      	bgt.n	8013944 <_dtoa_r+0xba4>
 801393c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801393e:	2b02      	cmp	r3, #2
 8013940:	f73f aecb 	bgt.w	80136da <_dtoa_r+0x93a>
 8013944:	9f03      	ldr	r7, [sp, #12]
 8013946:	4621      	mov	r1, r4
 8013948:	4658      	mov	r0, fp
 801394a:	f7ff f99b 	bl	8012c84 <quorem>
 801394e:	9a03      	ldr	r2, [sp, #12]
 8013950:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013954:	f807 3b01 	strb.w	r3, [r7], #1
 8013958:	1aba      	subs	r2, r7, r2
 801395a:	4591      	cmp	r9, r2
 801395c:	ddba      	ble.n	80138d4 <_dtoa_r+0xb34>
 801395e:	4659      	mov	r1, fp
 8013960:	2300      	movs	r3, #0
 8013962:	220a      	movs	r2, #10
 8013964:	4628      	mov	r0, r5
 8013966:	f000 f901 	bl	8013b6c <__multadd>
 801396a:	4683      	mov	fp, r0
 801396c:	e7eb      	b.n	8013946 <_dtoa_r+0xba6>
 801396e:	bf00      	nop
 8013970:	080167d5 	.word	0x080167d5
 8013974:	080165f5 	.word	0x080165f5
 8013978:	08016756 	.word	0x08016756

0801397c <_localeconv_r>:
 801397c:	4800      	ldr	r0, [pc, #0]	; (8013980 <_localeconv_r+0x4>)
 801397e:	4770      	bx	lr
 8013980:	200001b4 	.word	0x200001b4

08013984 <_lseek_r>:
 8013984:	b538      	push	{r3, r4, r5, lr}
 8013986:	4604      	mov	r4, r0
 8013988:	4608      	mov	r0, r1
 801398a:	4611      	mov	r1, r2
 801398c:	2200      	movs	r2, #0
 801398e:	4d05      	ldr	r5, [pc, #20]	; (80139a4 <_lseek_r+0x20>)
 8013990:	602a      	str	r2, [r5, #0]
 8013992:	461a      	mov	r2, r3
 8013994:	f7f1 fc80 	bl	8005298 <_lseek>
 8013998:	1c43      	adds	r3, r0, #1
 801399a:	d102      	bne.n	80139a2 <_lseek_r+0x1e>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	b103      	cbz	r3, 80139a2 <_lseek_r+0x1e>
 80139a0:	6023      	str	r3, [r4, #0]
 80139a2:	bd38      	pop	{r3, r4, r5, pc}
 80139a4:	200028b8 	.word	0x200028b8

080139a8 <__swhatbuf_r>:
 80139a8:	b570      	push	{r4, r5, r6, lr}
 80139aa:	460e      	mov	r6, r1
 80139ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139b0:	4614      	mov	r4, r2
 80139b2:	2900      	cmp	r1, #0
 80139b4:	461d      	mov	r5, r3
 80139b6:	b096      	sub	sp, #88	; 0x58
 80139b8:	da08      	bge.n	80139cc <__swhatbuf_r+0x24>
 80139ba:	2200      	movs	r2, #0
 80139bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80139c0:	602a      	str	r2, [r5, #0]
 80139c2:	061a      	lsls	r2, r3, #24
 80139c4:	d410      	bmi.n	80139e8 <__swhatbuf_r+0x40>
 80139c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139ca:	e00e      	b.n	80139ea <__swhatbuf_r+0x42>
 80139cc:	466a      	mov	r2, sp
 80139ce:	f000 fc1b 	bl	8014208 <_fstat_r>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	dbf1      	blt.n	80139ba <__swhatbuf_r+0x12>
 80139d6:	9a01      	ldr	r2, [sp, #4]
 80139d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80139dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80139e0:	425a      	negs	r2, r3
 80139e2:	415a      	adcs	r2, r3
 80139e4:	602a      	str	r2, [r5, #0]
 80139e6:	e7ee      	b.n	80139c6 <__swhatbuf_r+0x1e>
 80139e8:	2340      	movs	r3, #64	; 0x40
 80139ea:	2000      	movs	r0, #0
 80139ec:	6023      	str	r3, [r4, #0]
 80139ee:	b016      	add	sp, #88	; 0x58
 80139f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080139f4 <__smakebuf_r>:
 80139f4:	898b      	ldrh	r3, [r1, #12]
 80139f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139f8:	079d      	lsls	r5, r3, #30
 80139fa:	4606      	mov	r6, r0
 80139fc:	460c      	mov	r4, r1
 80139fe:	d507      	bpl.n	8013a10 <__smakebuf_r+0x1c>
 8013a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a04:	6023      	str	r3, [r4, #0]
 8013a06:	6123      	str	r3, [r4, #16]
 8013a08:	2301      	movs	r3, #1
 8013a0a:	6163      	str	r3, [r4, #20]
 8013a0c:	b002      	add	sp, #8
 8013a0e:	bd70      	pop	{r4, r5, r6, pc}
 8013a10:	466a      	mov	r2, sp
 8013a12:	ab01      	add	r3, sp, #4
 8013a14:	f7ff ffc8 	bl	80139a8 <__swhatbuf_r>
 8013a18:	9900      	ldr	r1, [sp, #0]
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	f7fe f8b9 	bl	8011b94 <_malloc_r>
 8013a22:	b948      	cbnz	r0, 8013a38 <__smakebuf_r+0x44>
 8013a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a28:	059a      	lsls	r2, r3, #22
 8013a2a:	d4ef      	bmi.n	8013a0c <__smakebuf_r+0x18>
 8013a2c:	f023 0303 	bic.w	r3, r3, #3
 8013a30:	f043 0302 	orr.w	r3, r3, #2
 8013a34:	81a3      	strh	r3, [r4, #12]
 8013a36:	e7e3      	b.n	8013a00 <__smakebuf_r+0xc>
 8013a38:	4b0d      	ldr	r3, [pc, #52]	; (8013a70 <__smakebuf_r+0x7c>)
 8013a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a3c:	89a3      	ldrh	r3, [r4, #12]
 8013a3e:	6020      	str	r0, [r4, #0]
 8013a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a44:	81a3      	strh	r3, [r4, #12]
 8013a46:	9b00      	ldr	r3, [sp, #0]
 8013a48:	6120      	str	r0, [r4, #16]
 8013a4a:	6163      	str	r3, [r4, #20]
 8013a4c:	9b01      	ldr	r3, [sp, #4]
 8013a4e:	b15b      	cbz	r3, 8013a68 <__smakebuf_r+0x74>
 8013a50:	4630      	mov	r0, r6
 8013a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a56:	f000 fbe9 	bl	801422c <_isatty_r>
 8013a5a:	b128      	cbz	r0, 8013a68 <__smakebuf_r+0x74>
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	f023 0303 	bic.w	r3, r3, #3
 8013a62:	f043 0301 	orr.w	r3, r3, #1
 8013a66:	81a3      	strh	r3, [r4, #12]
 8013a68:	89a0      	ldrh	r0, [r4, #12]
 8013a6a:	4305      	orrs	r5, r0
 8013a6c:	81a5      	strh	r5, [r4, #12]
 8013a6e:	e7cd      	b.n	8013a0c <__smakebuf_r+0x18>
 8013a70:	0801181d 	.word	0x0801181d

08013a74 <memchr>:
 8013a74:	4603      	mov	r3, r0
 8013a76:	b510      	push	{r4, lr}
 8013a78:	b2c9      	uxtb	r1, r1
 8013a7a:	4402      	add	r2, r0
 8013a7c:	4293      	cmp	r3, r2
 8013a7e:	4618      	mov	r0, r3
 8013a80:	d101      	bne.n	8013a86 <memchr+0x12>
 8013a82:	2000      	movs	r0, #0
 8013a84:	e003      	b.n	8013a8e <memchr+0x1a>
 8013a86:	7804      	ldrb	r4, [r0, #0]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	428c      	cmp	r4, r1
 8013a8c:	d1f6      	bne.n	8013a7c <memchr+0x8>
 8013a8e:	bd10      	pop	{r4, pc}

08013a90 <__malloc_lock>:
 8013a90:	4801      	ldr	r0, [pc, #4]	; (8013a98 <__malloc_lock+0x8>)
 8013a92:	f7fd bfcc 	b.w	8011a2e <__retarget_lock_acquire_recursive>
 8013a96:	bf00      	nop
 8013a98:	200028ac 	.word	0x200028ac

08013a9c <__malloc_unlock>:
 8013a9c:	4801      	ldr	r0, [pc, #4]	; (8013aa4 <__malloc_unlock+0x8>)
 8013a9e:	f7fd bfc7 	b.w	8011a30 <__retarget_lock_release_recursive>
 8013aa2:	bf00      	nop
 8013aa4:	200028ac 	.word	0x200028ac

08013aa8 <_Balloc>:
 8013aa8:	b570      	push	{r4, r5, r6, lr}
 8013aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013aac:	4604      	mov	r4, r0
 8013aae:	460d      	mov	r5, r1
 8013ab0:	b976      	cbnz	r6, 8013ad0 <_Balloc+0x28>
 8013ab2:	2010      	movs	r0, #16
 8013ab4:	f7fd ffbe 	bl	8011a34 <malloc>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	6260      	str	r0, [r4, #36]	; 0x24
 8013abc:	b920      	cbnz	r0, 8013ac8 <_Balloc+0x20>
 8013abe:	2166      	movs	r1, #102	; 0x66
 8013ac0:	4b17      	ldr	r3, [pc, #92]	; (8013b20 <_Balloc+0x78>)
 8013ac2:	4818      	ldr	r0, [pc, #96]	; (8013b24 <_Balloc+0x7c>)
 8013ac4:	f7ff f8b0 	bl	8012c28 <__assert_func>
 8013ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013acc:	6006      	str	r6, [r0, #0]
 8013ace:	60c6      	str	r6, [r0, #12]
 8013ad0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013ad2:	68f3      	ldr	r3, [r6, #12]
 8013ad4:	b183      	cbz	r3, 8013af8 <_Balloc+0x50>
 8013ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013ade:	b9b8      	cbnz	r0, 8013b10 <_Balloc+0x68>
 8013ae0:	2101      	movs	r1, #1
 8013ae2:	fa01 f605 	lsl.w	r6, r1, r5
 8013ae6:	1d72      	adds	r2, r6, #5
 8013ae8:	4620      	mov	r0, r4
 8013aea:	0092      	lsls	r2, r2, #2
 8013aec:	f000 fb5e 	bl	80141ac <_calloc_r>
 8013af0:	b160      	cbz	r0, 8013b0c <_Balloc+0x64>
 8013af2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013af6:	e00e      	b.n	8013b16 <_Balloc+0x6e>
 8013af8:	2221      	movs	r2, #33	; 0x21
 8013afa:	2104      	movs	r1, #4
 8013afc:	4620      	mov	r0, r4
 8013afe:	f000 fb55 	bl	80141ac <_calloc_r>
 8013b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b04:	60f0      	str	r0, [r6, #12]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1e4      	bne.n	8013ad6 <_Balloc+0x2e>
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	bd70      	pop	{r4, r5, r6, pc}
 8013b10:	6802      	ldr	r2, [r0, #0]
 8013b12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b16:	2300      	movs	r3, #0
 8013b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b1c:	e7f7      	b.n	8013b0e <_Balloc+0x66>
 8013b1e:	bf00      	nop
 8013b20:	08016763 	.word	0x08016763
 8013b24:	080167e6 	.word	0x080167e6

08013b28 <_Bfree>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	460c      	mov	r4, r1
 8013b30:	b976      	cbnz	r6, 8013b50 <_Bfree+0x28>
 8013b32:	2010      	movs	r0, #16
 8013b34:	f7fd ff7e 	bl	8011a34 <malloc>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	6268      	str	r0, [r5, #36]	; 0x24
 8013b3c:	b920      	cbnz	r0, 8013b48 <_Bfree+0x20>
 8013b3e:	218a      	movs	r1, #138	; 0x8a
 8013b40:	4b08      	ldr	r3, [pc, #32]	; (8013b64 <_Bfree+0x3c>)
 8013b42:	4809      	ldr	r0, [pc, #36]	; (8013b68 <_Bfree+0x40>)
 8013b44:	f7ff f870 	bl	8012c28 <__assert_func>
 8013b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b4c:	6006      	str	r6, [r0, #0]
 8013b4e:	60c6      	str	r6, [r0, #12]
 8013b50:	b13c      	cbz	r4, 8013b62 <_Bfree+0x3a>
 8013b52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013b54:	6862      	ldr	r2, [r4, #4]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b5c:	6021      	str	r1, [r4, #0]
 8013b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b62:	bd70      	pop	{r4, r5, r6, pc}
 8013b64:	08016763 	.word	0x08016763
 8013b68:	080167e6 	.word	0x080167e6

08013b6c <__multadd>:
 8013b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b70:	4607      	mov	r7, r0
 8013b72:	460c      	mov	r4, r1
 8013b74:	461e      	mov	r6, r3
 8013b76:	2000      	movs	r0, #0
 8013b78:	690d      	ldr	r5, [r1, #16]
 8013b7a:	f101 0c14 	add.w	ip, r1, #20
 8013b7e:	f8dc 3000 	ldr.w	r3, [ip]
 8013b82:	3001      	adds	r0, #1
 8013b84:	b299      	uxth	r1, r3
 8013b86:	fb02 6101 	mla	r1, r2, r1, r6
 8013b8a:	0c1e      	lsrs	r6, r3, #16
 8013b8c:	0c0b      	lsrs	r3, r1, #16
 8013b8e:	fb02 3306 	mla	r3, r2, r6, r3
 8013b92:	b289      	uxth	r1, r1
 8013b94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013b98:	4285      	cmp	r5, r0
 8013b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013b9e:	f84c 1b04 	str.w	r1, [ip], #4
 8013ba2:	dcec      	bgt.n	8013b7e <__multadd+0x12>
 8013ba4:	b30e      	cbz	r6, 8013bea <__multadd+0x7e>
 8013ba6:	68a3      	ldr	r3, [r4, #8]
 8013ba8:	42ab      	cmp	r3, r5
 8013baa:	dc19      	bgt.n	8013be0 <__multadd+0x74>
 8013bac:	6861      	ldr	r1, [r4, #4]
 8013bae:	4638      	mov	r0, r7
 8013bb0:	3101      	adds	r1, #1
 8013bb2:	f7ff ff79 	bl	8013aa8 <_Balloc>
 8013bb6:	4680      	mov	r8, r0
 8013bb8:	b928      	cbnz	r0, 8013bc6 <__multadd+0x5a>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	21b5      	movs	r1, #181	; 0xb5
 8013bbe:	4b0c      	ldr	r3, [pc, #48]	; (8013bf0 <__multadd+0x84>)
 8013bc0:	480c      	ldr	r0, [pc, #48]	; (8013bf4 <__multadd+0x88>)
 8013bc2:	f7ff f831 	bl	8012c28 <__assert_func>
 8013bc6:	6922      	ldr	r2, [r4, #16]
 8013bc8:	f104 010c 	add.w	r1, r4, #12
 8013bcc:	3202      	adds	r2, #2
 8013bce:	0092      	lsls	r2, r2, #2
 8013bd0:	300c      	adds	r0, #12
 8013bd2:	f7fd ff47 	bl	8011a64 <memcpy>
 8013bd6:	4621      	mov	r1, r4
 8013bd8:	4638      	mov	r0, r7
 8013bda:	f7ff ffa5 	bl	8013b28 <_Bfree>
 8013bde:	4644      	mov	r4, r8
 8013be0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013be4:	3501      	adds	r5, #1
 8013be6:	615e      	str	r6, [r3, #20]
 8013be8:	6125      	str	r5, [r4, #16]
 8013bea:	4620      	mov	r0, r4
 8013bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf0:	080167d5 	.word	0x080167d5
 8013bf4:	080167e6 	.word	0x080167e6

08013bf8 <__hi0bits>:
 8013bf8:	0c02      	lsrs	r2, r0, #16
 8013bfa:	0412      	lsls	r2, r2, #16
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	b9ca      	cbnz	r2, 8013c34 <__hi0bits+0x3c>
 8013c00:	0403      	lsls	r3, r0, #16
 8013c02:	2010      	movs	r0, #16
 8013c04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013c08:	bf04      	itt	eq
 8013c0a:	021b      	lsleq	r3, r3, #8
 8013c0c:	3008      	addeq	r0, #8
 8013c0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013c12:	bf04      	itt	eq
 8013c14:	011b      	lsleq	r3, r3, #4
 8013c16:	3004      	addeq	r0, #4
 8013c18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013c1c:	bf04      	itt	eq
 8013c1e:	009b      	lsleq	r3, r3, #2
 8013c20:	3002      	addeq	r0, #2
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	db05      	blt.n	8013c32 <__hi0bits+0x3a>
 8013c26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013c2a:	f100 0001 	add.w	r0, r0, #1
 8013c2e:	bf08      	it	eq
 8013c30:	2020      	moveq	r0, #32
 8013c32:	4770      	bx	lr
 8013c34:	2000      	movs	r0, #0
 8013c36:	e7e5      	b.n	8013c04 <__hi0bits+0xc>

08013c38 <__lo0bits>:
 8013c38:	6803      	ldr	r3, [r0, #0]
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	f013 0007 	ands.w	r0, r3, #7
 8013c40:	d00b      	beq.n	8013c5a <__lo0bits+0x22>
 8013c42:	07d9      	lsls	r1, r3, #31
 8013c44:	d421      	bmi.n	8013c8a <__lo0bits+0x52>
 8013c46:	0798      	lsls	r0, r3, #30
 8013c48:	bf49      	itett	mi
 8013c4a:	085b      	lsrmi	r3, r3, #1
 8013c4c:	089b      	lsrpl	r3, r3, #2
 8013c4e:	2001      	movmi	r0, #1
 8013c50:	6013      	strmi	r3, [r2, #0]
 8013c52:	bf5c      	itt	pl
 8013c54:	2002      	movpl	r0, #2
 8013c56:	6013      	strpl	r3, [r2, #0]
 8013c58:	4770      	bx	lr
 8013c5a:	b299      	uxth	r1, r3
 8013c5c:	b909      	cbnz	r1, 8013c62 <__lo0bits+0x2a>
 8013c5e:	2010      	movs	r0, #16
 8013c60:	0c1b      	lsrs	r3, r3, #16
 8013c62:	b2d9      	uxtb	r1, r3
 8013c64:	b909      	cbnz	r1, 8013c6a <__lo0bits+0x32>
 8013c66:	3008      	adds	r0, #8
 8013c68:	0a1b      	lsrs	r3, r3, #8
 8013c6a:	0719      	lsls	r1, r3, #28
 8013c6c:	bf04      	itt	eq
 8013c6e:	091b      	lsreq	r3, r3, #4
 8013c70:	3004      	addeq	r0, #4
 8013c72:	0799      	lsls	r1, r3, #30
 8013c74:	bf04      	itt	eq
 8013c76:	089b      	lsreq	r3, r3, #2
 8013c78:	3002      	addeq	r0, #2
 8013c7a:	07d9      	lsls	r1, r3, #31
 8013c7c:	d403      	bmi.n	8013c86 <__lo0bits+0x4e>
 8013c7e:	085b      	lsrs	r3, r3, #1
 8013c80:	f100 0001 	add.w	r0, r0, #1
 8013c84:	d003      	beq.n	8013c8e <__lo0bits+0x56>
 8013c86:	6013      	str	r3, [r2, #0]
 8013c88:	4770      	bx	lr
 8013c8a:	2000      	movs	r0, #0
 8013c8c:	4770      	bx	lr
 8013c8e:	2020      	movs	r0, #32
 8013c90:	4770      	bx	lr
	...

08013c94 <__i2b>:
 8013c94:	b510      	push	{r4, lr}
 8013c96:	460c      	mov	r4, r1
 8013c98:	2101      	movs	r1, #1
 8013c9a:	f7ff ff05 	bl	8013aa8 <_Balloc>
 8013c9e:	4602      	mov	r2, r0
 8013ca0:	b928      	cbnz	r0, 8013cae <__i2b+0x1a>
 8013ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ca6:	4b04      	ldr	r3, [pc, #16]	; (8013cb8 <__i2b+0x24>)
 8013ca8:	4804      	ldr	r0, [pc, #16]	; (8013cbc <__i2b+0x28>)
 8013caa:	f7fe ffbd 	bl	8012c28 <__assert_func>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	6144      	str	r4, [r0, #20]
 8013cb2:	6103      	str	r3, [r0, #16]
 8013cb4:	bd10      	pop	{r4, pc}
 8013cb6:	bf00      	nop
 8013cb8:	080167d5 	.word	0x080167d5
 8013cbc:	080167e6 	.word	0x080167e6

08013cc0 <__multiply>:
 8013cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc4:	4691      	mov	r9, r2
 8013cc6:	690a      	ldr	r2, [r1, #16]
 8013cc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013ccc:	460c      	mov	r4, r1
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	bfbe      	ittt	lt
 8013cd2:	460b      	movlt	r3, r1
 8013cd4:	464c      	movlt	r4, r9
 8013cd6:	4699      	movlt	r9, r3
 8013cd8:	6927      	ldr	r7, [r4, #16]
 8013cda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013cde:	68a3      	ldr	r3, [r4, #8]
 8013ce0:	6861      	ldr	r1, [r4, #4]
 8013ce2:	eb07 060a 	add.w	r6, r7, sl
 8013ce6:	42b3      	cmp	r3, r6
 8013ce8:	b085      	sub	sp, #20
 8013cea:	bfb8      	it	lt
 8013cec:	3101      	addlt	r1, #1
 8013cee:	f7ff fedb 	bl	8013aa8 <_Balloc>
 8013cf2:	b930      	cbnz	r0, 8013d02 <__multiply+0x42>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	f240 115d 	movw	r1, #349	; 0x15d
 8013cfa:	4b43      	ldr	r3, [pc, #268]	; (8013e08 <__multiply+0x148>)
 8013cfc:	4843      	ldr	r0, [pc, #268]	; (8013e0c <__multiply+0x14c>)
 8013cfe:	f7fe ff93 	bl	8012c28 <__assert_func>
 8013d02:	f100 0514 	add.w	r5, r0, #20
 8013d06:	462b      	mov	r3, r5
 8013d08:	2200      	movs	r2, #0
 8013d0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d0e:	4543      	cmp	r3, r8
 8013d10:	d321      	bcc.n	8013d56 <__multiply+0x96>
 8013d12:	f104 0314 	add.w	r3, r4, #20
 8013d16:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013d1a:	f109 0314 	add.w	r3, r9, #20
 8013d1e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013d22:	9202      	str	r2, [sp, #8]
 8013d24:	1b3a      	subs	r2, r7, r4
 8013d26:	3a15      	subs	r2, #21
 8013d28:	f022 0203 	bic.w	r2, r2, #3
 8013d2c:	3204      	adds	r2, #4
 8013d2e:	f104 0115 	add.w	r1, r4, #21
 8013d32:	428f      	cmp	r7, r1
 8013d34:	bf38      	it	cc
 8013d36:	2204      	movcc	r2, #4
 8013d38:	9201      	str	r2, [sp, #4]
 8013d3a:	9a02      	ldr	r2, [sp, #8]
 8013d3c:	9303      	str	r3, [sp, #12]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d80c      	bhi.n	8013d5c <__multiply+0x9c>
 8013d42:	2e00      	cmp	r6, #0
 8013d44:	dd03      	ble.n	8013d4e <__multiply+0x8e>
 8013d46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d059      	beq.n	8013e02 <__multiply+0x142>
 8013d4e:	6106      	str	r6, [r0, #16]
 8013d50:	b005      	add	sp, #20
 8013d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d56:	f843 2b04 	str.w	r2, [r3], #4
 8013d5a:	e7d8      	b.n	8013d0e <__multiply+0x4e>
 8013d5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013d60:	f1ba 0f00 	cmp.w	sl, #0
 8013d64:	d023      	beq.n	8013dae <__multiply+0xee>
 8013d66:	46a9      	mov	r9, r5
 8013d68:	f04f 0c00 	mov.w	ip, #0
 8013d6c:	f104 0e14 	add.w	lr, r4, #20
 8013d70:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013d74:	f8d9 1000 	ldr.w	r1, [r9]
 8013d78:	fa1f fb82 	uxth.w	fp, r2
 8013d7c:	b289      	uxth	r1, r1
 8013d7e:	fb0a 110b 	mla	r1, sl, fp, r1
 8013d82:	4461      	add	r1, ip
 8013d84:	f8d9 c000 	ldr.w	ip, [r9]
 8013d88:	0c12      	lsrs	r2, r2, #16
 8013d8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8013d8e:	fb0a c202 	mla	r2, sl, r2, ip
 8013d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013d96:	b289      	uxth	r1, r1
 8013d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013d9c:	4577      	cmp	r7, lr
 8013d9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013da2:	f849 1b04 	str.w	r1, [r9], #4
 8013da6:	d8e3      	bhi.n	8013d70 <__multiply+0xb0>
 8013da8:	9a01      	ldr	r2, [sp, #4]
 8013daa:	f845 c002 	str.w	ip, [r5, r2]
 8013dae:	9a03      	ldr	r2, [sp, #12]
 8013db0:	3304      	adds	r3, #4
 8013db2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013db6:	f1b9 0f00 	cmp.w	r9, #0
 8013dba:	d020      	beq.n	8013dfe <__multiply+0x13e>
 8013dbc:	46ae      	mov	lr, r5
 8013dbe:	f04f 0a00 	mov.w	sl, #0
 8013dc2:	6829      	ldr	r1, [r5, #0]
 8013dc4:	f104 0c14 	add.w	ip, r4, #20
 8013dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8013dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013dd0:	b289      	uxth	r1, r1
 8013dd2:	fb09 220b 	mla	r2, r9, fp, r2
 8013dd6:	4492      	add	sl, r2
 8013dd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8013de0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013de4:	f8be 1000 	ldrh.w	r1, [lr]
 8013de8:	0c12      	lsrs	r2, r2, #16
 8013dea:	fb09 1102 	mla	r1, r9, r2, r1
 8013dee:	4567      	cmp	r7, ip
 8013df0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013df8:	d8e6      	bhi.n	8013dc8 <__multiply+0x108>
 8013dfa:	9a01      	ldr	r2, [sp, #4]
 8013dfc:	50a9      	str	r1, [r5, r2]
 8013dfe:	3504      	adds	r5, #4
 8013e00:	e79b      	b.n	8013d3a <__multiply+0x7a>
 8013e02:	3e01      	subs	r6, #1
 8013e04:	e79d      	b.n	8013d42 <__multiply+0x82>
 8013e06:	bf00      	nop
 8013e08:	080167d5 	.word	0x080167d5
 8013e0c:	080167e6 	.word	0x080167e6

08013e10 <__pow5mult>:
 8013e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e14:	4615      	mov	r5, r2
 8013e16:	f012 0203 	ands.w	r2, r2, #3
 8013e1a:	4606      	mov	r6, r0
 8013e1c:	460f      	mov	r7, r1
 8013e1e:	d007      	beq.n	8013e30 <__pow5mult+0x20>
 8013e20:	4c25      	ldr	r4, [pc, #148]	; (8013eb8 <__pow5mult+0xa8>)
 8013e22:	3a01      	subs	r2, #1
 8013e24:	2300      	movs	r3, #0
 8013e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e2a:	f7ff fe9f 	bl	8013b6c <__multadd>
 8013e2e:	4607      	mov	r7, r0
 8013e30:	10ad      	asrs	r5, r5, #2
 8013e32:	d03d      	beq.n	8013eb0 <__pow5mult+0xa0>
 8013e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013e36:	b97c      	cbnz	r4, 8013e58 <__pow5mult+0x48>
 8013e38:	2010      	movs	r0, #16
 8013e3a:	f7fd fdfb 	bl	8011a34 <malloc>
 8013e3e:	4602      	mov	r2, r0
 8013e40:	6270      	str	r0, [r6, #36]	; 0x24
 8013e42:	b928      	cbnz	r0, 8013e50 <__pow5mult+0x40>
 8013e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013e48:	4b1c      	ldr	r3, [pc, #112]	; (8013ebc <__pow5mult+0xac>)
 8013e4a:	481d      	ldr	r0, [pc, #116]	; (8013ec0 <__pow5mult+0xb0>)
 8013e4c:	f7fe feec 	bl	8012c28 <__assert_func>
 8013e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e54:	6004      	str	r4, [r0, #0]
 8013e56:	60c4      	str	r4, [r0, #12]
 8013e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e60:	b94c      	cbnz	r4, 8013e76 <__pow5mult+0x66>
 8013e62:	f240 2171 	movw	r1, #625	; 0x271
 8013e66:	4630      	mov	r0, r6
 8013e68:	f7ff ff14 	bl	8013c94 <__i2b>
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	4604      	mov	r4, r0
 8013e70:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e74:	6003      	str	r3, [r0, #0]
 8013e76:	f04f 0900 	mov.w	r9, #0
 8013e7a:	07eb      	lsls	r3, r5, #31
 8013e7c:	d50a      	bpl.n	8013e94 <__pow5mult+0x84>
 8013e7e:	4639      	mov	r1, r7
 8013e80:	4622      	mov	r2, r4
 8013e82:	4630      	mov	r0, r6
 8013e84:	f7ff ff1c 	bl	8013cc0 <__multiply>
 8013e88:	4680      	mov	r8, r0
 8013e8a:	4639      	mov	r1, r7
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	f7ff fe4b 	bl	8013b28 <_Bfree>
 8013e92:	4647      	mov	r7, r8
 8013e94:	106d      	asrs	r5, r5, #1
 8013e96:	d00b      	beq.n	8013eb0 <__pow5mult+0xa0>
 8013e98:	6820      	ldr	r0, [r4, #0]
 8013e9a:	b938      	cbnz	r0, 8013eac <__pow5mult+0x9c>
 8013e9c:	4622      	mov	r2, r4
 8013e9e:	4621      	mov	r1, r4
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	f7ff ff0d 	bl	8013cc0 <__multiply>
 8013ea6:	6020      	str	r0, [r4, #0]
 8013ea8:	f8c0 9000 	str.w	r9, [r0]
 8013eac:	4604      	mov	r4, r0
 8013eae:	e7e4      	b.n	8013e7a <__pow5mult+0x6a>
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eb6:	bf00      	nop
 8013eb8:	08016938 	.word	0x08016938
 8013ebc:	08016763 	.word	0x08016763
 8013ec0:	080167e6 	.word	0x080167e6

08013ec4 <__lshift>:
 8013ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ec8:	460c      	mov	r4, r1
 8013eca:	4607      	mov	r7, r0
 8013ecc:	4691      	mov	r9, r2
 8013ece:	6923      	ldr	r3, [r4, #16]
 8013ed0:	6849      	ldr	r1, [r1, #4]
 8013ed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ed6:	68a3      	ldr	r3, [r4, #8]
 8013ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013edc:	f108 0601 	add.w	r6, r8, #1
 8013ee0:	42b3      	cmp	r3, r6
 8013ee2:	db0b      	blt.n	8013efc <__lshift+0x38>
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f7ff fddf 	bl	8013aa8 <_Balloc>
 8013eea:	4605      	mov	r5, r0
 8013eec:	b948      	cbnz	r0, 8013f02 <__lshift+0x3e>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013ef4:	4b29      	ldr	r3, [pc, #164]	; (8013f9c <__lshift+0xd8>)
 8013ef6:	482a      	ldr	r0, [pc, #168]	; (8013fa0 <__lshift+0xdc>)
 8013ef8:	f7fe fe96 	bl	8012c28 <__assert_func>
 8013efc:	3101      	adds	r1, #1
 8013efe:	005b      	lsls	r3, r3, #1
 8013f00:	e7ee      	b.n	8013ee0 <__lshift+0x1c>
 8013f02:	2300      	movs	r3, #0
 8013f04:	f100 0114 	add.w	r1, r0, #20
 8013f08:	f100 0210 	add.w	r2, r0, #16
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	4553      	cmp	r3, sl
 8013f10:	db37      	blt.n	8013f82 <__lshift+0xbe>
 8013f12:	6920      	ldr	r0, [r4, #16]
 8013f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f18:	f104 0314 	add.w	r3, r4, #20
 8013f1c:	f019 091f 	ands.w	r9, r9, #31
 8013f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013f28:	d02f      	beq.n	8013f8a <__lshift+0xc6>
 8013f2a:	468a      	mov	sl, r1
 8013f2c:	f04f 0c00 	mov.w	ip, #0
 8013f30:	f1c9 0e20 	rsb	lr, r9, #32
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	fa02 f209 	lsl.w	r2, r2, r9
 8013f3a:	ea42 020c 	orr.w	r2, r2, ip
 8013f3e:	f84a 2b04 	str.w	r2, [sl], #4
 8013f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f46:	4298      	cmp	r0, r3
 8013f48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013f4c:	d8f2      	bhi.n	8013f34 <__lshift+0x70>
 8013f4e:	1b03      	subs	r3, r0, r4
 8013f50:	3b15      	subs	r3, #21
 8013f52:	f023 0303 	bic.w	r3, r3, #3
 8013f56:	3304      	adds	r3, #4
 8013f58:	f104 0215 	add.w	r2, r4, #21
 8013f5c:	4290      	cmp	r0, r2
 8013f5e:	bf38      	it	cc
 8013f60:	2304      	movcc	r3, #4
 8013f62:	f841 c003 	str.w	ip, [r1, r3]
 8013f66:	f1bc 0f00 	cmp.w	ip, #0
 8013f6a:	d001      	beq.n	8013f70 <__lshift+0xac>
 8013f6c:	f108 0602 	add.w	r6, r8, #2
 8013f70:	3e01      	subs	r6, #1
 8013f72:	4638      	mov	r0, r7
 8013f74:	4621      	mov	r1, r4
 8013f76:	612e      	str	r6, [r5, #16]
 8013f78:	f7ff fdd6 	bl	8013b28 <_Bfree>
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f86:	3301      	adds	r3, #1
 8013f88:	e7c1      	b.n	8013f0e <__lshift+0x4a>
 8013f8a:	3904      	subs	r1, #4
 8013f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f90:	4298      	cmp	r0, r3
 8013f92:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f96:	d8f9      	bhi.n	8013f8c <__lshift+0xc8>
 8013f98:	e7ea      	b.n	8013f70 <__lshift+0xac>
 8013f9a:	bf00      	nop
 8013f9c:	080167d5 	.word	0x080167d5
 8013fa0:	080167e6 	.word	0x080167e6

08013fa4 <__mcmp>:
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	690a      	ldr	r2, [r1, #16]
 8013fa8:	6900      	ldr	r0, [r0, #16]
 8013faa:	b530      	push	{r4, r5, lr}
 8013fac:	1a80      	subs	r0, r0, r2
 8013fae:	d10d      	bne.n	8013fcc <__mcmp+0x28>
 8013fb0:	3314      	adds	r3, #20
 8013fb2:	3114      	adds	r1, #20
 8013fb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013fb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013fbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013fc4:	4295      	cmp	r5, r2
 8013fc6:	d002      	beq.n	8013fce <__mcmp+0x2a>
 8013fc8:	d304      	bcc.n	8013fd4 <__mcmp+0x30>
 8013fca:	2001      	movs	r0, #1
 8013fcc:	bd30      	pop	{r4, r5, pc}
 8013fce:	42a3      	cmp	r3, r4
 8013fd0:	d3f4      	bcc.n	8013fbc <__mcmp+0x18>
 8013fd2:	e7fb      	b.n	8013fcc <__mcmp+0x28>
 8013fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd8:	e7f8      	b.n	8013fcc <__mcmp+0x28>
	...

08013fdc <__mdiff>:
 8013fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe0:	460d      	mov	r5, r1
 8013fe2:	4607      	mov	r7, r0
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	4614      	mov	r4, r2
 8013fea:	f7ff ffdb 	bl	8013fa4 <__mcmp>
 8013fee:	1e06      	subs	r6, r0, #0
 8013ff0:	d111      	bne.n	8014016 <__mdiff+0x3a>
 8013ff2:	4631      	mov	r1, r6
 8013ff4:	4638      	mov	r0, r7
 8013ff6:	f7ff fd57 	bl	8013aa8 <_Balloc>
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	b928      	cbnz	r0, 801400a <__mdiff+0x2e>
 8013ffe:	f240 2132 	movw	r1, #562	; 0x232
 8014002:	4b3a      	ldr	r3, [pc, #232]	; (80140ec <__mdiff+0x110>)
 8014004:	483a      	ldr	r0, [pc, #232]	; (80140f0 <__mdiff+0x114>)
 8014006:	f7fe fe0f 	bl	8012c28 <__assert_func>
 801400a:	2301      	movs	r3, #1
 801400c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014010:	4610      	mov	r0, r2
 8014012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014016:	bfa4      	itt	ge
 8014018:	4623      	movge	r3, r4
 801401a:	462c      	movge	r4, r5
 801401c:	4638      	mov	r0, r7
 801401e:	6861      	ldr	r1, [r4, #4]
 8014020:	bfa6      	itte	ge
 8014022:	461d      	movge	r5, r3
 8014024:	2600      	movge	r6, #0
 8014026:	2601      	movlt	r6, #1
 8014028:	f7ff fd3e 	bl	8013aa8 <_Balloc>
 801402c:	4602      	mov	r2, r0
 801402e:	b918      	cbnz	r0, 8014038 <__mdiff+0x5c>
 8014030:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014034:	4b2d      	ldr	r3, [pc, #180]	; (80140ec <__mdiff+0x110>)
 8014036:	e7e5      	b.n	8014004 <__mdiff+0x28>
 8014038:	f102 0814 	add.w	r8, r2, #20
 801403c:	46c2      	mov	sl, r8
 801403e:	f04f 0c00 	mov.w	ip, #0
 8014042:	6927      	ldr	r7, [r4, #16]
 8014044:	60c6      	str	r6, [r0, #12]
 8014046:	692e      	ldr	r6, [r5, #16]
 8014048:	f104 0014 	add.w	r0, r4, #20
 801404c:	f105 0914 	add.w	r9, r5, #20
 8014050:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014054:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014058:	3410      	adds	r4, #16
 801405a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801405e:	f859 3b04 	ldr.w	r3, [r9], #4
 8014062:	fa1f f18b 	uxth.w	r1, fp
 8014066:	448c      	add	ip, r1
 8014068:	b299      	uxth	r1, r3
 801406a:	0c1b      	lsrs	r3, r3, #16
 801406c:	ebac 0101 	sub.w	r1, ip, r1
 8014070:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014074:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014078:	b289      	uxth	r1, r1
 801407a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801407e:	454e      	cmp	r6, r9
 8014080:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014084:	f84a 3b04 	str.w	r3, [sl], #4
 8014088:	d8e7      	bhi.n	801405a <__mdiff+0x7e>
 801408a:	1b73      	subs	r3, r6, r5
 801408c:	3b15      	subs	r3, #21
 801408e:	f023 0303 	bic.w	r3, r3, #3
 8014092:	3515      	adds	r5, #21
 8014094:	3304      	adds	r3, #4
 8014096:	42ae      	cmp	r6, r5
 8014098:	bf38      	it	cc
 801409a:	2304      	movcc	r3, #4
 801409c:	4418      	add	r0, r3
 801409e:	4443      	add	r3, r8
 80140a0:	461e      	mov	r6, r3
 80140a2:	4605      	mov	r5, r0
 80140a4:	4575      	cmp	r5, lr
 80140a6:	d30e      	bcc.n	80140c6 <__mdiff+0xea>
 80140a8:	f10e 0103 	add.w	r1, lr, #3
 80140ac:	1a09      	subs	r1, r1, r0
 80140ae:	f021 0103 	bic.w	r1, r1, #3
 80140b2:	3803      	subs	r0, #3
 80140b4:	4586      	cmp	lr, r0
 80140b6:	bf38      	it	cc
 80140b8:	2100      	movcc	r1, #0
 80140ba:	4419      	add	r1, r3
 80140bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80140c0:	b18b      	cbz	r3, 80140e6 <__mdiff+0x10a>
 80140c2:	6117      	str	r7, [r2, #16]
 80140c4:	e7a4      	b.n	8014010 <__mdiff+0x34>
 80140c6:	f855 8b04 	ldr.w	r8, [r5], #4
 80140ca:	fa1f f188 	uxth.w	r1, r8
 80140ce:	4461      	add	r1, ip
 80140d0:	140c      	asrs	r4, r1, #16
 80140d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80140d6:	b289      	uxth	r1, r1
 80140d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80140dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80140e0:	f846 1b04 	str.w	r1, [r6], #4
 80140e4:	e7de      	b.n	80140a4 <__mdiff+0xc8>
 80140e6:	3f01      	subs	r7, #1
 80140e8:	e7e8      	b.n	80140bc <__mdiff+0xe0>
 80140ea:	bf00      	nop
 80140ec:	080167d5 	.word	0x080167d5
 80140f0:	080167e6 	.word	0x080167e6

080140f4 <__d2b>:
 80140f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80140f8:	2101      	movs	r1, #1
 80140fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80140fe:	4690      	mov	r8, r2
 8014100:	461d      	mov	r5, r3
 8014102:	f7ff fcd1 	bl	8013aa8 <_Balloc>
 8014106:	4604      	mov	r4, r0
 8014108:	b930      	cbnz	r0, 8014118 <__d2b+0x24>
 801410a:	4602      	mov	r2, r0
 801410c:	f240 310a 	movw	r1, #778	; 0x30a
 8014110:	4b24      	ldr	r3, [pc, #144]	; (80141a4 <__d2b+0xb0>)
 8014112:	4825      	ldr	r0, [pc, #148]	; (80141a8 <__d2b+0xb4>)
 8014114:	f7fe fd88 	bl	8012c28 <__assert_func>
 8014118:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801411c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014120:	bb2d      	cbnz	r5, 801416e <__d2b+0x7a>
 8014122:	9301      	str	r3, [sp, #4]
 8014124:	f1b8 0300 	subs.w	r3, r8, #0
 8014128:	d026      	beq.n	8014178 <__d2b+0x84>
 801412a:	4668      	mov	r0, sp
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	f7ff fd83 	bl	8013c38 <__lo0bits>
 8014132:	9900      	ldr	r1, [sp, #0]
 8014134:	b1f0      	cbz	r0, 8014174 <__d2b+0x80>
 8014136:	9a01      	ldr	r2, [sp, #4]
 8014138:	f1c0 0320 	rsb	r3, r0, #32
 801413c:	fa02 f303 	lsl.w	r3, r2, r3
 8014140:	430b      	orrs	r3, r1
 8014142:	40c2      	lsrs	r2, r0
 8014144:	6163      	str	r3, [r4, #20]
 8014146:	9201      	str	r2, [sp, #4]
 8014148:	9b01      	ldr	r3, [sp, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	bf14      	ite	ne
 801414e:	2102      	movne	r1, #2
 8014150:	2101      	moveq	r1, #1
 8014152:	61a3      	str	r3, [r4, #24]
 8014154:	6121      	str	r1, [r4, #16]
 8014156:	b1c5      	cbz	r5, 801418a <__d2b+0x96>
 8014158:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801415c:	4405      	add	r5, r0
 801415e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014162:	603d      	str	r5, [r7, #0]
 8014164:	6030      	str	r0, [r6, #0]
 8014166:	4620      	mov	r0, r4
 8014168:	b002      	add	sp, #8
 801416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014172:	e7d6      	b.n	8014122 <__d2b+0x2e>
 8014174:	6161      	str	r1, [r4, #20]
 8014176:	e7e7      	b.n	8014148 <__d2b+0x54>
 8014178:	a801      	add	r0, sp, #4
 801417a:	f7ff fd5d 	bl	8013c38 <__lo0bits>
 801417e:	2101      	movs	r1, #1
 8014180:	9b01      	ldr	r3, [sp, #4]
 8014182:	6121      	str	r1, [r4, #16]
 8014184:	6163      	str	r3, [r4, #20]
 8014186:	3020      	adds	r0, #32
 8014188:	e7e5      	b.n	8014156 <__d2b+0x62>
 801418a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801418e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014192:	6038      	str	r0, [r7, #0]
 8014194:	6918      	ldr	r0, [r3, #16]
 8014196:	f7ff fd2f 	bl	8013bf8 <__hi0bits>
 801419a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801419e:	6031      	str	r1, [r6, #0]
 80141a0:	e7e1      	b.n	8014166 <__d2b+0x72>
 80141a2:	bf00      	nop
 80141a4:	080167d5 	.word	0x080167d5
 80141a8:	080167e6 	.word	0x080167e6

080141ac <_calloc_r>:
 80141ac:	b570      	push	{r4, r5, r6, lr}
 80141ae:	fba1 5402 	umull	r5, r4, r1, r2
 80141b2:	b934      	cbnz	r4, 80141c2 <_calloc_r+0x16>
 80141b4:	4629      	mov	r1, r5
 80141b6:	f7fd fced 	bl	8011b94 <_malloc_r>
 80141ba:	4606      	mov	r6, r0
 80141bc:	b928      	cbnz	r0, 80141ca <_calloc_r+0x1e>
 80141be:	4630      	mov	r0, r6
 80141c0:	bd70      	pop	{r4, r5, r6, pc}
 80141c2:	220c      	movs	r2, #12
 80141c4:	2600      	movs	r6, #0
 80141c6:	6002      	str	r2, [r0, #0]
 80141c8:	e7f9      	b.n	80141be <_calloc_r+0x12>
 80141ca:	462a      	mov	r2, r5
 80141cc:	4621      	mov	r1, r4
 80141ce:	f7fd fc71 	bl	8011ab4 <memset>
 80141d2:	e7f4      	b.n	80141be <_calloc_r+0x12>

080141d4 <_read_r>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	4604      	mov	r4, r0
 80141d8:	4608      	mov	r0, r1
 80141da:	4611      	mov	r1, r2
 80141dc:	2200      	movs	r2, #0
 80141de:	4d05      	ldr	r5, [pc, #20]	; (80141f4 <_read_r+0x20>)
 80141e0:	602a      	str	r2, [r5, #0]
 80141e2:	461a      	mov	r2, r3
 80141e4:	f7f1 f817 	bl	8005216 <_read>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	d102      	bne.n	80141f2 <_read_r+0x1e>
 80141ec:	682b      	ldr	r3, [r5, #0]
 80141ee:	b103      	cbz	r3, 80141f2 <_read_r+0x1e>
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	bd38      	pop	{r3, r4, r5, pc}
 80141f4:	200028b8 	.word	0x200028b8

080141f8 <abort>:
 80141f8:	2006      	movs	r0, #6
 80141fa:	b508      	push	{r3, lr}
 80141fc:	f000 f860 	bl	80142c0 <raise>
 8014200:	2001      	movs	r0, #1
 8014202:	f7f0 fffe 	bl	8005202 <_exit>
	...

08014208 <_fstat_r>:
 8014208:	b538      	push	{r3, r4, r5, lr}
 801420a:	2300      	movs	r3, #0
 801420c:	4d06      	ldr	r5, [pc, #24]	; (8014228 <_fstat_r+0x20>)
 801420e:	4604      	mov	r4, r0
 8014210:	4608      	mov	r0, r1
 8014212:	4611      	mov	r1, r2
 8014214:	602b      	str	r3, [r5, #0]
 8014216:	f7f1 f826 	bl	8005266 <_fstat>
 801421a:	1c43      	adds	r3, r0, #1
 801421c:	d102      	bne.n	8014224 <_fstat_r+0x1c>
 801421e:	682b      	ldr	r3, [r5, #0]
 8014220:	b103      	cbz	r3, 8014224 <_fstat_r+0x1c>
 8014222:	6023      	str	r3, [r4, #0]
 8014224:	bd38      	pop	{r3, r4, r5, pc}
 8014226:	bf00      	nop
 8014228:	200028b8 	.word	0x200028b8

0801422c <_isatty_r>:
 801422c:	b538      	push	{r3, r4, r5, lr}
 801422e:	2300      	movs	r3, #0
 8014230:	4d05      	ldr	r5, [pc, #20]	; (8014248 <_isatty_r+0x1c>)
 8014232:	4604      	mov	r4, r0
 8014234:	4608      	mov	r0, r1
 8014236:	602b      	str	r3, [r5, #0]
 8014238:	f7f1 f824 	bl	8005284 <_isatty>
 801423c:	1c43      	adds	r3, r0, #1
 801423e:	d102      	bne.n	8014246 <_isatty_r+0x1a>
 8014240:	682b      	ldr	r3, [r5, #0]
 8014242:	b103      	cbz	r3, 8014246 <_isatty_r+0x1a>
 8014244:	6023      	str	r3, [r4, #0]
 8014246:	bd38      	pop	{r3, r4, r5, pc}
 8014248:	200028b8 	.word	0x200028b8

0801424c <__ascii_mbtowc>:
 801424c:	b082      	sub	sp, #8
 801424e:	b901      	cbnz	r1, 8014252 <__ascii_mbtowc+0x6>
 8014250:	a901      	add	r1, sp, #4
 8014252:	b142      	cbz	r2, 8014266 <__ascii_mbtowc+0x1a>
 8014254:	b14b      	cbz	r3, 801426a <__ascii_mbtowc+0x1e>
 8014256:	7813      	ldrb	r3, [r2, #0]
 8014258:	600b      	str	r3, [r1, #0]
 801425a:	7812      	ldrb	r2, [r2, #0]
 801425c:	1e10      	subs	r0, r2, #0
 801425e:	bf18      	it	ne
 8014260:	2001      	movne	r0, #1
 8014262:	b002      	add	sp, #8
 8014264:	4770      	bx	lr
 8014266:	4610      	mov	r0, r2
 8014268:	e7fb      	b.n	8014262 <__ascii_mbtowc+0x16>
 801426a:	f06f 0001 	mvn.w	r0, #1
 801426e:	e7f8      	b.n	8014262 <__ascii_mbtowc+0x16>

08014270 <_raise_r>:
 8014270:	291f      	cmp	r1, #31
 8014272:	b538      	push	{r3, r4, r5, lr}
 8014274:	4604      	mov	r4, r0
 8014276:	460d      	mov	r5, r1
 8014278:	d904      	bls.n	8014284 <_raise_r+0x14>
 801427a:	2316      	movs	r3, #22
 801427c:	6003      	str	r3, [r0, #0]
 801427e:	f04f 30ff 	mov.w	r0, #4294967295
 8014282:	bd38      	pop	{r3, r4, r5, pc}
 8014284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014286:	b112      	cbz	r2, 801428e <_raise_r+0x1e>
 8014288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801428c:	b94b      	cbnz	r3, 80142a2 <_raise_r+0x32>
 801428e:	4620      	mov	r0, r4
 8014290:	f000 f830 	bl	80142f4 <_getpid_r>
 8014294:	462a      	mov	r2, r5
 8014296:	4601      	mov	r1, r0
 8014298:	4620      	mov	r0, r4
 801429a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801429e:	f000 b817 	b.w	80142d0 <_kill_r>
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	d00a      	beq.n	80142bc <_raise_r+0x4c>
 80142a6:	1c59      	adds	r1, r3, #1
 80142a8:	d103      	bne.n	80142b2 <_raise_r+0x42>
 80142aa:	2316      	movs	r3, #22
 80142ac:	6003      	str	r3, [r0, #0]
 80142ae:	2001      	movs	r0, #1
 80142b0:	e7e7      	b.n	8014282 <_raise_r+0x12>
 80142b2:	2400      	movs	r4, #0
 80142b4:	4628      	mov	r0, r5
 80142b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80142ba:	4798      	blx	r3
 80142bc:	2000      	movs	r0, #0
 80142be:	e7e0      	b.n	8014282 <_raise_r+0x12>

080142c0 <raise>:
 80142c0:	4b02      	ldr	r3, [pc, #8]	; (80142cc <raise+0xc>)
 80142c2:	4601      	mov	r1, r0
 80142c4:	6818      	ldr	r0, [r3, #0]
 80142c6:	f7ff bfd3 	b.w	8014270 <_raise_r>
 80142ca:	bf00      	nop
 80142cc:	20000060 	.word	0x20000060

080142d0 <_kill_r>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	2300      	movs	r3, #0
 80142d4:	4d06      	ldr	r5, [pc, #24]	; (80142f0 <_kill_r+0x20>)
 80142d6:	4604      	mov	r4, r0
 80142d8:	4608      	mov	r0, r1
 80142da:	4611      	mov	r1, r2
 80142dc:	602b      	str	r3, [r5, #0]
 80142de:	f7f0 ff80 	bl	80051e2 <_kill>
 80142e2:	1c43      	adds	r3, r0, #1
 80142e4:	d102      	bne.n	80142ec <_kill_r+0x1c>
 80142e6:	682b      	ldr	r3, [r5, #0]
 80142e8:	b103      	cbz	r3, 80142ec <_kill_r+0x1c>
 80142ea:	6023      	str	r3, [r4, #0]
 80142ec:	bd38      	pop	{r3, r4, r5, pc}
 80142ee:	bf00      	nop
 80142f0:	200028b8 	.word	0x200028b8

080142f4 <_getpid_r>:
 80142f4:	f7f0 bf6e 	b.w	80051d4 <_getpid>

080142f8 <__ascii_wctomb>:
 80142f8:	4603      	mov	r3, r0
 80142fa:	4608      	mov	r0, r1
 80142fc:	b141      	cbz	r1, 8014310 <__ascii_wctomb+0x18>
 80142fe:	2aff      	cmp	r2, #255	; 0xff
 8014300:	d904      	bls.n	801430c <__ascii_wctomb+0x14>
 8014302:	228a      	movs	r2, #138	; 0x8a
 8014304:	f04f 30ff 	mov.w	r0, #4294967295
 8014308:	601a      	str	r2, [r3, #0]
 801430a:	4770      	bx	lr
 801430c:	2001      	movs	r0, #1
 801430e:	700a      	strb	r2, [r1, #0]
 8014310:	4770      	bx	lr
	...

08014314 <cosf>:
 8014314:	b507      	push	{r0, r1, r2, lr}
 8014316:	4a1a      	ldr	r2, [pc, #104]	; (8014380 <cosf+0x6c>)
 8014318:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801431c:	4293      	cmp	r3, r2
 801431e:	4601      	mov	r1, r0
 8014320:	dc05      	bgt.n	801432e <cosf+0x1a>
 8014322:	2100      	movs	r1, #0
 8014324:	b003      	add	sp, #12
 8014326:	f85d eb04 	ldr.w	lr, [sp], #4
 801432a:	f000 bc39 	b.w	8014ba0 <__kernel_cosf>
 801432e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014332:	db04      	blt.n	801433e <cosf+0x2a>
 8014334:	f7ef f9d4 	bl	80036e0 <__aeabi_fsub>
 8014338:	b003      	add	sp, #12
 801433a:	f85d fb04 	ldr.w	pc, [sp], #4
 801433e:	4669      	mov	r1, sp
 8014340:	f000 fa7e 	bl	8014840 <__ieee754_rem_pio2f>
 8014344:	f000 0203 	and.w	r2, r0, #3
 8014348:	2a01      	cmp	r2, #1
 801434a:	d007      	beq.n	801435c <cosf+0x48>
 801434c:	2a02      	cmp	r2, #2
 801434e:	d00c      	beq.n	801436a <cosf+0x56>
 8014350:	b982      	cbnz	r2, 8014374 <cosf+0x60>
 8014352:	9901      	ldr	r1, [sp, #4]
 8014354:	9800      	ldr	r0, [sp, #0]
 8014356:	f000 fc23 	bl	8014ba0 <__kernel_cosf>
 801435a:	e7ed      	b.n	8014338 <cosf+0x24>
 801435c:	9901      	ldr	r1, [sp, #4]
 801435e:	9800      	ldr	r0, [sp, #0]
 8014360:	f000 ff50 	bl	8015204 <__kernel_sinf>
 8014364:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8014368:	e7e6      	b.n	8014338 <cosf+0x24>
 801436a:	9901      	ldr	r1, [sp, #4]
 801436c:	9800      	ldr	r0, [sp, #0]
 801436e:	f000 fc17 	bl	8014ba0 <__kernel_cosf>
 8014372:	e7f7      	b.n	8014364 <cosf+0x50>
 8014374:	2201      	movs	r2, #1
 8014376:	9901      	ldr	r1, [sp, #4]
 8014378:	9800      	ldr	r0, [sp, #0]
 801437a:	f000 ff43 	bl	8015204 <__kernel_sinf>
 801437e:	e7db      	b.n	8014338 <cosf+0x24>
 8014380:	3f490fd8 	.word	0x3f490fd8

08014384 <sinf>:
 8014384:	b507      	push	{r0, r1, r2, lr}
 8014386:	4a1b      	ldr	r2, [pc, #108]	; (80143f4 <sinf+0x70>)
 8014388:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801438c:	4293      	cmp	r3, r2
 801438e:	4601      	mov	r1, r0
 8014390:	dc06      	bgt.n	80143a0 <sinf+0x1c>
 8014392:	2200      	movs	r2, #0
 8014394:	2100      	movs	r1, #0
 8014396:	b003      	add	sp, #12
 8014398:	f85d eb04 	ldr.w	lr, [sp], #4
 801439c:	f000 bf32 	b.w	8015204 <__kernel_sinf>
 80143a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80143a4:	db04      	blt.n	80143b0 <sinf+0x2c>
 80143a6:	f7ef f99b 	bl	80036e0 <__aeabi_fsub>
 80143aa:	b003      	add	sp, #12
 80143ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80143b0:	4669      	mov	r1, sp
 80143b2:	f000 fa45 	bl	8014840 <__ieee754_rem_pio2f>
 80143b6:	f000 0003 	and.w	r0, r0, #3
 80143ba:	2801      	cmp	r0, #1
 80143bc:	d008      	beq.n	80143d0 <sinf+0x4c>
 80143be:	2802      	cmp	r0, #2
 80143c0:	d00b      	beq.n	80143da <sinf+0x56>
 80143c2:	b990      	cbnz	r0, 80143ea <sinf+0x66>
 80143c4:	2201      	movs	r2, #1
 80143c6:	9901      	ldr	r1, [sp, #4]
 80143c8:	9800      	ldr	r0, [sp, #0]
 80143ca:	f000 ff1b 	bl	8015204 <__kernel_sinf>
 80143ce:	e7ec      	b.n	80143aa <sinf+0x26>
 80143d0:	9901      	ldr	r1, [sp, #4]
 80143d2:	9800      	ldr	r0, [sp, #0]
 80143d4:	f000 fbe4 	bl	8014ba0 <__kernel_cosf>
 80143d8:	e7e7      	b.n	80143aa <sinf+0x26>
 80143da:	2201      	movs	r2, #1
 80143dc:	9901      	ldr	r1, [sp, #4]
 80143de:	9800      	ldr	r0, [sp, #0]
 80143e0:	f000 ff10 	bl	8015204 <__kernel_sinf>
 80143e4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80143e8:	e7df      	b.n	80143aa <sinf+0x26>
 80143ea:	9901      	ldr	r1, [sp, #4]
 80143ec:	9800      	ldr	r0, [sp, #0]
 80143ee:	f000 fbd7 	bl	8014ba0 <__kernel_cosf>
 80143f2:	e7f7      	b.n	80143e4 <sinf+0x60>
 80143f4:	3f490fd8 	.word	0x3f490fd8

080143f8 <acosf>:
 80143f8:	b538      	push	{r3, r4, r5, lr}
 80143fa:	4604      	mov	r4, r0
 80143fc:	f000 f838 	bl	8014470 <__ieee754_acosf>
 8014400:	4621      	mov	r1, r4
 8014402:	4605      	mov	r5, r0
 8014404:	4620      	mov	r0, r4
 8014406:	f7ef fc3b 	bl	8003c80 <__aeabi_fcmpun>
 801440a:	b980      	cbnz	r0, 801442e <acosf+0x36>
 801440c:	4620      	mov	r0, r4
 801440e:	f001 f87b 	bl	8015508 <fabsf>
 8014412:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8014416:	f7ef fc29 	bl	8003c6c <__aeabi_fcmpgt>
 801441a:	b140      	cbz	r0, 801442e <acosf+0x36>
 801441c:	f7fd f916 	bl	801164c <__errno>
 8014420:	2321      	movs	r3, #33	; 0x21
 8014422:	6003      	str	r3, [r0, #0]
 8014424:	4803      	ldr	r0, [pc, #12]	; (8014434 <acosf+0x3c>)
 8014426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801442a:	f001 b8b3 	b.w	8015594 <nanf>
 801442e:	4628      	mov	r0, r5
 8014430:	bd38      	pop	{r3, r4, r5, pc}
 8014432:	bf00      	nop
 8014434:	08016654 	.word	0x08016654

08014438 <atan2f>:
 8014438:	f000 b97c 	b.w	8014734 <__ieee754_atan2f>

0801443c <sqrtf>:
 801443c:	b538      	push	{r3, r4, r5, lr}
 801443e:	4605      	mov	r5, r0
 8014440:	f000 fb5c 	bl	8014afc <__ieee754_sqrtf>
 8014444:	4629      	mov	r1, r5
 8014446:	4604      	mov	r4, r0
 8014448:	4628      	mov	r0, r5
 801444a:	f7ef fc19 	bl	8003c80 <__aeabi_fcmpun>
 801444e:	b968      	cbnz	r0, 801446c <sqrtf+0x30>
 8014450:	2100      	movs	r1, #0
 8014452:	4628      	mov	r0, r5
 8014454:	f7ef fbec 	bl	8003c30 <__aeabi_fcmplt>
 8014458:	b140      	cbz	r0, 801446c <sqrtf+0x30>
 801445a:	f7fd f8f7 	bl	801164c <__errno>
 801445e:	2321      	movs	r3, #33	; 0x21
 8014460:	2100      	movs	r1, #0
 8014462:	6003      	str	r3, [r0, #0]
 8014464:	4608      	mov	r0, r1
 8014466:	f7ef faf9 	bl	8003a5c <__aeabi_fdiv>
 801446a:	4604      	mov	r4, r0
 801446c:	4620      	mov	r0, r4
 801446e:	bd38      	pop	{r3, r4, r5, pc}

08014470 <__ieee754_acosf>:
 8014470:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8014474:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447a:	4605      	mov	r5, r0
 801447c:	d104      	bne.n	8014488 <__ieee754_acosf+0x18>
 801447e:	2800      	cmp	r0, #0
 8014480:	f300 8135 	bgt.w	80146ee <__ieee754_acosf+0x27e>
 8014484:	489c      	ldr	r0, [pc, #624]	; (80146f8 <__ieee754_acosf+0x288>)
 8014486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014488:	dd06      	ble.n	8014498 <__ieee754_acosf+0x28>
 801448a:	4601      	mov	r1, r0
 801448c:	f7ef f928 	bl	80036e0 <__aeabi_fsub>
 8014490:	4601      	mov	r1, r0
 8014492:	f7ef fae3 	bl	8003a5c <__aeabi_fdiv>
 8014496:	e7f6      	b.n	8014486 <__ieee754_acosf+0x16>
 8014498:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801449c:	da57      	bge.n	801454e <__ieee754_acosf+0xde>
 801449e:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80144a2:	f340 8126 	ble.w	80146f2 <__ieee754_acosf+0x282>
 80144a6:	4601      	mov	r1, r0
 80144a8:	f7ef fa24 	bl	80038f4 <__aeabi_fmul>
 80144ac:	4604      	mov	r4, r0
 80144ae:	4993      	ldr	r1, [pc, #588]	; (80146fc <__ieee754_acosf+0x28c>)
 80144b0:	f7ef fa20 	bl	80038f4 <__aeabi_fmul>
 80144b4:	4992      	ldr	r1, [pc, #584]	; (8014700 <__ieee754_acosf+0x290>)
 80144b6:	f7ef f915 	bl	80036e4 <__addsf3>
 80144ba:	4621      	mov	r1, r4
 80144bc:	f7ef fa1a 	bl	80038f4 <__aeabi_fmul>
 80144c0:	4990      	ldr	r1, [pc, #576]	; (8014704 <__ieee754_acosf+0x294>)
 80144c2:	f7ef f90d 	bl	80036e0 <__aeabi_fsub>
 80144c6:	4621      	mov	r1, r4
 80144c8:	f7ef fa14 	bl	80038f4 <__aeabi_fmul>
 80144cc:	498e      	ldr	r1, [pc, #568]	; (8014708 <__ieee754_acosf+0x298>)
 80144ce:	f7ef f909 	bl	80036e4 <__addsf3>
 80144d2:	4621      	mov	r1, r4
 80144d4:	f7ef fa0e 	bl	80038f4 <__aeabi_fmul>
 80144d8:	498c      	ldr	r1, [pc, #560]	; (801470c <__ieee754_acosf+0x29c>)
 80144da:	f7ef f901 	bl	80036e0 <__aeabi_fsub>
 80144de:	4621      	mov	r1, r4
 80144e0:	f7ef fa08 	bl	80038f4 <__aeabi_fmul>
 80144e4:	498a      	ldr	r1, [pc, #552]	; (8014710 <__ieee754_acosf+0x2a0>)
 80144e6:	f7ef f8fd 	bl	80036e4 <__addsf3>
 80144ea:	4621      	mov	r1, r4
 80144ec:	f7ef fa02 	bl	80038f4 <__aeabi_fmul>
 80144f0:	4988      	ldr	r1, [pc, #544]	; (8014714 <__ieee754_acosf+0x2a4>)
 80144f2:	4606      	mov	r6, r0
 80144f4:	4620      	mov	r0, r4
 80144f6:	f7ef f9fd 	bl	80038f4 <__aeabi_fmul>
 80144fa:	4987      	ldr	r1, [pc, #540]	; (8014718 <__ieee754_acosf+0x2a8>)
 80144fc:	f7ef f8f0 	bl	80036e0 <__aeabi_fsub>
 8014500:	4621      	mov	r1, r4
 8014502:	f7ef f9f7 	bl	80038f4 <__aeabi_fmul>
 8014506:	4985      	ldr	r1, [pc, #532]	; (801471c <__ieee754_acosf+0x2ac>)
 8014508:	f7ef f8ec 	bl	80036e4 <__addsf3>
 801450c:	4621      	mov	r1, r4
 801450e:	f7ef f9f1 	bl	80038f4 <__aeabi_fmul>
 8014512:	4983      	ldr	r1, [pc, #524]	; (8014720 <__ieee754_acosf+0x2b0>)
 8014514:	f7ef f8e4 	bl	80036e0 <__aeabi_fsub>
 8014518:	4621      	mov	r1, r4
 801451a:	f7ef f9eb 	bl	80038f4 <__aeabi_fmul>
 801451e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8014522:	f7ef f8df 	bl	80036e4 <__addsf3>
 8014526:	4601      	mov	r1, r0
 8014528:	4630      	mov	r0, r6
 801452a:	f7ef fa97 	bl	8003a5c <__aeabi_fdiv>
 801452e:	4629      	mov	r1, r5
 8014530:	f7ef f9e0 	bl	80038f4 <__aeabi_fmul>
 8014534:	4601      	mov	r1, r0
 8014536:	487b      	ldr	r0, [pc, #492]	; (8014724 <__ieee754_acosf+0x2b4>)
 8014538:	f7ef f8d2 	bl	80036e0 <__aeabi_fsub>
 801453c:	4601      	mov	r1, r0
 801453e:	4628      	mov	r0, r5
 8014540:	f7ef f8ce 	bl	80036e0 <__aeabi_fsub>
 8014544:	4601      	mov	r1, r0
 8014546:	4878      	ldr	r0, [pc, #480]	; (8014728 <__ieee754_acosf+0x2b8>)
 8014548:	f7ef f8ca 	bl	80036e0 <__aeabi_fsub>
 801454c:	e79b      	b.n	8014486 <__ieee754_acosf+0x16>
 801454e:	2800      	cmp	r0, #0
 8014550:	da5b      	bge.n	801460a <__ieee754_acosf+0x19a>
 8014552:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8014556:	f7ef f8c5 	bl	80036e4 <__addsf3>
 801455a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801455e:	f7ef f9c9 	bl	80038f4 <__aeabi_fmul>
 8014562:	4604      	mov	r4, r0
 8014564:	4965      	ldr	r1, [pc, #404]	; (80146fc <__ieee754_acosf+0x28c>)
 8014566:	f7ef f9c5 	bl	80038f4 <__aeabi_fmul>
 801456a:	4965      	ldr	r1, [pc, #404]	; (8014700 <__ieee754_acosf+0x290>)
 801456c:	f7ef f8ba 	bl	80036e4 <__addsf3>
 8014570:	4621      	mov	r1, r4
 8014572:	f7ef f9bf 	bl	80038f4 <__aeabi_fmul>
 8014576:	4963      	ldr	r1, [pc, #396]	; (8014704 <__ieee754_acosf+0x294>)
 8014578:	f7ef f8b2 	bl	80036e0 <__aeabi_fsub>
 801457c:	4621      	mov	r1, r4
 801457e:	f7ef f9b9 	bl	80038f4 <__aeabi_fmul>
 8014582:	4961      	ldr	r1, [pc, #388]	; (8014708 <__ieee754_acosf+0x298>)
 8014584:	f7ef f8ae 	bl	80036e4 <__addsf3>
 8014588:	4621      	mov	r1, r4
 801458a:	f7ef f9b3 	bl	80038f4 <__aeabi_fmul>
 801458e:	495f      	ldr	r1, [pc, #380]	; (801470c <__ieee754_acosf+0x29c>)
 8014590:	f7ef f8a6 	bl	80036e0 <__aeabi_fsub>
 8014594:	4621      	mov	r1, r4
 8014596:	f7ef f9ad 	bl	80038f4 <__aeabi_fmul>
 801459a:	495d      	ldr	r1, [pc, #372]	; (8014710 <__ieee754_acosf+0x2a0>)
 801459c:	f7ef f8a2 	bl	80036e4 <__addsf3>
 80145a0:	4621      	mov	r1, r4
 80145a2:	f7ef f9a7 	bl	80038f4 <__aeabi_fmul>
 80145a6:	4606      	mov	r6, r0
 80145a8:	4620      	mov	r0, r4
 80145aa:	f000 faa7 	bl	8014afc <__ieee754_sqrtf>
 80145ae:	4959      	ldr	r1, [pc, #356]	; (8014714 <__ieee754_acosf+0x2a4>)
 80145b0:	4605      	mov	r5, r0
 80145b2:	4620      	mov	r0, r4
 80145b4:	f7ef f99e 	bl	80038f4 <__aeabi_fmul>
 80145b8:	4957      	ldr	r1, [pc, #348]	; (8014718 <__ieee754_acosf+0x2a8>)
 80145ba:	f7ef f891 	bl	80036e0 <__aeabi_fsub>
 80145be:	4621      	mov	r1, r4
 80145c0:	f7ef f998 	bl	80038f4 <__aeabi_fmul>
 80145c4:	4955      	ldr	r1, [pc, #340]	; (801471c <__ieee754_acosf+0x2ac>)
 80145c6:	f7ef f88d 	bl	80036e4 <__addsf3>
 80145ca:	4621      	mov	r1, r4
 80145cc:	f7ef f992 	bl	80038f4 <__aeabi_fmul>
 80145d0:	4953      	ldr	r1, [pc, #332]	; (8014720 <__ieee754_acosf+0x2b0>)
 80145d2:	f7ef f885 	bl	80036e0 <__aeabi_fsub>
 80145d6:	4621      	mov	r1, r4
 80145d8:	f7ef f98c 	bl	80038f4 <__aeabi_fmul>
 80145dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80145e0:	f7ef f880 	bl	80036e4 <__addsf3>
 80145e4:	4601      	mov	r1, r0
 80145e6:	4630      	mov	r0, r6
 80145e8:	f7ef fa38 	bl	8003a5c <__aeabi_fdiv>
 80145ec:	4629      	mov	r1, r5
 80145ee:	f7ef f981 	bl	80038f4 <__aeabi_fmul>
 80145f2:	494c      	ldr	r1, [pc, #304]	; (8014724 <__ieee754_acosf+0x2b4>)
 80145f4:	f7ef f874 	bl	80036e0 <__aeabi_fsub>
 80145f8:	4629      	mov	r1, r5
 80145fa:	f7ef f873 	bl	80036e4 <__addsf3>
 80145fe:	4601      	mov	r1, r0
 8014600:	f7ef f870 	bl	80036e4 <__addsf3>
 8014604:	4601      	mov	r1, r0
 8014606:	4849      	ldr	r0, [pc, #292]	; (801472c <__ieee754_acosf+0x2bc>)
 8014608:	e79e      	b.n	8014548 <__ieee754_acosf+0xd8>
 801460a:	4601      	mov	r1, r0
 801460c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014610:	f7ef f866 	bl	80036e0 <__aeabi_fsub>
 8014614:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8014618:	f7ef f96c 	bl	80038f4 <__aeabi_fmul>
 801461c:	4604      	mov	r4, r0
 801461e:	f000 fa6d 	bl	8014afc <__ieee754_sqrtf>
 8014622:	4936      	ldr	r1, [pc, #216]	; (80146fc <__ieee754_acosf+0x28c>)
 8014624:	4606      	mov	r6, r0
 8014626:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 801462a:	4620      	mov	r0, r4
 801462c:	f7ef f962 	bl	80038f4 <__aeabi_fmul>
 8014630:	4933      	ldr	r1, [pc, #204]	; (8014700 <__ieee754_acosf+0x290>)
 8014632:	f7ef f857 	bl	80036e4 <__addsf3>
 8014636:	4621      	mov	r1, r4
 8014638:	f7ef f95c 	bl	80038f4 <__aeabi_fmul>
 801463c:	4931      	ldr	r1, [pc, #196]	; (8014704 <__ieee754_acosf+0x294>)
 801463e:	f7ef f84f 	bl	80036e0 <__aeabi_fsub>
 8014642:	4621      	mov	r1, r4
 8014644:	f7ef f956 	bl	80038f4 <__aeabi_fmul>
 8014648:	492f      	ldr	r1, [pc, #188]	; (8014708 <__ieee754_acosf+0x298>)
 801464a:	f7ef f84b 	bl	80036e4 <__addsf3>
 801464e:	4621      	mov	r1, r4
 8014650:	f7ef f950 	bl	80038f4 <__aeabi_fmul>
 8014654:	492d      	ldr	r1, [pc, #180]	; (801470c <__ieee754_acosf+0x29c>)
 8014656:	f7ef f843 	bl	80036e0 <__aeabi_fsub>
 801465a:	4621      	mov	r1, r4
 801465c:	f7ef f94a 	bl	80038f4 <__aeabi_fmul>
 8014660:	492b      	ldr	r1, [pc, #172]	; (8014710 <__ieee754_acosf+0x2a0>)
 8014662:	f7ef f83f 	bl	80036e4 <__addsf3>
 8014666:	4621      	mov	r1, r4
 8014668:	f7ef f944 	bl	80038f4 <__aeabi_fmul>
 801466c:	4929      	ldr	r1, [pc, #164]	; (8014714 <__ieee754_acosf+0x2a4>)
 801466e:	4607      	mov	r7, r0
 8014670:	4620      	mov	r0, r4
 8014672:	f7ef f93f 	bl	80038f4 <__aeabi_fmul>
 8014676:	4928      	ldr	r1, [pc, #160]	; (8014718 <__ieee754_acosf+0x2a8>)
 8014678:	f7ef f832 	bl	80036e0 <__aeabi_fsub>
 801467c:	4621      	mov	r1, r4
 801467e:	f7ef f939 	bl	80038f4 <__aeabi_fmul>
 8014682:	4926      	ldr	r1, [pc, #152]	; (801471c <__ieee754_acosf+0x2ac>)
 8014684:	f7ef f82e 	bl	80036e4 <__addsf3>
 8014688:	4621      	mov	r1, r4
 801468a:	f7ef f933 	bl	80038f4 <__aeabi_fmul>
 801468e:	4924      	ldr	r1, [pc, #144]	; (8014720 <__ieee754_acosf+0x2b0>)
 8014690:	f7ef f826 	bl	80036e0 <__aeabi_fsub>
 8014694:	4621      	mov	r1, r4
 8014696:	f7ef f92d 	bl	80038f4 <__aeabi_fmul>
 801469a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801469e:	f7ef f821 	bl	80036e4 <__addsf3>
 80146a2:	4601      	mov	r1, r0
 80146a4:	4638      	mov	r0, r7
 80146a6:	f7ef f9d9 	bl	8003a5c <__aeabi_fdiv>
 80146aa:	4631      	mov	r1, r6
 80146ac:	f7ef f922 	bl	80038f4 <__aeabi_fmul>
 80146b0:	f025 050f 	bic.w	r5, r5, #15
 80146b4:	4607      	mov	r7, r0
 80146b6:	4629      	mov	r1, r5
 80146b8:	4628      	mov	r0, r5
 80146ba:	f7ef f91b 	bl	80038f4 <__aeabi_fmul>
 80146be:	4601      	mov	r1, r0
 80146c0:	4620      	mov	r0, r4
 80146c2:	f7ef f80d 	bl	80036e0 <__aeabi_fsub>
 80146c6:	4629      	mov	r1, r5
 80146c8:	4604      	mov	r4, r0
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7ef f80a 	bl	80036e4 <__addsf3>
 80146d0:	4601      	mov	r1, r0
 80146d2:	4620      	mov	r0, r4
 80146d4:	f7ef f9c2 	bl	8003a5c <__aeabi_fdiv>
 80146d8:	4601      	mov	r1, r0
 80146da:	4638      	mov	r0, r7
 80146dc:	f7ef f802 	bl	80036e4 <__addsf3>
 80146e0:	4629      	mov	r1, r5
 80146e2:	f7ee ffff 	bl	80036e4 <__addsf3>
 80146e6:	4601      	mov	r1, r0
 80146e8:	f7ee fffc 	bl	80036e4 <__addsf3>
 80146ec:	e6cb      	b.n	8014486 <__ieee754_acosf+0x16>
 80146ee:	2000      	movs	r0, #0
 80146f0:	e6c9      	b.n	8014486 <__ieee754_acosf+0x16>
 80146f2:	480f      	ldr	r0, [pc, #60]	; (8014730 <__ieee754_acosf+0x2c0>)
 80146f4:	e6c7      	b.n	8014486 <__ieee754_acosf+0x16>
 80146f6:	bf00      	nop
 80146f8:	40490fdb 	.word	0x40490fdb
 80146fc:	3811ef08 	.word	0x3811ef08
 8014700:	3a4f7f04 	.word	0x3a4f7f04
 8014704:	3d241146 	.word	0x3d241146
 8014708:	3e4e0aa8 	.word	0x3e4e0aa8
 801470c:	3ea6b090 	.word	0x3ea6b090
 8014710:	3e2aaaab 	.word	0x3e2aaaab
 8014714:	3d9dc62e 	.word	0x3d9dc62e
 8014718:	3f303361 	.word	0x3f303361
 801471c:	4001572d 	.word	0x4001572d
 8014720:	4019d139 	.word	0x4019d139
 8014724:	33a22168 	.word	0x33a22168
 8014728:	3fc90fda 	.word	0x3fc90fda
 801472c:	40490fda 	.word	0x40490fda
 8014730:	3fc90fdb 	.word	0x3fc90fdb

08014734 <__ieee754_atan2f>:
 8014734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014736:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801473a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801473e:	4603      	mov	r3, r0
 8014740:	dc05      	bgt.n	801474e <__ieee754_atan2f+0x1a>
 8014742:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8014746:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801474a:	4607      	mov	r7, r0
 801474c:	dd04      	ble.n	8014758 <__ieee754_atan2f+0x24>
 801474e:	4618      	mov	r0, r3
 8014750:	f7ee ffc8 	bl	80036e4 <__addsf3>
 8014754:	4603      	mov	r3, r0
 8014756:	e011      	b.n	801477c <__ieee754_atan2f+0x48>
 8014758:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801475c:	d103      	bne.n	8014766 <__ieee754_atan2f+0x32>
 801475e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014762:	f000 bdc5 	b.w	80152f0 <atanf>
 8014766:	178c      	asrs	r4, r1, #30
 8014768:	f004 0402 	and.w	r4, r4, #2
 801476c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014770:	b932      	cbnz	r2, 8014780 <__ieee754_atan2f+0x4c>
 8014772:	2c02      	cmp	r4, #2
 8014774:	d04c      	beq.n	8014810 <__ieee754_atan2f+0xdc>
 8014776:	2c03      	cmp	r4, #3
 8014778:	d100      	bne.n	801477c <__ieee754_atan2f+0x48>
 801477a:	4b29      	ldr	r3, [pc, #164]	; (8014820 <__ieee754_atan2f+0xec>)
 801477c:	4618      	mov	r0, r3
 801477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014780:	b91e      	cbnz	r6, 801478a <__ieee754_atan2f+0x56>
 8014782:	2f00      	cmp	r7, #0
 8014784:	da4a      	bge.n	801481c <__ieee754_atan2f+0xe8>
 8014786:	4b27      	ldr	r3, [pc, #156]	; (8014824 <__ieee754_atan2f+0xf0>)
 8014788:	e7f8      	b.n	801477c <__ieee754_atan2f+0x48>
 801478a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801478e:	d10e      	bne.n	80147ae <__ieee754_atan2f+0x7a>
 8014790:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014794:	f104 34ff 	add.w	r4, r4, #4294967295
 8014798:	d105      	bne.n	80147a6 <__ieee754_atan2f+0x72>
 801479a:	2c02      	cmp	r4, #2
 801479c:	d83a      	bhi.n	8014814 <__ieee754_atan2f+0xe0>
 801479e:	4b22      	ldr	r3, [pc, #136]	; (8014828 <__ieee754_atan2f+0xf4>)
 80147a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80147a4:	e7ea      	b.n	801477c <__ieee754_atan2f+0x48>
 80147a6:	2c02      	cmp	r4, #2
 80147a8:	d836      	bhi.n	8014818 <__ieee754_atan2f+0xe4>
 80147aa:	4b20      	ldr	r3, [pc, #128]	; (801482c <__ieee754_atan2f+0xf8>)
 80147ac:	e7f8      	b.n	80147a0 <__ieee754_atan2f+0x6c>
 80147ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80147b2:	d0e6      	beq.n	8014782 <__ieee754_atan2f+0x4e>
 80147b4:	1b92      	subs	r2, r2, r6
 80147b6:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 80147ba:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80147be:	da17      	bge.n	80147f0 <__ieee754_atan2f+0xbc>
 80147c0:	2900      	cmp	r1, #0
 80147c2:	da01      	bge.n	80147c8 <__ieee754_atan2f+0x94>
 80147c4:	303c      	adds	r0, #60	; 0x3c
 80147c6:	db15      	blt.n	80147f4 <__ieee754_atan2f+0xc0>
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7ef f947 	bl	8003a5c <__aeabi_fdiv>
 80147ce:	f000 fe9b 	bl	8015508 <fabsf>
 80147d2:	f000 fd8d 	bl	80152f0 <atanf>
 80147d6:	4603      	mov	r3, r0
 80147d8:	2c01      	cmp	r4, #1
 80147da:	d00d      	beq.n	80147f8 <__ieee754_atan2f+0xc4>
 80147dc:	2c02      	cmp	r4, #2
 80147de:	d00e      	beq.n	80147fe <__ieee754_atan2f+0xca>
 80147e0:	2c00      	cmp	r4, #0
 80147e2:	d0cb      	beq.n	801477c <__ieee754_atan2f+0x48>
 80147e4:	4912      	ldr	r1, [pc, #72]	; (8014830 <__ieee754_atan2f+0xfc>)
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7ee ff7c 	bl	80036e4 <__addsf3>
 80147ec:	4911      	ldr	r1, [pc, #68]	; (8014834 <__ieee754_atan2f+0x100>)
 80147ee:	e00c      	b.n	801480a <__ieee754_atan2f+0xd6>
 80147f0:	4b11      	ldr	r3, [pc, #68]	; (8014838 <__ieee754_atan2f+0x104>)
 80147f2:	e7f1      	b.n	80147d8 <__ieee754_atan2f+0xa4>
 80147f4:	2300      	movs	r3, #0
 80147f6:	e7ef      	b.n	80147d8 <__ieee754_atan2f+0xa4>
 80147f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80147fc:	e7be      	b.n	801477c <__ieee754_atan2f+0x48>
 80147fe:	490c      	ldr	r1, [pc, #48]	; (8014830 <__ieee754_atan2f+0xfc>)
 8014800:	4618      	mov	r0, r3
 8014802:	f7ee ff6f 	bl	80036e4 <__addsf3>
 8014806:	4601      	mov	r1, r0
 8014808:	480a      	ldr	r0, [pc, #40]	; (8014834 <__ieee754_atan2f+0x100>)
 801480a:	f7ee ff69 	bl	80036e0 <__aeabi_fsub>
 801480e:	e7a1      	b.n	8014754 <__ieee754_atan2f+0x20>
 8014810:	4b08      	ldr	r3, [pc, #32]	; (8014834 <__ieee754_atan2f+0x100>)
 8014812:	e7b3      	b.n	801477c <__ieee754_atan2f+0x48>
 8014814:	4b09      	ldr	r3, [pc, #36]	; (801483c <__ieee754_atan2f+0x108>)
 8014816:	e7b1      	b.n	801477c <__ieee754_atan2f+0x48>
 8014818:	2300      	movs	r3, #0
 801481a:	e7af      	b.n	801477c <__ieee754_atan2f+0x48>
 801481c:	4b06      	ldr	r3, [pc, #24]	; (8014838 <__ieee754_atan2f+0x104>)
 801481e:	e7ad      	b.n	801477c <__ieee754_atan2f+0x48>
 8014820:	c0490fdb 	.word	0xc0490fdb
 8014824:	bfc90fdb 	.word	0xbfc90fdb
 8014828:	08016950 	.word	0x08016950
 801482c:	0801695c 	.word	0x0801695c
 8014830:	33bbbd2e 	.word	0x33bbbd2e
 8014834:	40490fdb 	.word	0x40490fdb
 8014838:	3fc90fdb 	.word	0x3fc90fdb
 801483c:	3f490fdb 	.word	0x3f490fdb

08014840 <__ieee754_rem_pio2f>:
 8014840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014844:	4aa0      	ldr	r2, [pc, #640]	; (8014ac8 <__ieee754_rem_pio2f+0x288>)
 8014846:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801484a:	4296      	cmp	r6, r2
 801484c:	460c      	mov	r4, r1
 801484e:	4682      	mov	sl, r0
 8014850:	b087      	sub	sp, #28
 8014852:	dc04      	bgt.n	801485e <__ieee754_rem_pio2f+0x1e>
 8014854:	2300      	movs	r3, #0
 8014856:	6008      	str	r0, [r1, #0]
 8014858:	604b      	str	r3, [r1, #4]
 801485a:	2500      	movs	r5, #0
 801485c:	e01a      	b.n	8014894 <__ieee754_rem_pio2f+0x54>
 801485e:	4a9b      	ldr	r2, [pc, #620]	; (8014acc <__ieee754_rem_pio2f+0x28c>)
 8014860:	4296      	cmp	r6, r2
 8014862:	dc4b      	bgt.n	80148fc <__ieee754_rem_pio2f+0xbc>
 8014864:	2800      	cmp	r0, #0
 8014866:	499a      	ldr	r1, [pc, #616]	; (8014ad0 <__ieee754_rem_pio2f+0x290>)
 8014868:	4f9a      	ldr	r7, [pc, #616]	; (8014ad4 <__ieee754_rem_pio2f+0x294>)
 801486a:	f026 060f 	bic.w	r6, r6, #15
 801486e:	dd23      	ble.n	80148b8 <__ieee754_rem_pio2f+0x78>
 8014870:	f7ee ff36 	bl	80036e0 <__aeabi_fsub>
 8014874:	42be      	cmp	r6, r7
 8014876:	4605      	mov	r5, r0
 8014878:	d010      	beq.n	801489c <__ieee754_rem_pio2f+0x5c>
 801487a:	4997      	ldr	r1, [pc, #604]	; (8014ad8 <__ieee754_rem_pio2f+0x298>)
 801487c:	f7ee ff30 	bl	80036e0 <__aeabi_fsub>
 8014880:	4601      	mov	r1, r0
 8014882:	6020      	str	r0, [r4, #0]
 8014884:	4628      	mov	r0, r5
 8014886:	f7ee ff2b 	bl	80036e0 <__aeabi_fsub>
 801488a:	4993      	ldr	r1, [pc, #588]	; (8014ad8 <__ieee754_rem_pio2f+0x298>)
 801488c:	f7ee ff28 	bl	80036e0 <__aeabi_fsub>
 8014890:	2501      	movs	r5, #1
 8014892:	6060      	str	r0, [r4, #4]
 8014894:	4628      	mov	r0, r5
 8014896:	b007      	add	sp, #28
 8014898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489c:	498f      	ldr	r1, [pc, #572]	; (8014adc <__ieee754_rem_pio2f+0x29c>)
 801489e:	f7ee ff1f 	bl	80036e0 <__aeabi_fsub>
 80148a2:	498f      	ldr	r1, [pc, #572]	; (8014ae0 <__ieee754_rem_pio2f+0x2a0>)
 80148a4:	4605      	mov	r5, r0
 80148a6:	f7ee ff1b 	bl	80036e0 <__aeabi_fsub>
 80148aa:	4601      	mov	r1, r0
 80148ac:	6020      	str	r0, [r4, #0]
 80148ae:	4628      	mov	r0, r5
 80148b0:	f7ee ff16 	bl	80036e0 <__aeabi_fsub>
 80148b4:	498a      	ldr	r1, [pc, #552]	; (8014ae0 <__ieee754_rem_pio2f+0x2a0>)
 80148b6:	e7e9      	b.n	801488c <__ieee754_rem_pio2f+0x4c>
 80148b8:	f7ee ff14 	bl	80036e4 <__addsf3>
 80148bc:	42be      	cmp	r6, r7
 80148be:	4605      	mov	r5, r0
 80148c0:	d00e      	beq.n	80148e0 <__ieee754_rem_pio2f+0xa0>
 80148c2:	4985      	ldr	r1, [pc, #532]	; (8014ad8 <__ieee754_rem_pio2f+0x298>)
 80148c4:	f7ee ff0e 	bl	80036e4 <__addsf3>
 80148c8:	4601      	mov	r1, r0
 80148ca:	6020      	str	r0, [r4, #0]
 80148cc:	4628      	mov	r0, r5
 80148ce:	f7ee ff07 	bl	80036e0 <__aeabi_fsub>
 80148d2:	4981      	ldr	r1, [pc, #516]	; (8014ad8 <__ieee754_rem_pio2f+0x298>)
 80148d4:	f7ee ff06 	bl	80036e4 <__addsf3>
 80148d8:	f04f 35ff 	mov.w	r5, #4294967295
 80148dc:	6060      	str	r0, [r4, #4]
 80148de:	e7d9      	b.n	8014894 <__ieee754_rem_pio2f+0x54>
 80148e0:	497e      	ldr	r1, [pc, #504]	; (8014adc <__ieee754_rem_pio2f+0x29c>)
 80148e2:	f7ee feff 	bl	80036e4 <__addsf3>
 80148e6:	497e      	ldr	r1, [pc, #504]	; (8014ae0 <__ieee754_rem_pio2f+0x2a0>)
 80148e8:	4605      	mov	r5, r0
 80148ea:	f7ee fefb 	bl	80036e4 <__addsf3>
 80148ee:	4601      	mov	r1, r0
 80148f0:	6020      	str	r0, [r4, #0]
 80148f2:	4628      	mov	r0, r5
 80148f4:	f7ee fef4 	bl	80036e0 <__aeabi_fsub>
 80148f8:	4979      	ldr	r1, [pc, #484]	; (8014ae0 <__ieee754_rem_pio2f+0x2a0>)
 80148fa:	e7eb      	b.n	80148d4 <__ieee754_rem_pio2f+0x94>
 80148fc:	4a79      	ldr	r2, [pc, #484]	; (8014ae4 <__ieee754_rem_pio2f+0x2a4>)
 80148fe:	4296      	cmp	r6, r2
 8014900:	f300 8091 	bgt.w	8014a26 <__ieee754_rem_pio2f+0x1e6>
 8014904:	f000 fe00 	bl	8015508 <fabsf>
 8014908:	4977      	ldr	r1, [pc, #476]	; (8014ae8 <__ieee754_rem_pio2f+0x2a8>)
 801490a:	4607      	mov	r7, r0
 801490c:	f7ee fff2 	bl	80038f4 <__aeabi_fmul>
 8014910:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8014914:	f7ee fee6 	bl	80036e4 <__addsf3>
 8014918:	f7ef f9c8 	bl	8003cac <__aeabi_f2iz>
 801491c:	4605      	mov	r5, r0
 801491e:	f7ee ff95 	bl	800384c <__aeabi_i2f>
 8014922:	496b      	ldr	r1, [pc, #428]	; (8014ad0 <__ieee754_rem_pio2f+0x290>)
 8014924:	4681      	mov	r9, r0
 8014926:	f7ee ffe5 	bl	80038f4 <__aeabi_fmul>
 801492a:	4601      	mov	r1, r0
 801492c:	4638      	mov	r0, r7
 801492e:	f7ee fed7 	bl	80036e0 <__aeabi_fsub>
 8014932:	4969      	ldr	r1, [pc, #420]	; (8014ad8 <__ieee754_rem_pio2f+0x298>)
 8014934:	4680      	mov	r8, r0
 8014936:	4648      	mov	r0, r9
 8014938:	f7ee ffdc 	bl	80038f4 <__aeabi_fmul>
 801493c:	2d1f      	cmp	r5, #31
 801493e:	4607      	mov	r7, r0
 8014940:	dc0c      	bgt.n	801495c <__ieee754_rem_pio2f+0x11c>
 8014942:	4a6a      	ldr	r2, [pc, #424]	; (8014aec <__ieee754_rem_pio2f+0x2ac>)
 8014944:	1e69      	subs	r1, r5, #1
 8014946:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801494a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 801494e:	4293      	cmp	r3, r2
 8014950:	d004      	beq.n	801495c <__ieee754_rem_pio2f+0x11c>
 8014952:	4639      	mov	r1, r7
 8014954:	4640      	mov	r0, r8
 8014956:	f7ee fec3 	bl	80036e0 <__aeabi_fsub>
 801495a:	e00b      	b.n	8014974 <__ieee754_rem_pio2f+0x134>
 801495c:	4639      	mov	r1, r7
 801495e:	4640      	mov	r0, r8
 8014960:	f7ee febe 	bl	80036e0 <__aeabi_fsub>
 8014964:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014968:	ea4f 5be6 	mov.w	fp, r6, asr #23
 801496c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8014970:	2e08      	cmp	r6, #8
 8014972:	dc01      	bgt.n	8014978 <__ieee754_rem_pio2f+0x138>
 8014974:	6020      	str	r0, [r4, #0]
 8014976:	e026      	b.n	80149c6 <__ieee754_rem_pio2f+0x186>
 8014978:	4958      	ldr	r1, [pc, #352]	; (8014adc <__ieee754_rem_pio2f+0x29c>)
 801497a:	4648      	mov	r0, r9
 801497c:	f7ee ffba 	bl	80038f4 <__aeabi_fmul>
 8014980:	4607      	mov	r7, r0
 8014982:	4601      	mov	r1, r0
 8014984:	4640      	mov	r0, r8
 8014986:	f7ee feab 	bl	80036e0 <__aeabi_fsub>
 801498a:	4601      	mov	r1, r0
 801498c:	4606      	mov	r6, r0
 801498e:	4640      	mov	r0, r8
 8014990:	f7ee fea6 	bl	80036e0 <__aeabi_fsub>
 8014994:	4639      	mov	r1, r7
 8014996:	f7ee fea3 	bl	80036e0 <__aeabi_fsub>
 801499a:	4607      	mov	r7, r0
 801499c:	4950      	ldr	r1, [pc, #320]	; (8014ae0 <__ieee754_rem_pio2f+0x2a0>)
 801499e:	4648      	mov	r0, r9
 80149a0:	f7ee ffa8 	bl	80038f4 <__aeabi_fmul>
 80149a4:	4639      	mov	r1, r7
 80149a6:	f7ee fe9b 	bl	80036e0 <__aeabi_fsub>
 80149aa:	4601      	mov	r1, r0
 80149ac:	4607      	mov	r7, r0
 80149ae:	4630      	mov	r0, r6
 80149b0:	f7ee fe96 	bl	80036e0 <__aeabi_fsub>
 80149b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80149b8:	ebab 0b03 	sub.w	fp, fp, r3
 80149bc:	f1bb 0f19 	cmp.w	fp, #25
 80149c0:	dc16      	bgt.n	80149f0 <__ieee754_rem_pio2f+0x1b0>
 80149c2:	46b0      	mov	r8, r6
 80149c4:	6020      	str	r0, [r4, #0]
 80149c6:	6826      	ldr	r6, [r4, #0]
 80149c8:	4640      	mov	r0, r8
 80149ca:	4631      	mov	r1, r6
 80149cc:	f7ee fe88 	bl	80036e0 <__aeabi_fsub>
 80149d0:	4639      	mov	r1, r7
 80149d2:	f7ee fe85 	bl	80036e0 <__aeabi_fsub>
 80149d6:	f1ba 0f00 	cmp.w	sl, #0
 80149da:	6060      	str	r0, [r4, #4]
 80149dc:	f6bf af5a 	bge.w	8014894 <__ieee754_rem_pio2f+0x54>
 80149e0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80149e4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80149e8:	6026      	str	r6, [r4, #0]
 80149ea:	6060      	str	r0, [r4, #4]
 80149ec:	426d      	negs	r5, r5
 80149ee:	e751      	b.n	8014894 <__ieee754_rem_pio2f+0x54>
 80149f0:	493f      	ldr	r1, [pc, #252]	; (8014af0 <__ieee754_rem_pio2f+0x2b0>)
 80149f2:	4648      	mov	r0, r9
 80149f4:	f7ee ff7e 	bl	80038f4 <__aeabi_fmul>
 80149f8:	4607      	mov	r7, r0
 80149fa:	4601      	mov	r1, r0
 80149fc:	4630      	mov	r0, r6
 80149fe:	f7ee fe6f 	bl	80036e0 <__aeabi_fsub>
 8014a02:	4601      	mov	r1, r0
 8014a04:	4680      	mov	r8, r0
 8014a06:	4630      	mov	r0, r6
 8014a08:	f7ee fe6a 	bl	80036e0 <__aeabi_fsub>
 8014a0c:	4639      	mov	r1, r7
 8014a0e:	f7ee fe67 	bl	80036e0 <__aeabi_fsub>
 8014a12:	4606      	mov	r6, r0
 8014a14:	4937      	ldr	r1, [pc, #220]	; (8014af4 <__ieee754_rem_pio2f+0x2b4>)
 8014a16:	4648      	mov	r0, r9
 8014a18:	f7ee ff6c 	bl	80038f4 <__aeabi_fmul>
 8014a1c:	4631      	mov	r1, r6
 8014a1e:	f7ee fe5f 	bl	80036e0 <__aeabi_fsub>
 8014a22:	4607      	mov	r7, r0
 8014a24:	e795      	b.n	8014952 <__ieee754_rem_pio2f+0x112>
 8014a26:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8014a2a:	db05      	blt.n	8014a38 <__ieee754_rem_pio2f+0x1f8>
 8014a2c:	4601      	mov	r1, r0
 8014a2e:	f7ee fe57 	bl	80036e0 <__aeabi_fsub>
 8014a32:	6060      	str	r0, [r4, #4]
 8014a34:	6020      	str	r0, [r4, #0]
 8014a36:	e710      	b.n	801485a <__ieee754_rem_pio2f+0x1a>
 8014a38:	15f7      	asrs	r7, r6, #23
 8014a3a:	3f86      	subs	r7, #134	; 0x86
 8014a3c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7ef f933 	bl	8003cac <__aeabi_f2iz>
 8014a46:	f7ee ff01 	bl	800384c <__aeabi_i2f>
 8014a4a:	4601      	mov	r1, r0
 8014a4c:	9003      	str	r0, [sp, #12]
 8014a4e:	4630      	mov	r0, r6
 8014a50:	f7ee fe46 	bl	80036e0 <__aeabi_fsub>
 8014a54:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8014a58:	f7ee ff4c 	bl	80038f4 <__aeabi_fmul>
 8014a5c:	4606      	mov	r6, r0
 8014a5e:	f7ef f925 	bl	8003cac <__aeabi_f2iz>
 8014a62:	f7ee fef3 	bl	800384c <__aeabi_i2f>
 8014a66:	4601      	mov	r1, r0
 8014a68:	9004      	str	r0, [sp, #16]
 8014a6a:	4605      	mov	r5, r0
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	f7ee fe37 	bl	80036e0 <__aeabi_fsub>
 8014a72:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8014a76:	f7ee ff3d 	bl	80038f4 <__aeabi_fmul>
 8014a7a:	2100      	movs	r1, #0
 8014a7c:	9005      	str	r0, [sp, #20]
 8014a7e:	f7ef f8cd 	bl	8003c1c <__aeabi_fcmpeq>
 8014a82:	b1f0      	cbz	r0, 8014ac2 <__ieee754_rem_pio2f+0x282>
 8014a84:	2100      	movs	r1, #0
 8014a86:	4628      	mov	r0, r5
 8014a88:	f7ef f8c8 	bl	8003c1c <__aeabi_fcmpeq>
 8014a8c:	2800      	cmp	r0, #0
 8014a8e:	bf14      	ite	ne
 8014a90:	2301      	movne	r3, #1
 8014a92:	2302      	moveq	r3, #2
 8014a94:	4a18      	ldr	r2, [pc, #96]	; (8014af8 <__ieee754_rem_pio2f+0x2b8>)
 8014a96:	4621      	mov	r1, r4
 8014a98:	9201      	str	r2, [sp, #4]
 8014a9a:	2202      	movs	r2, #2
 8014a9c:	a803      	add	r0, sp, #12
 8014a9e:	9200      	str	r2, [sp, #0]
 8014aa0:	463a      	mov	r2, r7
 8014aa2:	f000 f8fd 	bl	8014ca0 <__kernel_rem_pio2f>
 8014aa6:	f1ba 0f00 	cmp.w	sl, #0
 8014aaa:	4605      	mov	r5, r0
 8014aac:	f6bf aef2 	bge.w	8014894 <__ieee754_rem_pio2f+0x54>
 8014ab0:	6823      	ldr	r3, [r4, #0]
 8014ab2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014ab6:	6023      	str	r3, [r4, #0]
 8014ab8:	6863      	ldr	r3, [r4, #4]
 8014aba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014abe:	6063      	str	r3, [r4, #4]
 8014ac0:	e794      	b.n	80149ec <__ieee754_rem_pio2f+0x1ac>
 8014ac2:	2303      	movs	r3, #3
 8014ac4:	e7e6      	b.n	8014a94 <__ieee754_rem_pio2f+0x254>
 8014ac6:	bf00      	nop
 8014ac8:	3f490fd8 	.word	0x3f490fd8
 8014acc:	4016cbe3 	.word	0x4016cbe3
 8014ad0:	3fc90f80 	.word	0x3fc90f80
 8014ad4:	3fc90fd0 	.word	0x3fc90fd0
 8014ad8:	37354443 	.word	0x37354443
 8014adc:	37354400 	.word	0x37354400
 8014ae0:	2e85a308 	.word	0x2e85a308
 8014ae4:	43490f80 	.word	0x43490f80
 8014ae8:	3f22f984 	.word	0x3f22f984
 8014aec:	08016968 	.word	0x08016968
 8014af0:	2e85a300 	.word	0x2e85a300
 8014af4:	248d3132 	.word	0x248d3132
 8014af8:	080169e8 	.word	0x080169e8

08014afc <__ieee754_sqrtf>:
 8014afc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8014b00:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014b04:	b570      	push	{r4, r5, r6, lr}
 8014b06:	4603      	mov	r3, r0
 8014b08:	4604      	mov	r4, r0
 8014b0a:	d309      	bcc.n	8014b20 <__ieee754_sqrtf+0x24>
 8014b0c:	4601      	mov	r1, r0
 8014b0e:	f7ee fef1 	bl	80038f4 <__aeabi_fmul>
 8014b12:	4601      	mov	r1, r0
 8014b14:	4620      	mov	r0, r4
 8014b16:	f7ee fde5 	bl	80036e4 <__addsf3>
 8014b1a:	4604      	mov	r4, r0
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
 8014b20:	2a00      	cmp	r2, #0
 8014b22:	d0fb      	beq.n	8014b1c <__ieee754_sqrtf+0x20>
 8014b24:	2800      	cmp	r0, #0
 8014b26:	da06      	bge.n	8014b36 <__ieee754_sqrtf+0x3a>
 8014b28:	4601      	mov	r1, r0
 8014b2a:	f7ee fdd9 	bl	80036e0 <__aeabi_fsub>
 8014b2e:	4601      	mov	r1, r0
 8014b30:	f7ee ff94 	bl	8003a5c <__aeabi_fdiv>
 8014b34:	e7f1      	b.n	8014b1a <__ieee754_sqrtf+0x1e>
 8014b36:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8014b3a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8014b3e:	d029      	beq.n	8014b94 <__ieee754_sqrtf+0x98>
 8014b40:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8014b44:	07cb      	lsls	r3, r1, #31
 8014b46:	f04f 0300 	mov.w	r3, #0
 8014b4a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8014b4e:	f04f 0419 	mov.w	r4, #25
 8014b52:	461e      	mov	r6, r3
 8014b54:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8014b58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8014b5c:	bf58      	it	pl
 8014b5e:	0052      	lslpl	r2, r2, #1
 8014b60:	1040      	asrs	r0, r0, #1
 8014b62:	0052      	lsls	r2, r2, #1
 8014b64:	1875      	adds	r5, r6, r1
 8014b66:	4295      	cmp	r5, r2
 8014b68:	bfde      	ittt	le
 8014b6a:	186e      	addle	r6, r5, r1
 8014b6c:	1b52      	suble	r2, r2, r5
 8014b6e:	185b      	addle	r3, r3, r1
 8014b70:	3c01      	subs	r4, #1
 8014b72:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014b76:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014b7a:	d1f3      	bne.n	8014b64 <__ieee754_sqrtf+0x68>
 8014b7c:	b112      	cbz	r2, 8014b84 <__ieee754_sqrtf+0x88>
 8014b7e:	3301      	adds	r3, #1
 8014b80:	f023 0301 	bic.w	r3, r3, #1
 8014b84:	105c      	asrs	r4, r3, #1
 8014b86:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8014b8a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8014b8e:	e7c5      	b.n	8014b1c <__ieee754_sqrtf+0x20>
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	3201      	adds	r2, #1
 8014b94:	0218      	lsls	r0, r3, #8
 8014b96:	d5fb      	bpl.n	8014b90 <__ieee754_sqrtf+0x94>
 8014b98:	3a01      	subs	r2, #1
 8014b9a:	1a89      	subs	r1, r1, r2
 8014b9c:	e7d0      	b.n	8014b40 <__ieee754_sqrtf+0x44>
	...

08014ba0 <__kernel_cosf>:
 8014ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8014ba8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014bac:	4606      	mov	r6, r0
 8014bae:	4688      	mov	r8, r1
 8014bb0:	da03      	bge.n	8014bba <__kernel_cosf+0x1a>
 8014bb2:	f7ef f87b 	bl	8003cac <__aeabi_f2iz>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d05c      	beq.n	8014c74 <__kernel_cosf+0xd4>
 8014bba:	4631      	mov	r1, r6
 8014bbc:	4630      	mov	r0, r6
 8014bbe:	f7ee fe99 	bl	80038f4 <__aeabi_fmul>
 8014bc2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8014bc6:	4605      	mov	r5, r0
 8014bc8:	f7ee fe94 	bl	80038f4 <__aeabi_fmul>
 8014bcc:	492b      	ldr	r1, [pc, #172]	; (8014c7c <__kernel_cosf+0xdc>)
 8014bce:	4607      	mov	r7, r0
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	f7ee fe8f 	bl	80038f4 <__aeabi_fmul>
 8014bd6:	492a      	ldr	r1, [pc, #168]	; (8014c80 <__kernel_cosf+0xe0>)
 8014bd8:	f7ee fd84 	bl	80036e4 <__addsf3>
 8014bdc:	4629      	mov	r1, r5
 8014bde:	f7ee fe89 	bl	80038f4 <__aeabi_fmul>
 8014be2:	4928      	ldr	r1, [pc, #160]	; (8014c84 <__kernel_cosf+0xe4>)
 8014be4:	f7ee fd7c 	bl	80036e0 <__aeabi_fsub>
 8014be8:	4629      	mov	r1, r5
 8014bea:	f7ee fe83 	bl	80038f4 <__aeabi_fmul>
 8014bee:	4926      	ldr	r1, [pc, #152]	; (8014c88 <__kernel_cosf+0xe8>)
 8014bf0:	f7ee fd78 	bl	80036e4 <__addsf3>
 8014bf4:	4629      	mov	r1, r5
 8014bf6:	f7ee fe7d 	bl	80038f4 <__aeabi_fmul>
 8014bfa:	4924      	ldr	r1, [pc, #144]	; (8014c8c <__kernel_cosf+0xec>)
 8014bfc:	f7ee fd70 	bl	80036e0 <__aeabi_fsub>
 8014c00:	4629      	mov	r1, r5
 8014c02:	f7ee fe77 	bl	80038f4 <__aeabi_fmul>
 8014c06:	4922      	ldr	r1, [pc, #136]	; (8014c90 <__kernel_cosf+0xf0>)
 8014c08:	f7ee fd6c 	bl	80036e4 <__addsf3>
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	f7ee fe71 	bl	80038f4 <__aeabi_fmul>
 8014c12:	4629      	mov	r1, r5
 8014c14:	f7ee fe6e 	bl	80038f4 <__aeabi_fmul>
 8014c18:	4641      	mov	r1, r8
 8014c1a:	4605      	mov	r5, r0
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f7ee fe69 	bl	80038f4 <__aeabi_fmul>
 8014c22:	4601      	mov	r1, r0
 8014c24:	4628      	mov	r0, r5
 8014c26:	f7ee fd5b 	bl	80036e0 <__aeabi_fsub>
 8014c2a:	4b1a      	ldr	r3, [pc, #104]	; (8014c94 <__kernel_cosf+0xf4>)
 8014c2c:	4605      	mov	r5, r0
 8014c2e:	429c      	cmp	r4, r3
 8014c30:	dc0a      	bgt.n	8014c48 <__kernel_cosf+0xa8>
 8014c32:	4601      	mov	r1, r0
 8014c34:	4638      	mov	r0, r7
 8014c36:	f7ee fd53 	bl	80036e0 <__aeabi_fsub>
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014c40:	f7ee fd4e 	bl	80036e0 <__aeabi_fsub>
 8014c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c48:	4b13      	ldr	r3, [pc, #76]	; (8014c98 <__kernel_cosf+0xf8>)
 8014c4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014c4e:	429c      	cmp	r4, r3
 8014c50:	bfcc      	ite	gt
 8014c52:	4c12      	ldrgt	r4, [pc, #72]	; (8014c9c <__kernel_cosf+0xfc>)
 8014c54:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8014c58:	4621      	mov	r1, r4
 8014c5a:	f7ee fd41 	bl	80036e0 <__aeabi_fsub>
 8014c5e:	4621      	mov	r1, r4
 8014c60:	4606      	mov	r6, r0
 8014c62:	4638      	mov	r0, r7
 8014c64:	f7ee fd3c 	bl	80036e0 <__aeabi_fsub>
 8014c68:	4629      	mov	r1, r5
 8014c6a:	f7ee fd39 	bl	80036e0 <__aeabi_fsub>
 8014c6e:	4601      	mov	r1, r0
 8014c70:	4630      	mov	r0, r6
 8014c72:	e7e5      	b.n	8014c40 <__kernel_cosf+0xa0>
 8014c74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014c78:	e7e4      	b.n	8014c44 <__kernel_cosf+0xa4>
 8014c7a:	bf00      	nop
 8014c7c:	ad47d74e 	.word	0xad47d74e
 8014c80:	310f74f6 	.word	0x310f74f6
 8014c84:	3493f27c 	.word	0x3493f27c
 8014c88:	37d00d01 	.word	0x37d00d01
 8014c8c:	3ab60b61 	.word	0x3ab60b61
 8014c90:	3d2aaaab 	.word	0x3d2aaaab
 8014c94:	3e999999 	.word	0x3e999999
 8014c98:	3f480000 	.word	0x3f480000
 8014c9c:	3e900000 	.word	0x3e900000

08014ca0 <__kernel_rem_pio2f>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	b0db      	sub	sp, #364	; 0x16c
 8014ca6:	9202      	str	r2, [sp, #8]
 8014ca8:	9304      	str	r3, [sp, #16]
 8014caa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014cac:	4bb2      	ldr	r3, [pc, #712]	; (8014f78 <__kernel_rem_pio2f+0x2d8>)
 8014cae:	9005      	str	r0, [sp, #20]
 8014cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cb4:	9100      	str	r1, [sp, #0]
 8014cb6:	9301      	str	r3, [sp, #4]
 8014cb8:	9b04      	ldr	r3, [sp, #16]
 8014cba:	3b01      	subs	r3, #1
 8014cbc:	9303      	str	r3, [sp, #12]
 8014cbe:	9b02      	ldr	r3, [sp, #8]
 8014cc0:	1d1a      	adds	r2, r3, #4
 8014cc2:	f2c0 809b 	blt.w	8014dfc <__kernel_rem_pio2f+0x15c>
 8014cc6:	1edc      	subs	r4, r3, #3
 8014cc8:	bf48      	it	mi
 8014cca:	1d1c      	addmi	r4, r3, #4
 8014ccc:	10e4      	asrs	r4, r4, #3
 8014cce:	2500      	movs	r5, #0
 8014cd0:	f04f 0b00 	mov.w	fp, #0
 8014cd4:	1c67      	adds	r7, r4, #1
 8014cd6:	00fb      	lsls	r3, r7, #3
 8014cd8:	9306      	str	r3, [sp, #24]
 8014cda:	9b02      	ldr	r3, [sp, #8]
 8014cdc:	9a03      	ldr	r2, [sp, #12]
 8014cde:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8014ce2:	9b01      	ldr	r3, [sp, #4]
 8014ce4:	eba4 0802 	sub.w	r8, r4, r2
 8014ce8:	eb03 0902 	add.w	r9, r3, r2
 8014cec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8014cee:	ae1e      	add	r6, sp, #120	; 0x78
 8014cf0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8014cf4:	454d      	cmp	r5, r9
 8014cf6:	f340 8083 	ble.w	8014e00 <__kernel_rem_pio2f+0x160>
 8014cfa:	9a04      	ldr	r2, [sp, #16]
 8014cfc:	ab1e      	add	r3, sp, #120	; 0x78
 8014cfe:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8014d02:	f04f 0900 	mov.w	r9, #0
 8014d06:	2300      	movs	r3, #0
 8014d08:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8014d0c:	9a01      	ldr	r2, [sp, #4]
 8014d0e:	4591      	cmp	r9, r2
 8014d10:	f340 809e 	ble.w	8014e50 <__kernel_rem_pio2f+0x1b0>
 8014d14:	4613      	mov	r3, r2
 8014d16:	aa0a      	add	r2, sp, #40	; 0x28
 8014d18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d1c:	9308      	str	r3, [sp, #32]
 8014d1e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8014d20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014d24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014d28:	9307      	str	r3, [sp, #28]
 8014d2a:	ac0a      	add	r4, sp, #40	; 0x28
 8014d2c:	4626      	mov	r6, r4
 8014d2e:	46c3      	mov	fp, r8
 8014d30:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8014d34:	ab5a      	add	r3, sp, #360	; 0x168
 8014d36:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8014d3a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8014d3e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8014d42:	f1bb 0f00 	cmp.w	fp, #0
 8014d46:	f300 8088 	bgt.w	8014e5a <__kernel_rem_pio2f+0x1ba>
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	f000 fc25 	bl	801559c <scalbnf>
 8014d52:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8014d56:	4605      	mov	r5, r0
 8014d58:	f7ee fdcc 	bl	80038f4 <__aeabi_fmul>
 8014d5c:	f000 fbd8 	bl	8015510 <floorf>
 8014d60:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8014d64:	f7ee fdc6 	bl	80038f4 <__aeabi_fmul>
 8014d68:	4601      	mov	r1, r0
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	f7ee fcb8 	bl	80036e0 <__aeabi_fsub>
 8014d70:	4605      	mov	r5, r0
 8014d72:	f7ee ff9b 	bl	8003cac <__aeabi_f2iz>
 8014d76:	4606      	mov	r6, r0
 8014d78:	f7ee fd68 	bl	800384c <__aeabi_i2f>
 8014d7c:	4601      	mov	r1, r0
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f7ee fcae 	bl	80036e0 <__aeabi_fsub>
 8014d84:	2f00      	cmp	r7, #0
 8014d86:	4681      	mov	r9, r0
 8014d88:	f340 8086 	ble.w	8014e98 <__kernel_rem_pio2f+0x1f8>
 8014d8c:	f108 32ff 	add.w	r2, r8, #4294967295
 8014d90:	ab0a      	add	r3, sp, #40	; 0x28
 8014d92:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014d96:	f1c7 0108 	rsb	r1, r7, #8
 8014d9a:	fa45 f301 	asr.w	r3, r5, r1
 8014d9e:	441e      	add	r6, r3
 8014da0:	408b      	lsls	r3, r1
 8014da2:	1aed      	subs	r5, r5, r3
 8014da4:	f1c7 0007 	rsb	r0, r7, #7
 8014da8:	ab0a      	add	r3, sp, #40	; 0x28
 8014daa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014dae:	4105      	asrs	r5, r0
 8014db0:	2d00      	cmp	r5, #0
 8014db2:	dd7f      	ble.n	8014eb4 <__kernel_rem_pio2f+0x214>
 8014db4:	2200      	movs	r2, #0
 8014db6:	4692      	mov	sl, r2
 8014db8:	3601      	adds	r6, #1
 8014dba:	4590      	cmp	r8, r2
 8014dbc:	f300 80b0 	bgt.w	8014f20 <__kernel_rem_pio2f+0x280>
 8014dc0:	2f00      	cmp	r7, #0
 8014dc2:	dd05      	ble.n	8014dd0 <__kernel_rem_pio2f+0x130>
 8014dc4:	2f01      	cmp	r7, #1
 8014dc6:	f000 80bd 	beq.w	8014f44 <__kernel_rem_pio2f+0x2a4>
 8014dca:	2f02      	cmp	r7, #2
 8014dcc:	f000 80c5 	beq.w	8014f5a <__kernel_rem_pio2f+0x2ba>
 8014dd0:	2d02      	cmp	r5, #2
 8014dd2:	d16f      	bne.n	8014eb4 <__kernel_rem_pio2f+0x214>
 8014dd4:	4649      	mov	r1, r9
 8014dd6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014dda:	f7ee fc81 	bl	80036e0 <__aeabi_fsub>
 8014dde:	4681      	mov	r9, r0
 8014de0:	f1ba 0f00 	cmp.w	sl, #0
 8014de4:	d066      	beq.n	8014eb4 <__kernel_rem_pio2f+0x214>
 8014de6:	4639      	mov	r1, r7
 8014de8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014dec:	f000 fbd6 	bl	801559c <scalbnf>
 8014df0:	4601      	mov	r1, r0
 8014df2:	4648      	mov	r0, r9
 8014df4:	f7ee fc74 	bl	80036e0 <__aeabi_fsub>
 8014df8:	4681      	mov	r9, r0
 8014dfa:	e05b      	b.n	8014eb4 <__kernel_rem_pio2f+0x214>
 8014dfc:	2400      	movs	r4, #0
 8014dfe:	e766      	b.n	8014cce <__kernel_rem_pio2f+0x2e>
 8014e00:	eb18 0f05 	cmn.w	r8, r5
 8014e04:	d407      	bmi.n	8014e16 <__kernel_rem_pio2f+0x176>
 8014e06:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8014e0a:	f7ee fd1f 	bl	800384c <__aeabi_i2f>
 8014e0e:	f846 0b04 	str.w	r0, [r6], #4
 8014e12:	3501      	adds	r5, #1
 8014e14:	e76e      	b.n	8014cf4 <__kernel_rem_pio2f+0x54>
 8014e16:	4658      	mov	r0, fp
 8014e18:	e7f9      	b.n	8014e0e <__kernel_rem_pio2f+0x16e>
 8014e1a:	9307      	str	r3, [sp, #28]
 8014e1c:	9b05      	ldr	r3, [sp, #20]
 8014e1e:	f8da 1000 	ldr.w	r1, [sl]
 8014e22:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014e26:	f7ee fd65 	bl	80038f4 <__aeabi_fmul>
 8014e2a:	4601      	mov	r1, r0
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	f7ee fc59 	bl	80036e4 <__addsf3>
 8014e32:	4606      	mov	r6, r0
 8014e34:	9b07      	ldr	r3, [sp, #28]
 8014e36:	f108 0801 	add.w	r8, r8, #1
 8014e3a:	9a03      	ldr	r2, [sp, #12]
 8014e3c:	f1aa 0a04 	sub.w	sl, sl, #4
 8014e40:	4590      	cmp	r8, r2
 8014e42:	ddea      	ble.n	8014e1a <__kernel_rem_pio2f+0x17a>
 8014e44:	f84b 6b04 	str.w	r6, [fp], #4
 8014e48:	f109 0901 	add.w	r9, r9, #1
 8014e4c:	3504      	adds	r5, #4
 8014e4e:	e75d      	b.n	8014d0c <__kernel_rem_pio2f+0x6c>
 8014e50:	46aa      	mov	sl, r5
 8014e52:	461e      	mov	r6, r3
 8014e54:	f04f 0800 	mov.w	r8, #0
 8014e58:	e7ef      	b.n	8014e3a <__kernel_rem_pio2f+0x19a>
 8014e5a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8014e5e:	4628      	mov	r0, r5
 8014e60:	f7ee fd48 	bl	80038f4 <__aeabi_fmul>
 8014e64:	f7ee ff22 	bl	8003cac <__aeabi_f2iz>
 8014e68:	f7ee fcf0 	bl	800384c <__aeabi_i2f>
 8014e6c:	4649      	mov	r1, r9
 8014e6e:	9009      	str	r0, [sp, #36]	; 0x24
 8014e70:	f7ee fd40 	bl	80038f4 <__aeabi_fmul>
 8014e74:	4601      	mov	r1, r0
 8014e76:	4628      	mov	r0, r5
 8014e78:	f7ee fc32 	bl	80036e0 <__aeabi_fsub>
 8014e7c:	f7ee ff16 	bl	8003cac <__aeabi_f2iz>
 8014e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e86:	f846 0b04 	str.w	r0, [r6], #4
 8014e8a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ee fc28 	bl	80036e4 <__addsf3>
 8014e94:	4605      	mov	r5, r0
 8014e96:	e754      	b.n	8014d42 <__kernel_rem_pio2f+0xa2>
 8014e98:	d106      	bne.n	8014ea8 <__kernel_rem_pio2f+0x208>
 8014e9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8014e9e:	aa0a      	add	r2, sp, #40	; 0x28
 8014ea0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8014ea4:	11ed      	asrs	r5, r5, #7
 8014ea6:	e783      	b.n	8014db0 <__kernel_rem_pio2f+0x110>
 8014ea8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8014eac:	f7ee fed4 	bl	8003c58 <__aeabi_fcmpge>
 8014eb0:	4605      	mov	r5, r0
 8014eb2:	bb98      	cbnz	r0, 8014f1c <__kernel_rem_pio2f+0x27c>
 8014eb4:	2100      	movs	r1, #0
 8014eb6:	4648      	mov	r0, r9
 8014eb8:	f7ee feb0 	bl	8003c1c <__aeabi_fcmpeq>
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	f000 8098 	beq.w	8014ff2 <__kernel_rem_pio2f+0x352>
 8014ec2:	f108 34ff 	add.w	r4, r8, #4294967295
 8014ec6:	4623      	mov	r3, r4
 8014ec8:	2200      	movs	r2, #0
 8014eca:	9901      	ldr	r1, [sp, #4]
 8014ecc:	428b      	cmp	r3, r1
 8014ece:	da4c      	bge.n	8014f6a <__kernel_rem_pio2f+0x2ca>
 8014ed0:	2a00      	cmp	r2, #0
 8014ed2:	d07a      	beq.n	8014fca <__kernel_rem_pio2f+0x32a>
 8014ed4:	ab0a      	add	r3, sp, #40	; 0x28
 8014ed6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014eda:	3f08      	subs	r7, #8
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	f000 8086 	beq.w	8014fee <__kernel_rem_pio2f+0x34e>
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014ee8:	f000 fb58 	bl	801559c <scalbnf>
 8014eec:	46a2      	mov	sl, r4
 8014eee:	4681      	mov	r9, r0
 8014ef0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8014ef4:	af46      	add	r7, sp, #280	; 0x118
 8014ef6:	f1ba 0f00 	cmp.w	sl, #0
 8014efa:	f280 80af 	bge.w	801505c <__kernel_rem_pio2f+0x3bc>
 8014efe:	4627      	mov	r7, r4
 8014f00:	2200      	movs	r2, #0
 8014f02:	2f00      	cmp	r7, #0
 8014f04:	f2c0 80d9 	blt.w	80150ba <__kernel_rem_pio2f+0x41a>
 8014f08:	a946      	add	r1, sp, #280	; 0x118
 8014f0a:	4690      	mov	r8, r2
 8014f0c:	f04f 0a00 	mov.w	sl, #0
 8014f10:	4b1a      	ldr	r3, [pc, #104]	; (8014f7c <__kernel_rem_pio2f+0x2dc>)
 8014f12:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8014f16:	eba4 0907 	sub.w	r9, r4, r7
 8014f1a:	e0c2      	b.n	80150a2 <__kernel_rem_pio2f+0x402>
 8014f1c:	2502      	movs	r5, #2
 8014f1e:	e749      	b.n	8014db4 <__kernel_rem_pio2f+0x114>
 8014f20:	6823      	ldr	r3, [r4, #0]
 8014f22:	f1ba 0f00 	cmp.w	sl, #0
 8014f26:	d108      	bne.n	8014f3a <__kernel_rem_pio2f+0x29a>
 8014f28:	b11b      	cbz	r3, 8014f32 <__kernel_rem_pio2f+0x292>
 8014f2a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014f2e:	6023      	str	r3, [r4, #0]
 8014f30:	2301      	movs	r3, #1
 8014f32:	469a      	mov	sl, r3
 8014f34:	3201      	adds	r2, #1
 8014f36:	3404      	adds	r4, #4
 8014f38:	e73f      	b.n	8014dba <__kernel_rem_pio2f+0x11a>
 8014f3a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014f3e:	6023      	str	r3, [r4, #0]
 8014f40:	4653      	mov	r3, sl
 8014f42:	e7f6      	b.n	8014f32 <__kernel_rem_pio2f+0x292>
 8014f44:	f108 32ff 	add.w	r2, r8, #4294967295
 8014f48:	ab0a      	add	r3, sp, #40	; 0x28
 8014f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f52:	a90a      	add	r1, sp, #40	; 0x28
 8014f54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014f58:	e73a      	b.n	8014dd0 <__kernel_rem_pio2f+0x130>
 8014f5a:	f108 32ff 	add.w	r2, r8, #4294967295
 8014f5e:	ab0a      	add	r3, sp, #40	; 0x28
 8014f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f68:	e7f3      	b.n	8014f52 <__kernel_rem_pio2f+0x2b2>
 8014f6a:	a90a      	add	r1, sp, #40	; 0x28
 8014f6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014f70:	3b01      	subs	r3, #1
 8014f72:	430a      	orrs	r2, r1
 8014f74:	e7a9      	b.n	8014eca <__kernel_rem_pio2f+0x22a>
 8014f76:	bf00      	nop
 8014f78:	08016d2c 	.word	0x08016d2c
 8014f7c:	08016d00 	.word	0x08016d00
 8014f80:	3301      	adds	r3, #1
 8014f82:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014f86:	2900      	cmp	r1, #0
 8014f88:	d0fa      	beq.n	8014f80 <__kernel_rem_pio2f+0x2e0>
 8014f8a:	9a04      	ldr	r2, [sp, #16]
 8014f8c:	f108 0501 	add.w	r5, r8, #1
 8014f90:	eb08 0402 	add.w	r4, r8, r2
 8014f94:	aa1e      	add	r2, sp, #120	; 0x78
 8014f96:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8014f9a:	4498      	add	r8, r3
 8014f9c:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8014fa0:	45a8      	cmp	r8, r5
 8014fa2:	f6ff aec2 	blt.w	8014d2a <__kernel_rem_pio2f+0x8a>
 8014fa6:	9b07      	ldr	r3, [sp, #28]
 8014fa8:	46a3      	mov	fp, r4
 8014faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014fae:	f7ee fc4d 	bl	800384c <__aeabi_i2f>
 8014fb2:	f04f 0a00 	mov.w	sl, #0
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	6020      	str	r0, [r4, #0]
 8014fba:	9b03      	ldr	r3, [sp, #12]
 8014fbc:	459a      	cmp	sl, r3
 8014fbe:	dd07      	ble.n	8014fd0 <__kernel_rem_pio2f+0x330>
 8014fc0:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8014fc4:	3404      	adds	r4, #4
 8014fc6:	3501      	adds	r5, #1
 8014fc8:	e7ea      	b.n	8014fa0 <__kernel_rem_pio2f+0x300>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	9a08      	ldr	r2, [sp, #32]
 8014fce:	e7d8      	b.n	8014f82 <__kernel_rem_pio2f+0x2e2>
 8014fd0:	9b05      	ldr	r3, [sp, #20]
 8014fd2:	f85b 0904 	ldr.w	r0, [fp], #-4
 8014fd6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8014fda:	f7ee fc8b 	bl	80038f4 <__aeabi_fmul>
 8014fde:	4601      	mov	r1, r0
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	f7ee fb7f 	bl	80036e4 <__addsf3>
 8014fe6:	f10a 0a01 	add.w	sl, sl, #1
 8014fea:	4606      	mov	r6, r0
 8014fec:	e7e5      	b.n	8014fba <__kernel_rem_pio2f+0x31a>
 8014fee:	3c01      	subs	r4, #1
 8014ff0:	e770      	b.n	8014ed4 <__kernel_rem_pio2f+0x234>
 8014ff2:	9b06      	ldr	r3, [sp, #24]
 8014ff4:	9a02      	ldr	r2, [sp, #8]
 8014ff6:	4648      	mov	r0, r9
 8014ff8:	1a99      	subs	r1, r3, r2
 8014ffa:	f000 facf 	bl	801559c <scalbnf>
 8014ffe:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8015002:	4604      	mov	r4, r0
 8015004:	f7ee fe28 	bl	8003c58 <__aeabi_fcmpge>
 8015008:	b300      	cbz	r0, 801504c <__kernel_rem_pio2f+0x3ac>
 801500a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801500e:	4620      	mov	r0, r4
 8015010:	f7ee fc70 	bl	80038f4 <__aeabi_fmul>
 8015014:	f7ee fe4a 	bl	8003cac <__aeabi_f2iz>
 8015018:	f7ee fc18 	bl	800384c <__aeabi_i2f>
 801501c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8015020:	4681      	mov	r9, r0
 8015022:	f7ee fc67 	bl	80038f4 <__aeabi_fmul>
 8015026:	4601      	mov	r1, r0
 8015028:	4620      	mov	r0, r4
 801502a:	f7ee fb59 	bl	80036e0 <__aeabi_fsub>
 801502e:	f7ee fe3d 	bl	8003cac <__aeabi_f2iz>
 8015032:	ab0a      	add	r3, sp, #40	; 0x28
 8015034:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015038:	4648      	mov	r0, r9
 801503a:	f7ee fe37 	bl	8003cac <__aeabi_f2iz>
 801503e:	f108 0401 	add.w	r4, r8, #1
 8015042:	ab0a      	add	r3, sp, #40	; 0x28
 8015044:	3708      	adds	r7, #8
 8015046:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801504a:	e74a      	b.n	8014ee2 <__kernel_rem_pio2f+0x242>
 801504c:	4620      	mov	r0, r4
 801504e:	f7ee fe2d 	bl	8003cac <__aeabi_f2iz>
 8015052:	ab0a      	add	r3, sp, #40	; 0x28
 8015054:	4644      	mov	r4, r8
 8015056:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801505a:	e742      	b.n	8014ee2 <__kernel_rem_pio2f+0x242>
 801505c:	ab0a      	add	r3, sp, #40	; 0x28
 801505e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8015062:	f7ee fbf3 	bl	800384c <__aeabi_i2f>
 8015066:	4649      	mov	r1, r9
 8015068:	f7ee fc44 	bl	80038f4 <__aeabi_fmul>
 801506c:	4641      	mov	r1, r8
 801506e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8015072:	4648      	mov	r0, r9
 8015074:	f7ee fc3e 	bl	80038f4 <__aeabi_fmul>
 8015078:	f10a 3aff 	add.w	sl, sl, #4294967295
 801507c:	4681      	mov	r9, r0
 801507e:	e73a      	b.n	8014ef6 <__kernel_rem_pio2f+0x256>
 8015080:	f853 0b04 	ldr.w	r0, [r3], #4
 8015084:	f85b 1b04 	ldr.w	r1, [fp], #4
 8015088:	9203      	str	r2, [sp, #12]
 801508a:	9302      	str	r3, [sp, #8]
 801508c:	f7ee fc32 	bl	80038f4 <__aeabi_fmul>
 8015090:	4601      	mov	r1, r0
 8015092:	4640      	mov	r0, r8
 8015094:	f7ee fb26 	bl	80036e4 <__addsf3>
 8015098:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801509c:	4680      	mov	r8, r0
 801509e:	f10a 0a01 	add.w	sl, sl, #1
 80150a2:	9901      	ldr	r1, [sp, #4]
 80150a4:	458a      	cmp	sl, r1
 80150a6:	dc01      	bgt.n	80150ac <__kernel_rem_pio2f+0x40c>
 80150a8:	45ca      	cmp	sl, r9
 80150aa:	dde9      	ble.n	8015080 <__kernel_rem_pio2f+0x3e0>
 80150ac:	ab5a      	add	r3, sp, #360	; 0x168
 80150ae:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80150b2:	f849 8ca0 	str.w	r8, [r9, #-160]
 80150b6:	3f01      	subs	r7, #1
 80150b8:	e723      	b.n	8014f02 <__kernel_rem_pio2f+0x262>
 80150ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80150bc:	2b02      	cmp	r3, #2
 80150be:	dc07      	bgt.n	80150d0 <__kernel_rem_pio2f+0x430>
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	dc4d      	bgt.n	8015160 <__kernel_rem_pio2f+0x4c0>
 80150c4:	d02e      	beq.n	8015124 <__kernel_rem_pio2f+0x484>
 80150c6:	f006 0007 	and.w	r0, r6, #7
 80150ca:	b05b      	add	sp, #364	; 0x16c
 80150cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80150d2:	2b03      	cmp	r3, #3
 80150d4:	d1f7      	bne.n	80150c6 <__kernel_rem_pio2f+0x426>
 80150d6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80150da:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80150de:	46b8      	mov	r8, r7
 80150e0:	46a2      	mov	sl, r4
 80150e2:	f1ba 0f00 	cmp.w	sl, #0
 80150e6:	dc48      	bgt.n	801517a <__kernel_rem_pio2f+0x4da>
 80150e8:	46a1      	mov	r9, r4
 80150ea:	f1b9 0f01 	cmp.w	r9, #1
 80150ee:	dc5f      	bgt.n	80151b0 <__kernel_rem_pio2f+0x510>
 80150f0:	2000      	movs	r0, #0
 80150f2:	2c01      	cmp	r4, #1
 80150f4:	dc75      	bgt.n	80151e2 <__kernel_rem_pio2f+0x542>
 80150f6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80150f8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80150fa:	2d00      	cmp	r5, #0
 80150fc:	d177      	bne.n	80151ee <__kernel_rem_pio2f+0x54e>
 80150fe:	9900      	ldr	r1, [sp, #0]
 8015100:	600a      	str	r2, [r1, #0]
 8015102:	460a      	mov	r2, r1
 8015104:	604b      	str	r3, [r1, #4]
 8015106:	6090      	str	r0, [r2, #8]
 8015108:	e7dd      	b.n	80150c6 <__kernel_rem_pio2f+0x426>
 801510a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 801510e:	f7ee fae9 	bl	80036e4 <__addsf3>
 8015112:	3c01      	subs	r4, #1
 8015114:	2c00      	cmp	r4, #0
 8015116:	daf8      	bge.n	801510a <__kernel_rem_pio2f+0x46a>
 8015118:	b10d      	cbz	r5, 801511e <__kernel_rem_pio2f+0x47e>
 801511a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801511e:	9b00      	ldr	r3, [sp, #0]
 8015120:	6018      	str	r0, [r3, #0]
 8015122:	e7d0      	b.n	80150c6 <__kernel_rem_pio2f+0x426>
 8015124:	2000      	movs	r0, #0
 8015126:	af32      	add	r7, sp, #200	; 0xc8
 8015128:	e7f4      	b.n	8015114 <__kernel_rem_pio2f+0x474>
 801512a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 801512e:	f7ee fad9 	bl	80036e4 <__addsf3>
 8015132:	3f01      	subs	r7, #1
 8015134:	2f00      	cmp	r7, #0
 8015136:	daf8      	bge.n	801512a <__kernel_rem_pio2f+0x48a>
 8015138:	b1bd      	cbz	r5, 801516a <__kernel_rem_pio2f+0x4ca>
 801513a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 801513e:	9a00      	ldr	r2, [sp, #0]
 8015140:	4601      	mov	r1, r0
 8015142:	6013      	str	r3, [r2, #0]
 8015144:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8015146:	f7ee facb 	bl	80036e0 <__aeabi_fsub>
 801514a:	2701      	movs	r7, #1
 801514c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8015150:	42bc      	cmp	r4, r7
 8015152:	da0c      	bge.n	801516e <__kernel_rem_pio2f+0x4ce>
 8015154:	b10d      	cbz	r5, 801515a <__kernel_rem_pio2f+0x4ba>
 8015156:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801515a:	9b00      	ldr	r3, [sp, #0]
 801515c:	6058      	str	r0, [r3, #4]
 801515e:	e7b2      	b.n	80150c6 <__kernel_rem_pio2f+0x426>
 8015160:	4627      	mov	r7, r4
 8015162:	2000      	movs	r0, #0
 8015164:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8015168:	e7e4      	b.n	8015134 <__kernel_rem_pio2f+0x494>
 801516a:	4603      	mov	r3, r0
 801516c:	e7e7      	b.n	801513e <__kernel_rem_pio2f+0x49e>
 801516e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8015172:	f7ee fab7 	bl	80036e4 <__addsf3>
 8015176:	3701      	adds	r7, #1
 8015178:	e7ea      	b.n	8015150 <__kernel_rem_pio2f+0x4b0>
 801517a:	f8d8 3000 	ldr.w	r3, [r8]
 801517e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8015182:	4619      	mov	r1, r3
 8015184:	4610      	mov	r0, r2
 8015186:	9302      	str	r3, [sp, #8]
 8015188:	9201      	str	r2, [sp, #4]
 801518a:	f7ee faab 	bl	80036e4 <__addsf3>
 801518e:	9a01      	ldr	r2, [sp, #4]
 8015190:	4601      	mov	r1, r0
 8015192:	4681      	mov	r9, r0
 8015194:	4610      	mov	r0, r2
 8015196:	f7ee faa3 	bl	80036e0 <__aeabi_fsub>
 801519a:	9b02      	ldr	r3, [sp, #8]
 801519c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80151a0:	4619      	mov	r1, r3
 80151a2:	f7ee fa9f 	bl	80036e4 <__addsf3>
 80151a6:	f848 0904 	str.w	r0, [r8], #-4
 80151aa:	f8c8 9000 	str.w	r9, [r8]
 80151ae:	e798      	b.n	80150e2 <__kernel_rem_pio2f+0x442>
 80151b0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80151b4:	f8d7 a000 	ldr.w	sl, [r7]
 80151b8:	4618      	mov	r0, r3
 80151ba:	4651      	mov	r1, sl
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	f7ee fa91 	bl	80036e4 <__addsf3>
 80151c2:	9b01      	ldr	r3, [sp, #4]
 80151c4:	4601      	mov	r1, r0
 80151c6:	4680      	mov	r8, r0
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7ee fa89 	bl	80036e0 <__aeabi_fsub>
 80151ce:	4651      	mov	r1, sl
 80151d0:	f7ee fa88 	bl	80036e4 <__addsf3>
 80151d4:	f847 0904 	str.w	r0, [r7], #-4
 80151d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80151dc:	f8c7 8000 	str.w	r8, [r7]
 80151e0:	e783      	b.n	80150ea <__kernel_rem_pio2f+0x44a>
 80151e2:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80151e6:	f7ee fa7d 	bl	80036e4 <__addsf3>
 80151ea:	3c01      	subs	r4, #1
 80151ec:	e781      	b.n	80150f2 <__kernel_rem_pio2f+0x452>
 80151ee:	9900      	ldr	r1, [sp, #0]
 80151f0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80151f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80151f8:	600a      	str	r2, [r1, #0]
 80151fa:	604b      	str	r3, [r1, #4]
 80151fc:	460a      	mov	r2, r1
 80151fe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015202:	e780      	b.n	8015106 <__kernel_rem_pio2f+0x466>

08015204 <__kernel_sinf>:
 8015204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015208:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801520c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015210:	4604      	mov	r4, r0
 8015212:	460f      	mov	r7, r1
 8015214:	4691      	mov	r9, r2
 8015216:	da03      	bge.n	8015220 <__kernel_sinf+0x1c>
 8015218:	f7ee fd48 	bl	8003cac <__aeabi_f2iz>
 801521c:	2800      	cmp	r0, #0
 801521e:	d035      	beq.n	801528c <__kernel_sinf+0x88>
 8015220:	4621      	mov	r1, r4
 8015222:	4620      	mov	r0, r4
 8015224:	f7ee fb66 	bl	80038f4 <__aeabi_fmul>
 8015228:	4605      	mov	r5, r0
 801522a:	4601      	mov	r1, r0
 801522c:	4620      	mov	r0, r4
 801522e:	f7ee fb61 	bl	80038f4 <__aeabi_fmul>
 8015232:	4929      	ldr	r1, [pc, #164]	; (80152d8 <__kernel_sinf+0xd4>)
 8015234:	4606      	mov	r6, r0
 8015236:	4628      	mov	r0, r5
 8015238:	f7ee fb5c 	bl	80038f4 <__aeabi_fmul>
 801523c:	4927      	ldr	r1, [pc, #156]	; (80152dc <__kernel_sinf+0xd8>)
 801523e:	f7ee fa4f 	bl	80036e0 <__aeabi_fsub>
 8015242:	4629      	mov	r1, r5
 8015244:	f7ee fb56 	bl	80038f4 <__aeabi_fmul>
 8015248:	4925      	ldr	r1, [pc, #148]	; (80152e0 <__kernel_sinf+0xdc>)
 801524a:	f7ee fa4b 	bl	80036e4 <__addsf3>
 801524e:	4629      	mov	r1, r5
 8015250:	f7ee fb50 	bl	80038f4 <__aeabi_fmul>
 8015254:	4923      	ldr	r1, [pc, #140]	; (80152e4 <__kernel_sinf+0xe0>)
 8015256:	f7ee fa43 	bl	80036e0 <__aeabi_fsub>
 801525a:	4629      	mov	r1, r5
 801525c:	f7ee fb4a 	bl	80038f4 <__aeabi_fmul>
 8015260:	4921      	ldr	r1, [pc, #132]	; (80152e8 <__kernel_sinf+0xe4>)
 8015262:	f7ee fa3f 	bl	80036e4 <__addsf3>
 8015266:	4680      	mov	r8, r0
 8015268:	f1b9 0f00 	cmp.w	r9, #0
 801526c:	d111      	bne.n	8015292 <__kernel_sinf+0x8e>
 801526e:	4601      	mov	r1, r0
 8015270:	4628      	mov	r0, r5
 8015272:	f7ee fb3f 	bl	80038f4 <__aeabi_fmul>
 8015276:	491d      	ldr	r1, [pc, #116]	; (80152ec <__kernel_sinf+0xe8>)
 8015278:	f7ee fa32 	bl	80036e0 <__aeabi_fsub>
 801527c:	4631      	mov	r1, r6
 801527e:	f7ee fb39 	bl	80038f4 <__aeabi_fmul>
 8015282:	4601      	mov	r1, r0
 8015284:	4620      	mov	r0, r4
 8015286:	f7ee fa2d 	bl	80036e4 <__addsf3>
 801528a:	4604      	mov	r4, r0
 801528c:	4620      	mov	r0, r4
 801528e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015292:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015296:	4638      	mov	r0, r7
 8015298:	f7ee fb2c 	bl	80038f4 <__aeabi_fmul>
 801529c:	4641      	mov	r1, r8
 801529e:	4681      	mov	r9, r0
 80152a0:	4630      	mov	r0, r6
 80152a2:	f7ee fb27 	bl	80038f4 <__aeabi_fmul>
 80152a6:	4601      	mov	r1, r0
 80152a8:	4648      	mov	r0, r9
 80152aa:	f7ee fa19 	bl	80036e0 <__aeabi_fsub>
 80152ae:	4629      	mov	r1, r5
 80152b0:	f7ee fb20 	bl	80038f4 <__aeabi_fmul>
 80152b4:	4639      	mov	r1, r7
 80152b6:	f7ee fa13 	bl	80036e0 <__aeabi_fsub>
 80152ba:	490c      	ldr	r1, [pc, #48]	; (80152ec <__kernel_sinf+0xe8>)
 80152bc:	4605      	mov	r5, r0
 80152be:	4630      	mov	r0, r6
 80152c0:	f7ee fb18 	bl	80038f4 <__aeabi_fmul>
 80152c4:	4601      	mov	r1, r0
 80152c6:	4628      	mov	r0, r5
 80152c8:	f7ee fa0c 	bl	80036e4 <__addsf3>
 80152cc:	4601      	mov	r1, r0
 80152ce:	4620      	mov	r0, r4
 80152d0:	f7ee fa06 	bl	80036e0 <__aeabi_fsub>
 80152d4:	e7d9      	b.n	801528a <__kernel_sinf+0x86>
 80152d6:	bf00      	nop
 80152d8:	2f2ec9d3 	.word	0x2f2ec9d3
 80152dc:	32d72f34 	.word	0x32d72f34
 80152e0:	3638ef1b 	.word	0x3638ef1b
 80152e4:	39500d01 	.word	0x39500d01
 80152e8:	3c088889 	.word	0x3c088889
 80152ec:	3e2aaaab 	.word	0x3e2aaaab

080152f0 <atanf>:
 80152f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80152f8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80152fc:	4604      	mov	r4, r0
 80152fe:	4680      	mov	r8, r0
 8015300:	db0e      	blt.n	8015320 <atanf+0x30>
 8015302:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015306:	dd04      	ble.n	8015312 <atanf+0x22>
 8015308:	4601      	mov	r1, r0
 801530a:	f7ee f9eb 	bl	80036e4 <__addsf3>
 801530e:	4604      	mov	r4, r0
 8015310:	e003      	b.n	801531a <atanf+0x2a>
 8015312:	2800      	cmp	r0, #0
 8015314:	f300 80ce 	bgt.w	80154b4 <atanf+0x1c4>
 8015318:	4c67      	ldr	r4, [pc, #412]	; (80154b8 <atanf+0x1c8>)
 801531a:	4620      	mov	r0, r4
 801531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015320:	4b66      	ldr	r3, [pc, #408]	; (80154bc <atanf+0x1cc>)
 8015322:	429d      	cmp	r5, r3
 8015324:	dc0e      	bgt.n	8015344 <atanf+0x54>
 8015326:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 801532a:	da08      	bge.n	801533e <atanf+0x4e>
 801532c:	4964      	ldr	r1, [pc, #400]	; (80154c0 <atanf+0x1d0>)
 801532e:	f7ee f9d9 	bl	80036e4 <__addsf3>
 8015332:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015336:	f7ee fc99 	bl	8003c6c <__aeabi_fcmpgt>
 801533a:	2800      	cmp	r0, #0
 801533c:	d1ed      	bne.n	801531a <atanf+0x2a>
 801533e:	f04f 36ff 	mov.w	r6, #4294967295
 8015342:	e01c      	b.n	801537e <atanf+0x8e>
 8015344:	f000 f8e0 	bl	8015508 <fabsf>
 8015348:	4b5e      	ldr	r3, [pc, #376]	; (80154c4 <atanf+0x1d4>)
 801534a:	4604      	mov	r4, r0
 801534c:	429d      	cmp	r5, r3
 801534e:	dc7c      	bgt.n	801544a <atanf+0x15a>
 8015350:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015354:	429d      	cmp	r5, r3
 8015356:	dc67      	bgt.n	8015428 <atanf+0x138>
 8015358:	4601      	mov	r1, r0
 801535a:	f7ee f9c3 	bl	80036e4 <__addsf3>
 801535e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015362:	f7ee f9bd 	bl	80036e0 <__aeabi_fsub>
 8015366:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801536a:	4605      	mov	r5, r0
 801536c:	4620      	mov	r0, r4
 801536e:	f7ee f9b9 	bl	80036e4 <__addsf3>
 8015372:	4601      	mov	r1, r0
 8015374:	4628      	mov	r0, r5
 8015376:	f7ee fb71 	bl	8003a5c <__aeabi_fdiv>
 801537a:	2600      	movs	r6, #0
 801537c:	4604      	mov	r4, r0
 801537e:	4621      	mov	r1, r4
 8015380:	4620      	mov	r0, r4
 8015382:	f7ee fab7 	bl	80038f4 <__aeabi_fmul>
 8015386:	4601      	mov	r1, r0
 8015388:	4607      	mov	r7, r0
 801538a:	f7ee fab3 	bl	80038f4 <__aeabi_fmul>
 801538e:	4605      	mov	r5, r0
 8015390:	494d      	ldr	r1, [pc, #308]	; (80154c8 <atanf+0x1d8>)
 8015392:	f7ee faaf 	bl	80038f4 <__aeabi_fmul>
 8015396:	494d      	ldr	r1, [pc, #308]	; (80154cc <atanf+0x1dc>)
 8015398:	f7ee f9a4 	bl	80036e4 <__addsf3>
 801539c:	4629      	mov	r1, r5
 801539e:	f7ee faa9 	bl	80038f4 <__aeabi_fmul>
 80153a2:	494b      	ldr	r1, [pc, #300]	; (80154d0 <atanf+0x1e0>)
 80153a4:	f7ee f99e 	bl	80036e4 <__addsf3>
 80153a8:	4629      	mov	r1, r5
 80153aa:	f7ee faa3 	bl	80038f4 <__aeabi_fmul>
 80153ae:	4949      	ldr	r1, [pc, #292]	; (80154d4 <atanf+0x1e4>)
 80153b0:	f7ee f998 	bl	80036e4 <__addsf3>
 80153b4:	4629      	mov	r1, r5
 80153b6:	f7ee fa9d 	bl	80038f4 <__aeabi_fmul>
 80153ba:	4947      	ldr	r1, [pc, #284]	; (80154d8 <atanf+0x1e8>)
 80153bc:	f7ee f992 	bl	80036e4 <__addsf3>
 80153c0:	4629      	mov	r1, r5
 80153c2:	f7ee fa97 	bl	80038f4 <__aeabi_fmul>
 80153c6:	4945      	ldr	r1, [pc, #276]	; (80154dc <atanf+0x1ec>)
 80153c8:	f7ee f98c 	bl	80036e4 <__addsf3>
 80153cc:	4639      	mov	r1, r7
 80153ce:	f7ee fa91 	bl	80038f4 <__aeabi_fmul>
 80153d2:	4943      	ldr	r1, [pc, #268]	; (80154e0 <atanf+0x1f0>)
 80153d4:	4607      	mov	r7, r0
 80153d6:	4628      	mov	r0, r5
 80153d8:	f7ee fa8c 	bl	80038f4 <__aeabi_fmul>
 80153dc:	4941      	ldr	r1, [pc, #260]	; (80154e4 <atanf+0x1f4>)
 80153de:	f7ee f97f 	bl	80036e0 <__aeabi_fsub>
 80153e2:	4629      	mov	r1, r5
 80153e4:	f7ee fa86 	bl	80038f4 <__aeabi_fmul>
 80153e8:	493f      	ldr	r1, [pc, #252]	; (80154e8 <atanf+0x1f8>)
 80153ea:	f7ee f979 	bl	80036e0 <__aeabi_fsub>
 80153ee:	4629      	mov	r1, r5
 80153f0:	f7ee fa80 	bl	80038f4 <__aeabi_fmul>
 80153f4:	493d      	ldr	r1, [pc, #244]	; (80154ec <atanf+0x1fc>)
 80153f6:	f7ee f973 	bl	80036e0 <__aeabi_fsub>
 80153fa:	4629      	mov	r1, r5
 80153fc:	f7ee fa7a 	bl	80038f4 <__aeabi_fmul>
 8015400:	493b      	ldr	r1, [pc, #236]	; (80154f0 <atanf+0x200>)
 8015402:	f7ee f96d 	bl	80036e0 <__aeabi_fsub>
 8015406:	4629      	mov	r1, r5
 8015408:	f7ee fa74 	bl	80038f4 <__aeabi_fmul>
 801540c:	4601      	mov	r1, r0
 801540e:	4638      	mov	r0, r7
 8015410:	f7ee f968 	bl	80036e4 <__addsf3>
 8015414:	4621      	mov	r1, r4
 8015416:	f7ee fa6d 	bl	80038f4 <__aeabi_fmul>
 801541a:	1c73      	adds	r3, r6, #1
 801541c:	4601      	mov	r1, r0
 801541e:	d133      	bne.n	8015488 <atanf+0x198>
 8015420:	4620      	mov	r0, r4
 8015422:	f7ee f95d 	bl	80036e0 <__aeabi_fsub>
 8015426:	e772      	b.n	801530e <atanf+0x1e>
 8015428:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801542c:	f7ee f958 	bl	80036e0 <__aeabi_fsub>
 8015430:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015434:	4605      	mov	r5, r0
 8015436:	4620      	mov	r0, r4
 8015438:	f7ee f954 	bl	80036e4 <__addsf3>
 801543c:	4601      	mov	r1, r0
 801543e:	4628      	mov	r0, r5
 8015440:	f7ee fb0c 	bl	8003a5c <__aeabi_fdiv>
 8015444:	2601      	movs	r6, #1
 8015446:	4604      	mov	r4, r0
 8015448:	e799      	b.n	801537e <atanf+0x8e>
 801544a:	4b2a      	ldr	r3, [pc, #168]	; (80154f4 <atanf+0x204>)
 801544c:	429d      	cmp	r5, r3
 801544e:	dc14      	bgt.n	801547a <atanf+0x18a>
 8015450:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8015454:	f7ee f944 	bl	80036e0 <__aeabi_fsub>
 8015458:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 801545c:	4605      	mov	r5, r0
 801545e:	4620      	mov	r0, r4
 8015460:	f7ee fa48 	bl	80038f4 <__aeabi_fmul>
 8015464:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015468:	f7ee f93c 	bl	80036e4 <__addsf3>
 801546c:	4601      	mov	r1, r0
 801546e:	4628      	mov	r0, r5
 8015470:	f7ee faf4 	bl	8003a5c <__aeabi_fdiv>
 8015474:	2602      	movs	r6, #2
 8015476:	4604      	mov	r4, r0
 8015478:	e781      	b.n	801537e <atanf+0x8e>
 801547a:	4601      	mov	r1, r0
 801547c:	481e      	ldr	r0, [pc, #120]	; (80154f8 <atanf+0x208>)
 801547e:	f7ee faed 	bl	8003a5c <__aeabi_fdiv>
 8015482:	2603      	movs	r6, #3
 8015484:	4604      	mov	r4, r0
 8015486:	e77a      	b.n	801537e <atanf+0x8e>
 8015488:	4b1c      	ldr	r3, [pc, #112]	; (80154fc <atanf+0x20c>)
 801548a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801548e:	f7ee f927 	bl	80036e0 <__aeabi_fsub>
 8015492:	4621      	mov	r1, r4
 8015494:	f7ee f924 	bl	80036e0 <__aeabi_fsub>
 8015498:	4b19      	ldr	r3, [pc, #100]	; (8015500 <atanf+0x210>)
 801549a:	4601      	mov	r1, r0
 801549c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80154a0:	f7ee f91e 	bl	80036e0 <__aeabi_fsub>
 80154a4:	f1b8 0f00 	cmp.w	r8, #0
 80154a8:	4604      	mov	r4, r0
 80154aa:	f6bf af36 	bge.w	801531a <atanf+0x2a>
 80154ae:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80154b2:	e72c      	b.n	801530e <atanf+0x1e>
 80154b4:	4c13      	ldr	r4, [pc, #76]	; (8015504 <atanf+0x214>)
 80154b6:	e730      	b.n	801531a <atanf+0x2a>
 80154b8:	bfc90fdb 	.word	0xbfc90fdb
 80154bc:	3edfffff 	.word	0x3edfffff
 80154c0:	7149f2ca 	.word	0x7149f2ca
 80154c4:	3f97ffff 	.word	0x3f97ffff
 80154c8:	3c8569d7 	.word	0x3c8569d7
 80154cc:	3d4bda59 	.word	0x3d4bda59
 80154d0:	3d886b35 	.word	0x3d886b35
 80154d4:	3dba2e6e 	.word	0x3dba2e6e
 80154d8:	3e124925 	.word	0x3e124925
 80154dc:	3eaaaaab 	.word	0x3eaaaaab
 80154e0:	bd15a221 	.word	0xbd15a221
 80154e4:	3d6ef16b 	.word	0x3d6ef16b
 80154e8:	3d9d8795 	.word	0x3d9d8795
 80154ec:	3de38e38 	.word	0x3de38e38
 80154f0:	3e4ccccd 	.word	0x3e4ccccd
 80154f4:	401bffff 	.word	0x401bffff
 80154f8:	bf800000 	.word	0xbf800000
 80154fc:	08016d48 	.word	0x08016d48
 8015500:	08016d38 	.word	0x08016d38
 8015504:	3fc90fdb 	.word	0x3fc90fdb

08015508 <fabsf>:
 8015508:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801550c:	4770      	bx	lr
	...

08015510 <floorf>:
 8015510:	b570      	push	{r4, r5, r6, lr}
 8015512:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8015516:	3d7f      	subs	r5, #127	; 0x7f
 8015518:	2d16      	cmp	r5, #22
 801551a:	4601      	mov	r1, r0
 801551c:	4604      	mov	r4, r0
 801551e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8015522:	dc26      	bgt.n	8015572 <floorf+0x62>
 8015524:	2d00      	cmp	r5, #0
 8015526:	da0e      	bge.n	8015546 <floorf+0x36>
 8015528:	4917      	ldr	r1, [pc, #92]	; (8015588 <floorf+0x78>)
 801552a:	f7ee f8db 	bl	80036e4 <__addsf3>
 801552e:	2100      	movs	r1, #0
 8015530:	f7ee fb9c 	bl	8003c6c <__aeabi_fcmpgt>
 8015534:	b128      	cbz	r0, 8015542 <floorf+0x32>
 8015536:	2c00      	cmp	r4, #0
 8015538:	da23      	bge.n	8015582 <floorf+0x72>
 801553a:	4b14      	ldr	r3, [pc, #80]	; (801558c <floorf+0x7c>)
 801553c:	2e00      	cmp	r6, #0
 801553e:	bf18      	it	ne
 8015540:	461c      	movne	r4, r3
 8015542:	4621      	mov	r1, r4
 8015544:	e01b      	b.n	801557e <floorf+0x6e>
 8015546:	4e12      	ldr	r6, [pc, #72]	; (8015590 <floorf+0x80>)
 8015548:	412e      	asrs	r6, r5
 801554a:	4230      	tst	r0, r6
 801554c:	d017      	beq.n	801557e <floorf+0x6e>
 801554e:	490e      	ldr	r1, [pc, #56]	; (8015588 <floorf+0x78>)
 8015550:	f7ee f8c8 	bl	80036e4 <__addsf3>
 8015554:	2100      	movs	r1, #0
 8015556:	f7ee fb89 	bl	8003c6c <__aeabi_fcmpgt>
 801555a:	2800      	cmp	r0, #0
 801555c:	d0f1      	beq.n	8015542 <floorf+0x32>
 801555e:	2c00      	cmp	r4, #0
 8015560:	bfbe      	ittt	lt
 8015562:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8015566:	fa43 f505 	asrlt.w	r5, r3, r5
 801556a:	1964      	addlt	r4, r4, r5
 801556c:	ea24 0406 	bic.w	r4, r4, r6
 8015570:	e7e7      	b.n	8015542 <floorf+0x32>
 8015572:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8015576:	d302      	bcc.n	801557e <floorf+0x6e>
 8015578:	f7ee f8b4 	bl	80036e4 <__addsf3>
 801557c:	4601      	mov	r1, r0
 801557e:	4608      	mov	r0, r1
 8015580:	bd70      	pop	{r4, r5, r6, pc}
 8015582:	2400      	movs	r4, #0
 8015584:	e7dd      	b.n	8015542 <floorf+0x32>
 8015586:	bf00      	nop
 8015588:	7149f2ca 	.word	0x7149f2ca
 801558c:	bf800000 	.word	0xbf800000
 8015590:	007fffff 	.word	0x007fffff

08015594 <nanf>:
 8015594:	4800      	ldr	r0, [pc, #0]	; (8015598 <nanf+0x4>)
 8015596:	4770      	bx	lr
 8015598:	7fc00000 	.word	0x7fc00000

0801559c <scalbnf>:
 801559c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80155a0:	b538      	push	{r3, r4, r5, lr}
 80155a2:	4603      	mov	r3, r0
 80155a4:	460d      	mov	r5, r1
 80155a6:	4604      	mov	r4, r0
 80155a8:	d02a      	beq.n	8015600 <scalbnf+0x64>
 80155aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80155ae:	d304      	bcc.n	80155ba <scalbnf+0x1e>
 80155b0:	4601      	mov	r1, r0
 80155b2:	f7ee f897 	bl	80036e4 <__addsf3>
 80155b6:	4603      	mov	r3, r0
 80155b8:	e022      	b.n	8015600 <scalbnf+0x64>
 80155ba:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80155be:	d117      	bne.n	80155f0 <scalbnf+0x54>
 80155c0:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80155c4:	f7ee f996 	bl	80038f4 <__aeabi_fmul>
 80155c8:	4a17      	ldr	r2, [pc, #92]	; (8015628 <scalbnf+0x8c>)
 80155ca:	4603      	mov	r3, r0
 80155cc:	4295      	cmp	r5, r2
 80155ce:	db0b      	blt.n	80155e8 <scalbnf+0x4c>
 80155d0:	4604      	mov	r4, r0
 80155d2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80155d6:	3a19      	subs	r2, #25
 80155d8:	442a      	add	r2, r5
 80155da:	2afe      	cmp	r2, #254	; 0xfe
 80155dc:	dd0a      	ble.n	80155f4 <scalbnf+0x58>
 80155de:	4913      	ldr	r1, [pc, #76]	; (801562c <scalbnf+0x90>)
 80155e0:	4618      	mov	r0, r3
 80155e2:	f361 001e 	bfi	r0, r1, #0, #31
 80155e6:	e000      	b.n	80155ea <scalbnf+0x4e>
 80155e8:	4911      	ldr	r1, [pc, #68]	; (8015630 <scalbnf+0x94>)
 80155ea:	f7ee f983 	bl	80038f4 <__aeabi_fmul>
 80155ee:	e7e2      	b.n	80155b6 <scalbnf+0x1a>
 80155f0:	0dd2      	lsrs	r2, r2, #23
 80155f2:	e7f1      	b.n	80155d8 <scalbnf+0x3c>
 80155f4:	2a00      	cmp	r2, #0
 80155f6:	dd05      	ble.n	8015604 <scalbnf+0x68>
 80155f8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80155fc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8015600:	4618      	mov	r0, r3
 8015602:	bd38      	pop	{r3, r4, r5, pc}
 8015604:	f112 0f16 	cmn.w	r2, #22
 8015608:	da05      	bge.n	8015616 <scalbnf+0x7a>
 801560a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801560e:	4295      	cmp	r5, r2
 8015610:	dce5      	bgt.n	80155de <scalbnf+0x42>
 8015612:	4907      	ldr	r1, [pc, #28]	; (8015630 <scalbnf+0x94>)
 8015614:	e7e4      	b.n	80155e0 <scalbnf+0x44>
 8015616:	3219      	adds	r2, #25
 8015618:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 801561c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8015620:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8015624:	e7e1      	b.n	80155ea <scalbnf+0x4e>
 8015626:	bf00      	nop
 8015628:	ffff3cb0 	.word	0xffff3cb0
 801562c:	7149f2ca 	.word	0x7149f2ca
 8015630:	0da24260 	.word	0x0da24260

08015634 <_init>:
 8015634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015636:	bf00      	nop
 8015638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801563a:	bc08      	pop	{r3}
 801563c:	469e      	mov	lr, r3
 801563e:	4770      	bx	lr

08015640 <_fini>:
 8015640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015642:	bf00      	nop
 8015644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015646:	bc08      	pop	{r3}
 8015648:	469e      	mov	lr, r3
 801564a:	4770      	bx	lr
